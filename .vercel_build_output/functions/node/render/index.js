var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[Object.keys(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod2) => function __require() {
  return mod2 || (0, cb[Object.keys(cb)[0]])((mod2 = { exports: {} }).exports, mod2), mod2.exports;
};
var __export = (target, all) => {
  __markAsModule(target);
  for (var name2 in all)
    __defProp(target, name2, { get: all[name2], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};

// node_modules/@sveltejs/kit/dist/install-fetch.js
function dataUriToBuffer(uri) {
  if (!/^data:/i.test(uri)) {
    throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
  }
  uri = uri.replace(/\r?\n/g, "");
  const firstComma = uri.indexOf(",");
  if (firstComma === -1 || firstComma <= 4) {
    throw new TypeError("malformed data: URI");
  }
  const meta = uri.substring(5, firstComma).split(";");
  let charset = "";
  let base642 = false;
  const type2 = meta[0] || "text/plain";
  let typeFull = type2;
  for (let i = 1; i < meta.length; i++) {
    if (meta[i] === "base64") {
      base642 = true;
    } else {
      typeFull += `;${meta[i]}`;
      if (meta[i].indexOf("charset=") === 0) {
        charset = meta[i].substring(8);
      }
    }
  }
  if (!meta[0] && !charset.length) {
    typeFull += ";charset=US-ASCII";
    charset = "US-ASCII";
  }
  const encoding = base642 ? "base64" : "ascii";
  const data = unescape(uri.substring(firstComma + 1));
  const buffer = Buffer.from(data, encoding);
  buffer.type = type2;
  buffer.typeFull = typeFull;
  buffer.charset = charset;
  return buffer;
}
async function* read(parts) {
  for (const part of parts) {
    if ("stream" in part) {
      yield* part.stream();
    } else {
      yield part;
    }
  }
}
function isFormData(object2) {
  return typeof object2 === "object" && typeof object2.append === "function" && typeof object2.set === "function" && typeof object2.get === "function" && typeof object2.getAll === "function" && typeof object2.delete === "function" && typeof object2.keys === "function" && typeof object2.values === "function" && typeof object2.entries === "function" && typeof object2.constructor === "function" && object2[NAME] === "FormData";
}
function getHeader(boundary, name2, field2) {
  let header = "";
  header += `${dashes}${boundary}${carriage}`;
  header += `Content-Disposition: form-data; name="${name2}"`;
  if (isBlob(field2)) {
    header += `; filename="${field2.name}"${carriage}`;
    header += `Content-Type: ${field2.type || "application/octet-stream"}`;
  }
  return `${header}${carriage.repeat(2)}`;
}
async function* formDataIterator(form, boundary) {
  for (const [name2, value] of form) {
    yield getHeader(boundary, name2, value);
    if (isBlob(value)) {
      yield* value.stream();
    } else {
      yield value;
    }
    yield carriage;
  }
  yield getFooter(boundary);
}
function getFormDataLength(form, boundary) {
  let length2 = 0;
  for (const [name2, value] of form) {
    length2 += Buffer.byteLength(getHeader(boundary, name2, value));
    if (isBlob(value)) {
      length2 += value.size;
    } else {
      length2 += Buffer.byteLength(String(value));
    }
    length2 += carriageLength;
  }
  length2 += Buffer.byteLength(getFooter(boundary));
  return length2;
}
async function consumeBody(data) {
  if (data[INTERNALS$2].disturbed) {
    throw new TypeError(`body used already for: ${data.url}`);
  }
  data[INTERNALS$2].disturbed = true;
  if (data[INTERNALS$2].error) {
    throw data[INTERNALS$2].error;
  }
  let { body } = data;
  if (body === null) {
    return Buffer.alloc(0);
  }
  if (isBlob(body)) {
    body = body.stream();
  }
  if (Buffer.isBuffer(body)) {
    return body;
  }
  if (!(body instanceof import_stream.default)) {
    return Buffer.alloc(0);
  }
  const accum = [];
  let accumBytes = 0;
  try {
    for await (const chunk of body) {
      if (data.size > 0 && accumBytes + chunk.length > data.size) {
        const err = new FetchError(`content size at ${data.url} over limit: ${data.size}`, "max-size");
        body.destroy(err);
        throw err;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    }
  } catch (error2) {
    if (error2 instanceof FetchBaseError) {
      throw error2;
    } else {
      throw new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error2.message}`, "system", error2);
    }
  }
  if (body.readableEnded === true || body._readableState.ended === true) {
    try {
      if (accum.every((c) => typeof c === "string")) {
        return Buffer.from(accum.join(""));
      }
      return Buffer.concat(accum, accumBytes);
    } catch (error2) {
      throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error2.message}`, "system", error2);
    }
  } else {
    throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
  }
}
function fromRawHeaders(headers = []) {
  return new Headers(headers.reduce((result, value, index2, array) => {
    if (index2 % 2 === 0) {
      result.push(array.slice(index2, index2 + 2));
    }
    return result;
  }, []).filter(([name2, value]) => {
    try {
      validateHeaderName(name2);
      validateHeaderValue(name2, String(value));
      return true;
    } catch {
      return false;
    }
  }));
}
async function fetch(url, options_) {
  return new Promise((resolve6, reject) => {
    const request = new Request(url, options_);
    const options2 = getNodeRequestOptions(request);
    if (!supportedSchemas.has(options2.protocol)) {
      throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${options2.protocol.replace(/:$/, "")}" is not supported.`);
    }
    if (options2.protocol === "data:") {
      const data = dataUriToBuffer$1(request.url);
      const response2 = new Response(data, { headers: { "Content-Type": data.typeFull } });
      resolve6(response2);
      return;
    }
    const send = (options2.protocol === "https:" ? import_https.default : import_http.default).request;
    const { signal } = request;
    let response = null;
    const abort = () => {
      const error2 = new AbortError("The operation was aborted.");
      reject(error2);
      if (request.body && request.body instanceof import_stream.default.Readable) {
        request.body.destroy(error2);
      }
      if (!response || !response.body) {
        return;
      }
      response.body.emit("error", error2);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = () => {
      abort();
      finalize();
    };
    const request_ = send(options2);
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    const finalize = () => {
      request_.abort();
      if (signal) {
        signal.removeEventListener("abort", abortAndFinalize);
      }
    };
    request_.on("error", (err) => {
      reject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, "system", err));
      finalize();
    });
    request_.on("response", (response_) => {
      request_.setTimeout(0);
      const headers = fromRawHeaders(response_.rawHeaders);
      if (isRedirect(response_.statusCode)) {
        const location = headers.get("Location");
        const locationURL = location === null ? null : new URL(location, request.url);
        switch (request.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            if (locationURL !== null) {
              try {
                headers.set("Location", locationURL);
              } catch (error2) {
                reject(error2);
              }
            }
            break;
          case "follow": {
            if (locationURL === null) {
              break;
            }
            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOptions = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: request.body,
              signal: request.signal,
              size: request.size
            };
            if (response_.statusCode !== 303 && request.body && options_.body instanceof import_stream.default.Readable) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === "POST") {
              requestOptions.method = "GET";
              requestOptions.body = void 0;
              requestOptions.headers.delete("content-length");
            }
            resolve6(fetch(new Request(locationURL, requestOptions)));
            finalize();
            return;
          }
        }
      }
      response_.once("end", () => {
        if (signal) {
          signal.removeEventListener("abort", abortAndFinalize);
        }
      });
      let body = (0, import_stream.pipeline)(response_, new import_stream.PassThrough(), (error2) => {
        reject(error2);
      });
      if (process.version < "v12.10") {
        response_.on("aborted", abortAndFinalize);
      }
      const responseOptions = {
        url: request.url,
        status: response_.statusCode,
        statusText: response_.statusMessage,
        headers,
        size: request.size,
        counter: request.counter,
        highWaterMark: request.highWaterMark
      };
      const codings = headers.get("Content-Encoding");
      if (!request.compress || request.method === "HEAD" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
        response = new Response(body, responseOptions);
        resolve6(response);
        return;
      }
      const zlibOptions = {
        flush: import_zlib.default.Z_SYNC_FLUSH,
        finishFlush: import_zlib.default.Z_SYNC_FLUSH
      };
      if (codings === "gzip" || codings === "x-gzip") {
        body = (0, import_stream.pipeline)(body, import_zlib.default.createGunzip(zlibOptions), (error2) => {
          reject(error2);
        });
        response = new Response(body, responseOptions);
        resolve6(response);
        return;
      }
      if (codings === "deflate" || codings === "x-deflate") {
        const raw = (0, import_stream.pipeline)(response_, new import_stream.PassThrough(), (error2) => {
          reject(error2);
        });
        raw.once("data", (chunk) => {
          if ((chunk[0] & 15) === 8) {
            body = (0, import_stream.pipeline)(body, import_zlib.default.createInflate(), (error2) => {
              reject(error2);
            });
          } else {
            body = (0, import_stream.pipeline)(body, import_zlib.default.createInflateRaw(), (error2) => {
              reject(error2);
            });
          }
          response = new Response(body, responseOptions);
          resolve6(response);
        });
        return;
      }
      if (codings === "br") {
        body = (0, import_stream.pipeline)(body, import_zlib.default.createBrotliDecompress(), (error2) => {
          reject(error2);
        });
        response = new Response(body, responseOptions);
        resolve6(response);
        return;
      }
      response = new Response(body, responseOptions);
      resolve6(response);
    });
    writeToStream(request_, request);
  });
}
var import_http, import_https, import_zlib, import_stream, import_util, import_crypto, import_url, src, dataUriToBuffer$1, Readable, wm, Blob, fetchBlob, Blob$1, FetchBaseError, FetchError, NAME, isURLSearchParameters, isBlob, isAbortSignal, carriage, dashes, carriageLength, getFooter, getBoundary, INTERNALS$2, Body, clone, extractContentType, getTotalBytes, writeToStream, validateHeaderName, validateHeaderValue, Headers, redirectStatus, isRedirect, INTERNALS$1, Response, getSearch, INTERNALS, isRequest, Request, getNodeRequestOptions, AbortError, supportedSchemas;
var init_install_fetch = __esm({
  "node_modules/@sveltejs/kit/dist/install-fetch.js"() {
    init_shims();
    import_http = __toModule(require("http"));
    import_https = __toModule(require("https"));
    import_zlib = __toModule(require("zlib"));
    import_stream = __toModule(require("stream"));
    import_util = __toModule(require("util"));
    import_crypto = __toModule(require("crypto"));
    import_url = __toModule(require("url"));
    src = dataUriToBuffer;
    dataUriToBuffer$1 = src;
    ({ Readable } = import_stream.default);
    wm = new WeakMap();
    Blob = class {
      constructor(blobParts = [], options2 = {}) {
        let size = 0;
        const parts = blobParts.map((element) => {
          let buffer;
          if (element instanceof Buffer) {
            buffer = element;
          } else if (ArrayBuffer.isView(element)) {
            buffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);
          } else if (element instanceof ArrayBuffer) {
            buffer = Buffer.from(element);
          } else if (element instanceof Blob) {
            buffer = element;
          } else {
            buffer = Buffer.from(typeof element === "string" ? element : String(element));
          }
          size += buffer.length || buffer.size || 0;
          return buffer;
        });
        const type2 = options2.type === void 0 ? "" : String(options2.type).toLowerCase();
        wm.set(this, {
          type: /[^\u0020-\u007E]/.test(type2) ? "" : type2,
          size,
          parts
        });
      }
      get size() {
        return wm.get(this).size;
      }
      get type() {
        return wm.get(this).type;
      }
      async text() {
        return Buffer.from(await this.arrayBuffer()).toString();
      }
      async arrayBuffer() {
        const data = new Uint8Array(this.size);
        let offset = 0;
        for await (const chunk of this.stream()) {
          data.set(chunk, offset);
          offset += chunk.length;
        }
        return data.buffer;
      }
      stream() {
        return Readable.from(read(wm.get(this).parts));
      }
      slice(start = 0, end2 = this.size, type2 = "") {
        const { size } = this;
        let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);
        let relativeEnd = end2 < 0 ? Math.max(size + end2, 0) : Math.min(end2, size);
        const span = Math.max(relativeEnd - relativeStart, 0);
        const parts = wm.get(this).parts.values();
        const blobParts = [];
        let added = 0;
        for (const part of parts) {
          const size2 = ArrayBuffer.isView(part) ? part.byteLength : part.size;
          if (relativeStart && size2 <= relativeStart) {
            relativeStart -= size2;
            relativeEnd -= size2;
          } else {
            const chunk = part.slice(relativeStart, Math.min(size2, relativeEnd));
            blobParts.push(chunk);
            added += ArrayBuffer.isView(chunk) ? chunk.byteLength : chunk.size;
            relativeStart = 0;
            if (added >= span) {
              break;
            }
          }
        }
        const blob = new Blob([], { type: String(type2).toLowerCase() });
        Object.assign(wm.get(blob), { size: span, parts: blobParts });
        return blob;
      }
      get [Symbol.toStringTag]() {
        return "Blob";
      }
      static [Symbol.hasInstance](object2) {
        return object2 && typeof object2 === "object" && typeof object2.stream === "function" && object2.stream.length === 0 && typeof object2.constructor === "function" && /^(Blob|File)$/.test(object2[Symbol.toStringTag]);
      }
    };
    Object.defineProperties(Blob.prototype, {
      size: { enumerable: true },
      type: { enumerable: true },
      slice: { enumerable: true }
    });
    fetchBlob = Blob;
    Blob$1 = fetchBlob;
    FetchBaseError = class extends Error {
      constructor(message2, type2) {
        super(message2);
        Error.captureStackTrace(this, this.constructor);
        this.type = type2;
      }
      get name() {
        return this.constructor.name;
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
    };
    FetchError = class extends FetchBaseError {
      constructor(message2, type2, systemError) {
        super(message2, type2);
        if (systemError) {
          this.code = this.errno = systemError.code;
          this.erroredSysCall = systemError.syscall;
        }
      }
    };
    NAME = Symbol.toStringTag;
    isURLSearchParameters = (object2) => {
      return typeof object2 === "object" && typeof object2.append === "function" && typeof object2.delete === "function" && typeof object2.get === "function" && typeof object2.getAll === "function" && typeof object2.has === "function" && typeof object2.set === "function" && typeof object2.sort === "function" && object2[NAME] === "URLSearchParams";
    };
    isBlob = (object2) => {
      return typeof object2 === "object" && typeof object2.arrayBuffer === "function" && typeof object2.type === "string" && typeof object2.stream === "function" && typeof object2.constructor === "function" && /^(Blob|File)$/.test(object2[NAME]);
    };
    isAbortSignal = (object2) => {
      return typeof object2 === "object" && object2[NAME] === "AbortSignal";
    };
    carriage = "\r\n";
    dashes = "-".repeat(2);
    carriageLength = Buffer.byteLength(carriage);
    getFooter = (boundary) => `${dashes}${boundary}${dashes}${carriage.repeat(2)}`;
    getBoundary = () => (0, import_crypto.randomBytes)(8).toString("hex");
    INTERNALS$2 = Symbol("Body internals");
    Body = class {
      constructor(body, {
        size = 0
      } = {}) {
        let boundary = null;
        if (body === null) {
          body = null;
        } else if (isURLSearchParameters(body)) {
          body = Buffer.from(body.toString());
        } else if (isBlob(body))
          ;
        else if (Buffer.isBuffer(body))
          ;
        else if (import_util.types.isAnyArrayBuffer(body)) {
          body = Buffer.from(body);
        } else if (ArrayBuffer.isView(body)) {
          body = Buffer.from(body.buffer, body.byteOffset, body.byteLength);
        } else if (body instanceof import_stream.default)
          ;
        else if (isFormData(body)) {
          boundary = `NodeFetchFormDataBoundary${getBoundary()}`;
          body = import_stream.default.Readable.from(formDataIterator(body, boundary));
        } else {
          body = Buffer.from(String(body));
        }
        this[INTERNALS$2] = {
          body,
          boundary,
          disturbed: false,
          error: null
        };
        this.size = size;
        if (body instanceof import_stream.default) {
          body.on("error", (err) => {
            const error2 = err instanceof FetchBaseError ? err : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${err.message}`, "system", err);
            this[INTERNALS$2].error = error2;
          });
        }
      }
      get body() {
        return this[INTERNALS$2].body;
      }
      get bodyUsed() {
        return this[INTERNALS$2].disturbed;
      }
      async arrayBuffer() {
        const { buffer, byteOffset, byteLength } = await consumeBody(this);
        return buffer.slice(byteOffset, byteOffset + byteLength);
      }
      async blob() {
        const ct = this.headers && this.headers.get("content-type") || this[INTERNALS$2].body && this[INTERNALS$2].body.type || "";
        const buf = await this.buffer();
        return new Blob$1([buf], {
          type: ct
        });
      }
      async json() {
        const buffer = await consumeBody(this);
        return JSON.parse(buffer.toString());
      }
      async text() {
        const buffer = await consumeBody(this);
        return buffer.toString();
      }
      buffer() {
        return consumeBody(this);
      }
    };
    Object.defineProperties(Body.prototype, {
      body: { enumerable: true },
      bodyUsed: { enumerable: true },
      arrayBuffer: { enumerable: true },
      blob: { enumerable: true },
      json: { enumerable: true },
      text: { enumerable: true }
    });
    clone = (instance, highWaterMark) => {
      let p1;
      let p2;
      let { body } = instance;
      if (instance.bodyUsed) {
        throw new Error("cannot clone body after it is used");
      }
      if (body instanceof import_stream.default && typeof body.getBoundary !== "function") {
        p1 = new import_stream.PassThrough({ highWaterMark });
        p2 = new import_stream.PassThrough({ highWaterMark });
        body.pipe(p1);
        body.pipe(p2);
        instance[INTERNALS$2].body = p1;
        body = p2;
      }
      return body;
    };
    extractContentType = (body, request) => {
      if (body === null) {
        return null;
      }
      if (typeof body === "string") {
        return "text/plain;charset=UTF-8";
      }
      if (isURLSearchParameters(body)) {
        return "application/x-www-form-urlencoded;charset=UTF-8";
      }
      if (isBlob(body)) {
        return body.type || null;
      }
      if (Buffer.isBuffer(body) || import_util.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
        return null;
      }
      if (body && typeof body.getBoundary === "function") {
        return `multipart/form-data;boundary=${body.getBoundary()}`;
      }
      if (isFormData(body)) {
        return `multipart/form-data; boundary=${request[INTERNALS$2].boundary}`;
      }
      if (body instanceof import_stream.default) {
        return null;
      }
      return "text/plain;charset=UTF-8";
    };
    getTotalBytes = (request) => {
      const { body } = request;
      if (body === null) {
        return 0;
      }
      if (isBlob(body)) {
        return body.size;
      }
      if (Buffer.isBuffer(body)) {
        return body.length;
      }
      if (body && typeof body.getLengthSync === "function") {
        return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
      }
      if (isFormData(body)) {
        return getFormDataLength(request[INTERNALS$2].boundary);
      }
      return null;
    };
    writeToStream = (dest, { body }) => {
      if (body === null) {
        dest.end();
      } else if (isBlob(body)) {
        body.stream().pipe(dest);
      } else if (Buffer.isBuffer(body)) {
        dest.write(body);
        dest.end();
      } else {
        body.pipe(dest);
      }
    };
    validateHeaderName = typeof import_http.default.validateHeaderName === "function" ? import_http.default.validateHeaderName : (name2) => {
      if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name2)) {
        const err = new TypeError(`Header name must be a valid HTTP token [${name2}]`);
        Object.defineProperty(err, "code", { value: "ERR_INVALID_HTTP_TOKEN" });
        throw err;
      }
    };
    validateHeaderValue = typeof import_http.default.validateHeaderValue === "function" ? import_http.default.validateHeaderValue : (name2, value) => {
      if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
        const err = new TypeError(`Invalid character in header content ["${name2}"]`);
        Object.defineProperty(err, "code", { value: "ERR_INVALID_CHAR" });
        throw err;
      }
    };
    Headers = class extends URLSearchParams {
      constructor(init2) {
        let result = [];
        if (init2 instanceof Headers) {
          const raw = init2.raw();
          for (const [name2, values] of Object.entries(raw)) {
            result.push(...values.map((value) => [name2, value]));
          }
        } else if (init2 == null)
          ;
        else if (typeof init2 === "object" && !import_util.types.isBoxedPrimitive(init2)) {
          const method2 = init2[Symbol.iterator];
          if (method2 == null) {
            result.push(...Object.entries(init2));
          } else {
            if (typeof method2 !== "function") {
              throw new TypeError("Header pairs must be iterable");
            }
            result = [...init2].map((pair) => {
              if (typeof pair !== "object" || import_util.types.isBoxedPrimitive(pair)) {
                throw new TypeError("Each header pair must be an iterable object");
              }
              return [...pair];
            }).map((pair) => {
              if (pair.length !== 2) {
                throw new TypeError("Each header pair must be a name/value tuple");
              }
              return [...pair];
            });
          }
        } else {
          throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
        }
        result = result.length > 0 ? result.map(([name2, value]) => {
          validateHeaderName(name2);
          validateHeaderValue(name2, String(value));
          return [String(name2).toLowerCase(), String(value)];
        }) : void 0;
        super(result);
        return new Proxy(this, {
          get(target, p, receiver) {
            switch (p) {
              case "append":
              case "set":
                return (name2, value) => {
                  validateHeaderName(name2);
                  validateHeaderValue(name2, String(value));
                  return URLSearchParams.prototype[p].call(receiver, String(name2).toLowerCase(), String(value));
                };
              case "delete":
              case "has":
              case "getAll":
                return (name2) => {
                  validateHeaderName(name2);
                  return URLSearchParams.prototype[p].call(receiver, String(name2).toLowerCase());
                };
              case "keys":
                return () => {
                  target.sort();
                  return new Set(URLSearchParams.prototype.keys.call(target)).keys();
                };
              default:
                return Reflect.get(target, p, receiver);
            }
          }
        });
      }
      get [Symbol.toStringTag]() {
        return this.constructor.name;
      }
      toString() {
        return Object.prototype.toString.call(this);
      }
      get(name2) {
        const values = this.getAll(name2);
        if (values.length === 0) {
          return null;
        }
        let value = values.join(", ");
        if (/^content-encoding$/i.test(name2)) {
          value = value.toLowerCase();
        }
        return value;
      }
      forEach(callback) {
        for (const name2 of this.keys()) {
          callback(this.get(name2), name2);
        }
      }
      *values() {
        for (const name2 of this.keys()) {
          yield this.get(name2);
        }
      }
      *entries() {
        for (const name2 of this.keys()) {
          yield [name2, this.get(name2)];
        }
      }
      [Symbol.iterator]() {
        return this.entries();
      }
      raw() {
        return [...this.keys()].reduce((result, key) => {
          result[key] = this.getAll(key);
          return result;
        }, {});
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return [...this.keys()].reduce((result, key) => {
          const values = this.getAll(key);
          if (key === "host") {
            result[key] = values[0];
          } else {
            result[key] = values.length > 1 ? values : values[0];
          }
          return result;
        }, {});
      }
    };
    Object.defineProperties(Headers.prototype, ["get", "entries", "forEach", "values"].reduce((result, property) => {
      result[property] = { enumerable: true };
      return result;
    }, {}));
    redirectStatus = new Set([301, 302, 303, 307, 308]);
    isRedirect = (code) => {
      return redirectStatus.has(code);
    };
    INTERNALS$1 = Symbol("Response internals");
    Response = class extends Body {
      constructor(body = null, options2 = {}) {
        super(body, options2);
        const status = options2.status || 200;
        const headers = new Headers(options2.headers);
        if (body !== null && !headers.has("Content-Type")) {
          const contentType = extractContentType(body);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        this[INTERNALS$1] = {
          url: options2.url,
          status,
          statusText: options2.statusText || "",
          headers,
          counter: options2.counter,
          highWaterMark: options2.highWaterMark
        };
      }
      get url() {
        return this[INTERNALS$1].url || "";
      }
      get status() {
        return this[INTERNALS$1].status;
      }
      get ok() {
        return this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;
      }
      get redirected() {
        return this[INTERNALS$1].counter > 0;
      }
      get statusText() {
        return this[INTERNALS$1].statusText;
      }
      get headers() {
        return this[INTERNALS$1].headers;
      }
      get highWaterMark() {
        return this[INTERNALS$1].highWaterMark;
      }
      clone() {
        return new Response(clone(this, this.highWaterMark), {
          url: this.url,
          status: this.status,
          statusText: this.statusText,
          headers: this.headers,
          ok: this.ok,
          redirected: this.redirected,
          size: this.size
        });
      }
      static redirect(url, status = 302) {
        if (!isRedirect(status)) {
          throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
        }
        return new Response(null, {
          headers: {
            location: new URL(url).toString()
          },
          status
        });
      }
      get [Symbol.toStringTag]() {
        return "Response";
      }
    };
    Object.defineProperties(Response.prototype, {
      url: { enumerable: true },
      status: { enumerable: true },
      ok: { enumerable: true },
      redirected: { enumerable: true },
      statusText: { enumerable: true },
      headers: { enumerable: true },
      clone: { enumerable: true }
    });
    getSearch = (parsedURL) => {
      if (parsedURL.search) {
        return parsedURL.search;
      }
      const lastOffset = parsedURL.href.length - 1;
      const hash2 = parsedURL.hash || (parsedURL.href[lastOffset] === "#" ? "#" : "");
      return parsedURL.href[lastOffset - hash2.length] === "?" ? "?" : "";
    };
    INTERNALS = Symbol("Request internals");
    isRequest = (object2) => {
      return typeof object2 === "object" && typeof object2[INTERNALS] === "object";
    };
    Request = class extends Body {
      constructor(input, init2 = {}) {
        let parsedURL;
        if (isRequest(input)) {
          parsedURL = new URL(input.url);
        } else {
          parsedURL = new URL(input);
          input = {};
        }
        let method2 = init2.method || input.method || "GET";
        method2 = method2.toUpperCase();
        if ((init2.body != null || isRequest(input)) && input.body !== null && (method2 === "GET" || method2 === "HEAD")) {
          throw new TypeError("Request with GET/HEAD method cannot have body");
        }
        const inputBody = init2.body ? init2.body : isRequest(input) && input.body !== null ? clone(input) : null;
        super(inputBody, {
          size: init2.size || input.size || 0
        });
        const headers = new Headers(init2.headers || input.headers || {});
        if (inputBody !== null && !headers.has("Content-Type")) {
          const contentType = extractContentType(inputBody, this);
          if (contentType) {
            headers.append("Content-Type", contentType);
          }
        }
        let signal = isRequest(input) ? input.signal : null;
        if ("signal" in init2) {
          signal = init2.signal;
        }
        if (signal !== null && !isAbortSignal(signal)) {
          throw new TypeError("Expected signal to be an instanceof AbortSignal");
        }
        this[INTERNALS] = {
          method: method2,
          redirect: init2.redirect || input.redirect || "follow",
          headers,
          parsedURL,
          signal
        };
        this.follow = init2.follow === void 0 ? input.follow === void 0 ? 20 : input.follow : init2.follow;
        this.compress = init2.compress === void 0 ? input.compress === void 0 ? true : input.compress : init2.compress;
        this.counter = init2.counter || input.counter || 0;
        this.agent = init2.agent || input.agent;
        this.highWaterMark = init2.highWaterMark || input.highWaterMark || 16384;
        this.insecureHTTPParser = init2.insecureHTTPParser || input.insecureHTTPParser || false;
      }
      get method() {
        return this[INTERNALS].method;
      }
      get url() {
        return (0, import_url.format)(this[INTERNALS].parsedURL);
      }
      get headers() {
        return this[INTERNALS].headers;
      }
      get redirect() {
        return this[INTERNALS].redirect;
      }
      get signal() {
        return this[INTERNALS].signal;
      }
      clone() {
        return new Request(this);
      }
      get [Symbol.toStringTag]() {
        return "Request";
      }
    };
    Object.defineProperties(Request.prototype, {
      method: { enumerable: true },
      url: { enumerable: true },
      headers: { enumerable: true },
      redirect: { enumerable: true },
      clone: { enumerable: true },
      signal: { enumerable: true }
    });
    getNodeRequestOptions = (request) => {
      const { parsedURL } = request[INTERNALS];
      const headers = new Headers(request[INTERNALS].headers);
      if (!headers.has("Accept")) {
        headers.set("Accept", "*/*");
      }
      let contentLengthValue = null;
      if (request.body === null && /^(post|put)$/i.test(request.method)) {
        contentLengthValue = "0";
      }
      if (request.body !== null) {
        const totalBytes = getTotalBytes(request);
        if (typeof totalBytes === "number" && !Number.isNaN(totalBytes)) {
          contentLengthValue = String(totalBytes);
        }
      }
      if (contentLengthValue) {
        headers.set("Content-Length", contentLengthValue);
      }
      if (!headers.has("User-Agent")) {
        headers.set("User-Agent", "node-fetch");
      }
      if (request.compress && !headers.has("Accept-Encoding")) {
        headers.set("Accept-Encoding", "gzip,deflate,br");
      }
      let { agent } = request;
      if (typeof agent === "function") {
        agent = agent(parsedURL);
      }
      if (!headers.has("Connection") && !agent) {
        headers.set("Connection", "close");
      }
      const search = getSearch(parsedURL);
      const requestOptions = {
        path: parsedURL.pathname + search,
        pathname: parsedURL.pathname,
        hostname: parsedURL.hostname,
        protocol: parsedURL.protocol,
        port: parsedURL.port,
        hash: parsedURL.hash,
        search: parsedURL.search,
        query: parsedURL.query,
        href: parsedURL.href,
        method: request.method,
        headers: headers[Symbol.for("nodejs.util.inspect.custom")](),
        insecureHTTPParser: request.insecureHTTPParser,
        agent
      };
      return requestOptions;
    };
    AbortError = class extends FetchBaseError {
      constructor(message2, type2 = "aborted") {
        super(message2, type2);
      }
    };
    supportedSchemas = new Set(["data:", "http:", "https:"]);
  }
});

// node_modules/@sveltejs/adapter-vercel/files/shims.js
var init_shims = __esm({
  "node_modules/@sveltejs/adapter-vercel/files/shims.js"() {
    init_install_fetch();
  }
});

// node_modules/crypto-js/core.js
var require_core = __commonJS({
  "node_modules/crypto-js/core.js"(exports, module2) {
    init_shims();
    (function(root2, factory2) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2();
      } else if (typeof define === "function" && define.amd) {
        define([], factory2);
      } else {
        root2.CryptoJS = factory2();
      }
    })(exports, function() {
      var CryptoJS2 = CryptoJS2 || function(Math2, undefined2) {
        var crypto2;
        if (typeof window !== "undefined" && window.crypto) {
          crypto2 = window.crypto;
        }
        if (typeof self !== "undefined" && self.crypto) {
          crypto2 = self.crypto;
        }
        if (typeof globalThis !== "undefined" && globalThis.crypto) {
          crypto2 = globalThis.crypto;
        }
        if (!crypto2 && typeof window !== "undefined" && window.msCrypto) {
          crypto2 = window.msCrypto;
        }
        if (!crypto2 && typeof global !== "undefined" && global.crypto) {
          crypto2 = global.crypto;
        }
        if (!crypto2 && typeof require === "function") {
          try {
            crypto2 = require("crypto");
          } catch (err) {
          }
        }
        var cryptoSecureRandomInt = function() {
          if (crypto2) {
            if (typeof crypto2.getRandomValues === "function") {
              try {
                return crypto2.getRandomValues(new Uint32Array(1))[0];
              } catch (err) {
              }
            }
            if (typeof crypto2.randomBytes === "function") {
              try {
                return crypto2.randomBytes(4).readInt32LE();
              } catch (err) {
              }
            }
          }
          throw new Error("Native crypto module could not be used to get secure random number.");
        };
        var create7 = Object.create || function() {
          function F() {
          }
          return function(obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F();
            F.prototype = null;
            return subtype;
          };
        }();
        var C = {};
        var C_lib = C.lib = {};
        var Base = C_lib.Base = function() {
          return {
            extend: function(overrides) {
              var subtype = create7(this);
              if (overrides) {
                subtype.mixIn(overrides);
              }
              if (!subtype.hasOwnProperty("init") || this.init === subtype.init) {
                subtype.init = function() {
                  subtype.$super.init.apply(this, arguments);
                };
              }
              subtype.init.prototype = subtype;
              subtype.$super = this;
              return subtype;
            },
            create: function() {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance;
            },
            init: function() {
            },
            mixIn: function(properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName];
                }
              }
              if (properties.hasOwnProperty("toString")) {
                this.toString = properties.toString;
              }
            },
            clone: function() {
              return this.init.prototype.extend(this);
            }
          };
        }();
        var WordArray = C_lib.WordArray = Base.extend({
          init: function(words2, sigBytes) {
            words2 = this.words = words2 || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words2.length * 4;
            }
          },
          toString: function(encoder2) {
            return (encoder2 || Hex).stringify(this);
          },
          concat: function(wordArray) {
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            this.clamp();
            if (thisSigBytes % 4) {
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8;
              }
            } else {
              for (var j = 0; j < thatSigBytes; j += 4) {
                thisWords[thisSigBytes + j >>> 2] = thatWords[j >>> 2];
              }
            }
            this.sigBytes += thatSigBytes;
            return this;
          },
          clamp: function() {
            var words2 = this.words;
            var sigBytes = this.sigBytes;
            words2[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words2.length = Math2.ceil(sigBytes / 4);
          },
          clone: function() {
            var clone2 = Base.clone.call(this);
            clone2.words = this.words.slice(0);
            return clone2;
          },
          random: function(nBytes) {
            var words2 = [];
            for (var i = 0; i < nBytes; i += 4) {
              words2.push(cryptoSecureRandomInt());
            }
            return new WordArray.init(words2, nBytes);
          }
        });
        var C_enc = C.enc = {};
        var Hex = C_enc.Hex = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words2[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16));
            }
            return hexChars.join("");
          },
          parse: function(hexStr) {
            var hexStrLength = hexStr.length;
            var words2 = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words2[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4;
            }
            return new WordArray.init(words2, hexStrLength / 2);
          }
        };
        var Latin1 = C_enc.Latin1 = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words2[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite));
            }
            return latin1Chars.join("");
          },
          parse: function(latin1Str) {
            var latin1StrLength = latin1Str.length;
            var words2 = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words2[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8;
            }
            return new WordArray.init(words2, latin1StrLength);
          }
        };
        var Utf8 = C_enc.Utf8 = {
          stringify: function(wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)));
            } catch (e) {
              throw new Error("Malformed UTF-8 data");
            }
          },
          parse: function(utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
          }
        };
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          reset: function() {
            this._data = new WordArray.init();
            this._nDataBytes = 0;
          },
          _append: function(data) {
            if (typeof data == "string") {
              data = Utf8.parse(data);
            }
            this._data.concat(data);
            this._nDataBytes += data.sigBytes;
          },
          _process: function(doFlush) {
            var processedWords;
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              nBlocksReady = Math2.ceil(nBlocksReady);
            } else {
              nBlocksReady = Math2.max((nBlocksReady | 0) - this._minBufferSize, 0);
            }
            var nWordsReady = nBlocksReady * blockSize;
            var nBytesReady = Math2.min(nWordsReady * 4, dataSigBytes);
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                this._doProcessBlock(dataWords, offset);
              }
              processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady;
            }
            return new WordArray.init(processedWords, nBytesReady);
          },
          clone: function() {
            var clone2 = Base.clone.call(this);
            clone2._data = this._data.clone();
            return clone2;
          },
          _minBufferSize: 0
        });
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          update: function(messageUpdate) {
            this._append(messageUpdate);
            this._process();
            return this;
          },
          finalize: function(messageUpdate) {
            if (messageUpdate) {
              this._append(messageUpdate);
            }
            var hash2 = this._doFinalize();
            return hash2;
          },
          blockSize: 512 / 32,
          _createHelper: function(hasher) {
            return function(message2, cfg) {
              return new hasher.init(cfg).finalize(message2);
            };
          },
          _createHmacHelper: function(hasher) {
            return function(message2, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message2);
            };
          }
        });
        var C_algo = C.algo = {};
        return C;
      }(Math);
      return CryptoJS2;
    });
  }
});

// node_modules/crypto-js/x64-core.js
var require_x64_core = __commonJS({
  "node_modules/crypto-js/x64-core.js"(exports, module2) {
    init_shims();
    (function(root2, factory2) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(undefined2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var X32WordArray = C_lib.WordArray;
        var C_x64 = C.x64 = {};
        var X64Word = C_x64.Word = Base.extend({
          init: function(high, low) {
            this.high = high;
            this.low = low;
          }
        });
        var X64WordArray = C_x64.WordArray = Base.extend({
          init: function(words2, sigBytes) {
            words2 = this.words = words2 || [];
            if (sigBytes != undefined2) {
              this.sigBytes = sigBytes;
            } else {
              this.sigBytes = words2.length * 8;
            }
          },
          toX32: function() {
            var x64Words = this.words;
            var x64WordsLength = x64Words.length;
            var x32Words = [];
            for (var i = 0; i < x64WordsLength; i++) {
              var x64Word = x64Words[i];
              x32Words.push(x64Word.high);
              x32Words.push(x64Word.low);
            }
            return X32WordArray.create(x32Words, this.sigBytes);
          },
          clone: function() {
            var clone2 = Base.clone.call(this);
            var words2 = clone2.words = this.words.slice(0);
            var wordsLength = words2.length;
            for (var i = 0; i < wordsLength; i++) {
              words2[i] = words2[i].clone();
            }
            return clone2;
          }
        });
      })();
      return CryptoJS2;
    });
  }
});

// node_modules/crypto-js/lib-typedarrays.js
var require_lib_typedarrays = __commonJS({
  "node_modules/crypto-js/lib-typedarrays.js"(exports, module2) {
    init_shims();
    (function(root2, factory2) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        if (typeof ArrayBuffer != "function") {
          return;
        }
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var superInit = WordArray.init;
        var subInit = WordArray.init = function(typedArray) {
          if (typedArray instanceof ArrayBuffer) {
            typedArray = new Uint8Array(typedArray);
          }
          if (typedArray instanceof Int8Array || typeof Uint8ClampedArray !== "undefined" && typedArray instanceof Uint8ClampedArray || typedArray instanceof Int16Array || typedArray instanceof Uint16Array || typedArray instanceof Int32Array || typedArray instanceof Uint32Array || typedArray instanceof Float32Array || typedArray instanceof Float64Array) {
            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);
          }
          if (typedArray instanceof Uint8Array) {
            var typedArrayByteLength = typedArray.byteLength;
            var words2 = [];
            for (var i = 0; i < typedArrayByteLength; i++) {
              words2[i >>> 2] |= typedArray[i] << 24 - i % 4 * 8;
            }
            superInit.call(this, words2, typedArrayByteLength);
          } else {
            superInit.apply(this, arguments);
          }
        };
        subInit.prototype = WordArray;
      })();
      return CryptoJS2.lib.WordArray;
    });
  }
});

// node_modules/crypto-js/enc-utf16.js
var require_enc_utf16 = __commonJS({
  "node_modules/crypto-js/enc-utf16.js"(exports, module2) {
    init_shims();
    (function(root2, factory2) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = words2[i >>> 2] >>> 16 - i % 4 * 8 & 65535;
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words2 = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words2[i >>> 1] |= utf16Str.charCodeAt(i) << 16 - i % 2 * 16;
            }
            return WordArray.create(words2, utf16StrLength * 2);
          }
        };
        C_enc.Utf16LE = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var utf16Chars = [];
            for (var i = 0; i < sigBytes; i += 2) {
              var codePoint = swapEndian(words2[i >>> 2] >>> 16 - i % 4 * 8 & 65535);
              utf16Chars.push(String.fromCharCode(codePoint));
            }
            return utf16Chars.join("");
          },
          parse: function(utf16Str) {
            var utf16StrLength = utf16Str.length;
            var words2 = [];
            for (var i = 0; i < utf16StrLength; i++) {
              words2[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << 16 - i % 2 * 16);
            }
            return WordArray.create(words2, utf16StrLength * 2);
          }
        };
        function swapEndian(word) {
          return word << 8 & 4278255360 | word >>> 8 & 16711935;
        }
      })();
      return CryptoJS2.enc.Utf16;
    });
  }
});

// node_modules/crypto-js/enc-base64.js
var require_enc_base64 = __commonJS({
  "node_modules/crypto-js/enc-base64.js"(exports, module2) {
    init_shims();
    (function(root2, factory2) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64 = C_enc.Base64 = {
          stringify: function(wordArray) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map2 = this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words2[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words2[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words2[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map2.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          parse: function(base64Str) {
            var base64StrLength = base64Str.length;
            var map2 = this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map2.length; j++) {
                reverseMap[map2.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words2 = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words2[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words2, nBytes);
        }
      })();
      return CryptoJS2.enc.Base64;
    });
  }
});

// node_modules/crypto-js/enc-base64url.js
var require_enc_base64url = __commonJS({
  "node_modules/crypto-js/enc-base64url.js"(exports, module2) {
    init_shims();
    (function(root2, factory2) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_enc = C.enc;
        var Base64url = C_enc.Base64url = {
          stringify: function(wordArray, urlSafe = true) {
            var words2 = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            var map2 = urlSafe ? this._safe_map : this._map;
            wordArray.clamp();
            var base64Chars = [];
            for (var i = 0; i < sigBytes; i += 3) {
              var byte1 = words2[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              var byte2 = words2[i + 1 >>> 2] >>> 24 - (i + 1) % 4 * 8 & 255;
              var byte3 = words2[i + 2 >>> 2] >>> 24 - (i + 2) % 4 * 8 & 255;
              var triplet = byte1 << 16 | byte2 << 8 | byte3;
              for (var j = 0; j < 4 && i + j * 0.75 < sigBytes; j++) {
                base64Chars.push(map2.charAt(triplet >>> 6 * (3 - j) & 63));
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              while (base64Chars.length % 4) {
                base64Chars.push(paddingChar);
              }
            }
            return base64Chars.join("");
          },
          parse: function(base64Str, urlSafe = true) {
            var base64StrLength = base64Str.length;
            var map2 = urlSafe ? this._safe_map : this._map;
            var reverseMap = this._reverseMap;
            if (!reverseMap) {
              reverseMap = this._reverseMap = [];
              for (var j = 0; j < map2.length; j++) {
                reverseMap[map2.charCodeAt(j)] = j;
              }
            }
            var paddingChar = map2.charAt(64);
            if (paddingChar) {
              var paddingIndex = base64Str.indexOf(paddingChar);
              if (paddingIndex !== -1) {
                base64StrLength = paddingIndex;
              }
            }
            return parseLoop(base64Str, base64StrLength, reverseMap);
          },
          _map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
          _safe_map: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"
        };
        function parseLoop(base64Str, base64StrLength, reverseMap) {
          var words2 = [];
          var nBytes = 0;
          for (var i = 0; i < base64StrLength; i++) {
            if (i % 4) {
              var bits1 = reverseMap[base64Str.charCodeAt(i - 1)] << i % 4 * 2;
              var bits2 = reverseMap[base64Str.charCodeAt(i)] >>> 6 - i % 4 * 2;
              var bitsCombined = bits1 | bits2;
              words2[nBytes >>> 2] |= bitsCombined << 24 - nBytes % 4 * 8;
              nBytes++;
            }
          }
          return WordArray.create(words2, nBytes);
        }
      })();
      return CryptoJS2.enc.Base64url;
    });
  }
});

// node_modules/crypto-js/md5.js
var require_md5 = __commonJS({
  "node_modules/crypto-js/md5.js"(exports, module2) {
    init_shims();
    (function(root2, factory2) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var T = [];
        (function() {
          for (var i = 0; i < 64; i++) {
            T[i] = Math2.abs(Math2.sin(i + 1)) * 4294967296 | 0;
          }
        })();
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c, d, a, M_offset_2, 23, T[47]);
            a = II(a, b, c, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c, M_offset_7, 10, T[49]);
            c = II(c, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c, M_offset_3, 10, T[53]);
            c = II(c, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c, M_offset_15, 10, T[57]);
            c = II(c, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c, M_offset_11, 10, T[61]);
            c = II(c, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c, d, a, M_offset_9, 21, T[63]);
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math2.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash2 = this._hash;
            var H = hash2.words;
            for (var i = 0; i < 4; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash2;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        function FF(a, b, c, d, x, s2, t) {
          var n = a + (b & c | ~b & d) + x + t;
          return (n << s2 | n >>> 32 - s2) + b;
        }
        function GG(a, b, c, d, x, s2, t) {
          var n = a + (b & d | c & ~d) + x + t;
          return (n << s2 | n >>> 32 - s2) + b;
        }
        function HH(a, b, c, d, x, s2, t) {
          var n = a + (b ^ c ^ d) + x + t;
          return (n << s2 | n >>> 32 - s2) + b;
        }
        function II(a, b, c, d, x, s2, t) {
          var n = a + (c ^ (b | ~d)) + x + t;
          return (n << s2 | n >>> 32 - s2) + b;
        }
        C.MD5 = Hasher._createHelper(MD5);
        C.HmacMD5 = Hasher._createHmacHelper(MD5);
      })(Math);
      return CryptoJS2.MD5;
    });
  }
});

// node_modules/crypto-js/sha1.js
var require_sha1 = __commonJS({
  "node_modules/crypto-js/sha1.js"(exports, module2) {
    init_shims();
    (function(root2, factory2) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var W = [];
        var SHA1 = C_algo.SHA1 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878,
              3285377520
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            var e = H[4];
            for (var i = 0; i < 80; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
                W[i] = n << 1 | n >>> 31;
              }
              var t = (a << 5 | a >>> 27) + e + W[i];
              if (i < 20) {
                t += (b & c | ~b & d) + 1518500249;
              } else if (i < 40) {
                t += (b ^ c ^ d) + 1859775393;
              } else if (i < 60) {
                t += (b & c | b & d | c & d) - 1894007588;
              } else {
                t += (b ^ c ^ d) - 899497514;
              }
              e = d;
              d = c;
              c = b << 30 | b >>> 2;
              b = a;
              a = t;
            }
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0;
            H[4] = H[4] + e | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        C.SHA1 = Hasher._createHelper(SHA1);
        C.HmacSHA1 = Hasher._createHmacHelper(SHA1);
      })();
      return CryptoJS2.SHA1;
    });
  }
});

// node_modules/crypto-js/sha256.js
var require_sha256 = __commonJS({
  "node_modules/crypto-js/sha256.js"(exports, module2) {
    init_shims();
    (function(root2, factory2) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var H = [];
        var K = [];
        (function() {
          function isPrime(n2) {
            var sqrtN = Math2.sqrt(n2);
            for (var factor = 2; factor <= sqrtN; factor++) {
              if (!(n2 % factor)) {
                return false;
              }
            }
            return true;
          }
          function getFractionalBits(n2) {
            return (n2 - (n2 | 0)) * 4294967296 | 0;
          }
          var n = 2;
          var nPrime = 0;
          while (nPrime < 64) {
            if (isPrime(n)) {
              if (nPrime < 8) {
                H[nPrime] = getFractionalBits(Math2.pow(n, 1 / 2));
              }
              K[nPrime] = getFractionalBits(Math2.pow(n, 1 / 3));
              nPrime++;
            }
            n++;
          }
        })();
        var W = [];
        var SHA256 = C_algo.SHA256 = Hasher.extend({
          _doReset: function() {
            this._hash = new WordArray.init(H.slice(0));
          },
          _doProcessBlock: function(M, offset) {
            var H2 = this._hash.words;
            var a = H2[0];
            var b = H2[1];
            var c = H2[2];
            var d = H2[3];
            var e = H2[4];
            var f = H2[5];
            var g = H2[6];
            var h = H2[7];
            for (var i = 0; i < 64; i++) {
              if (i < 16) {
                W[i] = M[offset + i] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0 = (gamma0x << 25 | gamma0x >>> 7) ^ (gamma0x << 14 | gamma0x >>> 18) ^ gamma0x >>> 3;
                var gamma1x = W[i - 2];
                var gamma1 = (gamma1x << 15 | gamma1x >>> 17) ^ (gamma1x << 13 | gamma1x >>> 19) ^ gamma1x >>> 10;
                W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
              }
              var ch = e & f ^ ~e & g;
              var maj = a & b ^ a & c ^ b & c;
              var sigma0 = (a << 30 | a >>> 2) ^ (a << 19 | a >>> 13) ^ (a << 10 | a >>> 22);
              var sigma1 = (e << 26 | e >>> 6) ^ (e << 21 | e >>> 11) ^ (e << 7 | e >>> 25);
              var t1 = h + sigma1 + ch + K[i] + W[i];
              var t2 = sigma0 + maj;
              h = g;
              g = f;
              f = e;
              e = d + t1 | 0;
              d = c;
              c = b;
              b = a;
              a = t1 + t2 | 0;
            }
            H2[0] = H2[0] + a | 0;
            H2[1] = H2[1] + b | 0;
            H2[2] = H2[2] + c | 0;
            H2[3] = H2[3] + d | 0;
            H2[4] = H2[4] + e | 0;
            H2[5] = H2[5] + f | 0;
            H2[6] = H2[6] + g | 0;
            H2[7] = H2[7] + h | 0;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = Math2.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            return this._hash;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        C.SHA256 = Hasher._createHelper(SHA256);
        C.HmacSHA256 = Hasher._createHmacHelper(SHA256);
      })(Math);
      return CryptoJS2.SHA256;
    });
  }
});

// node_modules/crypto-js/sha224.js
var require_sha224 = __commonJS({
  "node_modules/crypto-js/sha224.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_sha256());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha256"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA256 = C_algo.SHA256;
        var SHA224 = C_algo.SHA224 = SHA256.extend({
          _doReset: function() {
            this._hash = new WordArray.init([
              3238371032,
              914150663,
              812702999,
              4144912697,
              4290775857,
              1750603025,
              1694076839,
              3204075428
            ]);
          },
          _doFinalize: function() {
            var hash2 = SHA256._doFinalize.call(this);
            hash2.sigBytes -= 4;
            return hash2;
          }
        });
        C.SHA224 = SHA256._createHelper(SHA224);
        C.HmacSHA224 = SHA256._createHmacHelper(SHA224);
      })();
      return CryptoJS2.SHA224;
    });
  }
});

// node_modules/crypto-js/sha512.js
var require_sha512 = __commonJS({
  "node_modules/crypto-js/sha512.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        function X64Word_create() {
          return X64Word.create.apply(X64Word, arguments);
        }
        var K = [
          X64Word_create(1116352408, 3609767458),
          X64Word_create(1899447441, 602891725),
          X64Word_create(3049323471, 3964484399),
          X64Word_create(3921009573, 2173295548),
          X64Word_create(961987163, 4081628472),
          X64Word_create(1508970993, 3053834265),
          X64Word_create(2453635748, 2937671579),
          X64Word_create(2870763221, 3664609560),
          X64Word_create(3624381080, 2734883394),
          X64Word_create(310598401, 1164996542),
          X64Word_create(607225278, 1323610764),
          X64Word_create(1426881987, 3590304994),
          X64Word_create(1925078388, 4068182383),
          X64Word_create(2162078206, 991336113),
          X64Word_create(2614888103, 633803317),
          X64Word_create(3248222580, 3479774868),
          X64Word_create(3835390401, 2666613458),
          X64Word_create(4022224774, 944711139),
          X64Word_create(264347078, 2341262773),
          X64Word_create(604807628, 2007800933),
          X64Word_create(770255983, 1495990901),
          X64Word_create(1249150122, 1856431235),
          X64Word_create(1555081692, 3175218132),
          X64Word_create(1996064986, 2198950837),
          X64Word_create(2554220882, 3999719339),
          X64Word_create(2821834349, 766784016),
          X64Word_create(2952996808, 2566594879),
          X64Word_create(3210313671, 3203337956),
          X64Word_create(3336571891, 1034457026),
          X64Word_create(3584528711, 2466948901),
          X64Word_create(113926993, 3758326383),
          X64Word_create(338241895, 168717936),
          X64Word_create(666307205, 1188179964),
          X64Word_create(773529912, 1546045734),
          X64Word_create(1294757372, 1522805485),
          X64Word_create(1396182291, 2643833823),
          X64Word_create(1695183700, 2343527390),
          X64Word_create(1986661051, 1014477480),
          X64Word_create(2177026350, 1206759142),
          X64Word_create(2456956037, 344077627),
          X64Word_create(2730485921, 1290863460),
          X64Word_create(2820302411, 3158454273),
          X64Word_create(3259730800, 3505952657),
          X64Word_create(3345764771, 106217008),
          X64Word_create(3516065817, 3606008344),
          X64Word_create(3600352804, 1432725776),
          X64Word_create(4094571909, 1467031594),
          X64Word_create(275423344, 851169720),
          X64Word_create(430227734, 3100823752),
          X64Word_create(506948616, 1363258195),
          X64Word_create(659060556, 3750685593),
          X64Word_create(883997877, 3785050280),
          X64Word_create(958139571, 3318307427),
          X64Word_create(1322822218, 3812723403),
          X64Word_create(1537002063, 2003034995),
          X64Word_create(1747873779, 3602036899),
          X64Word_create(1955562222, 1575990012),
          X64Word_create(2024104815, 1125592928),
          X64Word_create(2227730452, 2716904306),
          X64Word_create(2361852424, 442776044),
          X64Word_create(2428436474, 593698344),
          X64Word_create(2756734187, 3733110249),
          X64Word_create(3204031479, 2999351573),
          X64Word_create(3329325298, 3815920427),
          X64Word_create(3391569614, 3928383900),
          X64Word_create(3515267271, 566280711),
          X64Word_create(3940187606, 3454069534),
          X64Word_create(4118630271, 4000239992),
          X64Word_create(116418474, 1914138554),
          X64Word_create(174292421, 2731055270),
          X64Word_create(289380356, 3203993006),
          X64Word_create(460393269, 320620315),
          X64Word_create(685471733, 587496836),
          X64Word_create(852142971, 1086792851),
          X64Word_create(1017036298, 365543100),
          X64Word_create(1126000580, 2618297676),
          X64Word_create(1288033470, 3409855158),
          X64Word_create(1501505948, 4234509866),
          X64Word_create(1607167915, 987167468),
          X64Word_create(1816402316, 1246189591)
        ];
        var W = [];
        (function() {
          for (var i = 0; i < 80; i++) {
            W[i] = X64Word_create();
          }
        })();
        var SHA512 = C_algo.SHA512 = Hasher.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(1779033703, 4089235720),
              new X64Word.init(3144134277, 2227873595),
              new X64Word.init(1013904242, 4271175723),
              new X64Word.init(2773480762, 1595750129),
              new X64Word.init(1359893119, 2917565137),
              new X64Word.init(2600822924, 725511199),
              new X64Word.init(528734635, 4215389547),
              new X64Word.init(1541459225, 327033209)
            ]);
          },
          _doProcessBlock: function(M, offset) {
            var H = this._hash.words;
            var H0 = H[0];
            var H1 = H[1];
            var H2 = H[2];
            var H3 = H[3];
            var H4 = H[4];
            var H5 = H[5];
            var H6 = H[6];
            var H7 = H[7];
            var H0h = H0.high;
            var H0l = H0.low;
            var H1h = H1.high;
            var H1l = H1.low;
            var H2h = H2.high;
            var H2l = H2.low;
            var H3h = H3.high;
            var H3l = H3.low;
            var H4h = H4.high;
            var H4l = H4.low;
            var H5h = H5.high;
            var H5l = H5.low;
            var H6h = H6.high;
            var H6l = H6.low;
            var H7h = H7.high;
            var H7l = H7.low;
            var ah = H0h;
            var al = H0l;
            var bh = H1h;
            var bl = H1l;
            var ch = H2h;
            var cl = H2l;
            var dh = H3h;
            var dl = H3l;
            var eh = H4h;
            var el = H4l;
            var fh = H5h;
            var fl = H5l;
            var gh = H6h;
            var gl = H6l;
            var hh = H7h;
            var hl = H7l;
            for (var i = 0; i < 80; i++) {
              var Wil;
              var Wih;
              var Wi = W[i];
              if (i < 16) {
                Wih = Wi.high = M[offset + i * 2] | 0;
                Wil = Wi.low = M[offset + i * 2 + 1] | 0;
              } else {
                var gamma0x = W[i - 15];
                var gamma0xh = gamma0x.high;
                var gamma0xl = gamma0x.low;
                var gamma0h = (gamma0xh >>> 1 | gamma0xl << 31) ^ (gamma0xh >>> 8 | gamma0xl << 24) ^ gamma0xh >>> 7;
                var gamma0l = (gamma0xl >>> 1 | gamma0xh << 31) ^ (gamma0xl >>> 8 | gamma0xh << 24) ^ (gamma0xl >>> 7 | gamma0xh << 25);
                var gamma1x = W[i - 2];
                var gamma1xh = gamma1x.high;
                var gamma1xl = gamma1x.low;
                var gamma1h = (gamma1xh >>> 19 | gamma1xl << 13) ^ (gamma1xh << 3 | gamma1xl >>> 29) ^ gamma1xh >>> 6;
                var gamma1l = (gamma1xl >>> 19 | gamma1xh << 13) ^ (gamma1xl << 3 | gamma1xh >>> 29) ^ (gamma1xl >>> 6 | gamma1xh << 26);
                var Wi7 = W[i - 7];
                var Wi7h = Wi7.high;
                var Wi7l = Wi7.low;
                var Wi16 = W[i - 16];
                var Wi16h = Wi16.high;
                var Wi16l = Wi16.low;
                Wil = gamma0l + Wi7l;
                Wih = gamma0h + Wi7h + (Wil >>> 0 < gamma0l >>> 0 ? 1 : 0);
                Wil = Wil + gamma1l;
                Wih = Wih + gamma1h + (Wil >>> 0 < gamma1l >>> 0 ? 1 : 0);
                Wil = Wil + Wi16l;
                Wih = Wih + Wi16h + (Wil >>> 0 < Wi16l >>> 0 ? 1 : 0);
                Wi.high = Wih;
                Wi.low = Wil;
              }
              var chh = eh & fh ^ ~eh & gh;
              var chl = el & fl ^ ~el & gl;
              var majh = ah & bh ^ ah & ch ^ bh & ch;
              var majl = al & bl ^ al & cl ^ bl & cl;
              var sigma0h = (ah >>> 28 | al << 4) ^ (ah << 30 | al >>> 2) ^ (ah << 25 | al >>> 7);
              var sigma0l = (al >>> 28 | ah << 4) ^ (al << 30 | ah >>> 2) ^ (al << 25 | ah >>> 7);
              var sigma1h = (eh >>> 14 | el << 18) ^ (eh >>> 18 | el << 14) ^ (eh << 23 | el >>> 9);
              var sigma1l = (el >>> 14 | eh << 18) ^ (el >>> 18 | eh << 14) ^ (el << 23 | eh >>> 9);
              var Ki = K[i];
              var Kih = Ki.high;
              var Kil = Ki.low;
              var t1l = hl + sigma1l;
              var t1h = hh + sigma1h + (t1l >>> 0 < hl >>> 0 ? 1 : 0);
              var t1l = t1l + chl;
              var t1h = t1h + chh + (t1l >>> 0 < chl >>> 0 ? 1 : 0);
              var t1l = t1l + Kil;
              var t1h = t1h + Kih + (t1l >>> 0 < Kil >>> 0 ? 1 : 0);
              var t1l = t1l + Wil;
              var t1h = t1h + Wih + (t1l >>> 0 < Wil >>> 0 ? 1 : 0);
              var t2l = sigma0l + majl;
              var t2h = sigma0h + majh + (t2l >>> 0 < sigma0l >>> 0 ? 1 : 0);
              hh = gh;
              hl = gl;
              gh = fh;
              gl = fl;
              fh = eh;
              fl = el;
              el = dl + t1l | 0;
              eh = dh + t1h + (el >>> 0 < dl >>> 0 ? 1 : 0) | 0;
              dh = ch;
              dl = cl;
              ch = bh;
              cl = bl;
              bh = ah;
              bl = al;
              al = t1l + t2l | 0;
              ah = t1h + t2h + (al >>> 0 < t1l >>> 0 ? 1 : 0) | 0;
            }
            H0l = H0.low = H0l + al;
            H0.high = H0h + ah + (H0l >>> 0 < al >>> 0 ? 1 : 0);
            H1l = H1.low = H1l + bl;
            H1.high = H1h + bh + (H1l >>> 0 < bl >>> 0 ? 1 : 0);
            H2l = H2.low = H2l + cl;
            H2.high = H2h + ch + (H2l >>> 0 < cl >>> 0 ? 1 : 0);
            H3l = H3.low = H3l + dl;
            H3.high = H3h + dh + (H3l >>> 0 < dl >>> 0 ? 1 : 0);
            H4l = H4.low = H4l + el;
            H4.high = H4h + eh + (H4l >>> 0 < el >>> 0 ? 1 : 0);
            H5l = H5.low = H5l + fl;
            H5.high = H5h + fh + (H5l >>> 0 < fl >>> 0 ? 1 : 0);
            H6l = H6.low = H6l + gl;
            H6.high = H6h + gh + (H6l >>> 0 < gl >>> 0 ? 1 : 0);
            H7l = H7.low = H7l + hl;
            H7.high = H7h + hh + (H7l >>> 0 < hl >>> 0 ? 1 : 0);
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 30] = Math.floor(nBitsTotal / 4294967296);
            dataWords[(nBitsLeft + 128 >>> 10 << 5) + 31] = nBitsTotal;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var hash2 = this._hash.toX32();
            return hash2;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          },
          blockSize: 1024 / 32
        });
        C.SHA512 = Hasher._createHelper(SHA512);
        C.HmacSHA512 = Hasher._createHmacHelper(SHA512);
      })();
      return CryptoJS2.SHA512;
    });
  }
});

// node_modules/crypto-js/sha384.js
var require_sha384 = __commonJS({
  "node_modules/crypto-js/sha384.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_x64_core(), require_sha512());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./sha512"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var X64WordArray = C_x64.WordArray;
        var C_algo = C.algo;
        var SHA512 = C_algo.SHA512;
        var SHA384 = C_algo.SHA384 = SHA512.extend({
          _doReset: function() {
            this._hash = new X64WordArray.init([
              new X64Word.init(3418070365, 3238371032),
              new X64Word.init(1654270250, 914150663),
              new X64Word.init(2438529370, 812702999),
              new X64Word.init(355462360, 4144912697),
              new X64Word.init(1731405415, 4290775857),
              new X64Word.init(2394180231, 1750603025),
              new X64Word.init(3675008525, 1694076839),
              new X64Word.init(1203062813, 3204075428)
            ]);
          },
          _doFinalize: function() {
            var hash2 = SHA512._doFinalize.call(this);
            hash2.sigBytes -= 16;
            return hash2;
          }
        });
        C.SHA384 = SHA512._createHelper(SHA384);
        C.HmacSHA384 = SHA512._createHmacHelper(SHA384);
      })();
      return CryptoJS2.SHA384;
    });
  }
});

// node_modules/crypto-js/sha3.js
var require_sha3 = __commonJS({
  "node_modules/crypto-js/sha3.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_x64_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_x64 = C.x64;
        var X64Word = C_x64.Word;
        var C_algo = C.algo;
        var RHO_OFFSETS = [];
        var PI_INDEXES = [];
        var ROUND_CONSTANTS = [];
        (function() {
          var x = 1, y = 0;
          for (var t = 0; t < 24; t++) {
            RHO_OFFSETS[x + 5 * y] = (t + 1) * (t + 2) / 2 % 64;
            var newX = y % 5;
            var newY = (2 * x + 3 * y) % 5;
            x = newX;
            y = newY;
          }
          for (var x = 0; x < 5; x++) {
            for (var y = 0; y < 5; y++) {
              PI_INDEXES[x + 5 * y] = y + (2 * x + 3 * y) % 5 * 5;
            }
          }
          var LFSR = 1;
          for (var i = 0; i < 24; i++) {
            var roundConstantMsw = 0;
            var roundConstantLsw = 0;
            for (var j = 0; j < 7; j++) {
              if (LFSR & 1) {
                var bitPosition = (1 << j) - 1;
                if (bitPosition < 32) {
                  roundConstantLsw ^= 1 << bitPosition;
                } else {
                  roundConstantMsw ^= 1 << bitPosition - 32;
                }
              }
              if (LFSR & 128) {
                LFSR = LFSR << 1 ^ 113;
              } else {
                LFSR <<= 1;
              }
            }
            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);
          }
        })();
        var T = [];
        (function() {
          for (var i = 0; i < 25; i++) {
            T[i] = X64Word.create();
          }
        })();
        var SHA3 = C_algo.SHA3 = Hasher.extend({
          cfg: Hasher.cfg.extend({
            outputLength: 512
          }),
          _doReset: function() {
            var state = this._state = [];
            for (var i = 0; i < 25; i++) {
              state[i] = new X64Word.init();
            }
            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;
          },
          _doProcessBlock: function(M, offset) {
            var state = this._state;
            var nBlockSizeLanes = this.blockSize / 2;
            for (var i = 0; i < nBlockSizeLanes; i++) {
              var M2i = M[offset + 2 * i];
              var M2i1 = M[offset + 2 * i + 1];
              M2i = (M2i << 8 | M2i >>> 24) & 16711935 | (M2i << 24 | M2i >>> 8) & 4278255360;
              M2i1 = (M2i1 << 8 | M2i1 >>> 24) & 16711935 | (M2i1 << 24 | M2i1 >>> 8) & 4278255360;
              var lane = state[i];
              lane.high ^= M2i1;
              lane.low ^= M2i;
            }
            for (var round = 0; round < 24; round++) {
              for (var x = 0; x < 5; x++) {
                var tMsw = 0, tLsw = 0;
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  tMsw ^= lane.high;
                  tLsw ^= lane.low;
                }
                var Tx = T[x];
                Tx.high = tMsw;
                Tx.low = tLsw;
              }
              for (var x = 0; x < 5; x++) {
                var Tx4 = T[(x + 4) % 5];
                var Tx1 = T[(x + 1) % 5];
                var Tx1Msw = Tx1.high;
                var Tx1Lsw = Tx1.low;
                var tMsw = Tx4.high ^ (Tx1Msw << 1 | Tx1Lsw >>> 31);
                var tLsw = Tx4.low ^ (Tx1Lsw << 1 | Tx1Msw >>> 31);
                for (var y = 0; y < 5; y++) {
                  var lane = state[x + 5 * y];
                  lane.high ^= tMsw;
                  lane.low ^= tLsw;
                }
              }
              for (var laneIndex = 1; laneIndex < 25; laneIndex++) {
                var tMsw;
                var tLsw;
                var lane = state[laneIndex];
                var laneMsw = lane.high;
                var laneLsw = lane.low;
                var rhoOffset = RHO_OFFSETS[laneIndex];
                if (rhoOffset < 32) {
                  tMsw = laneMsw << rhoOffset | laneLsw >>> 32 - rhoOffset;
                  tLsw = laneLsw << rhoOffset | laneMsw >>> 32 - rhoOffset;
                } else {
                  tMsw = laneLsw << rhoOffset - 32 | laneMsw >>> 64 - rhoOffset;
                  tLsw = laneMsw << rhoOffset - 32 | laneLsw >>> 64 - rhoOffset;
                }
                var TPiLane = T[PI_INDEXES[laneIndex]];
                TPiLane.high = tMsw;
                TPiLane.low = tLsw;
              }
              var T0 = T[0];
              var state0 = state[0];
              T0.high = state0.high;
              T0.low = state0.low;
              for (var x = 0; x < 5; x++) {
                for (var y = 0; y < 5; y++) {
                  var laneIndex = x + 5 * y;
                  var lane = state[laneIndex];
                  var TLane = T[laneIndex];
                  var Tx1Lane = T[(x + 1) % 5 + 5 * y];
                  var Tx2Lane = T[(x + 2) % 5 + 5 * y];
                  lane.high = TLane.high ^ ~Tx1Lane.high & Tx2Lane.high;
                  lane.low = TLane.low ^ ~Tx1Lane.low & Tx2Lane.low;
                }
              }
              var lane = state[0];
              var roundConstant = ROUND_CONSTANTS[round];
              lane.high ^= roundConstant.high;
              lane.low ^= roundConstant.low;
            }
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            var blockSizeBits = this.blockSize * 32;
            dataWords[nBitsLeft >>> 5] |= 1 << 24 - nBitsLeft % 32;
            dataWords[(Math2.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits >>> 5) - 1] |= 128;
            data.sigBytes = dataWords.length * 4;
            this._process();
            var state = this._state;
            var outputLengthBytes = this.cfg.outputLength / 8;
            var outputLengthLanes = outputLengthBytes / 8;
            var hashWords = [];
            for (var i = 0; i < outputLengthLanes; i++) {
              var lane = state[i];
              var laneMsw = lane.high;
              var laneLsw = lane.low;
              laneMsw = (laneMsw << 8 | laneMsw >>> 24) & 16711935 | (laneMsw << 24 | laneMsw >>> 8) & 4278255360;
              laneLsw = (laneLsw << 8 | laneLsw >>> 24) & 16711935 | (laneLsw << 24 | laneLsw >>> 8) & 4278255360;
              hashWords.push(laneLsw);
              hashWords.push(laneMsw);
            }
            return new WordArray.init(hashWords, outputLengthBytes);
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            var state = clone2._state = this._state.slice(0);
            for (var i = 0; i < 25; i++) {
              state[i] = state[i].clone();
            }
            return clone2;
          }
        });
        C.SHA3 = Hasher._createHelper(SHA3);
        C.HmacSHA3 = Hasher._createHmacHelper(SHA3);
      })(Math);
      return CryptoJS2.SHA3;
    });
  }
});

// node_modules/crypto-js/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/crypto-js/ripemd160.js"(exports, module2) {
    init_shims();
    (function(root2, factory2) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(Math2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        var _zl = WordArray.create([
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9,
          10,
          11,
          12,
          13,
          14,
          15,
          7,
          4,
          13,
          1,
          10,
          6,
          15,
          3,
          12,
          0,
          9,
          5,
          2,
          14,
          11,
          8,
          3,
          10,
          14,
          4,
          9,
          15,
          8,
          1,
          2,
          7,
          0,
          6,
          13,
          11,
          5,
          12,
          1,
          9,
          11,
          10,
          0,
          8,
          12,
          4,
          13,
          3,
          7,
          15,
          14,
          5,
          6,
          2,
          4,
          0,
          5,
          9,
          7,
          12,
          2,
          10,
          14,
          1,
          3,
          8,
          11,
          6,
          15,
          13
        ]);
        var _zr = WordArray.create([
          5,
          14,
          7,
          0,
          9,
          2,
          11,
          4,
          13,
          6,
          15,
          8,
          1,
          10,
          3,
          12,
          6,
          11,
          3,
          7,
          0,
          13,
          5,
          10,
          14,
          15,
          8,
          12,
          4,
          9,
          1,
          2,
          15,
          5,
          1,
          3,
          7,
          14,
          6,
          9,
          11,
          8,
          12,
          2,
          10,
          0,
          4,
          13,
          8,
          6,
          4,
          1,
          3,
          11,
          15,
          0,
          5,
          12,
          2,
          13,
          9,
          7,
          10,
          14,
          12,
          15,
          10,
          4,
          1,
          5,
          8,
          7,
          6,
          2,
          13,
          14,
          0,
          3,
          9,
          11
        ]);
        var _sl = WordArray.create([
          11,
          14,
          15,
          12,
          5,
          8,
          7,
          9,
          11,
          13,
          14,
          15,
          6,
          7,
          9,
          8,
          7,
          6,
          8,
          13,
          11,
          9,
          7,
          15,
          7,
          12,
          15,
          9,
          11,
          7,
          13,
          12,
          11,
          13,
          6,
          7,
          14,
          9,
          13,
          15,
          14,
          8,
          13,
          6,
          5,
          12,
          7,
          5,
          11,
          12,
          14,
          15,
          14,
          15,
          9,
          8,
          9,
          14,
          5,
          6,
          8,
          6,
          5,
          12,
          9,
          15,
          5,
          11,
          6,
          8,
          13,
          12,
          5,
          12,
          13,
          14,
          11,
          8,
          5,
          6
        ]);
        var _sr = WordArray.create([
          8,
          9,
          9,
          11,
          13,
          15,
          15,
          5,
          7,
          7,
          8,
          11,
          14,
          14,
          12,
          6,
          9,
          13,
          15,
          7,
          12,
          8,
          9,
          11,
          7,
          7,
          12,
          7,
          6,
          15,
          13,
          11,
          9,
          7,
          15,
          11,
          8,
          6,
          6,
          14,
          12,
          13,
          5,
          14,
          13,
          13,
          7,
          5,
          15,
          5,
          8,
          11,
          14,
          14,
          6,
          14,
          6,
          9,
          12,
          9,
          12,
          5,
          15,
          8,
          8,
          5,
          12,
          9,
          12,
          5,
          14,
          6,
          8,
          13,
          6,
          5,
          15,
          13,
          11,
          11
        ]);
        var _hl = WordArray.create([0, 1518500249, 1859775393, 2400959708, 2840853838]);
        var _hr = WordArray.create([1352829926, 1548603684, 1836072691, 2053994217, 0]);
        var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({
          _doReset: function() {
            this._hash = WordArray.create([1732584193, 4023233417, 2562383102, 271733878, 3285377520]);
          },
          _doProcessBlock: function(M, offset) {
            for (var i = 0; i < 16; i++) {
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360;
            }
            var H = this._hash.words;
            var hl = _hl.words;
            var hr = _hr.words;
            var zl = _zl.words;
            var zr = _zr.words;
            var sl = _sl.words;
            var sr = _sr.words;
            var al, bl, cl, dl, el;
            var ar, br, cr, dr, er;
            ar = al = H[0];
            br = bl = H[1];
            cr = cl = H[2];
            dr = dl = H[3];
            er = el = H[4];
            var t;
            for (var i = 0; i < 80; i += 1) {
              t = al + M[offset + zl[i]] | 0;
              if (i < 16) {
                t += f1(bl, cl, dl) + hl[0];
              } else if (i < 32) {
                t += f2(bl, cl, dl) + hl[1];
              } else if (i < 48) {
                t += f3(bl, cl, dl) + hl[2];
              } else if (i < 64) {
                t += f4(bl, cl, dl) + hl[3];
              } else {
                t += f5(bl, cl, dl) + hl[4];
              }
              t = t | 0;
              t = rotl(t, sl[i]);
              t = t + el | 0;
              al = el;
              el = dl;
              dl = rotl(cl, 10);
              cl = bl;
              bl = t;
              t = ar + M[offset + zr[i]] | 0;
              if (i < 16) {
                t += f5(br, cr, dr) + hr[0];
              } else if (i < 32) {
                t += f4(br, cr, dr) + hr[1];
              } else if (i < 48) {
                t += f3(br, cr, dr) + hr[2];
              } else if (i < 64) {
                t += f2(br, cr, dr) + hr[3];
              } else {
                t += f1(br, cr, dr) + hr[4];
              }
              t = t | 0;
              t = rotl(t, sr[i]);
              t = t + er | 0;
              ar = er;
              er = dr;
              dr = rotl(cr, 10);
              cr = br;
              br = t;
            }
            t = H[1] + cl + dr | 0;
            H[1] = H[2] + dl + er | 0;
            H[2] = H[3] + el + ar | 0;
            H[3] = H[4] + al + br | 0;
            H[4] = H[0] + bl + cr | 0;
            H[0] = t;
          },
          _doFinalize: function() {
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotal << 8 | nBitsTotal >>> 24) & 16711935 | (nBitsTotal << 24 | nBitsTotal >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            this._process();
            var hash2 = this._hash;
            var H = hash2.words;
            for (var i = 0; i < 5; i++) {
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360;
            }
            return hash2;
          },
          clone: function() {
            var clone2 = Hasher.clone.call(this);
            clone2._hash = this._hash.clone();
            return clone2;
          }
        });
        function f1(x, y, z) {
          return x ^ y ^ z;
        }
        function f2(x, y, z) {
          return x & y | ~x & z;
        }
        function f3(x, y, z) {
          return (x | ~y) ^ z;
        }
        function f4(x, y, z) {
          return x & z | y & ~z;
        }
        function f5(x, y, z) {
          return x ^ (y | ~z);
        }
        function rotl(x, n) {
          return x << n | x >>> 32 - n;
        }
        C.RIPEMD160 = Hasher._createHelper(RIPEMD160);
        C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);
      })(Math);
      return CryptoJS2.RIPEMD160;
    });
  }
});

// node_modules/crypto-js/hmac.js
var require_hmac = __commonJS({
  "node_modules/crypto-js/hmac.js"(exports, module2) {
    init_shims();
    (function(root2, factory2) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var C_algo = C.algo;
        var HMAC = C_algo.HMAC = Base.extend({
          init: function(hasher, key) {
            hasher = this._hasher = new hasher.init();
            if (typeof key == "string") {
              key = Utf8.parse(key);
            }
            var hasherBlockSize = hasher.blockSize;
            var hasherBlockSizeBytes = hasherBlockSize * 4;
            if (key.sigBytes > hasherBlockSizeBytes) {
              key = hasher.finalize(key);
            }
            key.clamp();
            var oKey = this._oKey = key.clone();
            var iKey = this._iKey = key.clone();
            var oKeyWords = oKey.words;
            var iKeyWords = iKey.words;
            for (var i = 0; i < hasherBlockSize; i++) {
              oKeyWords[i] ^= 1549556828;
              iKeyWords[i] ^= 909522486;
            }
            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;
            this.reset();
          },
          reset: function() {
            var hasher = this._hasher;
            hasher.reset();
            hasher.update(this._iKey);
          },
          update: function(messageUpdate) {
            this._hasher.update(messageUpdate);
            return this;
          },
          finalize: function(messageUpdate) {
            var hasher = this._hasher;
            var innerHash = hasher.finalize(messageUpdate);
            hasher.reset();
            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));
            return hmac;
          }
        });
      })();
    });
  }
});

// node_modules/crypto-js/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/crypto-js/pbkdf2.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var SHA1 = C_algo.SHA1;
        var HMAC = C_algo.HMAC;
        var PBKDF2 = C_algo.PBKDF2 = Base.extend({
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: SHA1,
            iterations: 1
          }),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          compute: function(password, salt) {
            var cfg = this.cfg;
            var hmac = HMAC.create(cfg.hasher, password);
            var derivedKey = WordArray.create();
            var blockIndex = WordArray.create([1]);
            var derivedKeyWords = derivedKey.words;
            var blockIndexWords = blockIndex.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              var block = hmac.update(salt).finalize(blockIndex);
              hmac.reset();
              var blockWords = block.words;
              var blockWordsLength = blockWords.length;
              var intermediate = block;
              for (var i = 1; i < iterations; i++) {
                intermediate = hmac.finalize(intermediate);
                hmac.reset();
                var intermediateWords = intermediate.words;
                for (var j = 0; j < blockWordsLength; j++) {
                  blockWords[j] ^= intermediateWords[j];
                }
              }
              derivedKey.concat(block);
              blockIndexWords[0]++;
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.PBKDF2 = function(password, salt, cfg) {
          return PBKDF2.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS2.PBKDF2;
    });
  }
});

// node_modules/crypto-js/evpkdf.js
var require_evpkdf = __commonJS({
  "node_modules/crypto-js/evpkdf.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_sha1(), require_hmac());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./sha1", "./hmac"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var C_algo = C.algo;
        var MD5 = C_algo.MD5;
        var EvpKDF = C_algo.EvpKDF = Base.extend({
          cfg: Base.extend({
            keySize: 128 / 32,
            hasher: MD5,
            iterations: 1
          }),
          init: function(cfg) {
            this.cfg = this.cfg.extend(cfg);
          },
          compute: function(password, salt) {
            var block;
            var cfg = this.cfg;
            var hasher = cfg.hasher.create();
            var derivedKey = WordArray.create();
            var derivedKeyWords = derivedKey.words;
            var keySize = cfg.keySize;
            var iterations = cfg.iterations;
            while (derivedKeyWords.length < keySize) {
              if (block) {
                hasher.update(block);
              }
              block = hasher.update(password).finalize(salt);
              hasher.reset();
              for (var i = 1; i < iterations; i++) {
                block = hasher.finalize(block);
                hasher.reset();
              }
              derivedKey.concat(block);
            }
            derivedKey.sigBytes = keySize * 4;
            return derivedKey;
          }
        });
        C.EvpKDF = function(password, salt, cfg) {
          return EvpKDF.create(cfg).compute(password, salt);
        };
      })();
      return CryptoJS2.EvpKDF;
    });
  }
});

// node_modules/crypto-js/cipher-core.js
var require_cipher_core = __commonJS({
  "node_modules/crypto-js/cipher-core.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_evpkdf());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./evpkdf"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.lib.Cipher || function(undefined2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var Base = C_lib.Base;
        var WordArray = C_lib.WordArray;
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;
        var C_enc = C.enc;
        var Utf8 = C_enc.Utf8;
        var Base64 = C_enc.Base64;
        var C_algo = C.algo;
        var EvpKDF = C_algo.EvpKDF;
        var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({
          cfg: Base.extend(),
          createEncryptor: function(key, cfg) {
            return this.create(this._ENC_XFORM_MODE, key, cfg);
          },
          createDecryptor: function(key, cfg) {
            return this.create(this._DEC_XFORM_MODE, key, cfg);
          },
          init: function(xformMode, key, cfg) {
            this.cfg = this.cfg.extend(cfg);
            this._xformMode = xformMode;
            this._key = key;
            this.reset();
          },
          reset: function() {
            BufferedBlockAlgorithm.reset.call(this);
            this._doReset();
          },
          process: function(dataUpdate) {
            this._append(dataUpdate);
            return this._process();
          },
          finalize: function(dataUpdate) {
            if (dataUpdate) {
              this._append(dataUpdate);
            }
            var finalProcessedData = this._doFinalize();
            return finalProcessedData;
          },
          keySize: 128 / 32,
          ivSize: 128 / 32,
          _ENC_XFORM_MODE: 1,
          _DEC_XFORM_MODE: 2,
          _createHelper: function() {
            function selectCipherStrategy(key) {
              if (typeof key == "string") {
                return PasswordBasedCipher;
              } else {
                return SerializableCipher;
              }
            }
            return function(cipher) {
              return {
                encrypt: function(message2, key, cfg) {
                  return selectCipherStrategy(key).encrypt(cipher, message2, key, cfg);
                },
                decrypt: function(ciphertext, key, cfg) {
                  return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);
                }
              };
            };
          }()
        });
        var StreamCipher = C_lib.StreamCipher = Cipher.extend({
          _doFinalize: function() {
            var finalProcessedBlocks = this._process(true);
            return finalProcessedBlocks;
          },
          blockSize: 1
        });
        var C_mode = C.mode = {};
        var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({
          createEncryptor: function(cipher, iv) {
            return this.Encryptor.create(cipher, iv);
          },
          createDecryptor: function(cipher, iv) {
            return this.Decryptor.create(cipher, iv);
          },
          init: function(cipher, iv) {
            this._cipher = cipher;
            this._iv = iv;
          }
        });
        var CBC = C_mode.CBC = function() {
          var CBC2 = BlockCipherMode.extend();
          CBC2.Encryptor = CBC2.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              xorBlock.call(this, words2, offset, blockSize);
              cipher.encryptBlock(words2, offset);
              this._prevBlock = words2.slice(offset, offset + blockSize);
            }
          });
          CBC2.Decryptor = CBC2.extend({
            processBlock: function(words2, offset) {
              var cipher = this._cipher;
              var blockSize = cipher.blockSize;
              var thisBlock = words2.slice(offset, offset + blockSize);
              cipher.decryptBlock(words2, offset);
              xorBlock.call(this, words2, offset, blockSize);
              this._prevBlock = thisBlock;
            }
          });
          function xorBlock(words2, offset, blockSize) {
            var block;
            var iv = this._iv;
            if (iv) {
              block = iv;
              this._iv = undefined2;
            } else {
              block = this._prevBlock;
            }
            for (var i = 0; i < blockSize; i++) {
              words2[offset + i] ^= block[i];
            }
          }
          return CBC2;
        }();
        var C_pad = C.pad = {};
        var Pkcs7 = C_pad.Pkcs7 = {
          pad: function(data, blockSize) {
            var blockSizeBytes = blockSize * 4;
            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
            var paddingWord = nPaddingBytes << 24 | nPaddingBytes << 16 | nPaddingBytes << 8 | nPaddingBytes;
            var paddingWords = [];
            for (var i = 0; i < nPaddingBytes; i += 4) {
              paddingWords.push(paddingWord);
            }
            var padding = WordArray.create(paddingWords, nPaddingBytes);
            data.concat(padding);
          },
          unpad: function(data) {
            var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
            data.sigBytes -= nPaddingBytes;
          }
        };
        var BlockCipher = C_lib.BlockCipher = Cipher.extend({
          cfg: Cipher.cfg.extend({
            mode: CBC,
            padding: Pkcs7
          }),
          reset: function() {
            var modeCreator;
            Cipher.reset.call(this);
            var cfg = this.cfg;
            var iv = cfg.iv;
            var mode = cfg.mode;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              modeCreator = mode.createEncryptor;
            } else {
              modeCreator = mode.createDecryptor;
              this._minBufferSize = 1;
            }
            if (this._mode && this._mode.__creator == modeCreator) {
              this._mode.init(this, iv && iv.words);
            } else {
              this._mode = modeCreator.call(mode, this, iv && iv.words);
              this._mode.__creator = modeCreator;
            }
          },
          _doProcessBlock: function(words2, offset) {
            this._mode.processBlock(words2, offset);
          },
          _doFinalize: function() {
            var finalProcessedBlocks;
            var padding = this.cfg.padding;
            if (this._xformMode == this._ENC_XFORM_MODE) {
              padding.pad(this._data, this.blockSize);
              finalProcessedBlocks = this._process(true);
            } else {
              finalProcessedBlocks = this._process(true);
              padding.unpad(finalProcessedBlocks);
            }
            return finalProcessedBlocks;
          },
          blockSize: 128 / 32
        });
        var CipherParams = C_lib.CipherParams = Base.extend({
          init: function(cipherParams) {
            this.mixIn(cipherParams);
          },
          toString: function(formatter) {
            return (formatter || this.formatter).stringify(this);
          }
        });
        var C_format = C.format = {};
        var OpenSSLFormatter = C_format.OpenSSL = {
          stringify: function(cipherParams) {
            var wordArray;
            var ciphertext = cipherParams.ciphertext;
            var salt = cipherParams.salt;
            if (salt) {
              wordArray = WordArray.create([1398893684, 1701076831]).concat(salt).concat(ciphertext);
            } else {
              wordArray = ciphertext;
            }
            return wordArray.toString(Base64);
          },
          parse: function(openSSLStr) {
            var salt;
            var ciphertext = Base64.parse(openSSLStr);
            var ciphertextWords = ciphertext.words;
            if (ciphertextWords[0] == 1398893684 && ciphertextWords[1] == 1701076831) {
              salt = WordArray.create(ciphertextWords.slice(2, 4));
              ciphertextWords.splice(0, 4);
              ciphertext.sigBytes -= 16;
            }
            return CipherParams.create({ ciphertext, salt });
          }
        };
        var SerializableCipher = C_lib.SerializableCipher = Base.extend({
          cfg: Base.extend({
            format: OpenSSLFormatter
          }),
          encrypt: function(cipher, message2, key, cfg) {
            cfg = this.cfg.extend(cfg);
            var encryptor = cipher.createEncryptor(key, cfg);
            var ciphertext = encryptor.finalize(message2);
            var cipherCfg = encryptor.cfg;
            return CipherParams.create({
              ciphertext,
              key,
              iv: cipherCfg.iv,
              algorithm: cipher,
              mode: cipherCfg.mode,
              padding: cipherCfg.padding,
              blockSize: cipher.blockSize,
              formatter: cfg.format
            });
          },
          decrypt: function(cipher, ciphertext, key, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);
            return plaintext;
          },
          _parse: function(ciphertext, format2) {
            if (typeof ciphertext == "string") {
              return format2.parse(ciphertext, this);
            } else {
              return ciphertext;
            }
          }
        });
        var C_kdf = C.kdf = {};
        var OpenSSLKdf = C_kdf.OpenSSL = {
          execute: function(password, keySize, ivSize, salt) {
            if (!salt) {
              salt = WordArray.random(64 / 8);
            }
            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);
            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);
            key.sigBytes = keySize * 4;
            return CipherParams.create({ key, iv, salt });
          }
        };
        var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({
          cfg: SerializableCipher.cfg.extend({
            kdf: OpenSSLKdf
          }),
          encrypt: function(cipher, message2, password, cfg) {
            cfg = this.cfg.extend(cfg);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);
            cfg.iv = derivedParams.iv;
            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message2, derivedParams.key, cfg);
            ciphertext.mixIn(derivedParams);
            return ciphertext;
          },
          decrypt: function(cipher, ciphertext, password, cfg) {
            cfg = this.cfg.extend(cfg);
            ciphertext = this._parse(ciphertext, cfg.format);
            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);
            cfg.iv = derivedParams.iv;
            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);
            return plaintext;
          }
        });
      }();
    });
  }
});

// node_modules/crypto-js/mode-cfb.js
var require_mode_cfb = __commonJS({
  "node_modules/crypto-js/mode-cfb.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.CFB = function() {
        var CFB = CryptoJS2.lib.BlockCipherMode.extend();
        CFB.Encryptor = CFB.extend({
          processBlock: function(words2, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            generateKeystreamAndEncrypt.call(this, words2, offset, blockSize, cipher);
            this._prevBlock = words2.slice(offset, offset + blockSize);
          }
        });
        CFB.Decryptor = CFB.extend({
          processBlock: function(words2, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var thisBlock = words2.slice(offset, offset + blockSize);
            generateKeystreamAndEncrypt.call(this, words2, offset, blockSize, cipher);
            this._prevBlock = thisBlock;
          }
        });
        function generateKeystreamAndEncrypt(words2, offset, blockSize, cipher) {
          var keystream;
          var iv = this._iv;
          if (iv) {
            keystream = iv.slice(0);
            this._iv = void 0;
          } else {
            keystream = this._prevBlock;
          }
          cipher.encryptBlock(keystream, 0);
          for (var i = 0; i < blockSize; i++) {
            words2[offset + i] ^= keystream[i];
          }
        }
        return CFB;
      }();
      return CryptoJS2.mode.CFB;
    });
  }
});

// node_modules/crypto-js/mode-ctr.js
var require_mode_ctr = __commonJS({
  "node_modules/crypto-js/mode-ctr.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.CTR = function() {
        var CTR = CryptoJS2.lib.BlockCipherMode.extend();
        var Encryptor = CTR.Encryptor = CTR.extend({
          processBlock: function(words2, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            counter[blockSize - 1] = counter[blockSize - 1] + 1 | 0;
            for (var i = 0; i < blockSize; i++) {
              words2[offset + i] ^= keystream[i];
            }
          }
        });
        CTR.Decryptor = Encryptor;
        return CTR;
      }();
      return CryptoJS2.mode.CTR;
    });
  }
});

// node_modules/crypto-js/mode-ctr-gladman.js
var require_mode_ctr_gladman = __commonJS({
  "node_modules/crypto-js/mode-ctr-gladman.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.CTRGladman = function() {
        var CTRGladman = CryptoJS2.lib.BlockCipherMode.extend();
        function incWord(word) {
          if ((word >> 24 & 255) === 255) {
            var b1 = word >> 16 & 255;
            var b2 = word >> 8 & 255;
            var b3 = word & 255;
            if (b1 === 255) {
              b1 = 0;
              if (b2 === 255) {
                b2 = 0;
                if (b3 === 255) {
                  b3 = 0;
                } else {
                  ++b3;
                }
              } else {
                ++b2;
              }
            } else {
              ++b1;
            }
            word = 0;
            word += b1 << 16;
            word += b2 << 8;
            word += b3;
          } else {
            word += 1 << 24;
          }
          return word;
        }
        function incCounter(counter) {
          if ((counter[0] = incWord(counter[0])) === 0) {
            counter[1] = incWord(counter[1]);
          }
          return counter;
        }
        var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({
          processBlock: function(words2, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var counter = this._counter;
            if (iv) {
              counter = this._counter = iv.slice(0);
              this._iv = void 0;
            }
            incCounter(counter);
            var keystream = counter.slice(0);
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words2[offset + i] ^= keystream[i];
            }
          }
        });
        CTRGladman.Decryptor = Encryptor;
        return CTRGladman;
      }();
      return CryptoJS2.mode.CTRGladman;
    });
  }
});

// node_modules/crypto-js/mode-ofb.js
var require_mode_ofb = __commonJS({
  "node_modules/crypto-js/mode-ofb.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.OFB = function() {
        var OFB = CryptoJS2.lib.BlockCipherMode.extend();
        var Encryptor = OFB.Encryptor = OFB.extend({
          processBlock: function(words2, offset) {
            var cipher = this._cipher;
            var blockSize = cipher.blockSize;
            var iv = this._iv;
            var keystream = this._keystream;
            if (iv) {
              keystream = this._keystream = iv.slice(0);
              this._iv = void 0;
            }
            cipher.encryptBlock(keystream, 0);
            for (var i = 0; i < blockSize; i++) {
              words2[offset + i] ^= keystream[i];
            }
          }
        });
        OFB.Decryptor = Encryptor;
        return OFB;
      }();
      return CryptoJS2.mode.OFB;
    });
  }
});

// node_modules/crypto-js/mode-ecb.js
var require_mode_ecb = __commonJS({
  "node_modules/crypto-js/mode-ecb.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.mode.ECB = function() {
        var ECB = CryptoJS2.lib.BlockCipherMode.extend();
        ECB.Encryptor = ECB.extend({
          processBlock: function(words2, offset) {
            this._cipher.encryptBlock(words2, offset);
          }
        });
        ECB.Decryptor = ECB.extend({
          processBlock: function(words2, offset) {
            this._cipher.decryptBlock(words2, offset);
          }
        });
        return ECB;
      }();
      return CryptoJS2.mode.ECB;
    });
  }
});

// node_modules/crypto-js/pad-ansix923.js
var require_pad_ansix923 = __commonJS({
  "node_modules/crypto-js/pad-ansix923.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.AnsiX923 = {
        pad: function(data, blockSize) {
          var dataSigBytes = data.sigBytes;
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;
          var lastBytePos = dataSigBytes + nPaddingBytes - 1;
          data.clamp();
          data.words[lastBytePos >>> 2] |= nPaddingBytes << 24 - lastBytePos % 4 * 8;
          data.sigBytes += nPaddingBytes;
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS2.pad.Ansix923;
    });
  }
});

// node_modules/crypto-js/pad-iso10126.js
var require_pad_iso10126 = __commonJS({
  "node_modules/crypto-js/pad-iso10126.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.Iso10126 = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;
          data.concat(CryptoJS2.lib.WordArray.random(nPaddingBytes - 1)).concat(CryptoJS2.lib.WordArray.create([nPaddingBytes << 24], 1));
        },
        unpad: function(data) {
          var nPaddingBytes = data.words[data.sigBytes - 1 >>> 2] & 255;
          data.sigBytes -= nPaddingBytes;
        }
      };
      return CryptoJS2.pad.Iso10126;
    });
  }
});

// node_modules/crypto-js/pad-iso97971.js
var require_pad_iso97971 = __commonJS({
  "node_modules/crypto-js/pad-iso97971.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.Iso97971 = {
        pad: function(data, blockSize) {
          data.concat(CryptoJS2.lib.WordArray.create([2147483648], 1));
          CryptoJS2.pad.ZeroPadding.pad(data, blockSize);
        },
        unpad: function(data) {
          CryptoJS2.pad.ZeroPadding.unpad(data);
          data.sigBytes--;
        }
      };
      return CryptoJS2.pad.Iso97971;
    });
  }
});

// node_modules/crypto-js/pad-zeropadding.js
var require_pad_zeropadding = __commonJS({
  "node_modules/crypto-js/pad-zeropadding.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.ZeroPadding = {
        pad: function(data, blockSize) {
          var blockSizeBytes = blockSize * 4;
          data.clamp();
          data.sigBytes += blockSizeBytes - (data.sigBytes % blockSizeBytes || blockSizeBytes);
        },
        unpad: function(data) {
          var dataWords = data.words;
          var i = data.sigBytes - 1;
          for (var i = data.sigBytes - 1; i >= 0; i--) {
            if (dataWords[i >>> 2] >>> 24 - i % 4 * 8 & 255) {
              data.sigBytes = i + 1;
              break;
            }
          }
        }
      };
      return CryptoJS2.pad.ZeroPadding;
    });
  }
});

// node_modules/crypto-js/pad-nopadding.js
var require_pad_nopadding = __commonJS({
  "node_modules/crypto-js/pad-nopadding.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      CryptoJS2.pad.NoPadding = {
        pad: function() {
        },
        unpad: function() {
        }
      };
      return CryptoJS2.pad.NoPadding;
    });
  }
});

// node_modules/crypto-js/format-hex.js
var require_format_hex = __commonJS({
  "node_modules/crypto-js/format-hex.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function(undefined2) {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var CipherParams = C_lib.CipherParams;
        var C_enc = C.enc;
        var Hex = C_enc.Hex;
        var C_format = C.format;
        var HexFormatter = C_format.Hex = {
          stringify: function(cipherParams) {
            return cipherParams.ciphertext.toString(Hex);
          },
          parse: function(input) {
            var ciphertext = Hex.parse(input);
            return CipherParams.create({ ciphertext });
          }
        };
      })();
      return CryptoJS2.format.Hex;
    });
  }
});

// node_modules/crypto-js/aes.js
var require_aes = __commonJS({
  "node_modules/crypto-js/aes.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var SBOX = [];
        var INV_SBOX = [];
        var SUB_MIX_0 = [];
        var SUB_MIX_1 = [];
        var SUB_MIX_2 = [];
        var SUB_MIX_3 = [];
        var INV_SUB_MIX_0 = [];
        var INV_SUB_MIX_1 = [];
        var INV_SUB_MIX_2 = [];
        var INV_SUB_MIX_3 = [];
        (function() {
          var d = [];
          for (var i = 0; i < 256; i++) {
            if (i < 128) {
              d[i] = i << 1;
            } else {
              d[i] = i << 1 ^ 283;
            }
          }
          var x = 0;
          var xi = 0;
          for (var i = 0; i < 256; i++) {
            var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
            sx = sx >>> 8 ^ sx & 255 ^ 99;
            SBOX[x] = sx;
            INV_SBOX[sx] = x;
            var x2 = d[x];
            var x4 = d[x2];
            var x8 = d[x4];
            var t = d[sx] * 257 ^ sx * 16843008;
            SUB_MIX_0[x] = t << 24 | t >>> 8;
            SUB_MIX_1[x] = t << 16 | t >>> 16;
            SUB_MIX_2[x] = t << 8 | t >>> 24;
            SUB_MIX_3[x] = t;
            var t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
            INV_SUB_MIX_0[sx] = t << 24 | t >>> 8;
            INV_SUB_MIX_1[sx] = t << 16 | t >>> 16;
            INV_SUB_MIX_2[sx] = t << 8 | t >>> 24;
            INV_SUB_MIX_3[sx] = t;
            if (!x) {
              x = xi = 1;
            } else {
              x = x2 ^ d[d[d[x8 ^ x2]]];
              xi ^= d[d[xi]];
            }
          }
        })();
        var RCON = [0, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54];
        var AES2 = C_algo.AES = BlockCipher.extend({
          _doReset: function() {
            var t;
            if (this._nRounds && this._keyPriorReset === this._key) {
              return;
            }
            var key = this._keyPriorReset = this._key;
            var keyWords = key.words;
            var keySize = key.sigBytes / 4;
            var nRounds = this._nRounds = keySize + 6;
            var ksRows = (nRounds + 1) * 4;
            var keySchedule = this._keySchedule = [];
            for (var ksRow = 0; ksRow < ksRows; ksRow++) {
              if (ksRow < keySize) {
                keySchedule[ksRow] = keyWords[ksRow];
              } else {
                t = keySchedule[ksRow - 1];
                if (!(ksRow % keySize)) {
                  t = t << 8 | t >>> 24;
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                  t ^= RCON[ksRow / keySize | 0] << 24;
                } else if (keySize > 6 && ksRow % keySize == 4) {
                  t = SBOX[t >>> 24] << 24 | SBOX[t >>> 16 & 255] << 16 | SBOX[t >>> 8 & 255] << 8 | SBOX[t & 255];
                }
                keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;
              }
            }
            var invKeySchedule = this._invKeySchedule = [];
            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {
              var ksRow = ksRows - invKsRow;
              if (invKsRow % 4) {
                var t = keySchedule[ksRow];
              } else {
                var t = keySchedule[ksRow - 4];
              }
              if (invKsRow < 4 || ksRow <= 4) {
                invKeySchedule[invKsRow] = t;
              } else {
                invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[t >>> 16 & 255]] ^ INV_SUB_MIX_2[SBOX[t >>> 8 & 255]] ^ INV_SUB_MIX_3[SBOX[t & 255]];
              }
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);
          },
          decryptBlock: function(M, offset) {
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);
            var t = M[offset + 1];
            M[offset + 1] = M[offset + 3];
            M[offset + 3] = t;
          },
          _doCryptBlock: function(M, offset, keySchedule, SUB_MIX_02, SUB_MIX_12, SUB_MIX_22, SUB_MIX_32, SBOX2) {
            var nRounds = this._nRounds;
            var s0 = M[offset] ^ keySchedule[0];
            var s1 = M[offset + 1] ^ keySchedule[1];
            var s2 = M[offset + 2] ^ keySchedule[2];
            var s3 = M[offset + 3] ^ keySchedule[3];
            var ksRow = 4;
            for (var round = 1; round < nRounds; round++) {
              var t0 = SUB_MIX_02[s0 >>> 24] ^ SUB_MIX_12[s1 >>> 16 & 255] ^ SUB_MIX_22[s2 >>> 8 & 255] ^ SUB_MIX_32[s3 & 255] ^ keySchedule[ksRow++];
              var t1 = SUB_MIX_02[s1 >>> 24] ^ SUB_MIX_12[s2 >>> 16 & 255] ^ SUB_MIX_22[s3 >>> 8 & 255] ^ SUB_MIX_32[s0 & 255] ^ keySchedule[ksRow++];
              var t2 = SUB_MIX_02[s2 >>> 24] ^ SUB_MIX_12[s3 >>> 16 & 255] ^ SUB_MIX_22[s0 >>> 8 & 255] ^ SUB_MIX_32[s1 & 255] ^ keySchedule[ksRow++];
              var t3 = SUB_MIX_02[s3 >>> 24] ^ SUB_MIX_12[s0 >>> 16 & 255] ^ SUB_MIX_22[s1 >>> 8 & 255] ^ SUB_MIX_32[s2 & 255] ^ keySchedule[ksRow++];
              s0 = t0;
              s1 = t1;
              s2 = t2;
              s3 = t3;
            }
            var t0 = (SBOX2[s0 >>> 24] << 24 | SBOX2[s1 >>> 16 & 255] << 16 | SBOX2[s2 >>> 8 & 255] << 8 | SBOX2[s3 & 255]) ^ keySchedule[ksRow++];
            var t1 = (SBOX2[s1 >>> 24] << 24 | SBOX2[s2 >>> 16 & 255] << 16 | SBOX2[s3 >>> 8 & 255] << 8 | SBOX2[s0 & 255]) ^ keySchedule[ksRow++];
            var t2 = (SBOX2[s2 >>> 24] << 24 | SBOX2[s3 >>> 16 & 255] << 16 | SBOX2[s0 >>> 8 & 255] << 8 | SBOX2[s1 & 255]) ^ keySchedule[ksRow++];
            var t3 = (SBOX2[s3 >>> 24] << 24 | SBOX2[s0 >>> 16 & 255] << 16 | SBOX2[s1 >>> 8 & 255] << 8 | SBOX2[s2 & 255]) ^ keySchedule[ksRow++];
            M[offset] = t0;
            M[offset + 1] = t1;
            M[offset + 2] = t2;
            M[offset + 3] = t3;
          },
          keySize: 256 / 32
        });
        C.AES = BlockCipher._createHelper(AES2);
      })();
      return CryptoJS2.AES;
    });
  }
});

// node_modules/crypto-js/tripledes.js
var require_tripledes = __commonJS({
  "node_modules/crypto-js/tripledes.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var BlockCipher = C_lib.BlockCipher;
        var C_algo = C.algo;
        var PC1 = [
          57,
          49,
          41,
          33,
          25,
          17,
          9,
          1,
          58,
          50,
          42,
          34,
          26,
          18,
          10,
          2,
          59,
          51,
          43,
          35,
          27,
          19,
          11,
          3,
          60,
          52,
          44,
          36,
          63,
          55,
          47,
          39,
          31,
          23,
          15,
          7,
          62,
          54,
          46,
          38,
          30,
          22,
          14,
          6,
          61,
          53,
          45,
          37,
          29,
          21,
          13,
          5,
          28,
          20,
          12,
          4
        ];
        var PC2 = [
          14,
          17,
          11,
          24,
          1,
          5,
          3,
          28,
          15,
          6,
          21,
          10,
          23,
          19,
          12,
          4,
          26,
          8,
          16,
          7,
          27,
          20,
          13,
          2,
          41,
          52,
          31,
          37,
          47,
          55,
          30,
          40,
          51,
          45,
          33,
          48,
          44,
          49,
          39,
          56,
          34,
          53,
          46,
          42,
          50,
          36,
          29,
          32
        ];
        var BIT_SHIFTS = [1, 2, 4, 6, 8, 10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];
        var SBOX_P = [
          {
            0: 8421888,
            268435456: 32768,
            536870912: 8421378,
            805306368: 2,
            1073741824: 512,
            1342177280: 8421890,
            1610612736: 8389122,
            1879048192: 8388608,
            2147483648: 514,
            2415919104: 8389120,
            2684354560: 33280,
            2952790016: 8421376,
            3221225472: 32770,
            3489660928: 8388610,
            3758096384: 0,
            4026531840: 33282,
            134217728: 0,
            402653184: 8421890,
            671088640: 33282,
            939524096: 32768,
            1207959552: 8421888,
            1476395008: 512,
            1744830464: 8421378,
            2013265920: 2,
            2281701376: 8389120,
            2550136832: 33280,
            2818572288: 8421376,
            3087007744: 8389122,
            3355443200: 8388610,
            3623878656: 32770,
            3892314112: 514,
            4160749568: 8388608,
            1: 32768,
            268435457: 2,
            536870913: 8421888,
            805306369: 8388608,
            1073741825: 8421378,
            1342177281: 33280,
            1610612737: 512,
            1879048193: 8389122,
            2147483649: 8421890,
            2415919105: 8421376,
            2684354561: 8388610,
            2952790017: 33282,
            3221225473: 514,
            3489660929: 8389120,
            3758096385: 32770,
            4026531841: 0,
            134217729: 8421890,
            402653185: 8421376,
            671088641: 8388608,
            939524097: 512,
            1207959553: 32768,
            1476395009: 8388610,
            1744830465: 2,
            2013265921: 33282,
            2281701377: 32770,
            2550136833: 8389122,
            2818572289: 514,
            3087007745: 8421888,
            3355443201: 8389120,
            3623878657: 0,
            3892314113: 33280,
            4160749569: 8421378
          },
          {
            0: 1074282512,
            16777216: 16384,
            33554432: 524288,
            50331648: 1074266128,
            67108864: 1073741840,
            83886080: 1074282496,
            100663296: 1073758208,
            117440512: 16,
            134217728: 540672,
            150994944: 1073758224,
            167772160: 1073741824,
            184549376: 540688,
            201326592: 524304,
            218103808: 0,
            234881024: 16400,
            251658240: 1074266112,
            8388608: 1073758208,
            25165824: 540688,
            41943040: 16,
            58720256: 1073758224,
            75497472: 1074282512,
            92274688: 1073741824,
            109051904: 524288,
            125829120: 1074266128,
            142606336: 524304,
            159383552: 0,
            176160768: 16384,
            192937984: 1074266112,
            209715200: 1073741840,
            226492416: 540672,
            243269632: 1074282496,
            260046848: 16400,
            268435456: 0,
            285212672: 1074266128,
            301989888: 1073758224,
            318767104: 1074282496,
            335544320: 1074266112,
            352321536: 16,
            369098752: 540688,
            385875968: 16384,
            402653184: 16400,
            419430400: 524288,
            436207616: 524304,
            452984832: 1073741840,
            469762048: 540672,
            486539264: 1073758208,
            503316480: 1073741824,
            520093696: 1074282512,
            276824064: 540688,
            293601280: 524288,
            310378496: 1074266112,
            327155712: 16384,
            343932928: 1073758208,
            360710144: 1074282512,
            377487360: 16,
            394264576: 1073741824,
            411041792: 1074282496,
            427819008: 1073741840,
            444596224: 1073758224,
            461373440: 524304,
            478150656: 0,
            494927872: 16400,
            511705088: 1074266128,
            528482304: 540672
          },
          {
            0: 260,
            1048576: 0,
            2097152: 67109120,
            3145728: 65796,
            4194304: 65540,
            5242880: 67108868,
            6291456: 67174660,
            7340032: 67174400,
            8388608: 67108864,
            9437184: 67174656,
            10485760: 65792,
            11534336: 67174404,
            12582912: 67109124,
            13631488: 65536,
            14680064: 4,
            15728640: 256,
            524288: 67174656,
            1572864: 67174404,
            2621440: 0,
            3670016: 67109120,
            4718592: 67108868,
            5767168: 65536,
            6815744: 65540,
            7864320: 260,
            8912896: 4,
            9961472: 256,
            11010048: 67174400,
            12058624: 65796,
            13107200: 65792,
            14155776: 67109124,
            15204352: 67174660,
            16252928: 67108864,
            16777216: 67174656,
            17825792: 65540,
            18874368: 65536,
            19922944: 67109120,
            20971520: 256,
            22020096: 67174660,
            23068672: 67108868,
            24117248: 0,
            25165824: 67109124,
            26214400: 67108864,
            27262976: 4,
            28311552: 65792,
            29360128: 67174400,
            30408704: 260,
            31457280: 65796,
            32505856: 67174404,
            17301504: 67108864,
            18350080: 260,
            19398656: 67174656,
            20447232: 0,
            21495808: 65540,
            22544384: 67109120,
            23592960: 256,
            24641536: 67174404,
            25690112: 65536,
            26738688: 67174660,
            27787264: 65796,
            28835840: 67108868,
            29884416: 67109124,
            30932992: 67174400,
            31981568: 4,
            33030144: 65792
          },
          {
            0: 2151682048,
            65536: 2147487808,
            131072: 4198464,
            196608: 2151677952,
            262144: 0,
            327680: 4198400,
            393216: 2147483712,
            458752: 4194368,
            524288: 2147483648,
            589824: 4194304,
            655360: 64,
            720896: 2147487744,
            786432: 2151678016,
            851968: 4160,
            917504: 4096,
            983040: 2151682112,
            32768: 2147487808,
            98304: 64,
            163840: 2151678016,
            229376: 2147487744,
            294912: 4198400,
            360448: 2151682112,
            425984: 0,
            491520: 2151677952,
            557056: 4096,
            622592: 2151682048,
            688128: 4194304,
            753664: 4160,
            819200: 2147483648,
            884736: 4194368,
            950272: 4198464,
            1015808: 2147483712,
            1048576: 4194368,
            1114112: 4198400,
            1179648: 2147483712,
            1245184: 0,
            1310720: 4160,
            1376256: 2151678016,
            1441792: 2151682048,
            1507328: 2147487808,
            1572864: 2151682112,
            1638400: 2147483648,
            1703936: 2151677952,
            1769472: 4198464,
            1835008: 2147487744,
            1900544: 4194304,
            1966080: 64,
            2031616: 4096,
            1081344: 2151677952,
            1146880: 2151682112,
            1212416: 0,
            1277952: 4198400,
            1343488: 4194368,
            1409024: 2147483648,
            1474560: 2147487808,
            1540096: 64,
            1605632: 2147483712,
            1671168: 4096,
            1736704: 2147487744,
            1802240: 2151678016,
            1867776: 4160,
            1933312: 2151682048,
            1998848: 4194304,
            2064384: 4198464
          },
          {
            0: 128,
            4096: 17039360,
            8192: 262144,
            12288: 536870912,
            16384: 537133184,
            20480: 16777344,
            24576: 553648256,
            28672: 262272,
            32768: 16777216,
            36864: 537133056,
            40960: 536871040,
            45056: 553910400,
            49152: 553910272,
            53248: 0,
            57344: 17039488,
            61440: 553648128,
            2048: 17039488,
            6144: 553648256,
            10240: 128,
            14336: 17039360,
            18432: 262144,
            22528: 537133184,
            26624: 553910272,
            30720: 536870912,
            34816: 537133056,
            38912: 0,
            43008: 553910400,
            47104: 16777344,
            51200: 536871040,
            55296: 553648128,
            59392: 16777216,
            63488: 262272,
            65536: 262144,
            69632: 128,
            73728: 536870912,
            77824: 553648256,
            81920: 16777344,
            86016: 553910272,
            90112: 537133184,
            94208: 16777216,
            98304: 553910400,
            102400: 553648128,
            106496: 17039360,
            110592: 537133056,
            114688: 262272,
            118784: 536871040,
            122880: 0,
            126976: 17039488,
            67584: 553648256,
            71680: 16777216,
            75776: 17039360,
            79872: 537133184,
            83968: 536870912,
            88064: 17039488,
            92160: 128,
            96256: 553910272,
            100352: 262272,
            104448: 553910400,
            108544: 0,
            112640: 553648128,
            116736: 16777344,
            120832: 262144,
            124928: 537133056,
            129024: 536871040
          },
          {
            0: 268435464,
            256: 8192,
            512: 270532608,
            768: 270540808,
            1024: 268443648,
            1280: 2097152,
            1536: 2097160,
            1792: 268435456,
            2048: 0,
            2304: 268443656,
            2560: 2105344,
            2816: 8,
            3072: 270532616,
            3328: 2105352,
            3584: 8200,
            3840: 270540800,
            128: 270532608,
            384: 270540808,
            640: 8,
            896: 2097152,
            1152: 2105352,
            1408: 268435464,
            1664: 268443648,
            1920: 8200,
            2176: 2097160,
            2432: 8192,
            2688: 268443656,
            2944: 270532616,
            3200: 0,
            3456: 270540800,
            3712: 2105344,
            3968: 268435456,
            4096: 268443648,
            4352: 270532616,
            4608: 270540808,
            4864: 8200,
            5120: 2097152,
            5376: 268435456,
            5632: 268435464,
            5888: 2105344,
            6144: 2105352,
            6400: 0,
            6656: 8,
            6912: 270532608,
            7168: 8192,
            7424: 268443656,
            7680: 270540800,
            7936: 2097160,
            4224: 8,
            4480: 2105344,
            4736: 2097152,
            4992: 268435464,
            5248: 268443648,
            5504: 8200,
            5760: 270540808,
            6016: 270532608,
            6272: 270540800,
            6528: 270532616,
            6784: 8192,
            7040: 2105352,
            7296: 2097160,
            7552: 0,
            7808: 268435456,
            8064: 268443656
          },
          {
            0: 1048576,
            16: 33555457,
            32: 1024,
            48: 1049601,
            64: 34604033,
            80: 0,
            96: 1,
            112: 34603009,
            128: 33555456,
            144: 1048577,
            160: 33554433,
            176: 34604032,
            192: 34603008,
            208: 1025,
            224: 1049600,
            240: 33554432,
            8: 34603009,
            24: 0,
            40: 33555457,
            56: 34604032,
            72: 1048576,
            88: 33554433,
            104: 33554432,
            120: 1025,
            136: 1049601,
            152: 33555456,
            168: 34603008,
            184: 1048577,
            200: 1024,
            216: 34604033,
            232: 1,
            248: 1049600,
            256: 33554432,
            272: 1048576,
            288: 33555457,
            304: 34603009,
            320: 1048577,
            336: 33555456,
            352: 34604032,
            368: 1049601,
            384: 1025,
            400: 34604033,
            416: 1049600,
            432: 1,
            448: 0,
            464: 34603008,
            480: 33554433,
            496: 1024,
            264: 1049600,
            280: 33555457,
            296: 34603009,
            312: 1,
            328: 33554432,
            344: 1048576,
            360: 1025,
            376: 34604032,
            392: 33554433,
            408: 34603008,
            424: 0,
            440: 34604033,
            456: 1049601,
            472: 1024,
            488: 33555456,
            504: 1048577
          },
          {
            0: 134219808,
            1: 131072,
            2: 134217728,
            3: 32,
            4: 131104,
            5: 134350880,
            6: 134350848,
            7: 2048,
            8: 134348800,
            9: 134219776,
            10: 133120,
            11: 134348832,
            12: 2080,
            13: 0,
            14: 134217760,
            15: 133152,
            2147483648: 2048,
            2147483649: 134350880,
            2147483650: 134219808,
            2147483651: 134217728,
            2147483652: 134348800,
            2147483653: 133120,
            2147483654: 133152,
            2147483655: 32,
            2147483656: 134217760,
            2147483657: 2080,
            2147483658: 131104,
            2147483659: 134350848,
            2147483660: 0,
            2147483661: 134348832,
            2147483662: 134219776,
            2147483663: 131072,
            16: 133152,
            17: 134350848,
            18: 32,
            19: 2048,
            20: 134219776,
            21: 134217760,
            22: 134348832,
            23: 131072,
            24: 0,
            25: 131104,
            26: 134348800,
            27: 134219808,
            28: 134350880,
            29: 133120,
            30: 2080,
            31: 134217728,
            2147483664: 131072,
            2147483665: 2048,
            2147483666: 134348832,
            2147483667: 133152,
            2147483668: 32,
            2147483669: 134348800,
            2147483670: 134217728,
            2147483671: 134219808,
            2147483672: 134350880,
            2147483673: 134217760,
            2147483674: 134219776,
            2147483675: 0,
            2147483676: 133120,
            2147483677: 2080,
            2147483678: 131104,
            2147483679: 134350848
          }
        ];
        var SBOX_MASK = [
          4160749569,
          528482304,
          33030144,
          2064384,
          129024,
          8064,
          504,
          2147483679
        ];
        var DES = C_algo.DES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keyBits = [];
            for (var i = 0; i < 56; i++) {
              var keyBitPos = PC1[i] - 1;
              keyBits[i] = keyWords[keyBitPos >>> 5] >>> 31 - keyBitPos % 32 & 1;
            }
            var subKeys = this._subKeys = [];
            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {
              var subKey = subKeys[nSubKey] = [];
              var bitShift = BIT_SHIFTS[nSubKey];
              for (var i = 0; i < 24; i++) {
                subKey[i / 6 | 0] |= keyBits[(PC2[i] - 1 + bitShift) % 28] << 31 - i % 6;
                subKey[4 + (i / 6 | 0)] |= keyBits[28 + (PC2[i + 24] - 1 + bitShift) % 28] << 31 - i % 6;
              }
              subKey[0] = subKey[0] << 1 | subKey[0] >>> 31;
              for (var i = 1; i < 7; i++) {
                subKey[i] = subKey[i] >>> (i - 1) * 4 + 3;
              }
              subKey[7] = subKey[7] << 5 | subKey[7] >>> 27;
            }
            var invSubKeys = this._invSubKeys = [];
            for (var i = 0; i < 16; i++) {
              invSubKeys[i] = subKeys[15 - i];
            }
          },
          encryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._subKeys);
          },
          decryptBlock: function(M, offset) {
            this._doCryptBlock(M, offset, this._invSubKeys);
          },
          _doCryptBlock: function(M, offset, subKeys) {
            this._lBlock = M[offset];
            this._rBlock = M[offset + 1];
            exchangeLR.call(this, 4, 252645135);
            exchangeLR.call(this, 16, 65535);
            exchangeRL.call(this, 2, 858993459);
            exchangeRL.call(this, 8, 16711935);
            exchangeLR.call(this, 1, 1431655765);
            for (var round = 0; round < 16; round++) {
              var subKey = subKeys[round];
              var lBlock = this._lBlock;
              var rBlock = this._rBlock;
              var f = 0;
              for (var i = 0; i < 8; i++) {
                f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];
              }
              this._lBlock = rBlock;
              this._rBlock = lBlock ^ f;
            }
            var t = this._lBlock;
            this._lBlock = this._rBlock;
            this._rBlock = t;
            exchangeLR.call(this, 1, 1431655765);
            exchangeRL.call(this, 8, 16711935);
            exchangeRL.call(this, 2, 858993459);
            exchangeLR.call(this, 16, 65535);
            exchangeLR.call(this, 4, 252645135);
            M[offset] = this._lBlock;
            M[offset + 1] = this._rBlock;
          },
          keySize: 64 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        function exchangeLR(offset, mask) {
          var t = (this._lBlock >>> offset ^ this._rBlock) & mask;
          this._rBlock ^= t;
          this._lBlock ^= t << offset;
        }
        function exchangeRL(offset, mask) {
          var t = (this._rBlock >>> offset ^ this._lBlock) & mask;
          this._lBlock ^= t;
          this._rBlock ^= t << offset;
        }
        C.DES = BlockCipher._createHelper(DES);
        var TripleDES = C_algo.TripleDES = BlockCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            if (keyWords.length !== 2 && keyWords.length !== 4 && keyWords.length < 6) {
              throw new Error("Invalid key length - 3DES requires the key length to be 64, 128, 192 or >192.");
            }
            var key1 = keyWords.slice(0, 2);
            var key2 = keyWords.length < 4 ? keyWords.slice(0, 2) : keyWords.slice(2, 4);
            var key3 = keyWords.length < 6 ? keyWords.slice(0, 2) : keyWords.slice(4, 6);
            this._des1 = DES.createEncryptor(WordArray.create(key1));
            this._des2 = DES.createEncryptor(WordArray.create(key2));
            this._des3 = DES.createEncryptor(WordArray.create(key3));
          },
          encryptBlock: function(M, offset) {
            this._des1.encryptBlock(M, offset);
            this._des2.decryptBlock(M, offset);
            this._des3.encryptBlock(M, offset);
          },
          decryptBlock: function(M, offset) {
            this._des3.decryptBlock(M, offset);
            this._des2.encryptBlock(M, offset);
            this._des1.decryptBlock(M, offset);
          },
          keySize: 192 / 32,
          ivSize: 64 / 32,
          blockSize: 64 / 32
        });
        C.TripleDES = BlockCipher._createHelper(TripleDES);
      })();
      return CryptoJS2.TripleDES;
    });
  }
});

// node_modules/crypto-js/rc4.js
var require_rc4 = __commonJS({
  "node_modules/crypto-js/rc4.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var RC4 = C_algo.RC4 = StreamCipher.extend({
          _doReset: function() {
            var key = this._key;
            var keyWords = key.words;
            var keySigBytes = key.sigBytes;
            var S = this._S = [];
            for (var i = 0; i < 256; i++) {
              S[i] = i;
            }
            for (var i = 0, j = 0; i < 256; i++) {
              var keyByteIndex = i % keySigBytes;
              var keyByte = keyWords[keyByteIndex >>> 2] >>> 24 - keyByteIndex % 4 * 8 & 255;
              j = (j + S[i] + keyByte) % 256;
              var t = S[i];
              S[i] = S[j];
              S[j] = t;
            }
            this._i = this._j = 0;
          },
          _doProcessBlock: function(M, offset) {
            M[offset] ^= generateKeystreamWord.call(this);
          },
          keySize: 256 / 32,
          ivSize: 0
        });
        function generateKeystreamWord() {
          var S = this._S;
          var i = this._i;
          var j = this._j;
          var keystreamWord = 0;
          for (var n = 0; n < 4; n++) {
            i = (i + 1) % 256;
            j = (j + S[i]) % 256;
            var t = S[i];
            S[i] = S[j];
            S[j] = t;
            keystreamWord |= S[(S[i] + S[j]) % 256] << 24 - n * 8;
          }
          this._i = i;
          this._j = j;
          return keystreamWord;
        }
        C.RC4 = StreamCipher._createHelper(RC4);
        var RC4Drop = C_algo.RC4Drop = RC4.extend({
          cfg: RC4.cfg.extend({
            drop: 192
          }),
          _doReset: function() {
            RC4._doReset.call(this);
            for (var i = this.cfg.drop; i > 0; i--) {
              generateKeystreamWord.call(this);
            }
          }
        });
        C.RC4Drop = StreamCipher._createHelper(RC4Drop);
      })();
      return CryptoJS2.RC4;
    });
  }
});

// node_modules/crypto-js/rabbit.js
var require_rabbit = __commonJS({
  "node_modules/crypto-js/rabbit.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var Rabbit = C_algo.Rabbit = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            for (var i = 0; i < 4; i++) {
              K[i] = (K[i] << 8 | K[i] >>> 24) & 16711935 | (K[i] << 24 | K[i] >>> 8) & 4278255360;
            }
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.Rabbit = StreamCipher._createHelper(Rabbit);
      })();
      return CryptoJS2.Rabbit;
    });
  }
});

// node_modules/crypto-js/rabbit-legacy.js
var require_rabbit_legacy = __commonJS({
  "node_modules/crypto-js/rabbit-legacy.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_enc_base64(), require_md5(), require_evpkdf(), require_cipher_core());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./enc-base64", "./md5", "./evpkdf", "./cipher-core"], factory2);
      } else {
        factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      (function() {
        var C = CryptoJS2;
        var C_lib = C.lib;
        var StreamCipher = C_lib.StreamCipher;
        var C_algo = C.algo;
        var S = [];
        var C_ = [];
        var G = [];
        var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({
          _doReset: function() {
            var K = this._key.words;
            var iv = this.cfg.iv;
            var X = this._X = [
              K[0],
              K[3] << 16 | K[2] >>> 16,
              K[1],
              K[0] << 16 | K[3] >>> 16,
              K[2],
              K[1] << 16 | K[0] >>> 16,
              K[3],
              K[2] << 16 | K[1] >>> 16
            ];
            var C2 = this._C = [
              K[2] << 16 | K[2] >>> 16,
              K[0] & 4294901760 | K[1] & 65535,
              K[3] << 16 | K[3] >>> 16,
              K[1] & 4294901760 | K[2] & 65535,
              K[0] << 16 | K[0] >>> 16,
              K[2] & 4294901760 | K[3] & 65535,
              K[1] << 16 | K[1] >>> 16,
              K[3] & 4294901760 | K[0] & 65535
            ];
            this._b = 0;
            for (var i = 0; i < 4; i++) {
              nextState.call(this);
            }
            for (var i = 0; i < 8; i++) {
              C2[i] ^= X[i + 4 & 7];
            }
            if (iv) {
              var IV = iv.words;
              var IV_0 = IV[0];
              var IV_1 = IV[1];
              var i0 = (IV_0 << 8 | IV_0 >>> 24) & 16711935 | (IV_0 << 24 | IV_0 >>> 8) & 4278255360;
              var i2 = (IV_1 << 8 | IV_1 >>> 24) & 16711935 | (IV_1 << 24 | IV_1 >>> 8) & 4278255360;
              var i1 = i0 >>> 16 | i2 & 4294901760;
              var i3 = i2 << 16 | i0 & 65535;
              C2[0] ^= i0;
              C2[1] ^= i1;
              C2[2] ^= i2;
              C2[3] ^= i3;
              C2[4] ^= i0;
              C2[5] ^= i1;
              C2[6] ^= i2;
              C2[7] ^= i3;
              for (var i = 0; i < 4; i++) {
                nextState.call(this);
              }
            }
          },
          _doProcessBlock: function(M, offset) {
            var X = this._X;
            nextState.call(this);
            S[0] = X[0] ^ X[5] >>> 16 ^ X[3] << 16;
            S[1] = X[2] ^ X[7] >>> 16 ^ X[5] << 16;
            S[2] = X[4] ^ X[1] >>> 16 ^ X[7] << 16;
            S[3] = X[6] ^ X[3] >>> 16 ^ X[1] << 16;
            for (var i = 0; i < 4; i++) {
              S[i] = (S[i] << 8 | S[i] >>> 24) & 16711935 | (S[i] << 24 | S[i] >>> 8) & 4278255360;
              M[offset + i] ^= S[i];
            }
          },
          blockSize: 128 / 32,
          ivSize: 64 / 32
        });
        function nextState() {
          var X = this._X;
          var C2 = this._C;
          for (var i = 0; i < 8; i++) {
            C_[i] = C2[i];
          }
          C2[0] = C2[0] + 1295307597 + this._b | 0;
          C2[1] = C2[1] + 3545052371 + (C2[0] >>> 0 < C_[0] >>> 0 ? 1 : 0) | 0;
          C2[2] = C2[2] + 886263092 + (C2[1] >>> 0 < C_[1] >>> 0 ? 1 : 0) | 0;
          C2[3] = C2[3] + 1295307597 + (C2[2] >>> 0 < C_[2] >>> 0 ? 1 : 0) | 0;
          C2[4] = C2[4] + 3545052371 + (C2[3] >>> 0 < C_[3] >>> 0 ? 1 : 0) | 0;
          C2[5] = C2[5] + 886263092 + (C2[4] >>> 0 < C_[4] >>> 0 ? 1 : 0) | 0;
          C2[6] = C2[6] + 1295307597 + (C2[5] >>> 0 < C_[5] >>> 0 ? 1 : 0) | 0;
          C2[7] = C2[7] + 3545052371 + (C2[6] >>> 0 < C_[6] >>> 0 ? 1 : 0) | 0;
          this._b = C2[7] >>> 0 < C_[7] >>> 0 ? 1 : 0;
          for (var i = 0; i < 8; i++) {
            var gx = X[i] + C2[i];
            var ga = gx & 65535;
            var gb = gx >>> 16;
            var gh = ((ga * ga >>> 17) + ga * gb >>> 15) + gb * gb;
            var gl = ((gx & 4294901760) * gx | 0) + ((gx & 65535) * gx | 0);
            G[i] = gh ^ gl;
          }
          X[0] = G[0] + (G[7] << 16 | G[7] >>> 16) + (G[6] << 16 | G[6] >>> 16) | 0;
          X[1] = G[1] + (G[0] << 8 | G[0] >>> 24) + G[7] | 0;
          X[2] = G[2] + (G[1] << 16 | G[1] >>> 16) + (G[0] << 16 | G[0] >>> 16) | 0;
          X[3] = G[3] + (G[2] << 8 | G[2] >>> 24) + G[1] | 0;
          X[4] = G[4] + (G[3] << 16 | G[3] >>> 16) + (G[2] << 16 | G[2] >>> 16) | 0;
          X[5] = G[5] + (G[4] << 8 | G[4] >>> 24) + G[3] | 0;
          X[6] = G[6] + (G[5] << 16 | G[5] >>> 16) + (G[4] << 16 | G[4] >>> 16) | 0;
          X[7] = G[7] + (G[6] << 8 | G[6] >>> 24) + G[5] | 0;
        }
        C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);
      })();
      return CryptoJS2.RabbitLegacy;
    });
  }
});

// node_modules/crypto-js/index.js
var require_crypto_js = __commonJS({
  "node_modules/crypto-js/index.js"(exports, module2) {
    init_shims();
    (function(root2, factory2, undef) {
      if (typeof exports === "object") {
        module2.exports = exports = factory2(require_core(), require_x64_core(), require_lib_typedarrays(), require_enc_utf16(), require_enc_base64(), require_enc_base64url(), require_md5(), require_sha1(), require_sha256(), require_sha224(), require_sha512(), require_sha384(), require_sha3(), require_ripemd160(), require_hmac(), require_pbkdf2(), require_evpkdf(), require_cipher_core(), require_mode_cfb(), require_mode_ctr(), require_mode_ctr_gladman(), require_mode_ofb(), require_mode_ecb(), require_pad_ansix923(), require_pad_iso10126(), require_pad_iso97971(), require_pad_zeropadding(), require_pad_nopadding(), require_format_hex(), require_aes(), require_tripledes(), require_rc4(), require_rabbit(), require_rabbit_legacy());
      } else if (typeof define === "function" && define.amd) {
        define(["./core", "./x64-core", "./lib-typedarrays", "./enc-utf16", "./enc-base64", "./enc-base64url", "./md5", "./sha1", "./sha256", "./sha224", "./sha512", "./sha384", "./sha3", "./ripemd160", "./hmac", "./pbkdf2", "./evpkdf", "./cipher-core", "./mode-cfb", "./mode-ctr", "./mode-ctr-gladman", "./mode-ofb", "./mode-ecb", "./pad-ansix923", "./pad-iso10126", "./pad-iso97971", "./pad-zeropadding", "./pad-nopadding", "./format-hex", "./aes", "./tripledes", "./rc4", "./rabbit", "./rabbit-legacy"], factory2);
      } else {
        root2.CryptoJS = factory2(root2.CryptoJS);
      }
    })(exports, function(CryptoJS2) {
      return CryptoJS2;
    });
  }
});

// node_modules/tslib/tslib.js
var require_tslib = __commonJS({
  "node_modules/tslib/tslib.js"(exports, module2) {
    init_shims();
    var __extends;
    var __assign;
    var __rest2;
    var __decorate;
    var __param;
    var __metadata;
    var __awaiter2;
    var __generator2;
    var __exportStar;
    var __values2;
    var __read2;
    var __spread;
    var __spreadArrays;
    var __spreadArray2;
    var __await;
    var __asyncGenerator;
    var __asyncDelegator;
    var __asyncValues;
    var __makeTemplateObject;
    var __importStar;
    var __importDefault;
    var __classPrivateFieldGet;
    var __classPrivateFieldSet;
    var __createBinding;
    (function(factory2) {
      var root2 = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};
      if (typeof define === "function" && define.amd) {
        define("tslib", ["exports"], function(exports2) {
          factory2(createExporter(root2, createExporter(exports2)));
        });
      } else if (typeof module2 === "object" && typeof module2.exports === "object") {
        factory2(createExporter(root2, createExporter(module2.exports)));
      } else {
        factory2(createExporter(root2));
      }
      function createExporter(exports2, previous) {
        if (exports2 !== root2) {
          if (typeof Object.create === "function") {
            Object.defineProperty(exports2, "__esModule", { value: true });
          } else {
            exports2.__esModule = true;
          }
        }
        return function(id, v) {
          return exports2[id] = previous ? previous(id, v) : v;
        };
      }
    })(function(exporter) {
      var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
        d.__proto__ = b;
      } || function(d, b) {
        for (var p in b)
          if (Object.prototype.hasOwnProperty.call(b, p))
            d[p] = b[p];
      };
      __extends = function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
      __assign = Object.assign || function(t) {
        for (var s2, i = 1, n = arguments.length; i < n; i++) {
          s2 = arguments[i];
          for (var p in s2)
            if (Object.prototype.hasOwnProperty.call(s2, p))
              t[p] = s2[p];
        }
        return t;
      };
      __rest2 = function(s2, e) {
        var t = {};
        for (var p in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
            t[p] = s2[p];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
          for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
              t[p[i]] = s2[p[i]];
          }
        return t;
      };
      __decorate = function(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
          r = Reflect.decorate(decorators, target, key, desc);
        else
          for (var i = decorators.length - 1; i >= 0; i--)
            if (d = decorators[i])
              r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
      };
      __param = function(paramIndex, decorator) {
        return function(target, key) {
          decorator(target, key, paramIndex);
        };
      };
      __metadata = function(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
          return Reflect.metadata(metadataKey, metadataValue);
      };
      __awaiter2 = function(thisArg, _arguments, P, generator) {
        function adopt(value) {
          return value instanceof P ? value : new P(function(resolve6) {
            resolve6(value);
          });
        }
        return new (P || (P = Promise))(function(resolve6, reject) {
          function fulfilled(value) {
            try {
              step(generator.next(value));
            } catch (e) {
              reject(e);
            }
          }
          function rejected(value) {
            try {
              step(generator["throw"](value));
            } catch (e) {
              reject(e);
            }
          }
          function step(result) {
            result.done ? resolve6(result.value) : adopt(result.value).then(fulfilled, rejected);
          }
          step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
      };
      __generator2 = function(thisArg, body) {
        var _ = { label: 0, sent: function() {
          if (t[0] & 1)
            throw t[1];
          return t[1];
        }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
          return this;
        }), g;
        function verb(n) {
          return function(v) {
            return step([n, v]);
          };
        }
        function step(op) {
          if (f)
            throw new TypeError("Generator is already executing.");
          while (_)
            try {
              if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                return t;
              if (y = 0, t)
                op = [op[0] & 2, t.value];
              switch (op[0]) {
                case 0:
                case 1:
                  t = op;
                  break;
                case 4:
                  _.label++;
                  return { value: op[1], done: false };
                case 5:
                  _.label++;
                  y = op[1];
                  op = [0];
                  continue;
                case 7:
                  op = _.ops.pop();
                  _.trys.pop();
                  continue;
                default:
                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                    _ = 0;
                    continue;
                  }
                  if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                    _.label = op[1];
                    break;
                  }
                  if (op[0] === 6 && _.label < t[1]) {
                    _.label = t[1];
                    t = op;
                    break;
                  }
                  if (t && _.label < t[2]) {
                    _.label = t[2];
                    _.ops.push(op);
                    break;
                  }
                  if (t[2])
                    _.ops.pop();
                  _.trys.pop();
                  continue;
              }
              op = body.call(thisArg, _);
            } catch (e) {
              op = [6, e];
              y = 0;
            } finally {
              f = t = 0;
            }
          if (op[0] & 5)
            throw op[1];
          return { value: op[0] ? op[1] : void 0, done: true };
        }
      };
      __exportStar = function(m, o) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
            __createBinding(o, m, p);
      };
      __createBinding = Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function() {
          return m[k];
        } });
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      };
      __values2 = function(o) {
        var s2 = typeof Symbol === "function" && Symbol.iterator, m = s2 && o[s2], i = 0;
        if (m)
          return m.call(o);
        if (o && typeof o.length === "number")
          return {
            next: function() {
              if (o && i >= o.length)
                o = void 0;
              return { value: o && o[i++], done: !o };
            }
          };
        throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
      };
      __read2 = function(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
          return o;
        var i = m.call(o), r, ar = [], e;
        try {
          while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
            ar.push(r.value);
        } catch (error2) {
          e = { error: error2 };
        } finally {
          try {
            if (r && !r.done && (m = i["return"]))
              m.call(i);
          } finally {
            if (e)
              throw e.error;
          }
        }
        return ar;
      };
      __spread = function() {
        for (var ar = [], i = 0; i < arguments.length; i++)
          ar = ar.concat(__read2(arguments[i]));
        return ar;
      };
      __spreadArrays = function() {
        for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
          s2 += arguments[i].length;
        for (var r = Array(s2), k = 0, i = 0; i < il; i++)
          for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
        return r;
      };
      __spreadArray2 = function(to, from2, pack) {
        if (pack || arguments.length === 2)
          for (var i = 0, l = from2.length, ar; i < l; i++) {
            if (ar || !(i in from2)) {
              if (!ar)
                ar = Array.prototype.slice.call(from2, 0, i);
              ar[i] = from2[i];
            }
          }
        return to.concat(ar || Array.prototype.slice.call(from2));
      };
      __await = function(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
      };
      __asyncGenerator = function(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i;
        function verb(n) {
          if (g[n])
            i[n] = function(v) {
              return new Promise(function(a, b) {
                q.push([n, v, a, b]) > 1 || resume(n, v);
              });
            };
        }
        function resume(n, v) {
          try {
            step(g[n](v));
          } catch (e) {
            settle(q[0][3], e);
          }
        }
        function step(r) {
          r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
        }
        function fulfill(value) {
          resume("next", value);
        }
        function reject(value) {
          resume("throw", value);
        }
        function settle(f, v) {
          if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]);
        }
      };
      __asyncDelegator = function(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function(e) {
          throw e;
        }), verb("return"), i[Symbol.iterator] = function() {
          return this;
        }, i;
        function verb(n, f) {
          i[n] = o[n] ? function(v) {
            return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
          } : f;
        }
      };
      __asyncValues = function(o) {
        if (!Symbol.asyncIterator)
          throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
          return this;
        }, i);
        function verb(n) {
          i[n] = o[n] && function(v) {
            return new Promise(function(resolve6, reject) {
              v = o[n](v), settle(resolve6, reject, v.done, v.value);
            });
          };
        }
        function settle(resolve6, reject, d, v) {
          Promise.resolve(v).then(function(v2) {
            resolve6({ value: v2, done: d });
          }, reject);
        }
      };
      __makeTemplateObject = function(cooked, raw) {
        if (Object.defineProperty) {
          Object.defineProperty(cooked, "raw", { value: raw });
        } else {
          cooked.raw = raw;
        }
        return cooked;
      };
      var __setModuleDefault = Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      };
      __importStar = function(mod2) {
        if (mod2 && mod2.__esModule)
          return mod2;
        var result = {};
        if (mod2 != null) {
          for (var k in mod2)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
              __createBinding(result, mod2, k);
        }
        __setModuleDefault(result, mod2);
        return result;
      };
      __importDefault = function(mod2) {
        return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
      };
      __classPrivateFieldGet = function(receiver, state, kind, f) {
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
      };
      __classPrivateFieldSet = function(receiver, state, value, kind, f) {
        if (kind === "m")
          throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
          throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
          throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
      };
      exporter("__extends", __extends);
      exporter("__assign", __assign);
      exporter("__rest", __rest2);
      exporter("__decorate", __decorate);
      exporter("__param", __param);
      exporter("__metadata", __metadata);
      exporter("__awaiter", __awaiter2);
      exporter("__generator", __generator2);
      exporter("__exportStar", __exportStar);
      exporter("__createBinding", __createBinding);
      exporter("__values", __values2);
      exporter("__read", __read2);
      exporter("__spread", __spread);
      exporter("__spreadArrays", __spreadArrays);
      exporter("__spreadArray", __spreadArray2);
      exporter("__await", __await);
      exporter("__asyncGenerator", __asyncGenerator);
      exporter("__asyncDelegator", __asyncDelegator);
      exporter("__asyncValues", __asyncValues);
      exporter("__makeTemplateObject", __makeTemplateObject);
      exporter("__importStar", __importStar);
      exporter("__importDefault", __importDefault);
      exporter("__classPrivateFieldGet", __classPrivateFieldGet);
      exporter("__classPrivateFieldSet", __classPrivateFieldSet);
    });
  }
});

// node_modules/@firebase/util/dist/index.node.cjs.js
var require_index_node_cjs = __commonJS({
  "node_modules/@firebase/util/dist/index.node.cjs.js"(exports) {
    init_shims();
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib2 = require_tslib();
    var CONSTANTS2 = {
      NODE_CLIENT: false,
      NODE_ADMIN: false,
      SDK_VERSION: "${JSCORE_VERSION}"
    };
    var assert2 = function(assertion, message2) {
      if (!assertion) {
        throw assertionError2(message2);
      }
    };
    var assertionError2 = function(message2) {
      return new Error("Firebase Database (" + CONSTANTS2.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + message2);
    };
    var stringToByteArray$12 = function(str) {
      var out = [];
      var p = 0;
      for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
          out[p++] = c;
        } else if (c < 2048) {
          out[p++] = c >> 6 | 192;
          out[p++] = c & 63 | 128;
        } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
          c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
          out[p++] = c >> 18 | 240;
          out[p++] = c >> 12 & 63 | 128;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        } else {
          out[p++] = c >> 12 | 224;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        }
      }
      return out;
    };
    var byteArrayToString2 = function(bytes) {
      var out = [];
      var pos = 0, c = 0;
      while (pos < bytes.length) {
        var c1 = bytes[pos++];
        if (c1 < 128) {
          out[c++] = String.fromCharCode(c1);
        } else if (c1 > 191 && c1 < 224) {
          var c2 = bytes[pos++];
          out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
        } else if (c1 > 239 && c1 < 365) {
          var c2 = bytes[pos++];
          var c3 = bytes[pos++];
          var c4 = bytes[pos++];
          var u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
          out[c++] = String.fromCharCode(55296 + (u >> 10));
          out[c++] = String.fromCharCode(56320 + (u & 1023));
        } else {
          var c2 = bytes[pos++];
          var c3 = bytes[pos++];
          out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
        }
      }
      return out.join("");
    };
    var base642 = {
      byteToCharMap_: null,
      charToByteMap_: null,
      byteToCharMapWebSafe_: null,
      charToByteMapWebSafe_: null,
      ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
      get ENCODED_VALS() {
        return this.ENCODED_VALS_BASE + "+/=";
      },
      get ENCODED_VALS_WEBSAFE() {
        return this.ENCODED_VALS_BASE + "-_.";
      },
      HAS_NATIVE_SUPPORT: typeof atob === "function",
      encodeByteArray: function(input, webSafe) {
        if (!Array.isArray(input)) {
          throw Error("encodeByteArray takes an array as a parameter");
        }
        this.init_();
        var byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
        var output = [];
        for (var i = 0; i < input.length; i += 3) {
          var byte1 = input[i];
          var haveByte2 = i + 1 < input.length;
          var byte2 = haveByte2 ? input[i + 1] : 0;
          var haveByte3 = i + 2 < input.length;
          var byte3 = haveByte3 ? input[i + 2] : 0;
          var outByte1 = byte1 >> 2;
          var outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
          var outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
          var outByte4 = byte3 & 63;
          if (!haveByte3) {
            outByte4 = 64;
            if (!haveByte2) {
              outByte3 = 64;
            }
          }
          output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
        }
        return output.join("");
      },
      encodeString: function(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return btoa(input);
        }
        return this.encodeByteArray(stringToByteArray$12(input), webSafe);
      },
      decodeString: function(input, webSafe) {
        if (this.HAS_NATIVE_SUPPORT && !webSafe) {
          return atob(input);
        }
        return byteArrayToString2(this.decodeStringToByteArray(input, webSafe));
      },
      decodeStringToByteArray: function(input, webSafe) {
        this.init_();
        var charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
        var output = [];
        for (var i = 0; i < input.length; ) {
          var byte1 = charToByteMap[input.charAt(i++)];
          var haveByte2 = i < input.length;
          var byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
          ++i;
          var haveByte3 = i < input.length;
          var byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
          ++i;
          var haveByte4 = i < input.length;
          var byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
          ++i;
          if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
            throw Error();
          }
          var outByte1 = byte1 << 2 | byte2 >> 4;
          output.push(outByte1);
          if (byte3 !== 64) {
            var outByte2 = byte2 << 4 & 240 | byte3 >> 2;
            output.push(outByte2);
            if (byte4 !== 64) {
              var outByte3 = byte3 << 6 & 192 | byte4;
              output.push(outByte3);
            }
          }
        }
        return output;
      },
      init_: function() {
        if (!this.byteToCharMap_) {
          this.byteToCharMap_ = {};
          this.charToByteMap_ = {};
          this.byteToCharMapWebSafe_ = {};
          this.charToByteMapWebSafe_ = {};
          for (var i = 0; i < this.ENCODED_VALS.length; i++) {
            this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
            this.charToByteMap_[this.byteToCharMap_[i]] = i;
            this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
            this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
            if (i >= this.ENCODED_VALS_BASE.length) {
              this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
              this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
            }
          }
        }
      }
    };
    var base64Encode2 = function(str) {
      var utf8Bytes = stringToByteArray$12(str);
      return base642.encodeByteArray(utf8Bytes, true);
    };
    var base64urlEncodeWithoutPadding2 = function(str) {
      return base64Encode2(str).replace(/\./g, "");
    };
    var base64Decode2 = function(str) {
      try {
        return base642.decodeString(str, true);
      } catch (e) {
        console.error("base64Decode failed: ", e);
      }
      return null;
    };
    function deepCopy2(value) {
      return deepExtend2(void 0, value);
    }
    function deepExtend2(target, source) {
      if (!(source instanceof Object)) {
        return source;
      }
      switch (source.constructor) {
        case Date:
          var dateValue = source;
          return new Date(dateValue.getTime());
        case Object:
          if (target === void 0) {
            target = {};
          }
          break;
        case Array:
          target = [];
          break;
        default:
          return source;
      }
      for (var prop in source) {
        if (!source.hasOwnProperty(prop) || !isValidKey2(prop)) {
          continue;
        }
        target[prop] = deepExtend2(target[prop], source[prop]);
      }
      return target;
    }
    function isValidKey2(key) {
      return key !== "__proto__";
    }
    var Deferred2 = function() {
      function Deferred3() {
        var _this = this;
        this.reject = function() {
        };
        this.resolve = function() {
        };
        this.promise = new Promise(function(resolve6, reject) {
          _this.resolve = resolve6;
          _this.reject = reject;
        });
      }
      Deferred3.prototype.wrapCallback = function(callback) {
        var _this = this;
        return function(error2, value) {
          if (error2) {
            _this.reject(error2);
          } else {
            _this.resolve(value);
          }
          if (typeof callback === "function") {
            _this.promise.catch(function() {
            });
            if (callback.length === 1) {
              callback(error2);
            } else {
              callback(error2, value);
            }
          }
        };
      };
      return Deferred3;
    }();
    function createMockUserToken2(token, projectId) {
      if (token.uid) {
        throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
      }
      var header = {
        alg: "none",
        type: "JWT"
      };
      var project = projectId || "demo-project";
      var iat = token.iat || 0;
      var sub = token.sub || token.user_id;
      if (!sub) {
        throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
      }
      var payload = tslib2.__assign({
        iss: "https://securetoken.google.com/" + project,
        aud: project,
        iat,
        exp: iat + 3600,
        auth_time: iat,
        sub,
        user_id: sub,
        firebase: {
          sign_in_provider: "custom",
          identities: {}
        }
      }, token);
      var signature = "";
      return [
        base64urlEncodeWithoutPadding2(JSON.stringify(header)),
        base64urlEncodeWithoutPadding2(JSON.stringify(payload)),
        signature
      ].join(".");
    }
    function getUA2() {
      if (typeof navigator !== "undefined" && typeof navigator["userAgent"] === "string") {
        return navigator["userAgent"];
      } else {
        return "";
      }
    }
    function isMobileCordova2() {
      return typeof window !== "undefined" && !!(window["cordova"] || window["phonegap"] || window["PhoneGap"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA2());
    }
    function isNode2() {
      try {
        return Object.prototype.toString.call(global.process) === "[object process]";
      } catch (e) {
        return false;
      }
    }
    function isBrowser2() {
      return typeof self === "object" && self.self === self;
    }
    function isBrowserExtension2() {
      var runtime = typeof chrome === "object" ? chrome.runtime : typeof browser === "object" ? browser.runtime : void 0;
      return typeof runtime === "object" && runtime.id !== void 0;
    }
    function isReactNative2() {
      return typeof navigator === "object" && navigator["product"] === "ReactNative";
    }
    function isElectron2() {
      return getUA2().indexOf("Electron/") >= 0;
    }
    function isIE2() {
      var ua = getUA2();
      return ua.indexOf("MSIE ") >= 0 || ua.indexOf("Trident/") >= 0;
    }
    function isUWP2() {
      return getUA2().indexOf("MSAppHost/") >= 0;
    }
    function isNodeSdk2() {
      return CONSTANTS2.NODE_CLIENT === true || CONSTANTS2.NODE_ADMIN === true;
    }
    function isSafari2() {
      return !isNode2() && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome");
    }
    function isIndexedDBAvailable2() {
      return typeof indexedDB === "object";
    }
    function validateIndexedDBOpenable2() {
      return new Promise(function(resolve6, reject) {
        try {
          var preExist_1 = true;
          var DB_CHECK_NAME_1 = "validate-browser-context-for-indexeddb-analytics-module";
          var request_1 = self.indexedDB.open(DB_CHECK_NAME_1);
          request_1.onsuccess = function() {
            request_1.result.close();
            if (!preExist_1) {
              self.indexedDB.deleteDatabase(DB_CHECK_NAME_1);
            }
            resolve6(true);
          };
          request_1.onupgradeneeded = function() {
            preExist_1 = false;
          };
          request_1.onerror = function() {
            var _a;
            reject(((_a = request_1.error) === null || _a === void 0 ? void 0 : _a.message) || "");
          };
        } catch (error2) {
          reject(error2);
        }
      });
    }
    function areCookiesEnabled2() {
      if (typeof navigator === "undefined" || !navigator.cookieEnabled) {
        return false;
      }
      return true;
    }
    function getGlobal2() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("Unable to locate global object.");
    }
    var ERROR_NAME2 = "FirebaseError";
    var FirebaseError2 = function(_super) {
      tslib2.__extends(FirebaseError3, _super);
      function FirebaseError3(code, message2, customData) {
        var _this = _super.call(this, message2) || this;
        _this.code = code;
        _this.customData = customData;
        _this.name = ERROR_NAME2;
        Object.setPrototypeOf(_this, FirebaseError3.prototype);
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_this, ErrorFactory2.prototype.create);
        }
        return _this;
      }
      return FirebaseError3;
    }(Error);
    var ErrorFactory2 = function() {
      function ErrorFactory3(service2, serviceName, errors) {
        this.service = service2;
        this.serviceName = serviceName;
        this.errors = errors;
      }
      ErrorFactory3.prototype.create = function(code) {
        var data = [];
        for (var _i = 1; _i < arguments.length; _i++) {
          data[_i - 1] = arguments[_i];
        }
        var customData = data[0] || {};
        var fullCode = this.service + "/" + code;
        var template2 = this.errors[code];
        var message2 = template2 ? replaceTemplate2(template2, customData) : "Error";
        var fullMessage = this.serviceName + ": " + message2 + " (" + fullCode + ").";
        var error2 = new FirebaseError2(fullCode, fullMessage, customData);
        return error2;
      };
      return ErrorFactory3;
    }();
    function replaceTemplate2(template2, data) {
      return template2.replace(PATTERN2, function(_, key) {
        var value = data[key];
        return value != null ? String(value) : "<" + key + "?>";
      });
    }
    var PATTERN2 = /\{\$([^}]+)}/g;
    function jsonEval2(str) {
      return JSON.parse(str);
    }
    function stringify2(data) {
      return JSON.stringify(data);
    }
    var decode3 = function(token) {
      var header = {}, claims = {}, data = {}, signature = "";
      try {
        var parts = token.split(".");
        header = jsonEval2(base64Decode2(parts[0]) || "");
        claims = jsonEval2(base64Decode2(parts[1]) || "");
        signature = parts[2];
        data = claims["d"] || {};
        delete claims["d"];
      } catch (e) {
      }
      return {
        header,
        claims,
        data,
        signature
      };
    };
    var isValidTimestamp2 = function(token) {
      var claims = decode3(token).claims;
      var now = Math.floor(new Date().getTime() / 1e3);
      var validSince = 0, validUntil = 0;
      if (typeof claims === "object") {
        if (claims.hasOwnProperty("nbf")) {
          validSince = claims["nbf"];
        } else if (claims.hasOwnProperty("iat")) {
          validSince = claims["iat"];
        }
        if (claims.hasOwnProperty("exp")) {
          validUntil = claims["exp"];
        } else {
          validUntil = validSince + 86400;
        }
      }
      return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
    };
    var issuedAtTime2 = function(token) {
      var claims = decode3(token).claims;
      if (typeof claims === "object" && claims.hasOwnProperty("iat")) {
        return claims["iat"];
      }
      return null;
    };
    var isValidFormat2 = function(token) {
      var decoded = decode3(token), claims = decoded.claims;
      return !!claims && typeof claims === "object" && claims.hasOwnProperty("iat");
    };
    var isAdmin2 = function(token) {
      var claims = decode3(token).claims;
      return typeof claims === "object" && claims["admin"] === true;
    };
    function contains2(obj, key) {
      return Object.prototype.hasOwnProperty.call(obj, key);
    }
    function safeGet2(obj, key) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        return obj[key];
      } else {
        return void 0;
      }
    }
    function isEmpty2(obj) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          return false;
        }
      }
      return true;
    }
    function map2(obj, fn, contextObj) {
      var res = {};
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          res[key] = fn.call(contextObj, obj[key], key, obj);
        }
      }
      return res;
    }
    function deepEqual2(a, b) {
      if (a === b) {
        return true;
      }
      var aKeys = Object.keys(a);
      var bKeys = Object.keys(b);
      for (var _i = 0, aKeys_1 = aKeys; _i < aKeys_1.length; _i++) {
        var k = aKeys_1[_i];
        if (!bKeys.includes(k)) {
          return false;
        }
        var aProp = a[k];
        var bProp = b[k];
        if (isObject2(aProp) && isObject2(bProp)) {
          if (!deepEqual2(aProp, bProp)) {
            return false;
          }
        } else if (aProp !== bProp) {
          return false;
        }
      }
      for (var _a = 0, bKeys_1 = bKeys; _a < bKeys_1.length; _a++) {
        var k = bKeys_1[_a];
        if (!aKeys.includes(k)) {
          return false;
        }
      }
      return true;
    }
    function isObject2(thing) {
      return thing !== null && typeof thing === "object";
    }
    function querystring2(querystringParams) {
      var params = [];
      var _loop_1 = function(key2, value2) {
        if (Array.isArray(value2)) {
          value2.forEach(function(arrayVal) {
            params.push(encodeURIComponent(key2) + "=" + encodeURIComponent(arrayVal));
          });
        } else {
          params.push(encodeURIComponent(key2) + "=" + encodeURIComponent(value2));
        }
      };
      for (var _i = 0, _a = Object.entries(querystringParams); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        _loop_1(key, value);
      }
      return params.length ? "&" + params.join("&") : "";
    }
    function querystringDecode2(querystring3) {
      var obj = {};
      var tokens = querystring3.replace(/^\?/, "").split("&");
      tokens.forEach(function(token) {
        if (token) {
          var _a = token.split("="), key = _a[0], value = _a[1];
          obj[decodeURIComponent(key)] = decodeURIComponent(value);
        }
      });
      return obj;
    }
    function extractQuerystring2(url) {
      var queryStart = url.indexOf("?");
      if (!queryStart) {
        return "";
      }
      var fragmentStart = url.indexOf("#", queryStart);
      return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : void 0);
    }
    var Sha12 = function() {
      function Sha13() {
        this.chain_ = [];
        this.buf_ = [];
        this.W_ = [];
        this.pad_ = [];
        this.inbuf_ = 0;
        this.total_ = 0;
        this.blockSize = 512 / 8;
        this.pad_[0] = 128;
        for (var i = 1; i < this.blockSize; ++i) {
          this.pad_[i] = 0;
        }
        this.reset();
      }
      Sha13.prototype.reset = function() {
        this.chain_[0] = 1732584193;
        this.chain_[1] = 4023233417;
        this.chain_[2] = 2562383102;
        this.chain_[3] = 271733878;
        this.chain_[4] = 3285377520;
        this.inbuf_ = 0;
        this.total_ = 0;
      };
      Sha13.prototype.compress_ = function(buf, offset) {
        if (!offset) {
          offset = 0;
        }
        var W = this.W_;
        if (typeof buf === "string") {
          for (var i = 0; i < 16; i++) {
            W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
            offset += 4;
          }
        } else {
          for (var i = 0; i < 16; i++) {
            W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
            offset += 4;
          }
        }
        for (var i = 16; i < 80; i++) {
          var t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
          W[i] = (t << 1 | t >>> 31) & 4294967295;
        }
        var a = this.chain_[0];
        var b = this.chain_[1];
        var c = this.chain_[2];
        var d = this.chain_[3];
        var e = this.chain_[4];
        var f, k;
        for (var i = 0; i < 80; i++) {
          if (i < 40) {
            if (i < 20) {
              f = d ^ b & (c ^ d);
              k = 1518500249;
            } else {
              f = b ^ c ^ d;
              k = 1859775393;
            }
          } else {
            if (i < 60) {
              f = b & c | d & (b | c);
              k = 2400959708;
            } else {
              f = b ^ c ^ d;
              k = 3395469782;
            }
          }
          var t = (a << 5 | a >>> 27) + f + e + k + W[i] & 4294967295;
          e = d;
          d = c;
          c = (b << 30 | b >>> 2) & 4294967295;
          b = a;
          a = t;
        }
        this.chain_[0] = this.chain_[0] + a & 4294967295;
        this.chain_[1] = this.chain_[1] + b & 4294967295;
        this.chain_[2] = this.chain_[2] + c & 4294967295;
        this.chain_[3] = this.chain_[3] + d & 4294967295;
        this.chain_[4] = this.chain_[4] + e & 4294967295;
      };
      Sha13.prototype.update = function(bytes, length2) {
        if (bytes == null) {
          return;
        }
        if (length2 === void 0) {
          length2 = bytes.length;
        }
        var lengthMinusBlock = length2 - this.blockSize;
        var n = 0;
        var buf = this.buf_;
        var inbuf = this.inbuf_;
        while (n < length2) {
          if (inbuf === 0) {
            while (n <= lengthMinusBlock) {
              this.compress_(bytes, n);
              n += this.blockSize;
            }
          }
          if (typeof bytes === "string") {
            while (n < length2) {
              buf[inbuf] = bytes.charCodeAt(n);
              ++inbuf;
              ++n;
              if (inbuf === this.blockSize) {
                this.compress_(buf);
                inbuf = 0;
                break;
              }
            }
          } else {
            while (n < length2) {
              buf[inbuf] = bytes[n];
              ++inbuf;
              ++n;
              if (inbuf === this.blockSize) {
                this.compress_(buf);
                inbuf = 0;
                break;
              }
            }
          }
        }
        this.inbuf_ = inbuf;
        this.total_ += length2;
      };
      Sha13.prototype.digest = function() {
        var digest = [];
        var totalBits = this.total_ * 8;
        if (this.inbuf_ < 56) {
          this.update(this.pad_, 56 - this.inbuf_);
        } else {
          this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
        }
        for (var i = this.blockSize - 1; i >= 56; i--) {
          this.buf_[i] = totalBits & 255;
          totalBits /= 256;
        }
        this.compress_(this.buf_);
        var n = 0;
        for (var i = 0; i < 5; i++) {
          for (var j = 24; j >= 0; j -= 8) {
            digest[n] = this.chain_[i] >> j & 255;
            ++n;
          }
        }
        return digest;
      };
      return Sha13;
    }();
    function createSubscribe2(executor, onNoObservers) {
      var proxy = new ObserverProxy2(executor, onNoObservers);
      return proxy.subscribe.bind(proxy);
    }
    var ObserverProxy2 = function() {
      function ObserverProxy3(executor, onNoObservers) {
        var _this = this;
        this.observers = [];
        this.unsubscribes = [];
        this.observerCount = 0;
        this.task = Promise.resolve();
        this.finalized = false;
        this.onNoObservers = onNoObservers;
        this.task.then(function() {
          executor(_this);
        }).catch(function(e) {
          _this.error(e);
        });
      }
      ObserverProxy3.prototype.next = function(value) {
        this.forEachObserver(function(observer) {
          observer.next(value);
        });
      };
      ObserverProxy3.prototype.error = function(error2) {
        this.forEachObserver(function(observer) {
          observer.error(error2);
        });
        this.close(error2);
      };
      ObserverProxy3.prototype.complete = function() {
        this.forEachObserver(function(observer) {
          observer.complete();
        });
        this.close();
      };
      ObserverProxy3.prototype.subscribe = function(nextOrObserver, error2, complete) {
        var _this = this;
        var observer;
        if (nextOrObserver === void 0 && error2 === void 0 && complete === void 0) {
          throw new Error("Missing Observer.");
        }
        if (implementsAnyMethods2(nextOrObserver, [
          "next",
          "error",
          "complete"
        ])) {
          observer = nextOrObserver;
        } else {
          observer = {
            next: nextOrObserver,
            error: error2,
            complete
          };
        }
        if (observer.next === void 0) {
          observer.next = noop2;
        }
        if (observer.error === void 0) {
          observer.error = noop2;
        }
        if (observer.complete === void 0) {
          observer.complete = noop2;
        }
        var unsub = this.unsubscribeOne.bind(this, this.observers.length);
        if (this.finalized) {
          this.task.then(function() {
            try {
              if (_this.finalError) {
                observer.error(_this.finalError);
              } else {
                observer.complete();
              }
            } catch (e) {
            }
            return;
          });
        }
        this.observers.push(observer);
        return unsub;
      };
      ObserverProxy3.prototype.unsubscribeOne = function(i) {
        if (this.observers === void 0 || this.observers[i] === void 0) {
          return;
        }
        delete this.observers[i];
        this.observerCount -= 1;
        if (this.observerCount === 0 && this.onNoObservers !== void 0) {
          this.onNoObservers(this);
        }
      };
      ObserverProxy3.prototype.forEachObserver = function(fn) {
        if (this.finalized) {
          return;
        }
        for (var i = 0; i < this.observers.length; i++) {
          this.sendOne(i, fn);
        }
      };
      ObserverProxy3.prototype.sendOne = function(i, fn) {
        var _this = this;
        this.task.then(function() {
          if (_this.observers !== void 0 && _this.observers[i] !== void 0) {
            try {
              fn(_this.observers[i]);
            } catch (e) {
              if (typeof console !== "undefined" && console.error) {
                console.error(e);
              }
            }
          }
        });
      };
      ObserverProxy3.prototype.close = function(err) {
        var _this = this;
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        if (err !== void 0) {
          this.finalError = err;
        }
        this.task.then(function() {
          _this.observers = void 0;
          _this.onNoObservers = void 0;
        });
      };
      return ObserverProxy3;
    }();
    function async2(fn, onError) {
      return function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        Promise.resolve(true).then(function() {
          fn.apply(void 0, args);
        }).catch(function(error2) {
          if (onError) {
            onError(error2);
          }
        });
      };
    }
    function implementsAnyMethods2(obj, methods) {
      if (typeof obj !== "object" || obj === null) {
        return false;
      }
      for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
        var method2 = methods_1[_i];
        if (method2 in obj && typeof obj[method2] === "function") {
          return true;
        }
      }
      return false;
    }
    function noop2() {
    }
    var validateArgCount2 = function(fnName, minCount, maxCount, argCount) {
      var argError;
      if (argCount < minCount) {
        argError = "at least " + minCount;
      } else if (argCount > maxCount) {
        argError = maxCount === 0 ? "none" : "no more than " + maxCount;
      }
      if (argError) {
        var error2 = fnName + " failed: Was called with " + argCount + (argCount === 1 ? " argument." : " arguments.") + " Expects " + argError + ".";
        throw new Error(error2);
      }
    };
    function errorPrefix2(fnName, argName) {
      return fnName + " failed: " + argName + " argument ";
    }
    function validateNamespace2(fnName, namespace2, optional) {
      if (optional && !namespace2) {
        return;
      }
      if (typeof namespace2 !== "string") {
        throw new Error(errorPrefix2(fnName, "namespace") + "must be a valid firebase namespace.");
      }
    }
    function validateCallback2(fnName, argumentName, callback, optional) {
      if (optional && !callback) {
        return;
      }
      if (typeof callback !== "function") {
        throw new Error(errorPrefix2(fnName, argumentName) + "must be a valid function.");
      }
    }
    function validateContextObject2(fnName, argumentName, context, optional) {
      if (optional && !context) {
        return;
      }
      if (typeof context !== "object" || context === null) {
        throw new Error(errorPrefix2(fnName, argumentName) + "must be a valid context object.");
      }
    }
    var stringToByteArray2 = function(str) {
      var out = [];
      var p = 0;
      for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c >= 55296 && c <= 56319) {
          var high = c - 55296;
          i++;
          assert2(i < str.length, "Surrogate pair missing trail surrogate.");
          var low = str.charCodeAt(i) - 56320;
          c = 65536 + (high << 10) + low;
        }
        if (c < 128) {
          out[p++] = c;
        } else if (c < 2048) {
          out[p++] = c >> 6 | 192;
          out[p++] = c & 63 | 128;
        } else if (c < 65536) {
          out[p++] = c >> 12 | 224;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        } else {
          out[p++] = c >> 18 | 240;
          out[p++] = c >> 12 & 63 | 128;
          out[p++] = c >> 6 & 63 | 128;
          out[p++] = c & 63 | 128;
        }
      }
      return out;
    };
    var stringLength2 = function(str) {
      var p = 0;
      for (var i = 0; i < str.length; i++) {
        var c = str.charCodeAt(i);
        if (c < 128) {
          p++;
        } else if (c < 2048) {
          p += 2;
        } else if (c >= 55296 && c <= 56319) {
          p += 4;
          i++;
        } else {
          p += 3;
        }
      }
      return p;
    };
    var DEFAULT_INTERVAL_MILLIS2 = 1e3;
    var DEFAULT_BACKOFF_FACTOR2 = 2;
    var MAX_VALUE_MILLIS2 = 4 * 60 * 60 * 1e3;
    var RANDOM_FACTOR2 = 0.5;
    function calculateBackoffMillis2(backoffCount, intervalMillis, backoffFactor) {
      if (intervalMillis === void 0) {
        intervalMillis = DEFAULT_INTERVAL_MILLIS2;
      }
      if (backoffFactor === void 0) {
        backoffFactor = DEFAULT_BACKOFF_FACTOR2;
      }
      var currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
      var randomWait = Math.round(RANDOM_FACTOR2 * currBaseValue * (Math.random() - 0.5) * 2);
      return Math.min(MAX_VALUE_MILLIS2, currBaseValue + randomWait);
    }
    function ordinal2(i) {
      if (!Number.isFinite(i)) {
        return "" + i;
      }
      return i + indicator2(i);
    }
    function indicator2(i) {
      i = Math.abs(i);
      var cent = i % 100;
      if (cent >= 10 && cent <= 20) {
        return "th";
      }
      var dec = i % 10;
      if (dec === 1) {
        return "st";
      }
      if (dec === 2) {
        return "nd";
      }
      if (dec === 3) {
        return "rd";
      }
      return "th";
    }
    function getModularInstance2(service2) {
      if (service2 && service2._delegate) {
        return service2._delegate;
      } else {
        return service2;
      }
    }
    CONSTANTS2.NODE_CLIENT = true;
    exports.CONSTANTS = CONSTANTS2;
    exports.Deferred = Deferred2;
    exports.ErrorFactory = ErrorFactory2;
    exports.FirebaseError = FirebaseError2;
    exports.MAX_VALUE_MILLIS = MAX_VALUE_MILLIS2;
    exports.RANDOM_FACTOR = RANDOM_FACTOR2;
    exports.Sha1 = Sha12;
    exports.areCookiesEnabled = areCookiesEnabled2;
    exports.assert = assert2;
    exports.assertionError = assertionError2;
    exports.async = async2;
    exports.base64 = base642;
    exports.base64Decode = base64Decode2;
    exports.base64Encode = base64Encode2;
    exports.base64urlEncodeWithoutPadding = base64urlEncodeWithoutPadding2;
    exports.calculateBackoffMillis = calculateBackoffMillis2;
    exports.contains = contains2;
    exports.createMockUserToken = createMockUserToken2;
    exports.createSubscribe = createSubscribe2;
    exports.decode = decode3;
    exports.deepCopy = deepCopy2;
    exports.deepEqual = deepEqual2;
    exports.deepExtend = deepExtend2;
    exports.errorPrefix = errorPrefix2;
    exports.extractQuerystring = extractQuerystring2;
    exports.getGlobal = getGlobal2;
    exports.getModularInstance = getModularInstance2;
    exports.getUA = getUA2;
    exports.isAdmin = isAdmin2;
    exports.isBrowser = isBrowser2;
    exports.isBrowserExtension = isBrowserExtension2;
    exports.isElectron = isElectron2;
    exports.isEmpty = isEmpty2;
    exports.isIE = isIE2;
    exports.isIndexedDBAvailable = isIndexedDBAvailable2;
    exports.isMobileCordova = isMobileCordova2;
    exports.isNode = isNode2;
    exports.isNodeSdk = isNodeSdk2;
    exports.isReactNative = isReactNative2;
    exports.isSafari = isSafari2;
    exports.isUWP = isUWP2;
    exports.isValidFormat = isValidFormat2;
    exports.isValidTimestamp = isValidTimestamp2;
    exports.issuedAtTime = issuedAtTime2;
    exports.jsonEval = jsonEval2;
    exports.map = map2;
    exports.ordinal = ordinal2;
    exports.querystring = querystring2;
    exports.querystringDecode = querystringDecode2;
    exports.safeGet = safeGet2;
    exports.stringLength = stringLength2;
    exports.stringToByteArray = stringToByteArray2;
    exports.stringify = stringify2;
    exports.validateArgCount = validateArgCount2;
    exports.validateCallback = validateCallback2;
    exports.validateContextObject = validateContextObject2;
    exports.validateIndexedDBOpenable = validateIndexedDBOpenable2;
    exports.validateNamespace = validateNamespace2;
  }
});

// node_modules/@firebase/component/dist/index.cjs.js
var require_index_cjs = __commonJS({
  "node_modules/@firebase/component/dist/index.cjs.js"(exports) {
    init_shims();
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib2 = require_tslib();
    var util2 = require_index_node_cjs();
    var Component2 = function() {
      function Component3(name2, instanceFactory, type2) {
        this.name = name2;
        this.instanceFactory = instanceFactory;
        this.type = type2;
        this.multipleInstances = false;
        this.serviceProps = {};
        this.instantiationMode = "LAZY";
        this.onInstanceCreated = null;
      }
      Component3.prototype.setInstantiationMode = function(mode) {
        this.instantiationMode = mode;
        return this;
      };
      Component3.prototype.setMultipleInstances = function(multipleInstances) {
        this.multipleInstances = multipleInstances;
        return this;
      };
      Component3.prototype.setServiceProps = function(props) {
        this.serviceProps = props;
        return this;
      };
      Component3.prototype.setInstanceCreatedCallback = function(callback) {
        this.onInstanceCreated = callback;
        return this;
      };
      return Component3;
    }();
    var DEFAULT_ENTRY_NAME2 = "[DEFAULT]";
    var Provider2 = function() {
      function Provider3(name2, container) {
        this.name = name2;
        this.container = container;
        this.component = null;
        this.instances = new Map();
        this.instancesDeferred = new Map();
        this.instancesOptions = new Map();
        this.onInitCallbacks = new Map();
      }
      Provider3.prototype.get = function(identifier) {
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        if (!this.instancesDeferred.has(normalizedIdentifier)) {
          var deferred = new util2.Deferred();
          this.instancesDeferred.set(normalizedIdentifier, deferred);
          if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
            try {
              var instance = this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
              });
              if (instance) {
                deferred.resolve(instance);
              }
            } catch (e) {
            }
          }
        }
        return this.instancesDeferred.get(normalizedIdentifier).promise;
      };
      Provider3.prototype.getImmediate = function(options2) {
        var _a;
        var normalizedIdentifier = this.normalizeInstanceIdentifier(options2 === null || options2 === void 0 ? void 0 : options2.identifier);
        var optional = (_a = options2 === null || options2 === void 0 ? void 0 : options2.optional) !== null && _a !== void 0 ? _a : false;
        if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
          try {
            return this.getOrInitializeService({
              instanceIdentifier: normalizedIdentifier
            });
          } catch (e) {
            if (optional) {
              return null;
            } else {
              throw e;
            }
          }
        } else {
          if (optional) {
            return null;
          } else {
            throw Error("Service " + this.name + " is not available");
          }
        }
      };
      Provider3.prototype.getComponent = function() {
        return this.component;
      };
      Provider3.prototype.setComponent = function(component2) {
        var e_1, _a;
        if (component2.name !== this.name) {
          throw Error("Mismatching Component " + component2.name + " for Provider " + this.name + ".");
        }
        if (this.component) {
          throw Error("Component for " + this.name + " has already been provided");
        }
        this.component = component2;
        if (!this.shouldAutoInitialize()) {
          return;
        }
        if (isComponentEager2(component2)) {
          try {
            this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME2 });
          } catch (e) {
          }
        }
        try {
          for (var _b = tslib2.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = tslib2.__read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
            var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            try {
              var instance = this.getOrInitializeService({
                instanceIdentifier: normalizedIdentifier
              });
              instanceDeferred.resolve(instance);
            } catch (e) {
            }
          }
        } catch (e_1_1) {
          e_1 = { error: e_1_1 };
        } finally {
          try {
            if (_c && !_c.done && (_a = _b.return))
              _a.call(_b);
          } finally {
            if (e_1)
              throw e_1.error;
          }
        }
      };
      Provider3.prototype.clearInstance = function(identifier) {
        if (identifier === void 0) {
          identifier = DEFAULT_ENTRY_NAME2;
        }
        this.instancesDeferred.delete(identifier);
        this.instancesOptions.delete(identifier);
        this.instances.delete(identifier);
      };
      Provider3.prototype.delete = function() {
        return tslib2.__awaiter(this, void 0, void 0, function() {
          var services;
          return tslib2.__generator(this, function(_a) {
            switch (_a.label) {
              case 0:
                services = Array.from(this.instances.values());
                return [4, Promise.all(tslib2.__spreadArray(tslib2.__spreadArray([], tslib2.__read(services.filter(function(service2) {
                  return "INTERNAL" in service2;
                }).map(function(service2) {
                  return service2.INTERNAL.delete();
                }))), tslib2.__read(services.filter(function(service2) {
                  return "_delete" in service2;
                }).map(function(service2) {
                  return service2._delete();
                }))))];
              case 1:
                _a.sent();
                return [2];
            }
          });
        });
      };
      Provider3.prototype.isComponentSet = function() {
        return this.component != null;
      };
      Provider3.prototype.isInitialized = function(identifier) {
        if (identifier === void 0) {
          identifier = DEFAULT_ENTRY_NAME2;
        }
        return this.instances.has(identifier);
      };
      Provider3.prototype.getOptions = function(identifier) {
        if (identifier === void 0) {
          identifier = DEFAULT_ENTRY_NAME2;
        }
        return this.instancesOptions.get(identifier) || {};
      };
      Provider3.prototype.initialize = function(opts) {
        var e_2, _a;
        if (opts === void 0) {
          opts = {};
        }
        var _b = opts.options, options2 = _b === void 0 ? {} : _b;
        var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
        if (this.isInitialized(normalizedIdentifier)) {
          throw Error(this.name + "(" + normalizedIdentifier + ") has already been initialized");
        }
        if (!this.isComponentSet()) {
          throw Error("Component " + this.name + " has not been registered yet");
        }
        var instance = this.getOrInitializeService({
          instanceIdentifier: normalizedIdentifier,
          options: options2
        });
        try {
          for (var _c = tslib2.__values(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
            var _e = tslib2.__read(_d.value, 2), instanceIdentifier = _e[0], instanceDeferred = _e[1];
            var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
            if (normalizedIdentifier === normalizedDeferredIdentifier) {
              instanceDeferred.resolve(instance);
            }
          }
        } catch (e_2_1) {
          e_2 = { error: e_2_1 };
        } finally {
          try {
            if (_d && !_d.done && (_a = _c.return))
              _a.call(_c);
          } finally {
            if (e_2)
              throw e_2.error;
          }
        }
        return instance;
      };
      Provider3.prototype.onInit = function(callback, identifier) {
        var _a;
        var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
        var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
        existingCallbacks.add(callback);
        this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
        var existingInstance = this.instances.get(normalizedIdentifier);
        if (existingInstance) {
          callback(existingInstance, normalizedIdentifier);
        }
        return function() {
          existingCallbacks.delete(callback);
        };
      };
      Provider3.prototype.invokeOnInitCallbacks = function(instance, identifier) {
        var e_3, _a;
        var callbacks = this.onInitCallbacks.get(identifier);
        if (!callbacks) {
          return;
        }
        try {
          for (var callbacks_1 = tslib2.__values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
            var callback = callbacks_1_1.value;
            try {
              callback(instance, identifier);
            } catch (_b) {
            }
          }
        } catch (e_3_1) {
          e_3 = { error: e_3_1 };
        } finally {
          try {
            if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return))
              _a.call(callbacks_1);
          } finally {
            if (e_3)
              throw e_3.error;
          }
        }
      };
      Provider3.prototype.getOrInitializeService = function(_a) {
        var instanceIdentifier = _a.instanceIdentifier, _b = _a.options, options2 = _b === void 0 ? {} : _b;
        var instance = this.instances.get(instanceIdentifier);
        if (!instance && this.component) {
          instance = this.component.instanceFactory(this.container, {
            instanceIdentifier: normalizeIdentifierForFactory2(instanceIdentifier),
            options: options2
          });
          this.instances.set(instanceIdentifier, instance);
          this.instancesOptions.set(instanceIdentifier, options2);
          this.invokeOnInitCallbacks(instance, instanceIdentifier);
          if (this.component.onInstanceCreated) {
            try {
              this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
            } catch (_c) {
            }
          }
        }
        return instance || null;
      };
      Provider3.prototype.normalizeInstanceIdentifier = function(identifier) {
        if (identifier === void 0) {
          identifier = DEFAULT_ENTRY_NAME2;
        }
        if (this.component) {
          return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME2;
        } else {
          return identifier;
        }
      };
      Provider3.prototype.shouldAutoInitialize = function() {
        return !!this.component && this.component.instantiationMode !== "EXPLICIT";
      };
      return Provider3;
    }();
    function normalizeIdentifierForFactory2(identifier) {
      return identifier === DEFAULT_ENTRY_NAME2 ? void 0 : identifier;
    }
    function isComponentEager2(component2) {
      return component2.instantiationMode === "EAGER";
    }
    var ComponentContainer2 = function() {
      function ComponentContainer3(name2) {
        this.name = name2;
        this.providers = new Map();
      }
      ComponentContainer3.prototype.addComponent = function(component2) {
        var provider = this.getProvider(component2.name);
        if (provider.isComponentSet()) {
          throw new Error("Component " + component2.name + " has already been registered with " + this.name);
        }
        provider.setComponent(component2);
      };
      ComponentContainer3.prototype.addOrOverwriteComponent = function(component2) {
        var provider = this.getProvider(component2.name);
        if (provider.isComponentSet()) {
          this.providers.delete(component2.name);
        }
        this.addComponent(component2);
      };
      ComponentContainer3.prototype.getProvider = function(name2) {
        if (this.providers.has(name2)) {
          return this.providers.get(name2);
        }
        var provider = new Provider2(name2, this);
        this.providers.set(name2, provider);
        return provider;
      };
      ComponentContainer3.prototype.getProviders = function() {
        return Array.from(this.providers.values());
      };
      return ComponentContainer3;
    }();
    exports.Component = Component2;
    exports.ComponentContainer = ComponentContainer2;
    exports.Provider = Provider2;
  }
});

// node_modules/@firebase/logger/dist/index.cjs.js
var require_index_cjs2 = __commonJS({
  "node_modules/@firebase/logger/dist/index.cjs.js"(exports) {
    init_shims();
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib2 = require_tslib();
    var _a;
    var instances2 = [];
    exports.LogLevel = void 0;
    (function(LogLevel2) {
      LogLevel2[LogLevel2["DEBUG"] = 0] = "DEBUG";
      LogLevel2[LogLevel2["VERBOSE"] = 1] = "VERBOSE";
      LogLevel2[LogLevel2["INFO"] = 2] = "INFO";
      LogLevel2[LogLevel2["WARN"] = 3] = "WARN";
      LogLevel2[LogLevel2["ERROR"] = 4] = "ERROR";
      LogLevel2[LogLevel2["SILENT"] = 5] = "SILENT";
    })(exports.LogLevel || (exports.LogLevel = {}));
    var levelStringToEnum2 = {
      "debug": exports.LogLevel.DEBUG,
      "verbose": exports.LogLevel.VERBOSE,
      "info": exports.LogLevel.INFO,
      "warn": exports.LogLevel.WARN,
      "error": exports.LogLevel.ERROR,
      "silent": exports.LogLevel.SILENT
    };
    var defaultLogLevel2 = exports.LogLevel.INFO;
    var ConsoleMethod2 = (_a = {}, _a[exports.LogLevel.DEBUG] = "log", _a[exports.LogLevel.VERBOSE] = "log", _a[exports.LogLevel.INFO] = "info", _a[exports.LogLevel.WARN] = "warn", _a[exports.LogLevel.ERROR] = "error", _a);
    var defaultLogHandler2 = function(instance, logType) {
      var args = [];
      for (var _i = 2; _i < arguments.length; _i++) {
        args[_i - 2] = arguments[_i];
      }
      if (logType < instance.logLevel) {
        return;
      }
      var now = new Date().toISOString();
      var method2 = ConsoleMethod2[logType];
      if (method2) {
        console[method2].apply(console, tslib2.__spreadArray(["[" + now + "]  " + instance.name + ":"], args));
      } else {
        throw new Error("Attempted to log a message with an invalid logType (value: " + logType + ")");
      }
    };
    var Logger2 = function() {
      function Logger3(name2) {
        this.name = name2;
        this._logLevel = defaultLogLevel2;
        this._logHandler = defaultLogHandler2;
        this._userLogHandler = null;
        instances2.push(this);
      }
      Object.defineProperty(Logger3.prototype, "logLevel", {
        get: function() {
          return this._logLevel;
        },
        set: function(val) {
          if (!(val in exports.LogLevel)) {
            throw new TypeError('Invalid value "' + val + '" assigned to `logLevel`');
          }
          this._logLevel = val;
        },
        enumerable: false,
        configurable: true
      });
      Logger3.prototype.setLogLevel = function(val) {
        this._logLevel = typeof val === "string" ? levelStringToEnum2[val] : val;
      };
      Object.defineProperty(Logger3.prototype, "logHandler", {
        get: function() {
          return this._logHandler;
        },
        set: function(val) {
          if (typeof val !== "function") {
            throw new TypeError("Value assigned to `logHandler` must be a function");
          }
          this._logHandler = val;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(Logger3.prototype, "userLogHandler", {
        get: function() {
          return this._userLogHandler;
        },
        set: function(val) {
          this._userLogHandler = val;
        },
        enumerable: false,
        configurable: true
      });
      Logger3.prototype.debug = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, tslib2.__spreadArray([this, exports.LogLevel.DEBUG], args));
        this._logHandler.apply(this, tslib2.__spreadArray([this, exports.LogLevel.DEBUG], args));
      };
      Logger3.prototype.log = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, tslib2.__spreadArray([this, exports.LogLevel.VERBOSE], args));
        this._logHandler.apply(this, tslib2.__spreadArray([this, exports.LogLevel.VERBOSE], args));
      };
      Logger3.prototype.info = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, tslib2.__spreadArray([this, exports.LogLevel.INFO], args));
        this._logHandler.apply(this, tslib2.__spreadArray([this, exports.LogLevel.INFO], args));
      };
      Logger3.prototype.warn = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, tslib2.__spreadArray([this, exports.LogLevel.WARN], args));
        this._logHandler.apply(this, tslib2.__spreadArray([this, exports.LogLevel.WARN], args));
      };
      Logger3.prototype.error = function() {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          args[_i] = arguments[_i];
        }
        this._userLogHandler && this._userLogHandler.apply(this, tslib2.__spreadArray([this, exports.LogLevel.ERROR], args));
        this._logHandler.apply(this, tslib2.__spreadArray([this, exports.LogLevel.ERROR], args));
      };
      return Logger3;
    }();
    function setLogLevel2(level) {
      instances2.forEach(function(inst) {
        inst.setLogLevel(level);
      });
    }
    function setUserLogHandler2(logCallback, options2) {
      var _loop_1 = function(instance2) {
        var customLogLevel = null;
        if (options2 && options2.level) {
          customLogLevel = levelStringToEnum2[options2.level];
        }
        if (logCallback === null) {
          instance2.userLogHandler = null;
        } else {
          instance2.userLogHandler = function(instance3, level) {
            var args = [];
            for (var _i2 = 2; _i2 < arguments.length; _i2++) {
              args[_i2 - 2] = arguments[_i2];
            }
            var message2 = args.map(function(arg) {
              if (arg == null) {
                return null;
              } else if (typeof arg === "string") {
                return arg;
              } else if (typeof arg === "number" || typeof arg === "boolean") {
                return arg.toString();
              } else if (arg instanceof Error) {
                return arg.message;
              } else {
                try {
                  return JSON.stringify(arg);
                } catch (ignored) {
                  return null;
                }
              }
            }).filter(function(arg) {
              return arg;
            }).join(" ");
            if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance3.logLevel)) {
              logCallback({
                level: exports.LogLevel[level].toLowerCase(),
                message: message2,
                args,
                type: instance3.name
              });
            }
          };
        }
      };
      for (var _i = 0, instances_1 = instances2; _i < instances_1.length; _i++) {
        var instance = instances_1[_i];
        _loop_1(instance);
      }
    }
    exports.Logger = Logger2;
    exports.setLogLevel = setLogLevel2;
    exports.setUserLogHandler = setUserLogHandler2;
  }
});

// node_modules/@firebase/app/dist/index.cjs.js
var require_index_cjs3 = __commonJS({
  "node_modules/@firebase/app/dist/index.cjs.js"(exports) {
    init_shims();
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var component2 = require_index_cjs();
    var tslib2 = require_tslib();
    var logger$1 = require_index_cjs2();
    var util2 = require_index_node_cjs();
    var PlatformLoggerServiceImpl = function() {
      function PlatformLoggerServiceImpl2(container) {
        this.container = container;
      }
      PlatformLoggerServiceImpl2.prototype.getPlatformInfoString = function() {
        var providers = this.container.getProviders();
        return providers.map(function(provider) {
          if (isVersionServiceProvider(provider)) {
            var service2 = provider.getImmediate();
            return service2.library + "/" + service2.version;
          } else {
            return null;
          }
        }).filter(function(logString) {
          return logString;
        }).join(" ");
      };
      return PlatformLoggerServiceImpl2;
    }();
    function isVersionServiceProvider(provider) {
      var component3 = provider.getComponent();
      return (component3 === null || component3 === void 0 ? void 0 : component3.type) === "VERSION";
    }
    var name$o = "@firebase/app";
    var version$12 = "0.7.1";
    var logger2 = new logger$1.Logger("@firebase/app");
    var name$n = "@firebase/app-compat";
    var name$m = "@firebase/analytics-compat";
    var name$l = "@firebase/analytics";
    var name$k = "@firebase/app-check-compat";
    var name$j = "@firebase/app-check";
    var name$i = "@firebase/auth";
    var name$h = "@firebase/auth-compat";
    var name$g = "@firebase/database";
    var name$f = "@firebase/database-compat";
    var name$e = "@firebase/functions";
    var name$d = "@firebase/functions-compat";
    var name$c = "@firebase/installations";
    var name$b = "@firebase/installations-compat";
    var name$a = "@firebase/messaging";
    var name$9 = "@firebase/messaging-compat";
    var name$8 = "@firebase/performance";
    var name$7 = "@firebase/performance-compat";
    var name$6 = "@firebase/remote-config";
    var name$5 = "@firebase/remote-config-compat";
    var name$4 = "@firebase/storage";
    var name$3 = "@firebase/storage-compat";
    var name$22 = "@firebase/firestore";
    var name$12 = "@firebase/firestore-compat";
    var name2 = "firebase";
    var version2 = "9.1.0";
    var _a$1;
    var DEFAULT_ENTRY_NAME2 = "[DEFAULT]";
    var PLATFORM_LOG_STRING = (_a$1 = {}, _a$1[name$o] = "fire-core", _a$1[name$n] = "fire-core-compat", _a$1[name$l] = "fire-analytics", _a$1[name$m] = "fire-analytics-compat", _a$1[name$j] = "fire-app-check", _a$1[name$k] = "fire-app-check-compat", _a$1[name$i] = "fire-auth", _a$1[name$h] = "fire-auth-compat", _a$1[name$g] = "fire-rtdb", _a$1[name$f] = "fire-rtdb-compat", _a$1[name$e] = "fire-fn", _a$1[name$d] = "fire-fn-compat", _a$1[name$c] = "fire-iid", _a$1[name$b] = "fire-iid-compat", _a$1[name$a] = "fire-fcm", _a$1[name$9] = "fire-fcm-compat", _a$1[name$8] = "fire-perf", _a$1[name$7] = "fire-perf-compat", _a$1[name$6] = "fire-rc", _a$1[name$5] = "fire-rc-compat", _a$1[name$4] = "fire-gcs", _a$1[name$3] = "fire-gcs-compat", _a$1[name$22] = "fire-fst", _a$1[name$12] = "fire-fst-compat", _a$1["fire-js"] = "fire-js", _a$1[name2] = "fire-js-all", _a$1);
    var _apps = new Map();
    var _components = new Map();
    function _addComponent(app2, component3) {
      try {
        app2.container.addComponent(component3);
      } catch (e) {
        logger2.debug("Component " + component3.name + " failed to register with FirebaseApp " + app2.name, e);
      }
    }
    function _addOrOverwriteComponent(app2, component3) {
      app2.container.addOrOverwriteComponent(component3);
    }
    function _registerComponent2(component3) {
      var e_1, _a2;
      var componentName = component3.name;
      if (_components.has(componentName)) {
        logger2.debug("There were multiple attempts to register component " + componentName + ".");
        return false;
      }
      _components.set(componentName, component3);
      try {
        for (var _b = tslib2.__values(_apps.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var app2 = _c.value;
          _addComponent(app2, component3);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return true;
    }
    function _getProvider(app2, name3) {
      return app2.container.getProvider(name3);
    }
    function _removeServiceInstance(app2, name3, instanceIdentifier) {
      if (instanceIdentifier === void 0) {
        instanceIdentifier = DEFAULT_ENTRY_NAME2;
      }
      _getProvider(app2, name3).clearInstance(instanceIdentifier);
    }
    function _clearComponents() {
      _components.clear();
    }
    var _a;
    var ERRORS = (_a = {}, _a["no-app"] = "No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()", _a["bad-app-name"] = "Illegal App name: '{$appName}", _a["duplicate-app"] = "Firebase App named '{$appName}' already exists with different options or config", _a["app-deleted"] = "Firebase App named '{$appName}' already deleted", _a["invalid-app-argument"] = "firebase.{$appName}() takes either no argument or a Firebase App instance.", _a["invalid-log-argument"] = "First argument to `onLog` must be null or a function.", _a);
    var ERROR_FACTORY = new util2.ErrorFactory("app", "Firebase", ERRORS);
    var FirebaseAppImpl = function() {
      function FirebaseAppImpl2(options2, config, container) {
        var _this = this;
        this._isDeleted = false;
        this._options = tslib2.__assign({}, options2);
        this._config = tslib2.__assign({}, config);
        this._name = config.name;
        this._automaticDataCollectionEnabled = config.automaticDataCollectionEnabled;
        this._container = container;
        this.container.addComponent(new component2.Component("app", function() {
          return _this;
        }, "PUBLIC"));
      }
      Object.defineProperty(FirebaseAppImpl2.prototype, "automaticDataCollectionEnabled", {
        get: function() {
          this.checkDestroyed();
          return this._automaticDataCollectionEnabled;
        },
        set: function(val) {
          this.checkDestroyed();
          this._automaticDataCollectionEnabled = val;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FirebaseAppImpl2.prototype, "name", {
        get: function() {
          this.checkDestroyed();
          return this._name;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FirebaseAppImpl2.prototype, "options", {
        get: function() {
          this.checkDestroyed();
          return this._options;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FirebaseAppImpl2.prototype, "config", {
        get: function() {
          this.checkDestroyed();
          return this._config;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FirebaseAppImpl2.prototype, "container", {
        get: function() {
          return this._container;
        },
        enumerable: false,
        configurable: true
      });
      Object.defineProperty(FirebaseAppImpl2.prototype, "isDeleted", {
        get: function() {
          return this._isDeleted;
        },
        set: function(val) {
          this._isDeleted = val;
        },
        enumerable: false,
        configurable: true
      });
      FirebaseAppImpl2.prototype.checkDestroyed = function() {
        if (this.isDeleted) {
          throw ERROR_FACTORY.create("app-deleted", { appName: this._name });
        }
      };
      return FirebaseAppImpl2;
    }();
    var SDK_VERSION2 = version2;
    function initializeApp(options2, rawConfig) {
      var e_1, _a2;
      if (rawConfig === void 0) {
        rawConfig = {};
      }
      if (typeof rawConfig !== "object") {
        var name_1 = rawConfig;
        rawConfig = { name: name_1 };
      }
      var config = tslib2.__assign({ name: DEFAULT_ENTRY_NAME2, automaticDataCollectionEnabled: false }, rawConfig);
      var name3 = config.name;
      if (typeof name3 !== "string" || !name3) {
        throw ERROR_FACTORY.create("bad-app-name", {
          appName: String(name3)
        });
      }
      var existingApp = _apps.get(name3);
      if (existingApp) {
        if (util2.deepEqual(options2, existingApp.options) && util2.deepEqual(config, existingApp.config)) {
          return existingApp;
        } else {
          throw ERROR_FACTORY.create("duplicate-app", { appName: name3 });
        }
      }
      var container = new component2.ComponentContainer(name3);
      try {
        for (var _b = tslib2.__values(_components.values()), _c = _b.next(); !_c.done; _c = _b.next()) {
          var component$1 = _c.value;
          container.addComponent(component$1);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (_c && !_c.done && (_a2 = _b.return))
            _a2.call(_b);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      var newApp = new FirebaseAppImpl(options2, config, container);
      _apps.set(name3, newApp);
      return newApp;
    }
    function getApp(name3) {
      if (name3 === void 0) {
        name3 = DEFAULT_ENTRY_NAME2;
      }
      var app2 = _apps.get(name3);
      if (!app2) {
        throw ERROR_FACTORY.create("no-app", { appName: name3 });
      }
      return app2;
    }
    function getApps() {
      return Array.from(_apps.values());
    }
    function deleteApp(app2) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var name3;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              name3 = app2.name;
              if (!_apps.has(name3))
                return [3, 2];
              _apps.delete(name3);
              return [4, Promise.all(app2.container.getProviders().map(function(provider) {
                return provider.delete();
              }))];
            case 1:
              _a2.sent();
              app2.isDeleted = true;
              _a2.label = 2;
            case 2:
              return [2];
          }
        });
      });
    }
    function registerVersion2(libraryKeyOrName, version3, variant) {
      var _a2;
      var library = (_a2 = PLATFORM_LOG_STRING[libraryKeyOrName]) !== null && _a2 !== void 0 ? _a2 : libraryKeyOrName;
      if (variant) {
        library += "-" + variant;
      }
      var libraryMismatch = library.match(/\s|\//);
      var versionMismatch = version3.match(/\s|\//);
      if (libraryMismatch || versionMismatch) {
        var warning = [
          'Unable to register library "' + library + '" with version "' + version3 + '":'
        ];
        if (libraryMismatch) {
          warning.push('library name "' + library + '" contains illegal characters (whitespace or "/")');
        }
        if (libraryMismatch && versionMismatch) {
          warning.push("and");
        }
        if (versionMismatch) {
          warning.push('version name "' + version3 + '" contains illegal characters (whitespace or "/")');
        }
        logger2.warn(warning.join(" "));
        return;
      }
      _registerComponent2(new component2.Component(library + "-version", function() {
        return { library, version: version3 };
      }, "VERSION"));
    }
    function onLog(logCallback, options2) {
      if (logCallback !== null && typeof logCallback !== "function") {
        throw ERROR_FACTORY.create("invalid-log-argument");
      }
      logger$1.setUserLogHandler(logCallback, options2);
    }
    function setLogLevel2(logLevel) {
      logger$1.setLogLevel(logLevel);
    }
    function registerCoreComponents(variant) {
      _registerComponent2(new component2.Component("platform-logger", function(container) {
        return new PlatformLoggerServiceImpl(container);
      }, "PRIVATE"));
      registerVersion2(name$o, version$12, variant);
      registerVersion2("fire-js", "");
    }
    registerCoreComponents();
    Object.defineProperty(exports, "FirebaseError", {
      enumerable: true,
      get: function() {
        return util2.FirebaseError;
      }
    });
    exports.SDK_VERSION = SDK_VERSION2;
    exports._DEFAULT_ENTRY_NAME = DEFAULT_ENTRY_NAME2;
    exports._addComponent = _addComponent;
    exports._addOrOverwriteComponent = _addOrOverwriteComponent;
    exports._apps = _apps;
    exports._clearComponents = _clearComponents;
    exports._components = _components;
    exports._getProvider = _getProvider;
    exports._registerComponent = _registerComponent2;
    exports._removeServiceInstance = _removeServiceInstance;
    exports.deleteApp = deleteApp;
    exports.getApp = getApp;
    exports.getApps = getApps;
    exports.initializeApp = initializeApp;
    exports.onLog = onLog;
    exports.registerVersion = registerVersion2;
    exports.setLogLevel = setLogLevel2;
  }
});

// node_modules/idb/build/idb.js
var require_idb = __commonJS({
  "node_modules/idb/build/idb.js"(exports, module2) {
    init_shims();
    (function(global2, factory2) {
      typeof exports === "object" && typeof module2 !== "undefined" ? factory2(exports) : typeof define === "function" && define.amd ? define(["exports"], factory2) : (global2 = global2 || self, factory2(global2.idb = {}));
    })(exports, function(exports2) {
      "use strict";
      function toArray2(arr) {
        return Array.prototype.slice.call(arr);
      }
      function promisifyRequest(request) {
        return new Promise(function(resolve6, reject) {
          request.onsuccess = function() {
            resolve6(request.result);
          };
          request.onerror = function() {
            reject(request.error);
          };
        });
      }
      function promisifyRequestCall(obj, method2, args) {
        var request;
        var p = new Promise(function(resolve6, reject) {
          request = obj[method2].apply(obj, args);
          promisifyRequest(request).then(resolve6, reject);
        });
        p.request = request;
        return p;
      }
      function promisifyCursorRequestCall(obj, method2, args) {
        var p = promisifyRequestCall(obj, method2, args);
        return p.then(function(value) {
          if (!value)
            return;
          return new Cursor(value, p.request);
        });
      }
      function proxyProperties(ProxyClass, targetProp, properties) {
        properties.forEach(function(prop) {
          Object.defineProperty(ProxyClass.prototype, prop, {
            get: function() {
              return this[targetProp][prop];
            },
            set: function(val) {
              this[targetProp][prop] = val;
            }
          });
        });
      }
      function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
          if (!(prop in Constructor.prototype))
            return;
          ProxyClass.prototype[prop] = function() {
            return promisifyRequestCall(this[targetProp], prop, arguments);
          };
        });
      }
      function proxyMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
          if (!(prop in Constructor.prototype))
            return;
          ProxyClass.prototype[prop] = function() {
            return this[targetProp][prop].apply(this[targetProp], arguments);
          };
        });
      }
      function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {
        properties.forEach(function(prop) {
          if (!(prop in Constructor.prototype))
            return;
          ProxyClass.prototype[prop] = function() {
            return promisifyCursorRequestCall(this[targetProp], prop, arguments);
          };
        });
      }
      function Index(index2) {
        this._index = index2;
      }
      proxyProperties(Index, "_index", [
        "name",
        "keyPath",
        "multiEntry",
        "unique"
      ]);
      proxyRequestMethods(Index, "_index", IDBIndex, [
        "get",
        "getKey",
        "getAll",
        "getAllKeys",
        "count"
      ]);
      proxyCursorRequestMethods(Index, "_index", IDBIndex, [
        "openCursor",
        "openKeyCursor"
      ]);
      function Cursor(cursor, request) {
        this._cursor = cursor;
        this._request = request;
      }
      proxyProperties(Cursor, "_cursor", [
        "direction",
        "key",
        "primaryKey",
        "value"
      ]);
      proxyRequestMethods(Cursor, "_cursor", IDBCursor, [
        "update",
        "delete"
      ]);
      ["advance", "continue", "continuePrimaryKey"].forEach(function(methodName) {
        if (!(methodName in IDBCursor.prototype))
          return;
        Cursor.prototype[methodName] = function() {
          var cursor = this;
          var args = arguments;
          return Promise.resolve().then(function() {
            cursor._cursor[methodName].apply(cursor._cursor, args);
            return promisifyRequest(cursor._request).then(function(value) {
              if (!value)
                return;
              return new Cursor(value, cursor._request);
            });
          });
        };
      });
      function ObjectStore(store) {
        this._store = store;
      }
      ObjectStore.prototype.createIndex = function() {
        return new Index(this._store.createIndex.apply(this._store, arguments));
      };
      ObjectStore.prototype.index = function() {
        return new Index(this._store.index.apply(this._store, arguments));
      };
      proxyProperties(ObjectStore, "_store", [
        "name",
        "keyPath",
        "indexNames",
        "autoIncrement"
      ]);
      proxyRequestMethods(ObjectStore, "_store", IDBObjectStore, [
        "put",
        "add",
        "delete",
        "clear",
        "get",
        "getAll",
        "getKey",
        "getAllKeys",
        "count"
      ]);
      proxyCursorRequestMethods(ObjectStore, "_store", IDBObjectStore, [
        "openCursor",
        "openKeyCursor"
      ]);
      proxyMethods(ObjectStore, "_store", IDBObjectStore, [
        "deleteIndex"
      ]);
      function Transaction2(idbTransaction) {
        this._tx = idbTransaction;
        this.complete = new Promise(function(resolve6, reject) {
          idbTransaction.oncomplete = function() {
            resolve6();
          };
          idbTransaction.onerror = function() {
            reject(idbTransaction.error);
          };
          idbTransaction.onabort = function() {
            reject(idbTransaction.error);
          };
        });
      }
      Transaction2.prototype.objectStore = function() {
        return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));
      };
      proxyProperties(Transaction2, "_tx", [
        "objectStoreNames",
        "mode"
      ]);
      proxyMethods(Transaction2, "_tx", IDBTransaction, [
        "abort"
      ]);
      function UpgradeDB(db, oldVersion, transaction) {
        this._db = db;
        this.oldVersion = oldVersion;
        this.transaction = new Transaction2(transaction);
      }
      UpgradeDB.prototype.createObjectStore = function() {
        return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));
      };
      proxyProperties(UpgradeDB, "_db", [
        "name",
        "version",
        "objectStoreNames"
      ]);
      proxyMethods(UpgradeDB, "_db", IDBDatabase, [
        "deleteObjectStore",
        "close"
      ]);
      function DB(db) {
        this._db = db;
      }
      DB.prototype.transaction = function() {
        return new Transaction2(this._db.transaction.apply(this._db, arguments));
      };
      proxyProperties(DB, "_db", [
        "name",
        "version",
        "objectStoreNames"
      ]);
      proxyMethods(DB, "_db", IDBDatabase, [
        "close"
      ]);
      ["openCursor", "openKeyCursor"].forEach(function(funcName) {
        [ObjectStore, Index].forEach(function(Constructor) {
          if (!(funcName in Constructor.prototype))
            return;
          Constructor.prototype[funcName.replace("open", "iterate")] = function() {
            var args = toArray2(arguments);
            var callback = args[args.length - 1];
            var nativeObject = this._store || this._index;
            var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));
            request.onsuccess = function() {
              callback(request.result);
            };
          };
        });
      });
      [Index, ObjectStore].forEach(function(Constructor) {
        if (Constructor.prototype.getAll)
          return;
        Constructor.prototype.getAll = function(query2, count) {
          var instance = this;
          var items = [];
          return new Promise(function(resolve6) {
            instance.iterateCursor(query2, function(cursor) {
              if (!cursor) {
                resolve6(items);
                return;
              }
              items.push(cursor.value);
              if (count !== void 0 && items.length == count) {
                resolve6(items);
                return;
              }
              cursor.continue();
            });
          });
        };
      });
      function openDb(name2, version2, upgradeCallback) {
        var p = promisifyRequestCall(indexedDB, "open", [name2, version2]);
        var request = p.request;
        if (request) {
          request.onupgradeneeded = function(event) {
            if (upgradeCallback) {
              upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));
            }
          };
        }
        return p.then(function(db) {
          return new DB(db);
        });
      }
      function deleteDb(name2) {
        return promisifyRequestCall(indexedDB, "deleteDatabase", [name2]);
      }
      exports2.openDb = openDb;
      exports2.deleteDb = deleteDb;
      Object.defineProperty(exports2, "__esModule", { value: true });
    });
  }
});

// node_modules/idb/lib/node.js
var require_node = __commonJS({
  "node_modules/idb/lib/node.js"(exports, module2) {
    init_shims();
    if (typeof indexedDB != "undefined") {
      module2.exports = require_idb();
    } else {
      module2.exports = {
        openDb: function() {
          return Promise.reject("IDB requires a browser environment");
        },
        deleteDb: function() {
          return Promise.reject("IDB requires a browser environment");
        }
      };
    }
  }
});

// node_modules/@firebase/installations/dist/index.cjs.js
var require_index_cjs4 = __commonJS({
  "node_modules/@firebase/installations/dist/index.cjs.js"(exports) {
    init_shims();
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var app2 = require_index_cjs3();
    var component2 = require_index_cjs();
    var tslib2 = require_tslib();
    var util2 = require_index_node_cjs();
    var idb = require_node();
    var name2 = "@firebase/installations";
    var version2 = "0.5.1";
    var PENDING_TIMEOUT_MS = 1e4;
    var PACKAGE_VERSION = "w:" + version2;
    var INTERNAL_AUTH_VERSION = "FIS_v2";
    var INSTALLATIONS_API_URL = "https://firebaseinstallations.googleapis.com/v1";
    var TOKEN_EXPIRATION_BUFFER = 60 * 60 * 1e3;
    var SERVICE = "installations";
    var SERVICE_NAME = "Installations";
    var _a;
    var ERROR_DESCRIPTION_MAP = (_a = {}, _a["missing-app-config-values"] = 'Missing App configuration value: "{$valueName}"', _a["not-registered"] = "Firebase Installation is not registered.", _a["installation-not-found"] = "Firebase Installation not found.", _a["request-failed"] = '{$requestName} request failed with error "{$serverCode} {$serverStatus}: {$serverMessage}"', _a["app-offline"] = "Could not process request. Application offline.", _a["delete-pending-registration"] = "Can't delete installation while there is a pending registration request.", _a);
    var ERROR_FACTORY = new util2.ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);
    function isServerError(error2) {
      return error2 instanceof util2.FirebaseError && error2.code.includes("request-failed");
    }
    function getInstallationsEndpoint(_a2) {
      var projectId = _a2.projectId;
      return INSTALLATIONS_API_URL + "/projects/" + projectId + "/installations";
    }
    function extractAuthTokenInfoFromResponse(response) {
      return {
        token: response.token,
        requestStatus: 2,
        expiresIn: getExpiresInFromResponseExpiresIn(response.expiresIn),
        creationTime: Date.now()
      };
    }
    function getErrorFromResponse(requestName, response) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var responseJson, errorData;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, response.json()];
            case 1:
              responseJson = _a2.sent();
              errorData = responseJson.error;
              return [2, ERROR_FACTORY.create("request-failed", {
                requestName,
                serverCode: errorData.code,
                serverMessage: errorData.message,
                serverStatus: errorData.status
              })];
          }
        });
      });
    }
    function getHeaders(_a2) {
      var apiKey = _a2.apiKey;
      return new Headers({
        "Content-Type": "application/json",
        Accept: "application/json",
        "x-goog-api-key": apiKey
      });
    }
    function getHeadersWithAuth(appConfig, _a2) {
      var refreshToken = _a2.refreshToken;
      var headers = getHeaders(appConfig);
      headers.append("Authorization", getAuthorizationHeader(refreshToken));
      return headers;
    }
    function retryIfServerError(fn) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var result;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, fn()];
            case 1:
              result = _a2.sent();
              if (result.status >= 500 && result.status < 600) {
                return [2, fn()];
              }
              return [2, result];
          }
        });
      });
    }
    function getExpiresInFromResponseExpiresIn(responseExpiresIn) {
      return Number(responseExpiresIn.replace("s", "000"));
    }
    function getAuthorizationHeader(refreshToken) {
      return INTERNAL_AUTH_VERSION + " " + refreshToken;
    }
    function createInstallationRequest(appConfig, _a2) {
      var fid = _a2.fid;
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var endpoint, headers, body, request, response, responseValue, registeredInstallationEntry;
        return tslib2.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              endpoint = getInstallationsEndpoint(appConfig);
              headers = getHeaders(appConfig);
              body = {
                fid,
                authVersion: INTERNAL_AUTH_VERSION,
                appId: appConfig.appId,
                sdkVersion: PACKAGE_VERSION
              };
              request = {
                method: "POST",
                headers,
                body: JSON.stringify(body)
              };
              return [4, retryIfServerError(function() {
                return fetch(endpoint, request);
              })];
            case 1:
              response = _b.sent();
              if (!response.ok)
                return [3, 3];
              return [4, response.json()];
            case 2:
              responseValue = _b.sent();
              registeredInstallationEntry = {
                fid: responseValue.fid || fid,
                registrationStatus: 2,
                refreshToken: responseValue.refreshToken,
                authToken: extractAuthTokenInfoFromResponse(responseValue.authToken)
              };
              return [2, registeredInstallationEntry];
            case 3:
              return [4, getErrorFromResponse("Create Installation", response)];
            case 4:
              throw _b.sent();
          }
        });
      });
    }
    function sleep(ms) {
      return new Promise(function(resolve6) {
        setTimeout(resolve6, ms);
      });
    }
    function bufferToBase64UrlSafe(array) {
      var b64 = btoa(String.fromCharCode.apply(String, tslib2.__spreadArray([], tslib2.__read(array))));
      return b64.replace(/\+/g, "-").replace(/\//g, "_");
    }
    var VALID_FID_PATTERN = /^[cdef][\w-]{21}$/;
    var INVALID_FID = "";
    function generateFid() {
      try {
        var fidByteArray = new Uint8Array(17);
        var crypto_1 = self.crypto || self.msCrypto;
        crypto_1.getRandomValues(fidByteArray);
        fidByteArray[0] = 112 + fidByteArray[0] % 16;
        var fid = encode2(fidByteArray);
        return VALID_FID_PATTERN.test(fid) ? fid : INVALID_FID;
      } catch (_a2) {
        return INVALID_FID;
      }
    }
    function encode2(fidByteArray) {
      var b64String = bufferToBase64UrlSafe(fidByteArray);
      return b64String.substr(0, 22);
    }
    function getKey(appConfig) {
      return appConfig.appName + "!" + appConfig.appId;
    }
    var fidChangeCallbacks = new Map();
    function fidChanged(appConfig, fid) {
      var key = getKey(appConfig);
      callFidChangeCallbacks(key, fid);
      broadcastFidChange(key, fid);
    }
    function addCallback(appConfig, callback) {
      getBroadcastChannel();
      var key = getKey(appConfig);
      var callbackSet = fidChangeCallbacks.get(key);
      if (!callbackSet) {
        callbackSet = new Set();
        fidChangeCallbacks.set(key, callbackSet);
      }
      callbackSet.add(callback);
    }
    function removeCallback(appConfig, callback) {
      var key = getKey(appConfig);
      var callbackSet = fidChangeCallbacks.get(key);
      if (!callbackSet) {
        return;
      }
      callbackSet.delete(callback);
      if (callbackSet.size === 0) {
        fidChangeCallbacks.delete(key);
      }
      closeBroadcastChannel();
    }
    function callFidChangeCallbacks(key, fid) {
      var e_1, _a2;
      var callbacks = fidChangeCallbacks.get(key);
      if (!callbacks) {
        return;
      }
      try {
        for (var callbacks_1 = tslib2.__values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
          var callback = callbacks_1_1.value;
          callback(fid);
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (callbacks_1_1 && !callbacks_1_1.done && (_a2 = callbacks_1.return))
            _a2.call(callbacks_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
    }
    function broadcastFidChange(key, fid) {
      var channel2 = getBroadcastChannel();
      if (channel2) {
        channel2.postMessage({ key, fid });
      }
      closeBroadcastChannel();
    }
    var broadcastChannel = null;
    function getBroadcastChannel() {
      if (!broadcastChannel && "BroadcastChannel" in self) {
        broadcastChannel = new BroadcastChannel("[Firebase] FID Change");
        broadcastChannel.onmessage = function(e) {
          callFidChangeCallbacks(e.data.key, e.data.fid);
        };
      }
      return broadcastChannel;
    }
    function closeBroadcastChannel() {
      if (fidChangeCallbacks.size === 0 && broadcastChannel) {
        broadcastChannel.close();
        broadcastChannel = null;
      }
    }
    var DATABASE_NAME = "firebase-installations-database";
    var DATABASE_VERSION = 1;
    var OBJECT_STORE_NAME = "firebase-installations-store";
    var dbPromise = null;
    function getDbPromise() {
      if (!dbPromise) {
        dbPromise = idb.openDb(DATABASE_NAME, DATABASE_VERSION, function(upgradeDB) {
          switch (upgradeDB.oldVersion) {
            case 0:
              upgradeDB.createObjectStore(OBJECT_STORE_NAME);
          }
        });
      }
      return dbPromise;
    }
    function set(appConfig, value) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var key, db, tx, objectStore, oldValue;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              key = getKey(appConfig);
              return [4, getDbPromise()];
            case 1:
              db = _a2.sent();
              tx = db.transaction(OBJECT_STORE_NAME, "readwrite");
              objectStore = tx.objectStore(OBJECT_STORE_NAME);
              return [4, objectStore.get(key)];
            case 2:
              oldValue = _a2.sent();
              return [4, objectStore.put(value, key)];
            case 3:
              _a2.sent();
              return [4, tx.complete];
            case 4:
              _a2.sent();
              if (!oldValue || oldValue.fid !== value.fid) {
                fidChanged(appConfig, value.fid);
              }
              return [2, value];
          }
        });
      });
    }
    function remove6(appConfig) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var key, db, tx;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              key = getKey(appConfig);
              return [4, getDbPromise()];
            case 1:
              db = _a2.sent();
              tx = db.transaction(OBJECT_STORE_NAME, "readwrite");
              return [4, tx.objectStore(OBJECT_STORE_NAME).delete(key)];
            case 2:
              _a2.sent();
              return [4, tx.complete];
            case 3:
              _a2.sent();
              return [2];
          }
        });
      });
    }
    function update(appConfig, updateFn) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var key, db, tx, store, oldValue, newValue;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              key = getKey(appConfig);
              return [4, getDbPromise()];
            case 1:
              db = _a2.sent();
              tx = db.transaction(OBJECT_STORE_NAME, "readwrite");
              store = tx.objectStore(OBJECT_STORE_NAME);
              return [4, store.get(key)];
            case 2:
              oldValue = _a2.sent();
              newValue = updateFn(oldValue);
              if (!(newValue === void 0))
                return [3, 4];
              return [4, store.delete(key)];
            case 3:
              _a2.sent();
              return [3, 6];
            case 4:
              return [4, store.put(newValue, key)];
            case 5:
              _a2.sent();
              _a2.label = 6;
            case 6:
              return [4, tx.complete];
            case 7:
              _a2.sent();
              if (newValue && (!oldValue || oldValue.fid !== newValue.fid)) {
                fidChanged(appConfig, newValue.fid);
              }
              return [2, newValue];
          }
        });
      });
    }
    function getInstallationEntry(appConfig) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var registrationPromise, installationEntry;
        var _a2;
        return tslib2.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, update(appConfig, function(oldEntry) {
                var installationEntry2 = updateOrCreateInstallationEntry(oldEntry);
                var entryWithPromise = triggerRegistrationIfNecessary(appConfig, installationEntry2);
                registrationPromise = entryWithPromise.registrationPromise;
                return entryWithPromise.installationEntry;
              })];
            case 1:
              installationEntry = _b.sent();
              if (!(installationEntry.fid === INVALID_FID))
                return [3, 3];
              _a2 = {};
              return [4, registrationPromise];
            case 2:
              return [2, (_a2.installationEntry = _b.sent(), _a2)];
            case 3:
              return [2, {
                installationEntry,
                registrationPromise
              }];
          }
        });
      });
    }
    function updateOrCreateInstallationEntry(oldEntry) {
      var entry = oldEntry || {
        fid: generateFid(),
        registrationStatus: 0
      };
      return clearTimedOutRequest(entry);
    }
    function triggerRegistrationIfNecessary(appConfig, installationEntry) {
      if (installationEntry.registrationStatus === 0) {
        if (!navigator.onLine) {
          var registrationPromiseWithError = Promise.reject(ERROR_FACTORY.create("app-offline"));
          return {
            installationEntry,
            registrationPromise: registrationPromiseWithError
          };
        }
        var inProgressEntry = {
          fid: installationEntry.fid,
          registrationStatus: 1,
          registrationTime: Date.now()
        };
        var registrationPromise = registerInstallation(appConfig, inProgressEntry);
        return { installationEntry: inProgressEntry, registrationPromise };
      } else if (installationEntry.registrationStatus === 1) {
        return {
          installationEntry,
          registrationPromise: waitUntilFidRegistration(appConfig)
        };
      } else {
        return { installationEntry };
      }
    }
    function registerInstallation(appConfig, installationEntry) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var registeredInstallationEntry, e_1;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              _a2.trys.push([0, 2, , 7]);
              return [4, createInstallationRequest(appConfig, installationEntry)];
            case 1:
              registeredInstallationEntry = _a2.sent();
              return [2, set(appConfig, registeredInstallationEntry)];
            case 2:
              e_1 = _a2.sent();
              if (!(isServerError(e_1) && e_1.customData.serverCode === 409))
                return [3, 4];
              return [4, remove6(appConfig)];
            case 3:
              _a2.sent();
              return [3, 6];
            case 4:
              return [4, set(appConfig, {
                fid: installationEntry.fid,
                registrationStatus: 0
              })];
            case 5:
              _a2.sent();
              _a2.label = 6;
            case 6:
              throw e_1;
            case 7:
              return [2];
          }
        });
      });
    }
    function waitUntilFidRegistration(appConfig) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var entry, _a2, installationEntry, registrationPromise;
        return tslib2.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, updateInstallationRequest(appConfig)];
            case 1:
              entry = _b.sent();
              _b.label = 2;
            case 2:
              if (!(entry.registrationStatus === 1))
                return [3, 5];
              return [4, sleep(100)];
            case 3:
              _b.sent();
              return [4, updateInstallationRequest(appConfig)];
            case 4:
              entry = _b.sent();
              return [3, 2];
            case 5:
              if (!(entry.registrationStatus === 0))
                return [3, 7];
              return [4, getInstallationEntry(appConfig)];
            case 6:
              _a2 = _b.sent(), installationEntry = _a2.installationEntry, registrationPromise = _a2.registrationPromise;
              if (registrationPromise) {
                return [2, registrationPromise];
              } else {
                return [2, installationEntry];
              }
            case 7:
              return [2, entry];
          }
        });
      });
    }
    function updateInstallationRequest(appConfig) {
      return update(appConfig, function(oldEntry) {
        if (!oldEntry) {
          throw ERROR_FACTORY.create("installation-not-found");
        }
        return clearTimedOutRequest(oldEntry);
      });
    }
    function clearTimedOutRequest(entry) {
      if (hasInstallationRequestTimedOut(entry)) {
        return {
          fid: entry.fid,
          registrationStatus: 0
        };
      }
      return entry;
    }
    function hasInstallationRequestTimedOut(installationEntry) {
      return installationEntry.registrationStatus === 1 && installationEntry.registrationTime + PENDING_TIMEOUT_MS < Date.now();
    }
    function generateAuthTokenRequest(_a2, installationEntry) {
      var appConfig = _a2.appConfig, platformLoggerProvider = _a2.platformLoggerProvider;
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var endpoint, headers, platformLogger, body, request, response, responseValue, completedAuthToken;
        return tslib2.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              endpoint = getGenerateAuthTokenEndpoint(appConfig, installationEntry);
              headers = getHeadersWithAuth(appConfig, installationEntry);
              platformLogger = platformLoggerProvider.getImmediate({
                optional: true
              });
              if (platformLogger) {
                headers.append("x-firebase-client", platformLogger.getPlatformInfoString());
              }
              body = {
                installation: {
                  sdkVersion: PACKAGE_VERSION
                }
              };
              request = {
                method: "POST",
                headers,
                body: JSON.stringify(body)
              };
              return [4, retryIfServerError(function() {
                return fetch(endpoint, request);
              })];
            case 1:
              response = _b.sent();
              if (!response.ok)
                return [3, 3];
              return [4, response.json()];
            case 2:
              responseValue = _b.sent();
              completedAuthToken = extractAuthTokenInfoFromResponse(responseValue);
              return [2, completedAuthToken];
            case 3:
              return [4, getErrorFromResponse("Generate Auth Token", response)];
            case 4:
              throw _b.sent();
          }
        });
      });
    }
    function getGenerateAuthTokenEndpoint(appConfig, _a2) {
      var fid = _a2.fid;
      return getInstallationsEndpoint(appConfig) + "/" + fid + "/authTokens:generate";
    }
    function refreshAuthToken(installations, forceRefresh) {
      if (forceRefresh === void 0) {
        forceRefresh = false;
      }
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var tokenPromise, entry, authToken, _a2;
        return tslib2.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              return [4, update(installations.appConfig, function(oldEntry) {
                if (!isEntryRegistered(oldEntry)) {
                  throw ERROR_FACTORY.create("not-registered");
                }
                var oldAuthToken = oldEntry.authToken;
                if (!forceRefresh && isAuthTokenValid(oldAuthToken)) {
                  return oldEntry;
                } else if (oldAuthToken.requestStatus === 1) {
                  tokenPromise = waitUntilAuthTokenRequest(installations, forceRefresh);
                  return oldEntry;
                } else {
                  if (!navigator.onLine) {
                    throw ERROR_FACTORY.create("app-offline");
                  }
                  var inProgressEntry = makeAuthTokenRequestInProgressEntry(oldEntry);
                  tokenPromise = fetchAuthTokenFromServer(installations, inProgressEntry);
                  return inProgressEntry;
                }
              })];
            case 1:
              entry = _b.sent();
              if (!tokenPromise)
                return [3, 3];
              return [4, tokenPromise];
            case 2:
              _a2 = _b.sent();
              return [3, 4];
            case 3:
              _a2 = entry.authToken;
              _b.label = 4;
            case 4:
              authToken = _a2;
              return [2, authToken];
          }
        });
      });
    }
    function waitUntilAuthTokenRequest(installations, forceRefresh) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var entry, authToken;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, updateAuthTokenRequest(installations.appConfig)];
            case 1:
              entry = _a2.sent();
              _a2.label = 2;
            case 2:
              if (!(entry.authToken.requestStatus === 1))
                return [3, 5];
              return [4, sleep(100)];
            case 3:
              _a2.sent();
              return [4, updateAuthTokenRequest(installations.appConfig)];
            case 4:
              entry = _a2.sent();
              return [3, 2];
            case 5:
              authToken = entry.authToken;
              if (authToken.requestStatus === 0) {
                return [2, refreshAuthToken(installations, forceRefresh)];
              } else {
                return [2, authToken];
              }
          }
        });
      });
    }
    function updateAuthTokenRequest(appConfig) {
      return update(appConfig, function(oldEntry) {
        if (!isEntryRegistered(oldEntry)) {
          throw ERROR_FACTORY.create("not-registered");
        }
        var oldAuthToken = oldEntry.authToken;
        if (hasAuthTokenRequestTimedOut(oldAuthToken)) {
          return tslib2.__assign(tslib2.__assign({}, oldEntry), { authToken: { requestStatus: 0 } });
        }
        return oldEntry;
      });
    }
    function fetchAuthTokenFromServer(installations, installationEntry) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var authToken, updatedInstallationEntry, e_1, updatedInstallationEntry;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              _a2.trys.push([0, 3, , 8]);
              return [4, generateAuthTokenRequest(installations, installationEntry)];
            case 1:
              authToken = _a2.sent();
              updatedInstallationEntry = tslib2.__assign(tslib2.__assign({}, installationEntry), { authToken });
              return [4, set(installations.appConfig, updatedInstallationEntry)];
            case 2:
              _a2.sent();
              return [2, authToken];
            case 3:
              e_1 = _a2.sent();
              if (!(isServerError(e_1) && (e_1.customData.serverCode === 401 || e_1.customData.serverCode === 404)))
                return [3, 5];
              return [4, remove6(installations.appConfig)];
            case 4:
              _a2.sent();
              return [3, 7];
            case 5:
              updatedInstallationEntry = tslib2.__assign(tslib2.__assign({}, installationEntry), { authToken: { requestStatus: 0 } });
              return [4, set(installations.appConfig, updatedInstallationEntry)];
            case 6:
              _a2.sent();
              _a2.label = 7;
            case 7:
              throw e_1;
            case 8:
              return [2];
          }
        });
      });
    }
    function isEntryRegistered(installationEntry) {
      return installationEntry !== void 0 && installationEntry.registrationStatus === 2;
    }
    function isAuthTokenValid(authToken) {
      return authToken.requestStatus === 2 && !isAuthTokenExpired(authToken);
    }
    function isAuthTokenExpired(authToken) {
      var now = Date.now();
      return now < authToken.creationTime || authToken.creationTime + authToken.expiresIn < now + TOKEN_EXPIRATION_BUFFER;
    }
    function makeAuthTokenRequestInProgressEntry(oldEntry) {
      var inProgressAuthToken = {
        requestStatus: 1,
        requestTime: Date.now()
      };
      return tslib2.__assign(tslib2.__assign({}, oldEntry), { authToken: inProgressAuthToken });
    }
    function hasAuthTokenRequestTimedOut(authToken) {
      return authToken.requestStatus === 1 && authToken.requestTime + PENDING_TIMEOUT_MS < Date.now();
    }
    function getId(installations) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var installationsImpl, _a2, installationEntry, registrationPromise;
        return tslib2.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              installationsImpl = installations;
              return [4, getInstallationEntry(installationsImpl.appConfig)];
            case 1:
              _a2 = _b.sent(), installationEntry = _a2.installationEntry, registrationPromise = _a2.registrationPromise;
              if (registrationPromise) {
                registrationPromise.catch(console.error);
              } else {
                refreshAuthToken(installationsImpl).catch(console.error);
              }
              return [2, installationEntry.fid];
          }
        });
      });
    }
    function getToken(installations, forceRefresh) {
      if (forceRefresh === void 0) {
        forceRefresh = false;
      }
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var installationsImpl, authToken;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              installationsImpl = installations;
              return [4, completeInstallationRegistration(installationsImpl.appConfig)];
            case 1:
              _a2.sent();
              return [4, refreshAuthToken(installationsImpl, forceRefresh)];
            case 2:
              authToken = _a2.sent();
              return [2, authToken.token];
          }
        });
      });
    }
    function completeInstallationRegistration(appConfig) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var registrationPromise;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, getInstallationEntry(appConfig)];
            case 1:
              registrationPromise = _a2.sent().registrationPromise;
              if (!registrationPromise)
                return [3, 3];
              return [4, registrationPromise];
            case 2:
              _a2.sent();
              _a2.label = 3;
            case 3:
              return [2];
          }
        });
      });
    }
    function deleteInstallationRequest(appConfig, installationEntry) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var endpoint, headers, request, response;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              endpoint = getDeleteEndpoint(appConfig, installationEntry);
              headers = getHeadersWithAuth(appConfig, installationEntry);
              request = {
                method: "DELETE",
                headers
              };
              return [4, retryIfServerError(function() {
                return fetch(endpoint, request);
              })];
            case 1:
              response = _a2.sent();
              if (!!response.ok)
                return [3, 3];
              return [4, getErrorFromResponse("Delete Installation", response)];
            case 2:
              throw _a2.sent();
            case 3:
              return [2];
          }
        });
      });
    }
    function getDeleteEndpoint(appConfig, _a2) {
      var fid = _a2.fid;
      return getInstallationsEndpoint(appConfig) + "/" + fid;
    }
    function deleteInstallations(installations) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var appConfig, entry;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              appConfig = installations.appConfig;
              return [4, update(appConfig, function(oldEntry) {
                if (oldEntry && oldEntry.registrationStatus === 0) {
                  return void 0;
                }
                return oldEntry;
              })];
            case 1:
              entry = _a2.sent();
              if (!entry)
                return [3, 6];
              if (!(entry.registrationStatus === 1))
                return [3, 2];
              throw ERROR_FACTORY.create("delete-pending-registration");
            case 2:
              if (!(entry.registrationStatus === 2))
                return [3, 6];
              if (!!navigator.onLine)
                return [3, 3];
              throw ERROR_FACTORY.create("app-offline");
            case 3:
              return [4, deleteInstallationRequest(appConfig, entry)];
            case 4:
              _a2.sent();
              return [4, remove6(appConfig)];
            case 5:
              _a2.sent();
              _a2.label = 6;
            case 6:
              return [2];
          }
        });
      });
    }
    function onIdChange(installations, callback) {
      var appConfig = installations.appConfig;
      addCallback(appConfig, callback);
      return function() {
        removeCallback(appConfig, callback);
      };
    }
    function getInstallations(app$1) {
      if (app$1 === void 0) {
        app$1 = app2.getApp();
      }
      var installationsImpl = app2._getProvider(app$1, "installations").getImmediate();
      return installationsImpl;
    }
    function extractAppConfig(app3) {
      var e_1, _a2;
      if (!app3 || !app3.options) {
        throw getMissingValueError("App Configuration");
      }
      if (!app3.name) {
        throw getMissingValueError("App Name");
      }
      var configKeys = [
        "projectId",
        "apiKey",
        "appId"
      ];
      try {
        for (var configKeys_1 = tslib2.__values(configKeys), configKeys_1_1 = configKeys_1.next(); !configKeys_1_1.done; configKeys_1_1 = configKeys_1.next()) {
          var keyName = configKeys_1_1.value;
          if (!app3.options[keyName]) {
            throw getMissingValueError(keyName);
          }
        }
      } catch (e_1_1) {
        e_1 = { error: e_1_1 };
      } finally {
        try {
          if (configKeys_1_1 && !configKeys_1_1.done && (_a2 = configKeys_1.return))
            _a2.call(configKeys_1);
        } finally {
          if (e_1)
            throw e_1.error;
        }
      }
      return {
        appName: app3.name,
        projectId: app3.options.projectId,
        apiKey: app3.options.apiKey,
        appId: app3.options.appId
      };
    }
    function getMissingValueError(valueName) {
      return ERROR_FACTORY.create("missing-app-config-values", {
        valueName
      });
    }
    var INSTALLATIONS_NAME = "installations";
    var INSTALLATIONS_NAME_INTERNAL = "installations-internal";
    var publicFactory = function(container) {
      var app$1 = container.getProvider("app").getImmediate();
      var appConfig = extractAppConfig(app$1);
      var platformLoggerProvider = app2._getProvider(app$1, "platform-logger");
      var installationsImpl = {
        app: app$1,
        appConfig,
        platformLoggerProvider,
        _delete: function() {
          return Promise.resolve();
        }
      };
      return installationsImpl;
    };
    var internalFactory = function(container) {
      var app$1 = container.getProvider("app").getImmediate();
      var installations = app2._getProvider(app$1, INSTALLATIONS_NAME).getImmediate();
      var installationsInternal = {
        getId: function() {
          return getId(installations);
        },
        getToken: function(forceRefresh) {
          return getToken(installations, forceRefresh);
        }
      };
      return installationsInternal;
    };
    function registerInstallations() {
      app2._registerComponent(new component2.Component(INSTALLATIONS_NAME, publicFactory, "PUBLIC"));
      app2._registerComponent(new component2.Component(INSTALLATIONS_NAME_INTERNAL, internalFactory, "PRIVATE"));
    }
    registerInstallations();
    app2.registerVersion(name2, version2);
    exports.deleteInstallations = deleteInstallations;
    exports.getId = getId;
    exports.getInstallations = getInstallations;
    exports.getToken = getToken;
    exports.onIdChange = onIdChange;
  }
});

// node_modules/@firebase/analytics/dist/index.cjs.js
var require_index_cjs5 = __commonJS({
  "node_modules/@firebase/analytics/dist/index.cjs.js"(exports) {
    init_shims();
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var app2 = require_index_cjs3();
    var tslib2 = require_tslib();
    var logger$1 = require_index_cjs2();
    var util2 = require_index_node_cjs();
    var component2 = require_index_cjs();
    require_index_cjs4();
    var ANALYTICS_TYPE = "analytics";
    var GA_FID_KEY = "firebase_id";
    var ORIGIN_KEY = "origin";
    var FETCH_TIMEOUT_MILLIS = 60 * 1e3;
    var DYNAMIC_CONFIG_URL = "https://firebase.googleapis.com/v1alpha/projects/-/apps/{app-id}/webConfig";
    var GTAG_URL = "https://www.googletagmanager.com/gtag/js";
    var logger2 = new logger$1.Logger("@firebase/analytics");
    function promiseAllSettled(promises) {
      return Promise.all(promises.map(function(promise) {
        return promise.catch(function(e) {
          return e;
        });
      }));
    }
    function insertScriptTag(dataLayerName2, measurementId) {
      var script = document.createElement("script");
      script.src = GTAG_URL + "?l=" + dataLayerName2 + "&id=" + measurementId;
      script.async = true;
      document.head.appendChild(script);
    }
    function getOrCreateDataLayer(dataLayerName2) {
      var dataLayer = [];
      if (Array.isArray(window[dataLayerName2])) {
        dataLayer = window[dataLayerName2];
      } else {
        window[dataLayerName2] = dataLayer;
      }
      return dataLayer;
    }
    function gtagOnConfig(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2, measurementId, gtagParams) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var correspondingAppId, dynamicConfigResults, foundConfig, e_1;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              correspondingAppId = measurementIdToAppId2[measurementId];
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, 7, , 8]);
              if (!correspondingAppId)
                return [3, 3];
              return [4, initializationPromisesMap2[correspondingAppId]];
            case 2:
              _a2.sent();
              return [3, 6];
            case 3:
              return [4, promiseAllSettled(dynamicConfigPromisesList2)];
            case 4:
              dynamicConfigResults = _a2.sent();
              foundConfig = dynamicConfigResults.find(function(config) {
                return config.measurementId === measurementId;
              });
              if (!foundConfig)
                return [3, 6];
              return [4, initializationPromisesMap2[foundConfig.appId]];
            case 5:
              _a2.sent();
              _a2.label = 6;
            case 6:
              return [3, 8];
            case 7:
              e_1 = _a2.sent();
              logger2.error(e_1);
              return [3, 8];
            case 8:
              gtagCore("config", measurementId, gtagParams);
              return [2];
          }
        });
      });
    }
    function gtagOnEvent(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementId, gtagParams) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var initializationPromisesToWaitFor, gaSendToList, dynamicConfigResults, _loop_1, _i, gaSendToList_1, sendToId, state_1, e_2;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              _a2.trys.push([0, 4, , 5]);
              initializationPromisesToWaitFor = [];
              if (!(gtagParams && gtagParams["send_to"]))
                return [3, 2];
              gaSendToList = gtagParams["send_to"];
              if (!Array.isArray(gaSendToList)) {
                gaSendToList = [gaSendToList];
              }
              return [4, promiseAllSettled(dynamicConfigPromisesList2)];
            case 1:
              dynamicConfigResults = _a2.sent();
              _loop_1 = function(sendToId2) {
                var foundConfig = dynamicConfigResults.find(function(config) {
                  return config.measurementId === sendToId2;
                });
                var initializationPromise = foundConfig && initializationPromisesMap2[foundConfig.appId];
                if (initializationPromise) {
                  initializationPromisesToWaitFor.push(initializationPromise);
                } else {
                  initializationPromisesToWaitFor = [];
                  return "break";
                }
              };
              for (_i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {
                sendToId = gaSendToList_1[_i];
                state_1 = _loop_1(sendToId);
                if (state_1 === "break")
                  break;
              }
              _a2.label = 2;
            case 2:
              if (initializationPromisesToWaitFor.length === 0) {
                initializationPromisesToWaitFor = Object.values(initializationPromisesMap2);
              }
              return [4, Promise.all(initializationPromisesToWaitFor)];
            case 3:
              _a2.sent();
              gtagCore("event", measurementId, gtagParams || {});
              return [3, 5];
            case 4:
              e_2 = _a2.sent();
              logger2.error(e_2);
              return [3, 5];
            case 5:
              return [2];
          }
        });
      });
    }
    function wrapGtag(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2) {
      function gtagWrapper(command, idOrNameOrParams, gtagParams) {
        return tslib2.__awaiter(this, void 0, void 0, function() {
          var e_3;
          return tslib2.__generator(this, function(_a2) {
            switch (_a2.label) {
              case 0:
                _a2.trys.push([0, 6, , 7]);
                if (!(command === "event"))
                  return [3, 2];
                return [4, gtagOnEvent(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, idOrNameOrParams, gtagParams)];
              case 1:
                _a2.sent();
                return [3, 5];
              case 2:
                if (!(command === "config"))
                  return [3, 4];
                return [4, gtagOnConfig(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2, idOrNameOrParams, gtagParams)];
              case 3:
                _a2.sent();
                return [3, 5];
              case 4:
                gtagCore("set", idOrNameOrParams);
                _a2.label = 5;
              case 5:
                return [3, 7];
              case 6:
                e_3 = _a2.sent();
                logger2.error(e_3);
                return [3, 7];
              case 7:
                return [2];
            }
          });
        });
      }
      return gtagWrapper;
    }
    function wrapOrCreateGtag(initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2, dataLayerName2, gtagFunctionName) {
      var gtagCore = function() {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
          _args[_i] = arguments[_i];
        }
        window[dataLayerName2].push(arguments);
      };
      if (window[gtagFunctionName] && typeof window[gtagFunctionName] === "function") {
        gtagCore = window[gtagFunctionName];
      }
      window[gtagFunctionName] = wrapGtag(gtagCore, initializationPromisesMap2, dynamicConfigPromisesList2, measurementIdToAppId2);
      return {
        gtagCore,
        wrappedGtag: window[gtagFunctionName]
      };
    }
    function findGtagScriptOnPage() {
      var scriptTags = window.document.getElementsByTagName("script");
      for (var _i = 0, _a2 = Object.values(scriptTags); _i < _a2.length; _i++) {
        var tag = _a2[_i];
        if (tag.src && tag.src.includes(GTAG_URL)) {
          return tag;
        }
      }
      return null;
    }
    var _a;
    var ERRORS = (_a = {}, _a["already-exists"] = "A Firebase Analytics instance with the appId {$id}  already exists. Only one Firebase Analytics instance can be created for each appId.", _a["already-initialized"] = "initializeAnalytics() cannot be called again with different options than those it was initially called with. It can be called again with the same options to return the existing instance, or getAnalytics() can be used to get a reference to the already-intialized instance.", _a["already-initialized-settings"] = "Firebase Analytics has already been initialized.settings() must be called before initializing any Analytics instanceor it will have no effect.", _a["interop-component-reg-failed"] = "Firebase Analytics Interop Component failed to instantiate: {$reason}", _a["invalid-analytics-context"] = "Firebase Analytics is not supported in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}", _a["indexeddb-unavailable"] = "IndexedDB unavailable or restricted in this environment. Wrap initialization of analytics in analytics.isSupported() to prevent initialization in unsupported environments. Details: {$errorInfo}", _a["fetch-throttle"] = "The config fetch request timed out while in an exponential backoff state. Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.", _a["config-fetch-failed"] = "Dynamic config fetch failed: [{$httpStatus}] {$responseMessage}", _a["no-api-key"] = 'The "apiKey" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid API key.', _a["no-app-id"] = 'The "appId" field is empty in the local Firebase config. Firebase Analytics requires this field tocontain a valid app ID.', _a);
    var ERROR_FACTORY = new util2.ErrorFactory("analytics", "Analytics", ERRORS);
    var LONG_RETRY_FACTOR = 30;
    var BASE_INTERVAL_MILLIS = 1e3;
    var RetryData = function() {
      function RetryData2(throttleMetadata, intervalMillis) {
        if (throttleMetadata === void 0) {
          throttleMetadata = {};
        }
        if (intervalMillis === void 0) {
          intervalMillis = BASE_INTERVAL_MILLIS;
        }
        this.throttleMetadata = throttleMetadata;
        this.intervalMillis = intervalMillis;
      }
      RetryData2.prototype.getThrottleMetadata = function(appId) {
        return this.throttleMetadata[appId];
      };
      RetryData2.prototype.setThrottleMetadata = function(appId, metadata2) {
        this.throttleMetadata[appId] = metadata2;
      };
      RetryData2.prototype.deleteThrottleMetadata = function(appId) {
        delete this.throttleMetadata[appId];
      };
      return RetryData2;
    }();
    var defaultRetryData = new RetryData();
    function getHeaders(apiKey) {
      return new Headers({
        Accept: "application/json",
        "x-goog-api-key": apiKey
      });
    }
    function fetchDynamicConfig(appFields) {
      var _a2;
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var appId, apiKey, request, appUrl, response, errorMessage, jsonResponse;
        return tslib2.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              appId = appFields.appId, apiKey = appFields.apiKey;
              request = {
                method: "GET",
                headers: getHeaders(apiKey)
              };
              appUrl = DYNAMIC_CONFIG_URL.replace("{app-id}", appId);
              return [4, fetch(appUrl, request)];
            case 1:
              response = _b.sent();
              if (!(response.status !== 200 && response.status !== 304))
                return [3, 6];
              errorMessage = "";
              _b.label = 2;
            case 2:
              _b.trys.push([2, 4, , 5]);
              return [4, response.json()];
            case 3:
              jsonResponse = _b.sent();
              if ((_a2 = jsonResponse.error) === null || _a2 === void 0 ? void 0 : _a2.message) {
                errorMessage = jsonResponse.error.message;
              }
              return [3, 5];
            case 4:
              _b.sent();
              return [3, 5];
            case 5:
              throw ERROR_FACTORY.create("config-fetch-failed", {
                httpStatus: response.status,
                responseMessage: errorMessage
              });
            case 6:
              return [2, response.json()];
          }
        });
      });
    }
    function fetchDynamicConfigWithRetry(app3, retryData, timeoutMillis) {
      if (retryData === void 0) {
        retryData = defaultRetryData;
      }
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var _a2, appId, apiKey, measurementId, throttleMetadata, signal;
        var _this = this;
        return tslib2.__generator(this, function(_b) {
          _a2 = app3.options, appId = _a2.appId, apiKey = _a2.apiKey, measurementId = _a2.measurementId;
          if (!appId) {
            throw ERROR_FACTORY.create("no-app-id");
          }
          if (!apiKey) {
            if (measurementId) {
              return [2, {
                measurementId,
                appId
              }];
            }
            throw ERROR_FACTORY.create("no-api-key");
          }
          throttleMetadata = retryData.getThrottleMetadata(appId) || {
            backoffCount: 0,
            throttleEndTimeMillis: Date.now()
          };
          signal = new AnalyticsAbortSignal();
          setTimeout(function() {
            return tslib2.__awaiter(_this, void 0, void 0, function() {
              return tslib2.__generator(this, function(_a3) {
                signal.abort();
                return [2];
              });
            });
          }, timeoutMillis !== void 0 ? timeoutMillis : FETCH_TIMEOUT_MILLIS);
          return [2, attemptFetchDynamicConfigWithRetry({ appId, apiKey, measurementId }, throttleMetadata, signal, retryData)];
        });
      });
    }
    function attemptFetchDynamicConfigWithRetry(appFields, _a2, signal, retryData) {
      var throttleEndTimeMillis = _a2.throttleEndTimeMillis, backoffCount = _a2.backoffCount;
      if (retryData === void 0) {
        retryData = defaultRetryData;
      }
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var appId, measurementId, e_1, response, e_2, backoffMillis, throttleMetadata;
        return tslib2.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              appId = appFields.appId, measurementId = appFields.measurementId;
              _b.label = 1;
            case 1:
              _b.trys.push([1, 3, , 4]);
              return [4, setAbortableTimeout(signal, throttleEndTimeMillis)];
            case 2:
              _b.sent();
              return [3, 4];
            case 3:
              e_1 = _b.sent();
              if (measurementId) {
                logger2.warn("Timed out fetching this Firebase app's measurement ID from the server." + (" Falling back to the measurement ID " + measurementId) + (' provided in the "measurementId" field in the local Firebase config. [' + e_1.message + "]"));
                return [2, { appId, measurementId }];
              }
              throw e_1;
            case 4:
              _b.trys.push([4, 6, , 7]);
              return [4, fetchDynamicConfig(appFields)];
            case 5:
              response = _b.sent();
              retryData.deleteThrottleMetadata(appId);
              return [2, response];
            case 6:
              e_2 = _b.sent();
              if (!isRetriableError(e_2)) {
                retryData.deleteThrottleMetadata(appId);
                if (measurementId) {
                  logger2.warn("Failed to fetch this Firebase app's measurement ID from the server." + (" Falling back to the measurement ID " + measurementId) + (' provided in the "measurementId" field in the local Firebase config. [' + e_2.message + "]"));
                  return [2, { appId, measurementId }];
                } else {
                  throw e_2;
                }
              }
              backoffMillis = Number(e_2.customData.httpStatus) === 503 ? util2.calculateBackoffMillis(backoffCount, retryData.intervalMillis, LONG_RETRY_FACTOR) : util2.calculateBackoffMillis(backoffCount, retryData.intervalMillis);
              throttleMetadata = {
                throttleEndTimeMillis: Date.now() + backoffMillis,
                backoffCount: backoffCount + 1
              };
              retryData.setThrottleMetadata(appId, throttleMetadata);
              logger2.debug("Calling attemptFetch again in " + backoffMillis + " millis");
              return [2, attemptFetchDynamicConfigWithRetry(appFields, throttleMetadata, signal, retryData)];
            case 7:
              return [2];
          }
        });
      });
    }
    function setAbortableTimeout(signal, throttleEndTimeMillis) {
      return new Promise(function(resolve6, reject) {
        var backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);
        var timeout = setTimeout(resolve6, backoffMillis);
        signal.addEventListener(function() {
          clearTimeout(timeout);
          reject(ERROR_FACTORY.create("fetch-throttle", {
            throttleEndTimeMillis
          }));
        });
      });
    }
    function isRetriableError(e) {
      if (!(e instanceof util2.FirebaseError) || !e.customData) {
        return false;
      }
      var httpStatus = Number(e.customData["httpStatus"]);
      return httpStatus === 429 || httpStatus === 500 || httpStatus === 503 || httpStatus === 504;
    }
    var AnalyticsAbortSignal = function() {
      function AnalyticsAbortSignal2() {
        this.listeners = [];
      }
      AnalyticsAbortSignal2.prototype.addEventListener = function(listener) {
        this.listeners.push(listener);
      };
      AnalyticsAbortSignal2.prototype.abort = function() {
        this.listeners.forEach(function(listener) {
          return listener();
        });
      };
      return AnalyticsAbortSignal2;
    }();
    function validateIndexedDB() {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var e_1;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!!util2.isIndexedDBAvailable())
                return [3, 1];
              logger2.warn(ERROR_FACTORY.create("indexeddb-unavailable", {
                errorInfo: "IndexedDB is not available in this environment."
              }).message);
              return [2, false];
            case 1:
              _a2.trys.push([1, 3, , 4]);
              return [4, util2.validateIndexedDBOpenable()];
            case 2:
              _a2.sent();
              return [3, 4];
            case 3:
              e_1 = _a2.sent();
              logger2.warn(ERROR_FACTORY.create("indexeddb-unavailable", {
                errorInfo: e_1
              }).message);
              return [2, false];
            case 4:
              return [2, true];
          }
        });
      });
    }
    function _initializeAnalytics(app3, dynamicConfigPromisesList2, measurementIdToAppId2, installations, gtagCore, dataLayerName2, options2) {
      var _a2;
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var dynamicConfigPromise, fidPromise, _b, dynamicConfig, fid, configProperties;
        return tslib2.__generator(this, function(_c) {
          switch (_c.label) {
            case 0:
              dynamicConfigPromise = fetchDynamicConfigWithRetry(app3);
              dynamicConfigPromise.then(function(config) {
                measurementIdToAppId2[config.measurementId] = config.appId;
                if (app3.options.measurementId && config.measurementId !== app3.options.measurementId) {
                  logger2.warn("The measurement ID in the local Firebase config (" + app3.options.measurementId + ")" + (" does not match the measurement ID fetched from the server (" + config.measurementId + ").") + " To ensure analytics events are always sent to the correct Analytics property, update the measurement ID field in the local config or remove it from the local config.");
                }
              }).catch(function(e) {
                return logger2.error(e);
              });
              dynamicConfigPromisesList2.push(dynamicConfigPromise);
              fidPromise = validateIndexedDB().then(function(envIsValid) {
                if (envIsValid) {
                  return installations.getId();
                } else {
                  return void 0;
                }
              });
              return [4, Promise.all([
                dynamicConfigPromise,
                fidPromise
              ])];
            case 1:
              _b = _c.sent(), dynamicConfig = _b[0], fid = _b[1];
              if (!findGtagScriptOnPage()) {
                insertScriptTag(dataLayerName2, dynamicConfig.measurementId);
              }
              gtagCore("js", new Date());
              configProperties = (_a2 = options2 === null || options2 === void 0 ? void 0 : options2.config) !== null && _a2 !== void 0 ? _a2 : {};
              configProperties[ORIGIN_KEY] = "firebase";
              configProperties.update = true;
              if (fid != null) {
                configProperties[GA_FID_KEY] = fid;
              }
              gtagCore("config", dynamicConfig.measurementId, configProperties);
              return [2, dynamicConfig.measurementId];
          }
        });
      });
    }
    var AnalyticsService = function() {
      function AnalyticsService2(app3) {
        this.app = app3;
      }
      AnalyticsService2.prototype._delete = function() {
        delete initializationPromisesMap[this.app.options.appId];
        return Promise.resolve();
      };
      return AnalyticsService2;
    }();
    var initializationPromisesMap = {};
    var dynamicConfigPromisesList = [];
    var measurementIdToAppId = {};
    var dataLayerName = "dataLayer";
    var gtagName = "gtag";
    var gtagCoreFunction;
    var wrappedGtagFunction;
    var globalInitDone = false;
    function settings(options2) {
      if (globalInitDone) {
        throw ERROR_FACTORY.create("already-initialized");
      }
      if (options2.dataLayerName) {
        dataLayerName = options2.dataLayerName;
      }
      if (options2.gtagName) {
        gtagName = options2.gtagName;
      }
    }
    function warnOnBrowserContextMismatch() {
      var mismatchedEnvMessages = [];
      if (util2.isBrowserExtension()) {
        mismatchedEnvMessages.push("This is a browser extension environment.");
      }
      if (!util2.areCookiesEnabled()) {
        mismatchedEnvMessages.push("Cookies are not available.");
      }
      if (mismatchedEnvMessages.length > 0) {
        var details = mismatchedEnvMessages.map(function(message2, index2) {
          return "(" + (index2 + 1) + ") " + message2;
        }).join(" ");
        var err = ERROR_FACTORY.create("invalid-analytics-context", {
          errorInfo: details
        });
        logger2.warn(err.message);
      }
    }
    function factory2(app3, installations, options2) {
      warnOnBrowserContextMismatch();
      var appId = app3.options.appId;
      if (!appId) {
        throw ERROR_FACTORY.create("no-app-id");
      }
      if (!app3.options.apiKey) {
        if (app3.options.measurementId) {
          logger2.warn('The "apiKey" field is empty in the local Firebase config. This is needed to fetch the latest' + (" measurement ID for this Firebase app. Falling back to the measurement ID " + app3.options.measurementId) + ' provided in the "measurementId" field in the local Firebase config.');
        } else {
          throw ERROR_FACTORY.create("no-api-key");
        }
      }
      if (initializationPromisesMap[appId] != null) {
        throw ERROR_FACTORY.create("already-exists", {
          id: appId
        });
      }
      if (!globalInitDone) {
        getOrCreateDataLayer(dataLayerName);
        var _a2 = wrapOrCreateGtag(initializationPromisesMap, dynamicConfigPromisesList, measurementIdToAppId, dataLayerName, gtagName), wrappedGtag = _a2.wrappedGtag, gtagCore = _a2.gtagCore;
        wrappedGtagFunction = wrappedGtag;
        gtagCoreFunction = gtagCore;
        globalInitDone = true;
      }
      initializationPromisesMap[appId] = _initializeAnalytics(app3, dynamicConfigPromisesList, measurementIdToAppId, installations, gtagCoreFunction, dataLayerName, options2);
      var analyticsInstance = new AnalyticsService(app3);
      return analyticsInstance;
    }
    function logEvent$1(gtagFunction, initializationPromise, eventName, eventParams, options2) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var measurementId, params;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!(options2 && options2.global))
                return [3, 1];
              gtagFunction("event", eventName, eventParams);
              return [2];
            case 1:
              return [4, initializationPromise];
            case 2:
              measurementId = _a2.sent();
              params = tslib2.__assign(tslib2.__assign({}, eventParams), { "send_to": measurementId });
              gtagFunction("event", eventName, params);
              _a2.label = 3;
            case 3:
              return [2];
          }
        });
      });
    }
    function setCurrentScreen$1(gtagFunction, initializationPromise, screenName, options2) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var measurementId;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!(options2 && options2.global))
                return [3, 1];
              gtagFunction("set", { "screen_name": screenName });
              return [2, Promise.resolve()];
            case 1:
              return [4, initializationPromise];
            case 2:
              measurementId = _a2.sent();
              gtagFunction("config", measurementId, {
                update: true,
                "screen_name": screenName
              });
              _a2.label = 3;
            case 3:
              return [2];
          }
        });
      });
    }
    function setUserId$1(gtagFunction, initializationPromise, id, options2) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var measurementId;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (!(options2 && options2.global))
                return [3, 1];
              gtagFunction("set", { "user_id": id });
              return [2, Promise.resolve()];
            case 1:
              return [4, initializationPromise];
            case 2:
              measurementId = _a2.sent();
              gtagFunction("config", measurementId, {
                update: true,
                "user_id": id
              });
              _a2.label = 3;
            case 3:
              return [2];
          }
        });
      });
    }
    function setUserProperties$1(gtagFunction, initializationPromise, properties, options2) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var flatProperties, _i, _a2, key, measurementId;
        return tslib2.__generator(this, function(_b) {
          switch (_b.label) {
            case 0:
              if (!(options2 && options2.global))
                return [3, 1];
              flatProperties = {};
              for (_i = 0, _a2 = Object.keys(properties); _i < _a2.length; _i++) {
                key = _a2[_i];
                flatProperties["user_properties." + key] = properties[key];
              }
              gtagFunction("set", flatProperties);
              return [2, Promise.resolve()];
            case 1:
              return [4, initializationPromise];
            case 2:
              measurementId = _b.sent();
              gtagFunction("config", measurementId, {
                update: true,
                "user_properties": properties
              });
              _b.label = 3;
            case 3:
              return [2];
          }
        });
      });
    }
    function setAnalyticsCollectionEnabled$1(initializationPromise, enabled) {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var measurementId;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              return [4, initializationPromise];
            case 1:
              measurementId = _a2.sent();
              window["ga-disable-" + measurementId] = !enabled;
              return [2];
          }
        });
      });
    }
    function getAnalytics(app$1) {
      if (app$1 === void 0) {
        app$1 = app2.getApp();
      }
      app$1 = util2.getModularInstance(app$1);
      var analyticsProvider = app2._getProvider(app$1, ANALYTICS_TYPE);
      if (analyticsProvider.isInitialized()) {
        return analyticsProvider.getImmediate();
      }
      return initializeAnalytics(app$1);
    }
    function initializeAnalytics(app$1, options2) {
      if (options2 === void 0) {
        options2 = {};
      }
      var analyticsProvider = app2._getProvider(app$1, ANALYTICS_TYPE);
      if (analyticsProvider.isInitialized()) {
        var existingInstance = analyticsProvider.getImmediate();
        if (util2.deepEqual(options2, analyticsProvider.getOptions())) {
          return existingInstance;
        } else {
          throw ERROR_FACTORY.create("already-initialized");
        }
      }
      var analyticsInstance = analyticsProvider.initialize({ options: options2 });
      return analyticsInstance;
    }
    function isSupported() {
      return tslib2.__awaiter(this, void 0, void 0, function() {
        var isDBOpenable;
        return tslib2.__generator(this, function(_a2) {
          switch (_a2.label) {
            case 0:
              if (util2.isBrowserExtension()) {
                return [2, false];
              }
              if (!util2.areCookiesEnabled()) {
                return [2, false];
              }
              if (!util2.isIndexedDBAvailable()) {
                return [2, false];
              }
              _a2.label = 1;
            case 1:
              _a2.trys.push([1, 3, , 4]);
              return [4, util2.validateIndexedDBOpenable()];
            case 2:
              isDBOpenable = _a2.sent();
              return [2, isDBOpenable];
            case 3:
              _a2.sent();
              return [2, false];
            case 4:
              return [2];
          }
        });
      });
    }
    function setCurrentScreen(analyticsInstance, screenName, options2) {
      analyticsInstance = util2.getModularInstance(analyticsInstance);
      setCurrentScreen$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], screenName, options2).catch(function(e) {
        return logger2.error(e);
      });
    }
    function setUserId(analyticsInstance, id, options2) {
      analyticsInstance = util2.getModularInstance(analyticsInstance);
      setUserId$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], id, options2).catch(function(e) {
        return logger2.error(e);
      });
    }
    function setUserProperties(analyticsInstance, properties, options2) {
      analyticsInstance = util2.getModularInstance(analyticsInstance);
      setUserProperties$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], properties, options2).catch(function(e) {
        return logger2.error(e);
      });
    }
    function setAnalyticsCollectionEnabled(analyticsInstance, enabled) {
      analyticsInstance = util2.getModularInstance(analyticsInstance);
      setAnalyticsCollectionEnabled$1(initializationPromisesMap[analyticsInstance.app.options.appId], enabled).catch(function(e) {
        return logger2.error(e);
      });
    }
    function logEvent(analyticsInstance, eventName, eventParams, options2) {
      analyticsInstance = util2.getModularInstance(analyticsInstance);
      logEvent$1(wrappedGtagFunction, initializationPromisesMap[analyticsInstance.app.options.appId], eventName, eventParams, options2).catch(function(e) {
        return logger2.error(e);
      });
    }
    var name2 = "@firebase/analytics";
    var version2 = "0.7.1";
    function registerAnalytics() {
      app2._registerComponent(new component2.Component(ANALYTICS_TYPE, function(container, _a2) {
        var analyticsOptions = _a2.options;
        var app3 = container.getProvider("app").getImmediate();
        var installations = container.getProvider("installations-internal").getImmediate();
        return factory2(app3, installations, analyticsOptions);
      }, "PUBLIC"));
      app2._registerComponent(new component2.Component("analytics-internal", internalFactory, "PRIVATE"));
      app2.registerVersion(name2, version2);
      function internalFactory(container) {
        try {
          var analytics_1 = container.getProvider(ANALYTICS_TYPE).getImmediate();
          return {
            logEvent: function(eventName, eventParams, options2) {
              return logEvent(analytics_1, eventName, eventParams, options2);
            }
          };
        } catch (e) {
          throw ERROR_FACTORY.create("interop-component-reg-failed", {
            reason: e
          });
        }
      }
    }
    registerAnalytics();
    exports.getAnalytics = getAnalytics;
    exports.initializeAnalytics = initializeAnalytics;
    exports.isSupported = isSupported;
    exports.logEvent = logEvent;
    exports.setAnalyticsCollectionEnabled = setAnalyticsCollectionEnabled;
    exports.setCurrentScreen = setCurrentScreen;
    exports.setUserId = setUserId;
    exports.setUserProperties = setUserProperties;
    exports.settings = settings;
  }
});

// .svelte-kit/vercel/entry.js
__export(exports, {
  default: () => entry_default
});
init_shims();

// node_modules/@sveltejs/kit/dist/node.js
init_shims();
function getRawBody(req) {
  return new Promise((fulfil, reject) => {
    const h = req.headers;
    if (!h["content-type"]) {
      return fulfil(null);
    }
    req.on("error", reject);
    const length2 = Number(h["content-length"]);
    if (isNaN(length2) && h["transfer-encoding"] == null) {
      return fulfil(null);
    }
    let data = new Uint8Array(length2 || 0);
    if (length2 > 0) {
      let offset = 0;
      req.on("data", (chunk) => {
        const new_len = offset + Buffer.byteLength(chunk);
        if (new_len > length2) {
          return reject({
            status: 413,
            reason: 'Exceeded "Content-Length" limit'
          });
        }
        data.set(chunk, offset);
        offset = new_len;
      });
    } else {
      req.on("data", (chunk) => {
        const new_data = new Uint8Array(data.length + chunk.length);
        new_data.set(data, 0);
        new_data.set(chunk, data.length);
        data = new_data;
      });
    }
    req.on("end", () => {
      fulfil(data);
    });
  });
}

// .svelte-kit/output/server/app.js
init_shims();
var CryptoJS = __toModule(require_crypto_js());
var import_app = __toModule(require_index_cjs3());
var import_analytics = __toModule(require_index_cjs5());
var import_util2 = __toModule(require("util"));
var import_crypto2 = __toModule(require("crypto"));
var import_http2 = __toModule(require("http2"));
var import_os = __toModule(require("os"));
var import_tls = __toModule(require("tls"));
var import_fs = __toModule(require("fs"));
var import_dns = __toModule(require("dns"));
var import_net = __toModule(require("net"));
var import_http3 = __toModule(require("http"));
var import_url2 = __toModule(require("url"));
var import_zlib2 = __toModule(require("zlib"));
var import_events = __toModule(require("events"));
var import_stream2 = __toModule(require("stream"));
var import_path = __toModule(require("path"));
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var _map;
function get_single_valued_header(headers, key) {
  const value = headers[key];
  if (Array.isArray(value)) {
    if (value.length === 0) {
      return void 0;
    }
    if (value.length > 1) {
      throw new Error(`Multiple headers provided for ${key}. Multiple may be provided only for set-cookie`);
    }
    return value[0];
  }
  return value;
}
function coalesce_to_error(err) {
  return err instanceof Error || err && err.name && err.message ? err : new Error(JSON.stringify(err));
}
function lowercase_keys(obj) {
  const clone2 = {};
  for (const key in obj) {
    clone2[key.toLowerCase()] = obj[key];
  }
  return clone2;
}
function error$1(body) {
  return {
    status: 500,
    body,
    headers: {}
  };
}
function is_string(s2) {
  return typeof s2 === "string" || s2 instanceof String;
}
function is_content_type_textual(content_type) {
  if (!content_type)
    return true;
  const [type2] = content_type.split(";");
  return type2 === "text/plain" || type2 === "application/json" || type2 === "application/x-www-form-urlencoded" || type2 === "multipart/form-data";
}
async function render_endpoint(request, route, match) {
  const mod2 = await route.load();
  const handler = mod2[request.method.toLowerCase().replace("delete", "del")];
  if (!handler) {
    return;
  }
  const params = route.params(match);
  const response = await handler({ ...request, params });
  const preface = `Invalid response from route ${request.path}`;
  if (!response) {
    return;
  }
  if (typeof response !== "object") {
    return error$1(`${preface}: expected an object, got ${typeof response}`);
  }
  let { status = 200, body, headers = {} } = response;
  headers = lowercase_keys(headers);
  const type2 = get_single_valued_header(headers, "content-type");
  const is_type_textual = is_content_type_textual(type2);
  if (!is_type_textual && !(body instanceof Uint8Array || is_string(body))) {
    return error$1(`${preface}: body must be an instance of string or Uint8Array if content-type is not a supported textual content-type`);
  }
  let normalized_body;
  if ((typeof body === "object" || typeof body === "undefined") && !(body instanceof Uint8Array) && (!type2 || type2.startsWith("application/json"))) {
    headers = { ...headers, "content-type": "application/json; charset=utf-8" };
    normalized_body = JSON.stringify(typeof body === "undefined" ? {} : body);
  } else {
    normalized_body = body;
  }
  return { status, body: normalized_body, headers };
}
var chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_$";
var unsafeChars = /[<>\b\f\n\r\t\0\u2028\u2029]/g;
var reserved = /^(?:do|if|in|for|int|let|new|try|var|byte|case|char|else|enum|goto|long|this|void|with|await|break|catch|class|const|final|float|short|super|throw|while|yield|delete|double|export|import|native|return|switch|throws|typeof|boolean|default|extends|finally|package|private|abstract|continue|debugger|function|volatile|interface|protected|transient|implements|instanceof|synchronized)$/;
var escaped$1 = {
  "<": "\\u003C",
  ">": "\\u003E",
  "/": "\\u002F",
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\0": "\\0",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
var objectProtoOwnPropertyNames = Object.getOwnPropertyNames(Object.prototype).sort().join("\0");
function devalue(value) {
  var counts = new Map();
  function walk(thing) {
    if (typeof thing === "function") {
      throw new Error("Cannot stringify a function");
    }
    if (counts.has(thing)) {
      counts.set(thing, counts.get(thing) + 1);
      return;
    }
    counts.set(thing, 1);
    if (!isPrimitive(thing)) {
      var type2 = getType(thing);
      switch (type2) {
        case "Number":
        case "String":
        case "Boolean":
        case "Date":
        case "RegExp":
          return;
        case "Array":
          thing.forEach(walk);
          break;
        case "Set":
        case "Map":
          Array.from(thing).forEach(walk);
          break;
        default:
          var proto = Object.getPrototypeOf(thing);
          if (proto !== Object.prototype && proto !== null && Object.getOwnPropertyNames(proto).sort().join("\0") !== objectProtoOwnPropertyNames) {
            throw new Error("Cannot stringify arbitrary non-POJOs");
          }
          if (Object.getOwnPropertySymbols(thing).length > 0) {
            throw new Error("Cannot stringify POJOs with symbolic keys");
          }
          Object.keys(thing).forEach(function(key) {
            return walk(thing[key]);
          });
      }
    }
  }
  walk(value);
  var names = new Map();
  Array.from(counts).filter(function(entry) {
    return entry[1] > 1;
  }).sort(function(a, b) {
    return b[1] - a[1];
  }).forEach(function(entry, i) {
    names.set(entry[0], getName(i));
  });
  function stringify2(thing) {
    if (names.has(thing)) {
      return names.get(thing);
    }
    if (isPrimitive(thing)) {
      return stringifyPrimitive(thing);
    }
    var type2 = getType(thing);
    switch (type2) {
      case "Number":
      case "String":
      case "Boolean":
        return "Object(" + stringify2(thing.valueOf()) + ")";
      case "RegExp":
        return "new RegExp(" + stringifyString(thing.source) + ', "' + thing.flags + '")';
      case "Date":
        return "new Date(" + thing.getTime() + ")";
      case "Array":
        var members = thing.map(function(v, i) {
          return i in thing ? stringify2(v) : "";
        });
        var tail = thing.length === 0 || thing.length - 1 in thing ? "" : ",";
        return "[" + members.join(",") + tail + "]";
      case "Set":
      case "Map":
        return "new " + type2 + "([" + Array.from(thing).map(stringify2).join(",") + "])";
      default:
        var obj = "{" + Object.keys(thing).map(function(key) {
          return safeKey(key) + ":" + stringify2(thing[key]);
        }).join(",") + "}";
        var proto = Object.getPrototypeOf(thing);
        if (proto === null) {
          return Object.keys(thing).length > 0 ? "Object.assign(Object.create(null)," + obj + ")" : "Object.create(null)";
        }
        return obj;
    }
  }
  var str = stringify2(value);
  if (names.size) {
    var params_1 = [];
    var statements_1 = [];
    var values_1 = [];
    names.forEach(function(name2, thing) {
      params_1.push(name2);
      if (isPrimitive(thing)) {
        values_1.push(stringifyPrimitive(thing));
        return;
      }
      var type2 = getType(thing);
      switch (type2) {
        case "Number":
        case "String":
        case "Boolean":
          values_1.push("Object(" + stringify2(thing.valueOf()) + ")");
          break;
        case "RegExp":
          values_1.push(thing.toString());
          break;
        case "Date":
          values_1.push("new Date(" + thing.getTime() + ")");
          break;
        case "Array":
          values_1.push("Array(" + thing.length + ")");
          thing.forEach(function(v, i) {
            statements_1.push(name2 + "[" + i + "]=" + stringify2(v));
          });
          break;
        case "Set":
          values_1.push("new Set");
          statements_1.push(name2 + "." + Array.from(thing).map(function(v) {
            return "add(" + stringify2(v) + ")";
          }).join("."));
          break;
        case "Map":
          values_1.push("new Map");
          statements_1.push(name2 + "." + Array.from(thing).map(function(_a) {
            var k = _a[0], v = _a[1];
            return "set(" + stringify2(k) + ", " + stringify2(v) + ")";
          }).join("."));
          break;
        default:
          values_1.push(Object.getPrototypeOf(thing) === null ? "Object.create(null)" : "{}");
          Object.keys(thing).forEach(function(key) {
            statements_1.push("" + name2 + safeProp(key) + "=" + stringify2(thing[key]));
          });
      }
    });
    statements_1.push("return " + str);
    return "(function(" + params_1.join(",") + "){" + statements_1.join(";") + "}(" + values_1.join(",") + "))";
  } else {
    return str;
  }
}
function getName(num) {
  var name2 = "";
  do {
    name2 = chars[num % chars.length] + name2;
    num = ~~(num / chars.length) - 1;
  } while (num >= 0);
  return reserved.test(name2) ? name2 + "_" : name2;
}
function isPrimitive(thing) {
  return Object(thing) !== thing;
}
function stringifyPrimitive(thing) {
  if (typeof thing === "string")
    return stringifyString(thing);
  if (thing === void 0)
    return "void 0";
  if (thing === 0 && 1 / thing < 0)
    return "-0";
  var str = String(thing);
  if (typeof thing === "number")
    return str.replace(/^(-)?0\./, "$1.");
  return str;
}
function getType(thing) {
  return Object.prototype.toString.call(thing).slice(8, -1);
}
function escapeUnsafeChar(c) {
  return escaped$1[c] || c;
}
function escapeUnsafeChars(str) {
  return str.replace(unsafeChars, escapeUnsafeChar);
}
function safeKey(key) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? key : escapeUnsafeChars(JSON.stringify(key));
}
function safeProp(key) {
  return /^[_$a-zA-Z][_$a-zA-Z0-9]*$/.test(key) ? "." + key : "[" + escapeUnsafeChars(JSON.stringify(key)) + "]";
}
function stringifyString(str) {
  var result = '"';
  for (var i = 0; i < str.length; i += 1) {
    var char = str.charAt(i);
    var code = char.charCodeAt(0);
    if (char === '"') {
      result += '\\"';
    } else if (char in escaped$1) {
      result += escaped$1[char];
    } else if (code >= 55296 && code <= 57343) {
      var next = str.charCodeAt(i + 1);
      if (code <= 56319 && (next >= 56320 && next <= 57343)) {
        result += char + str[++i];
      } else {
        result += "\\u" + code.toString(16).toUpperCase();
      }
    } else {
      result += char;
    }
  }
  result += '"';
  return result;
}
function noop$4() {
}
function safe_not_equal$1(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
Promise.resolve();
var subscriber_queue$1 = [];
function writable$1(value, start = noop$4) {
  let stop;
  const subscribers = new Set();
  function set(new_value) {
    if (safe_not_equal$1(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue$1.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue$1.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue$1.length; i += 2) {
            subscriber_queue$1[i][0](subscriber_queue$1[i + 1]);
          }
          subscriber_queue$1.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop$4) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set) || noop$4;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update, subscribe: subscribe2 };
}
function hash(value) {
  let hash2 = 5381;
  let i = value.length;
  if (typeof value === "string") {
    while (i)
      hash2 = hash2 * 33 ^ value.charCodeAt(--i);
  } else {
    while (i)
      hash2 = hash2 * 33 ^ value[--i];
  }
  return (hash2 >>> 0).toString(36);
}
var s$1 = JSON.stringify;
async function render_response({
  branch,
  options: options2,
  $session,
  page_config,
  status,
  error: error2,
  page: page2
}) {
  const css2 = new Set(options2.entry.css);
  const js = new Set(options2.entry.js);
  const styles = new Set();
  const serialized_data = [];
  let rendered;
  let is_private = false;
  let maxage;
  if (error2) {
    error2.stack = options2.get_stack(error2);
  }
  if (page_config.ssr) {
    branch.forEach(({ node, loaded, fetched, uses_credentials }) => {
      if (node.css)
        node.css.forEach((url) => css2.add(url));
      if (node.js)
        node.js.forEach((url) => js.add(url));
      if (node.styles)
        node.styles.forEach((content) => styles.add(content));
      if (fetched && page_config.hydrate)
        serialized_data.push(...fetched);
      if (uses_credentials)
        is_private = true;
      maxage = loaded.maxage;
    });
    const session = writable$1($session);
    const props = {
      stores: {
        page: writable$1(null),
        navigating: writable$1(null),
        session
      },
      page: page2,
      components: branch.map(({ node }) => node.module.default)
    };
    for (let i = 0; i < branch.length; i += 1) {
      props[`props_${i}`] = await branch[i].loaded.props;
    }
    let session_tracking_active = false;
    const unsubscribe = session.subscribe(() => {
      if (session_tracking_active)
        is_private = true;
    });
    session_tracking_active = true;
    try {
      rendered = options2.root.render(props);
    } finally {
      unsubscribe();
    }
  } else {
    rendered = { head: "", html: "", css: { code: "", map: null } };
  }
  const include_js = page_config.router || page_config.hydrate;
  if (!include_js)
    js.clear();
  const links = options2.amp ? styles.size > 0 || rendered.css.code.length > 0 ? `<style amp-custom>${Array.from(styles).concat(rendered.css.code).join("\n")}</style>` : "" : [
    ...Array.from(js).map((dep) => `<link rel="modulepreload" href="${dep}">`),
    ...Array.from(css2).map((dep) => `<link rel="stylesheet" href="${dep}">`)
  ].join("\n		");
  let init2 = "";
  if (options2.amp) {
    init2 = `
		<style amp-boilerplate>body{-webkit-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-moz-animation:-amp-start 8s steps(1,end) 0s 1 normal both;-ms-animation:-amp-start 8s steps(1,end) 0s 1 normal both;animation:-amp-start 8s steps(1,end) 0s 1 normal both}@-webkit-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-moz-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-ms-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@-o-keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}@keyframes -amp-start{from{visibility:hidden}to{visibility:visible}}</style>
		<noscript><style amp-boilerplate>body{-webkit-animation:none;-moz-animation:none;-ms-animation:none;animation:none}</style></noscript>
		<script async src="https://cdn.ampproject.org/v0.js"><\/script>`;
  } else if (include_js) {
    init2 = `<script type="module">
			import { start } from ${s$1(options2.entry.file)};
			start({
				target: ${options2.target ? `document.querySelector(${s$1(options2.target)})` : "document.body"},
				paths: ${s$1(options2.paths)},
				session: ${try_serialize($session, (error3) => {
      throw new Error(`Failed to serialize session data: ${error3.message}`);
    })},
				host: ${page2 && page2.host ? s$1(page2.host) : "location.host"},
				route: ${!!page_config.router},
				spa: ${!page_config.ssr},
				trailing_slash: ${s$1(options2.trailing_slash)},
				hydrate: ${page_config.ssr && page_config.hydrate ? `{
					status: ${status},
					error: ${serialize_error(error2)},
					nodes: [
						${(branch || []).map(({ node }) => `import(${s$1(node.entry)})`).join(",\n						")}
					],
					page: {
						host: ${page2 && page2.host ? s$1(page2.host) : "location.host"}, // TODO this is redundant
						path: ${s$1(page2 && page2.path)},
						query: new URLSearchParams(${page2 ? s$1(page2.query.toString()) : ""}),
						params: ${page2 && s$1(page2.params)}
					}
				}` : "null"}
			});
		<\/script>`;
  }
  if (options2.service_worker) {
    init2 += `<script>
			if ('serviceWorker' in navigator) {
				navigator.serviceWorker.register('${options2.service_worker}');
			}
		<\/script>`;
  }
  const head = [
    rendered.head,
    styles.size && !options2.amp ? `<style data-svelte>${Array.from(styles).join("\n")}</style>` : "",
    links,
    init2
  ].join("\n\n		");
  const body = options2.amp ? rendered.html : `${rendered.html}

			${serialized_data.map(({ url, body: body2, json }) => {
    let attributes = `type="application/json" data-type="svelte-data" data-url="${url}"`;
    if (body2)
      attributes += ` data-body="${hash(body2)}"`;
    return `<script ${attributes}>${json}<\/script>`;
  }).join("\n\n	")}
		`;
  const headers = {
    "content-type": "text/html"
  };
  if (maxage) {
    headers["cache-control"] = `${is_private ? "private" : "public"}, max-age=${maxage}`;
  }
  if (!options2.floc) {
    headers["permissions-policy"] = "interest-cohort=()";
  }
  return {
    status,
    headers,
    body: options2.template({ head, body })
  };
}
function try_serialize(data, fail2) {
  try {
    return devalue(data);
  } catch (err) {
    if (fail2)
      fail2(coalesce_to_error(err));
    return null;
  }
}
function serialize_error(error2) {
  if (!error2)
    return null;
  let serialized = try_serialize(error2);
  if (!serialized) {
    const { name: name2, message: message2, stack } = error2;
    serialized = try_serialize({ ...error2, name: name2, message: message2, stack });
  }
  if (!serialized) {
    serialized = "{}";
  }
  return serialized;
}
function normalize(loaded) {
  const has_error_status = loaded.status && loaded.status >= 400 && loaded.status <= 599 && !loaded.redirect;
  if (loaded.error || has_error_status) {
    const status = loaded.status;
    if (!loaded.error && has_error_status) {
      return {
        status: status || 500,
        error: new Error()
      };
    }
    const error2 = typeof loaded.error === "string" ? new Error(loaded.error) : loaded.error;
    if (!(error2 instanceof Error)) {
      return {
        status: 500,
        error: new Error(`"error" property returned from load() must be a string or instance of Error, received type "${typeof error2}"`)
      };
    }
    if (!status || status < 400 || status > 599) {
      console.warn('"error" returned from load() without a valid status code \u2014 defaulting to 500');
      return { status: 500, error: error2 };
    }
    return { status, error: error2 };
  }
  if (loaded.redirect) {
    if (!loaded.status || Math.floor(loaded.status / 100) !== 3) {
      return {
        status: 500,
        error: new Error('"redirect" property returned from load() must be accompanied by a 3xx status code')
      };
    }
    if (typeof loaded.redirect !== "string") {
      return {
        status: 500,
        error: new Error('"redirect" property returned from load() must be a string')
      };
    }
  }
  if (loaded.context) {
    throw new Error('You are returning "context" from a load function. "context" was renamed to "stuff", please adjust your code accordingly.');
  }
  return loaded;
}
var s = JSON.stringify;
async function load_node({
  request,
  options: options2,
  state,
  route,
  page: page2,
  node,
  $session,
  stuff,
  prerender_enabled,
  is_leaf,
  is_error,
  status,
  error: error2
}) {
  const { module: module2 } = node;
  let uses_credentials = false;
  const fetched = [];
  let set_cookie_headers = [];
  let loaded;
  const page_proxy = new Proxy(page2, {
    get: (target, prop, receiver) => {
      if (prop === "query" && prerender_enabled) {
        throw new Error("Cannot access query on a page with prerendering enabled");
      }
      return Reflect.get(target, prop, receiver);
    }
  });
  if (module2.load) {
    const load_input = {
      page: page_proxy,
      get session() {
        uses_credentials = true;
        return $session;
      },
      fetch: async (resource, opts = {}) => {
        let url;
        if (typeof resource === "string") {
          url = resource;
        } else {
          url = resource.url;
          opts = {
            method: resource.method,
            headers: resource.headers,
            body: resource.body,
            mode: resource.mode,
            credentials: resource.credentials,
            cache: resource.cache,
            redirect: resource.redirect,
            referrer: resource.referrer,
            integrity: resource.integrity,
            ...opts
          };
        }
        const resolved = resolve(request.path, url.split("?")[0]);
        let response;
        const filename = resolved.replace(options2.paths.assets, "").slice(1);
        const filename_html = `${filename}/index.html`;
        const asset = options2.manifest.assets.find((d) => d.file === filename || d.file === filename_html);
        if (asset) {
          response = options2.read ? new Response(options2.read(asset.file), {
            headers: asset.type ? { "content-type": asset.type } : {}
          }) : await fetch(`http://${page2.host}/${asset.file}`, opts);
        } else if (resolved.startsWith("/") && !resolved.startsWith("//")) {
          const relative = resolved;
          const headers = {
            ...opts.headers
          };
          if (opts.credentials !== "omit") {
            uses_credentials = true;
            headers.cookie = request.headers.cookie;
            if (!headers.authorization) {
              headers.authorization = request.headers.authorization;
            }
          }
          if (opts.body && typeof opts.body !== "string") {
            throw new Error("Request body must be a string");
          }
          const search = url.includes("?") ? url.slice(url.indexOf("?") + 1) : "";
          const rendered = await respond({
            host: request.host,
            method: opts.method || "GET",
            headers,
            path: relative,
            rawBody: opts.body == null ? null : new TextEncoder().encode(opts.body),
            query: new URLSearchParams(search)
          }, options2, {
            fetched: url,
            initiator: route
          });
          if (rendered) {
            if (state.prerender) {
              state.prerender.dependencies.set(relative, rendered);
            }
            response = new Response(rendered.body, {
              status: rendered.status,
              headers: rendered.headers
            });
          }
        } else {
          if (resolved.startsWith("//")) {
            throw new Error(`Cannot request protocol-relative URL (${url}) in server-side fetch`);
          }
          if (typeof request.host !== "undefined") {
            const { hostname: fetch_hostname } = new URL(url);
            const [server_hostname] = request.host.split(":");
            if (`.${fetch_hostname}`.endsWith(`.${server_hostname}`) && opts.credentials !== "omit") {
              uses_credentials = true;
              opts.headers = {
                ...opts.headers,
                cookie: request.headers.cookie
              };
            }
          }
          const external_request = new Request(url, opts);
          response = await options2.hooks.externalFetch.call(null, external_request);
        }
        if (response) {
          const proxy = new Proxy(response, {
            get(response2, key, receiver) {
              async function text() {
                const body = await response2.text();
                const headers = {};
                for (const [key2, value] of response2.headers) {
                  if (key2 === "set-cookie") {
                    set_cookie_headers = set_cookie_headers.concat(value);
                  } else if (key2 !== "etag") {
                    headers[key2] = value;
                  }
                }
                if (!opts.body || typeof opts.body === "string") {
                  fetched.push({
                    url,
                    body: opts.body,
                    json: `{"status":${response2.status},"statusText":${s(response2.statusText)},"headers":${s(headers)},"body":${escape$1(body)}}`
                  });
                }
                return body;
              }
              if (key === "text") {
                return text;
              }
              if (key === "json") {
                return async () => {
                  return JSON.parse(await text());
                };
              }
              return Reflect.get(response2, key, response2);
            }
          });
          return proxy;
        }
        return response || new Response("Not found", {
          status: 404
        });
      },
      stuff: { ...stuff }
    };
    if (is_error) {
      load_input.status = status;
      load_input.error = error2;
    }
    loaded = await module2.load.call(null, load_input);
  } else {
    loaded = {};
  }
  if (!loaded && is_leaf && !is_error)
    return;
  if (!loaded) {
    throw new Error(`${node.entry} - load must return a value except for page fall through`);
  }
  return {
    node,
    loaded: normalize(loaded),
    stuff: loaded.stuff || stuff,
    fetched,
    set_cookie_headers,
    uses_credentials
  };
}
var escaped$2 = {
  "<": "\\u003C",
  ">": "\\u003E",
  "/": "\\u002F",
  "\\": "\\\\",
  "\b": "\\b",
  "\f": "\\f",
  "\n": "\\n",
  "\r": "\\r",
  "	": "\\t",
  "\0": "\\0",
  "\u2028": "\\u2028",
  "\u2029": "\\u2029"
};
function escape$1(str) {
  let result = '"';
  for (let i = 0; i < str.length; i += 1) {
    const char = str.charAt(i);
    const code = char.charCodeAt(0);
    if (char === '"') {
      result += '\\"';
    } else if (char in escaped$2) {
      result += escaped$2[char];
    } else if (code >= 55296 && code <= 57343) {
      const next = str.charCodeAt(i + 1);
      if (code <= 56319 && next >= 56320 && next <= 57343) {
        result += char + str[++i];
      } else {
        result += `\\u${code.toString(16).toUpperCase()}`;
      }
    } else {
      result += char;
    }
  }
  result += '"';
  return result;
}
var absolute = /^([a-z]+:)?\/?\//;
function resolve(base2, path2) {
  const base_match = absolute.exec(base2);
  const path_match = absolute.exec(path2);
  if (!base_match) {
    throw new Error(`bad base path: "${base2}"`);
  }
  const baseparts = path_match ? [] : base2.slice(base_match[0].length).split("/");
  const pathparts = path_match ? path2.slice(path_match[0].length).split("/") : path2.split("/");
  baseparts.pop();
  for (let i = 0; i < pathparts.length; i += 1) {
    const part = pathparts[i];
    if (part === ".")
      continue;
    else if (part === "..")
      baseparts.pop();
    else
      baseparts.push(part);
  }
  const prefix = path_match && path_match[0] || base_match && base_match[0] || "";
  return `${prefix}${baseparts.join("/")}`;
}
async function respond_with_error({ request, options: options2, state, $session, status, error: error2 }) {
  const default_layout = await options2.load_component(options2.manifest.layout);
  const default_error = await options2.load_component(options2.manifest.error);
  const page2 = {
    host: request.host,
    path: request.path,
    query: request.query,
    params: {}
  };
  const loaded = await load_node({
    request,
    options: options2,
    state,
    route: null,
    page: page2,
    node: default_layout,
    $session,
    stuff: {},
    prerender_enabled: is_prerender_enabled(options2, default_error, state),
    is_leaf: false,
    is_error: false
  });
  const branch = [
    loaded,
    await load_node({
      request,
      options: options2,
      state,
      route: null,
      page: page2,
      node: default_error,
      $session,
      stuff: loaded ? loaded.stuff : {},
      prerender_enabled: is_prerender_enabled(options2, default_error, state),
      is_leaf: false,
      is_error: true,
      status,
      error: error2
    })
  ];
  try {
    return await render_response({
      options: options2,
      $session,
      page_config: {
        hydrate: options2.hydrate,
        router: options2.router,
        ssr: options2.ssr
      },
      status,
      error: error2,
      branch,
      page: page2
    });
  } catch (err) {
    const error3 = coalesce_to_error(err);
    options2.handle_error(error3, request);
    return {
      status: 500,
      headers: {},
      body: error3.stack
    };
  }
}
function is_prerender_enabled(options2, node, state) {
  return options2.prerender && (!!node.module.prerender || !!state.prerender && state.prerender.all);
}
async function respond$1(opts) {
  const { request, options: options2, state, $session, route } = opts;
  let nodes;
  try {
    nodes = await Promise.all(route.a.map((id) => id ? options2.load_component(id) : void 0));
  } catch (err) {
    const error3 = coalesce_to_error(err);
    options2.handle_error(error3, request);
    return await respond_with_error({
      request,
      options: options2,
      state,
      $session,
      status: 500,
      error: error3
    });
  }
  const leaf = nodes[nodes.length - 1].module;
  let page_config = get_page_config(leaf, options2);
  if (!leaf.prerender && state.prerender && !state.prerender.all) {
    return {
      status: 204,
      headers: {},
      body: ""
    };
  }
  let branch = [];
  let status = 200;
  let error2;
  let set_cookie_headers = [];
  ssr:
    if (page_config.ssr) {
      let stuff = {};
      for (let i = 0; i < nodes.length; i += 1) {
        const node = nodes[i];
        let loaded;
        if (node) {
          try {
            loaded = await load_node({
              ...opts,
              node,
              stuff,
              prerender_enabled: is_prerender_enabled(options2, node, state),
              is_leaf: i === nodes.length - 1,
              is_error: false
            });
            if (!loaded)
              return;
            set_cookie_headers = set_cookie_headers.concat(loaded.set_cookie_headers);
            if (loaded.loaded.redirect) {
              return with_cookies({
                status: loaded.loaded.status,
                headers: {
                  location: encodeURI(loaded.loaded.redirect)
                }
              }, set_cookie_headers);
            }
            if (loaded.loaded.error) {
              ({ status, error: error2 } = loaded.loaded);
            }
          } catch (err) {
            const e = coalesce_to_error(err);
            options2.handle_error(e, request);
            status = 500;
            error2 = e;
          }
          if (loaded && !error2) {
            branch.push(loaded);
          }
          if (error2) {
            while (i--) {
              if (route.b[i]) {
                const error_node = await options2.load_component(route.b[i]);
                let node_loaded;
                let j = i;
                while (!(node_loaded = branch[j])) {
                  j -= 1;
                }
                try {
                  const error_loaded = await load_node({
                    ...opts,
                    node: error_node,
                    stuff: node_loaded.stuff,
                    prerender_enabled: is_prerender_enabled(options2, error_node, state),
                    is_leaf: false,
                    is_error: true,
                    status,
                    error: error2
                  });
                  if (error_loaded.loaded.error) {
                    continue;
                  }
                  page_config = get_page_config(error_node.module, options2);
                  branch = branch.slice(0, j + 1).concat(error_loaded);
                  break ssr;
                } catch (err) {
                  const e = coalesce_to_error(err);
                  options2.handle_error(e, request);
                  continue;
                }
              }
            }
            return with_cookies(await respond_with_error({
              request,
              options: options2,
              state,
              $session,
              status,
              error: error2
            }), set_cookie_headers);
          }
        }
        if (loaded && loaded.loaded.stuff) {
          stuff = {
            ...stuff,
            ...loaded.loaded.stuff
          };
        }
      }
    }
  try {
    return with_cookies(await render_response({
      ...opts,
      page_config,
      status,
      error: error2,
      branch: branch.filter(Boolean)
    }), set_cookie_headers);
  } catch (err) {
    const error3 = coalesce_to_error(err);
    options2.handle_error(error3, request);
    return with_cookies(await respond_with_error({
      ...opts,
      status: 500,
      error: error3
    }), set_cookie_headers);
  }
}
function get_page_config(leaf, options2) {
  return {
    ssr: "ssr" in leaf ? !!leaf.ssr : options2.ssr,
    router: "router" in leaf ? !!leaf.router : options2.router,
    hydrate: "hydrate" in leaf ? !!leaf.hydrate : options2.hydrate
  };
}
function with_cookies(response, set_cookie_headers) {
  if (set_cookie_headers.length) {
    response.headers["set-cookie"] = set_cookie_headers;
  }
  return response;
}
async function render_page(request, route, match, options2, state) {
  if (state.initiator === route) {
    return {
      status: 404,
      headers: {},
      body: `Not found: ${request.path}`
    };
  }
  const params = route.params(match);
  const page2 = {
    host: request.host,
    path: request.path,
    query: request.query,
    params
  };
  const $session = await options2.hooks.getSession(request);
  const response = await respond$1({
    request,
    options: options2,
    state,
    $session,
    route,
    page: page2
  });
  if (response) {
    return response;
  }
  if (state.fetched) {
    return {
      status: 500,
      headers: {},
      body: `Bad request in load function: failed to fetch ${state.fetched}`
    };
  }
}
function read_only_form_data() {
  const map2 = new Map();
  return {
    append(key, value) {
      if (map2.has(key)) {
        (map2.get(key) || []).push(value);
      } else {
        map2.set(key, [value]);
      }
    },
    data: new ReadOnlyFormData(map2)
  };
}
var ReadOnlyFormData = class {
  constructor(map2) {
    __privateAdd(this, _map, void 0);
    __privateSet(this, _map, map2);
  }
  get(key) {
    const value = __privateGet(this, _map).get(key);
    return value && value[0];
  }
  getAll(key) {
    return __privateGet(this, _map).get(key);
  }
  has(key) {
    return __privateGet(this, _map).has(key);
  }
  *[Symbol.iterator]() {
    for (const [key, value] of __privateGet(this, _map)) {
      for (let i = 0; i < value.length; i += 1) {
        yield [key, value[i]];
      }
    }
  }
  *entries() {
    for (const [key, value] of __privateGet(this, _map)) {
      for (let i = 0; i < value.length; i += 1) {
        yield [key, value[i]];
      }
    }
  }
  *keys() {
    for (const [key] of __privateGet(this, _map))
      yield key;
  }
  *values() {
    for (const [, value] of __privateGet(this, _map)) {
      for (let i = 0; i < value.length; i += 1) {
        yield value[i];
      }
    }
  }
};
_map = new WeakMap();
function parse_body(raw, headers) {
  if (!raw)
    return raw;
  const content_type = headers["content-type"];
  const [type2, ...directives] = content_type ? content_type.split(/;\s*/) : [];
  const text = () => new TextDecoder(headers["content-encoding"] || "utf-8").decode(raw);
  switch (type2) {
    case "text/plain":
      return text();
    case "application/json":
      return JSON.parse(text());
    case "application/x-www-form-urlencoded":
      return get_urlencoded(text());
    case "multipart/form-data": {
      const boundary = directives.find((directive) => directive.startsWith("boundary="));
      if (!boundary)
        throw new Error("Missing boundary");
      return get_multipart(text(), boundary.slice("boundary=".length));
    }
    default:
      return raw;
  }
}
function get_urlencoded(text) {
  const { data, append } = read_only_form_data();
  text.replace(/\+/g, " ").split("&").forEach((str) => {
    const [key, value] = str.split("=");
    append(decodeURIComponent(key), decodeURIComponent(value));
  });
  return data;
}
function get_multipart(text, boundary) {
  const parts = text.split(`--${boundary}`);
  if (parts[0] !== "" || parts[parts.length - 1].trim() !== "--") {
    throw new Error("Malformed form data");
  }
  const { data, append } = read_only_form_data();
  parts.slice(1, -1).forEach((part) => {
    const match = /\s*([\s\S]+?)\r\n\r\n([\s\S]*)\s*/.exec(part);
    if (!match) {
      throw new Error("Malformed form data");
    }
    const raw_headers = match[1];
    const body = match[2].trim();
    let key;
    const headers = {};
    raw_headers.split("\r\n").forEach((str) => {
      const [raw_header, ...raw_directives] = str.split("; ");
      let [name2, value] = raw_header.split(": ");
      name2 = name2.toLowerCase();
      headers[name2] = value;
      const directives = {};
      raw_directives.forEach((raw_directive) => {
        const [name3, value2] = raw_directive.split("=");
        directives[name3] = JSON.parse(value2);
      });
      if (name2 === "content-disposition") {
        if (value !== "form-data")
          throw new Error("Malformed form data");
        if (directives.filename) {
          throw new Error("File upload is not yet implemented");
        }
        if (directives.name) {
          key = directives.name;
        }
      }
    });
    if (!key)
      throw new Error("Malformed form data");
    append(key, body);
  });
  return data;
}
async function respond(incoming, options2, state = {}) {
  if (incoming.path !== "/" && options2.trailing_slash !== "ignore") {
    const has_trailing_slash = incoming.path.endsWith("/");
    if (has_trailing_slash && options2.trailing_slash === "never" || !has_trailing_slash && options2.trailing_slash === "always" && !(incoming.path.split("/").pop() || "").includes(".")) {
      const path2 = has_trailing_slash ? incoming.path.slice(0, -1) : incoming.path + "/";
      const q = incoming.query.toString();
      return {
        status: 301,
        headers: {
          location: options2.paths.base + path2 + (q ? `?${q}` : "")
        }
      };
    }
  }
  const headers = lowercase_keys(incoming.headers);
  const request = {
    ...incoming,
    headers,
    body: parse_body(incoming.rawBody, headers),
    params: {},
    locals: {}
  };
  try {
    return await options2.hooks.handle({
      request,
      resolve: async (request2) => {
        if (state.prerender && state.prerender.fallback) {
          return await render_response({
            options: options2,
            $session: await options2.hooks.getSession(request2),
            page_config: { ssr: false, router: true, hydrate: true },
            status: 200,
            branch: []
          });
        }
        const decoded = decodeURI(request2.path);
        for (const route of options2.manifest.routes) {
          const match = route.pattern.exec(decoded);
          if (!match)
            continue;
          const response = route.type === "endpoint" ? await render_endpoint(request2, route, match) : await render_page(request2, route, match, options2, state);
          if (response) {
            if (response.status === 200) {
              const cache_control = get_single_valued_header(response.headers, "cache-control");
              if (!cache_control || !/(no-store|immutable)/.test(cache_control)) {
                const etag = `"${hash(response.body || "")}"`;
                if (request2.headers["if-none-match"] === etag) {
                  return {
                    status: 304,
                    headers: {},
                    body: ""
                  };
                }
                response.headers["etag"] = etag;
              }
            }
            return response;
          }
        }
        const $session = await options2.hooks.getSession(request2);
        return await respond_with_error({
          request: request2,
          options: options2,
          state,
          $session,
          status: 404,
          error: new Error(`Not found: ${request2.path}`)
        });
      }
    });
  } catch (err) {
    const e = coalesce_to_error(err);
    options2.handle_error(e, request);
    return {
      status: 500,
      headers: {},
      body: options2.dev ? e.stack : e.message
    };
  }
}
function noop$3() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function subscribe(store, ...callbacks) {
  if (store == null) {
    return noop$3;
  }
  const unsub = store.subscribe(...callbacks);
  return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
}
function compute_slots(slots) {
  const result = {};
  for (const key in slots) {
    result[key] = true;
  }
  return result;
}
var current_component;
function set_current_component(component2) {
  current_component = component2;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function setContext(key, context) {
  get_current_component().$$.context.set(key, context);
}
function getContext(key) {
  return get_current_component().$$.context.get(key);
}
Promise.resolve();
var escaped = {
  '"': "&quot;",
  "'": "&#39;",
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;"
};
function escape2(html) {
  return String(html).replace(/["'&<>]/g, (match) => escaped[match]);
}
function each(items, fn) {
  let str = "";
  for (let i = 0; i < items.length; i += 1) {
    str += fn(items[i], i);
  }
  return str;
}
var missing_component = {
  $$render: () => ""
};
function validate_component(component2, name2) {
  if (!component2 || !component2.$$render) {
    if (name2 === "svelte:component")
      name2 += " this={...}";
    throw new Error(`<${name2}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);
  }
  return component2;
}
var on_destroy;
function create_ssr_component(fn) {
  function $$render(result, props, bindings, slots, context) {
    const parent_component = current_component;
    const $$ = {
      on_destroy,
      context: new Map(context || (parent_component ? parent_component.$$.context : [])),
      on_mount: [],
      before_update: [],
      after_update: [],
      callbacks: blank_object()
    };
    set_current_component({ $$ });
    const html = fn(result, props, bindings, slots);
    set_current_component(parent_component);
    return html;
  }
  return {
    render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {
      on_destroy = [];
      const result = { title: "", head: "", css: new Set() };
      const html = $$render(result, props, {}, $$slots, context);
      run_all(on_destroy);
      return {
        html,
        css: {
          code: Array.from(result.css).map((css2) => css2.code).join("\n"),
          map: null
        },
        head: result.title + result.head
      };
    },
    $$render
  };
}
function add_attribute(name2, value, boolean) {
  if (value == null || boolean && !value)
    return "";
  return ` ${name2}${value === true ? "" : `=${typeof value === "string" ? JSON.stringify(escape2(value)) : `"${value}"`}`}`;
}
function afterUpdate() {
}
var root_svelte_svelte_type_style_lang = "#svelte-announcer.svelte-1j55zn5{position:absolute;left:0;top:0;clip:rect(0 0 0 0);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}";
var css$k = {
  code: "#svelte-announcer.svelte-1j55zn5{position:absolute;left:0;top:0;clip:rect(0 0 0 0);clip-path:inset(50%);overflow:hidden;white-space:nowrap;width:1px;height:1px}",
  map: `{"version":3,"file":"root.svelte","sources":["root.svelte"],"sourcesContent":["<!-- This file is generated by @sveltejs/kit \u2014 do not edit it! -->\\n<script>\\n\\timport { setContext, afterUpdate, onMount } from 'svelte';\\n\\n\\t// stores\\n\\texport let stores;\\n\\texport let page;\\n\\n\\texport let components;\\n\\texport let props_0 = null;\\n\\texport let props_1 = null;\\n\\texport let props_2 = null;\\n\\texport let props_3 = null;\\n\\n\\tsetContext('__svelte__', stores);\\n\\n\\t$: stores.page.set(page);\\n\\tafterUpdate(stores.page.notify);\\n\\n\\tlet mounted = false;\\n\\tlet navigated = false;\\n\\tlet title = null;\\n\\n\\tonMount(() => {\\n\\t\\tconst unsubscribe = stores.page.subscribe(() => {\\n\\t\\t\\tif (mounted) {\\n\\t\\t\\t\\tnavigated = true;\\n\\t\\t\\t\\ttitle = document.title || 'untitled page';\\n\\t\\t\\t}\\n\\t\\t});\\n\\n\\t\\tmounted = true;\\n\\t\\treturn unsubscribe;\\n\\t});\\n<\/script>\\n\\n<svelte:component this={components[0]} {...(props_0 || {})}>\\n\\t{#if components[1]}\\n\\t\\t<svelte:component this={components[1]} {...(props_1 || {})}>\\n\\t\\t\\t{#if components[2]}\\n\\t\\t\\t\\t<svelte:component this={components[2]} {...(props_2 || {})}>\\n\\t\\t\\t\\t\\t{#if components[3]}\\n\\t\\t\\t\\t\\t\\t<svelte:component this={components[3]} {...(props_3 || {})}/>\\n\\t\\t\\t\\t\\t{/if}\\n\\t\\t\\t\\t</svelte:component>\\n\\t\\t\\t{/if}\\n\\t\\t</svelte:component>\\n\\t{/if}\\n</svelte:component>\\n\\n{#if mounted}\\n\\t<div id=\\"svelte-announcer\\" aria-live=\\"assertive\\" aria-atomic=\\"true\\">\\n\\t\\t{#if navigated}\\n\\t\\t\\t{title}\\n\\t\\t{/if}\\n\\t</div>\\n{/if}\\n\\n<style>\\n\\t#svelte-announcer {\\n\\t\\tposition: absolute;\\n\\t\\tleft: 0;\\n\\t\\ttop: 0;\\n\\t\\tclip: rect(0 0 0 0);\\n\\t\\tclip-path: inset(50%);\\n\\t\\toverflow: hidden;\\n\\t\\twhite-space: nowrap;\\n\\t\\twidth: 1px;\\n\\t\\theight: 1px;\\n\\t}\\n</style>"],"names":[],"mappings":"AA2DC,iBAAiB,eAAC,CAAC,AAClB,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACnB,SAAS,CAAE,MAAM,GAAG,CAAC,CACrB,QAAQ,CAAE,MAAM,CAChB,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,GAAG,CACV,MAAM,CAAE,GAAG,AACZ,CAAC"}`
};
var Root$3 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { stores } = $$props;
  let { page: page2 } = $$props;
  let { components } = $$props;
  let { props_0 = null } = $$props;
  let { props_1 = null } = $$props;
  let { props_2 = null } = $$props;
  let { props_3 = null } = $$props;
  setContext("__svelte__", stores);
  afterUpdate(stores.page.notify);
  if ($$props.stores === void 0 && $$bindings.stores && stores !== void 0)
    $$bindings.stores(stores);
  if ($$props.page === void 0 && $$bindings.page && page2 !== void 0)
    $$bindings.page(page2);
  if ($$props.components === void 0 && $$bindings.components && components !== void 0)
    $$bindings.components(components);
  if ($$props.props_0 === void 0 && $$bindings.props_0 && props_0 !== void 0)
    $$bindings.props_0(props_0);
  if ($$props.props_1 === void 0 && $$bindings.props_1 && props_1 !== void 0)
    $$bindings.props_1(props_1);
  if ($$props.props_2 === void 0 && $$bindings.props_2 && props_2 !== void 0)
    $$bindings.props_2(props_2);
  if ($$props.props_3 === void 0 && $$bindings.props_3 && props_3 !== void 0)
    $$bindings.props_3(props_3);
  $$result.css.add(css$k);
  {
    stores.page.set(page2);
  }
  return `


${validate_component(components[0] || missing_component, "svelte:component").$$render($$result, Object.assign(props_0 || {}), {}, {
    default: () => `${components[1] ? `${validate_component(components[1] || missing_component, "svelte:component").$$render($$result, Object.assign(props_1 || {}), {}, {
      default: () => `${components[2] ? `${validate_component(components[2] || missing_component, "svelte:component").$$render($$result, Object.assign(props_2 || {}), {}, {
        default: () => `${components[3] ? `${validate_component(components[3] || missing_component, "svelte:component").$$render($$result, Object.assign(props_3 || {}), {}, {})}` : ``}`
      })}` : ``}`
    })}` : ``}`
  })}

${``}`;
});
var base = "";
var assets = "";
function set_paths(paths) {
  base = paths.base;
  assets = paths.assets || base;
}
function set_prerendering(value) {
}
var user_hooks = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module"
});
var template = ({ head, body }) => '<!DOCTYPE html>\n<html lang="en">\n	<head>\n		<meta charset="utf-8" />\n		<link rel="icon" href="/favicon.png" />\n		<meta name="viewport" content="width=device-width, initial-scale=1" />\n		' + head + `
		<style>
			@import url('https://fonts.googleapis.com/css2?family=Poppins&display=swap');
			@import url('https://fonts.googleapis.com/css2?family=Merienda&display=swap');
			@import url('https://fonts.googleapis.com/css2?family=Ubuntu&display=swap');
			@import url('https://fonts.googleapis.com/css2?family=Raleway:wght@600&display=swap');
			@import url('https://fonts.googleapis.com/css2?family=Varela+Round&display=swap');
			@import url('https://fonts.googleapis.com/css2?family=Baloo+Paaji+2&display=swap');
			* {
				-webkit-tap-highlight-color: rgba(0, 0, 0, 0);
				-moz-tap-highlight-color: rgba(0, 0, 0, 0);
				scroll-behavior: smooth;
				padding: 0;
				margin: 0;
				font-family: 'Poppins', sans-serif;
			}
			html,
			body {
				padding: 0;
				margin: 0;
				max-width: 100vw;
				overflow-x: hidden;
			}

			/* width */
			::-webkit-scrollbar {
				width: 7px;
				transition: all 444ms !important;
			}

			/* Track */
			::-webkit-scrollbar-track {
				box-shadow: inset 0 0 5px grey;
				border-radius: 11px;
				transition: all 444ms !important;
			}

			/* Handle */
			::-webkit-scrollbar-thumb {
				background: #717171;
				border-radius: 10px;
				transition: all 444ms !important;
			}

			/* Handle on hover */
			::-webkit-scrollbar-thumb:hover {
				background: #444444;
			}
		</style>
	</head>
	<body>
		<div id="svelte">` + body + "</div>\n	</body>\n</html>\n";
var options = null;
var default_settings = { paths: { "base": "", "assets": "" } };
function init(settings = default_settings) {
  set_paths(settings.paths);
  set_prerendering(settings.prerendering || false);
  const hooks = get_hooks(user_hooks);
  options = {
    amp: false,
    dev: false,
    entry: {
      file: assets + "/_app/start-8998c195.js",
      css: [assets + "/_app/assets/start-61d1577b.css"],
      js: [assets + "/_app/start-8998c195.js", assets + "/_app/chunks/vendor-2d000641.js", assets + "/_app/chunks/preload-helper-ec9aa979.js", assets + "/_app/chunks/singletons-12a22614.js"]
    },
    fetched: void 0,
    floc: false,
    get_component_path: (id) => assets + "/_app/" + entry_lookup[id],
    get_stack: (error2) => String(error2),
    handle_error: (error2, request) => {
      hooks.handleError({ error: error2, request });
      error2.stack = options.get_stack(error2);
    },
    hooks,
    hydrate: true,
    initiator: void 0,
    load_component,
    manifest,
    paths: settings.paths,
    prerender: true,
    read: settings.read,
    root: Root$3,
    service_worker: null,
    router: true,
    ssr: true,
    target: "#svelte",
    template,
    trailing_slash: "never"
  };
}
var empty = () => ({});
var manifest = {
  assets: [{ "file": "blob-scene-mobile.svg", "size": 11387, "type": "image/svg+xml" }, { "file": "blob-scene-tab.svg", "size": 11389, "type": "image/svg+xml" }, { "file": "blob-scene.svg", "size": 6470, "type": "image/svg+xml" }, { "file": "favicon.png", "size": 1571, "type": "image/png" }, { "file": "layer-wave-separator.svg", "size": 7269, "type": "image/svg+xml" }, { "file": "logo.svg", "size": 13408, "type": "image/svg+xml" }, { "file": "moon.png", "size": 107659, "type": "image/png" }, { "file": "mountains_behind.png", "size": 162807, "type": "image/png" }, { "file": "mountains_front.png", "size": 537599, "type": "image/png" }, { "file": "stars.png", "size": 108527, "type": "image/png" }, { "file": "svelte.png", "size": 1373, "type": "image/png" }, { "file": "wave-bottom-separator.svg", "size": 11090, "type": "image/svg+xml" }, { "file": "wave.png", "size": 5699, "type": "image/png" }],
  layout: "src/routes/__layout.svelte",
  error: ".svelte-kit/build/components/error.svelte",
  routes: [
    {
      type: "page",
      pattern: /^\/$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/index.svelte"],
      b: [".svelte-kit/build/components/error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/dashboard\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/dashboard/__layout.svelte", "src/routes/dashboard/index.svelte"],
      b: [".svelte-kit/build/components/error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/dashboard\/manage\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/dashboard/__layout.svelte", "src/routes/dashboard/manage.svelte"],
      b: [".svelte-kit/build/components/error.svelte"]
    },
    {
      type: "page",
      pattern: /^\/verify\/?$/,
      params: empty,
      a: ["src/routes/__layout.svelte", "src/routes/verify.svelte"],
      b: [".svelte-kit/build/components/error.svelte"]
    },
    {
      type: "endpoint",
      pattern: /^\/api\/password\/encpass\/?$/,
      params: empty,
      load: () => Promise.resolve().then(function() {
        return encpass;
      })
    },
    {
      type: "endpoint",
      pattern: /^\/api\/password\/depass\/?$/,
      params: empty,
      load: () => Promise.resolve().then(function() {
        return depass;
      })
    }
  ]
};
var get_hooks = (hooks) => ({
  getSession: hooks.getSession || (() => ({})),
  handle: hooks.handle || (({ request, resolve: resolve6 }) => resolve6(request)),
  handleError: hooks.handleError || (({ error: error2 }) => console.error(error2.stack)),
  externalFetch: hooks.externalFetch || fetch
});
var module_lookup = {
  "src/routes/__layout.svelte": () => Promise.resolve().then(function() {
    return __layout$1;
  }),
  ".svelte-kit/build/components/error.svelte": () => Promise.resolve().then(function() {
    return error;
  }),
  "src/routes/index.svelte": () => Promise.resolve().then(function() {
    return index$1;
  }),
  "src/routes/dashboard/__layout.svelte": () => Promise.resolve().then(function() {
    return __layout;
  }),
  "src/routes/dashboard/index.svelte": () => Promise.resolve().then(function() {
    return index;
  }),
  "src/routes/dashboard/manage.svelte": () => Promise.resolve().then(function() {
    return manage;
  }),
  "src/routes/verify.svelte": () => Promise.resolve().then(function() {
    return verify;
  })
};
var metadata_lookup = { "src/routes/__layout.svelte": { "entry": "pages/__layout.svelte-6fe42b9a.js", "css": ["assets/loader-8e602be2.css"], "js": ["pages/__layout.svelte-6fe42b9a.js", "chunks/vendor-2d000641.js", "chunks/loader-f75b3db3.js", "chunks/singletons-12a22614.js"], "styles": [] }, ".svelte-kit/build/components/error.svelte": { "entry": "error.svelte-5074d492.js", "css": [], "js": ["error.svelte-5074d492.js", "chunks/vendor-2d000641.js"], "styles": [] }, "src/routes/index.svelte": { "entry": "pages/index.svelte-d011dd65.js", "css": ["assets/pages/index.svelte-4b336627.css", "assets/snackbar-58363d24.css"], "js": ["pages/index.svelte-d011dd65.js", "chunks/vendor-2d000641.js", "chunks/snackbar-8587ba53.js", "chunks/firebase-de5081e8.js", "chunks/preload-helper-ec9aa979.js"], "styles": [] }, "src/routes/dashboard/__layout.svelte": { "entry": "pages/dashboard/__layout.svelte-4c0a831b.js", "css": ["assets/pages/dashboard/__layout.svelte-1732c599.css", "assets/loader-8e602be2.css"], "js": ["pages/dashboard/__layout.svelte-4c0a831b.js", "chunks/vendor-2d000641.js", "chunks/stores-c8efc9f5.js", "chunks/firebase-de5081e8.js", "chunks/loader-f75b3db3.js", "chunks/singletons-12a22614.js"], "styles": [] }, "src/routes/dashboard/index.svelte": { "entry": "pages/dashboard/index.svelte-7727a3f4.js", "css": ["assets/pages/dashboard/index.svelte-773bdcf8.css", "assets/activityIndicator-4da3c755.css", "assets/snackbar-58363d24.css"], "js": ["pages/dashboard/index.svelte-7727a3f4.js", "chunks/vendor-2d000641.js", "chunks/activityIndicator-a3942c2e.js", "chunks/snackbar-8587ba53.js", "chunks/firebase-de5081e8.js", "chunks/stores-c8efc9f5.js"], "styles": [] }, "src/routes/dashboard/manage.svelte": { "entry": "pages/dashboard/manage.svelte-be3997fa.js", "css": ["assets/pages/dashboard/manage.svelte-58931106.css", "assets/activityIndicator-4da3c755.css", "assets/snackbar-58363d24.css"], "js": ["pages/dashboard/manage.svelte-be3997fa.js", "chunks/vendor-2d000641.js", "chunks/stores-c8efc9f5.js", "chunks/activityIndicator-a3942c2e.js", "chunks/snackbar-8587ba53.js", "chunks/firebase-de5081e8.js"], "styles": [] }, "src/routes/verify.svelte": { "entry": "pages/verify.svelte-58947b4d.js", "css": ["assets/loader-8e602be2.css"], "js": ["pages/verify.svelte-58947b4d.js", "chunks/vendor-2d000641.js", "chunks/stores-c8efc9f5.js", "chunks/firebase-de5081e8.js", "chunks/loader-f75b3db3.js", "chunks/singletons-12a22614.js"], "styles": [] } };
async function load_component(file) {
  const { entry, css: css2, js, styles } = metadata_lookup[file];
  return {
    module: await module_lookup[file](),
    entry: assets + "/_app/" + entry,
    css: css2.map((dep) => assets + "/_app/" + dep),
    js: js.map((dep) => assets + "/_app/" + dep),
    styles
  };
}
function render(request, {
  prerender
} = {}) {
  const host = request.headers["host"];
  return respond({ ...request, host }, options, { prerender });
}
var post$1 = async (request) => {
  const { decryptedPassword } = request.body;
  if (decryptedPassword && decryptedPassword.length) {
    const encryptedPassword = CryptoJS.AES.encrypt(decryptedPassword, "theomlondhe").toString();
    return {
      status: 200,
      body: {
        encryptedPassword
      }
    };
  } else {
    return {
      status: 404,
      body: {
        error: "Please provide a password"
      }
    };
  }
};
var encpass = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  post: post$1
});
var post = async (request) => {
  const { encryptedPassword } = request.body;
  if (encryptedPassword && encryptedPassword.length) {
    const decryptedPassword = CryptoJS.AES.decrypt(encryptedPassword, "theomlondhe").toString(CryptoJS.enc.Utf8);
    return {
      status: 200,
      body: {
        decryptedPassword
      }
    };
  } else {
    return {
      status: 404,
      body: {
        error: "Please provide a password"
      }
    };
  }
};
var depass = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  post
});
function cubicInOut(t) {
  return t < 0.5 ? 4 * t * t * t : 0.5 * Math.pow(2 * t - 2, 3) + 1;
}
function cubicOut(t) {
  const f = t - 1;
  return f * f * f + 1;
}
function blur(node, { delay = 0, duration = 400, easing = cubicInOut, amount = 5, opacity = 0 } = {}) {
  const style = getComputedStyle(node);
  const target_opacity = +style.opacity;
  const f = style.filter === "none" ? "" : style.filter;
  const od = target_opacity * (1 - opacity);
  return {
    delay,
    duration,
    easing,
    css: (_t, u) => `opacity: ${target_opacity - od * u}; filter: ${f} blur(${u * amount}px);`
  };
}
function slide(node, { delay = 0, duration = 400, easing = cubicOut } = {}) {
  const style = getComputedStyle(node);
  const opacity = +style.opacity;
  const height = parseFloat(style.height);
  const padding_top = parseFloat(style.paddingTop);
  const padding_bottom = parseFloat(style.paddingBottom);
  const margin_top = parseFloat(style.marginTop);
  const margin_bottom = parseFloat(style.marginBottom);
  const border_top_width = parseFloat(style.borderTopWidth);
  const border_bottom_width = parseFloat(style.borderBottomWidth);
  return {
    delay,
    duration,
    easing,
    css: (t) => `overflow: hidden;opacity: ${Math.min(t * 20, 1) * opacity};height: ${t * height}px;padding-top: ${t * padding_top}px;padding-bottom: ${t * padding_bottom}px;margin-top: ${t * margin_top}px;margin-bottom: ${t * margin_bottom}px;border-top-width: ${t * border_top_width}px;border-bottom-width: ${t * border_bottom_width}px;`
  };
}
var loader_svelte_svelte_type_style_lang = ".verifyContainer.svelte-2vsuqw{background:#1c0522;display:flex;flex-direction:column;justify-content:center;align-items:center;height:100vh}.text.svelte-2vsuqw{color:white;margin-top:24px}.loader.svelte-2vsuqw{position:relative;height:44px;width:44px;border-radius:50%;animation:svelte-2vsuqw-loaderAnimation 4s infinite}@keyframes svelte-2vsuqw-loaderAnimation{0%,100%{border:4px solid #2d1633;border-top:4px solid #ff1e67;border-bottom:4px solid #ff1e67;transform:rotateX(0deg) rotateY(0deg) rotateY(0deg) scale(1.21)}50%{border:4px solid #ff1e67;border-top:4px solid #2d1633;border-bottom:4px solid #2d1633;transform:rotateX(360deg) rotateY(360deg) rotateY(360deg) scale(1)}}";
var css$j = {
  code: ".verifyContainer.svelte-2vsuqw{background:#1c0522;display:flex;flex-direction:column;justify-content:center;align-items:center;height:100vh}.text.svelte-2vsuqw{color:white;margin-top:24px}.loader.svelte-2vsuqw{position:relative;height:44px;width:44px;border-radius:50%;animation:svelte-2vsuqw-loaderAnimation 4s infinite}@keyframes svelte-2vsuqw-loaderAnimation{0%,100%{border:4px solid #2d1633;border-top:4px solid #ff1e67;border-bottom:4px solid #ff1e67;transform:rotateX(0deg) rotateY(0deg) rotateY(0deg) scale(1.21)}50%{border:4px solid #ff1e67;border-top:4px solid #2d1633;border-bottom:4px solid #2d1633;transform:rotateX(360deg) rotateY(360deg) rotateY(360deg) scale(1)}}",
  map: `{"version":3,"file":"loader.svelte","sources":["loader.svelte"],"sourcesContent":["<script>\\r\\n\\timport { fade } from 'svelte/transition';\\r\\n\\r\\n\\texport let text = 'Loading...';\\r\\n<\/script>\\r\\n\\r\\n<div class=\\"verifyContainer\\" transition:fade|local>\\r\\n\\t<div class=\\"loader\\" />\\r\\n\\t<p class=\\"text\\">{text}</p>\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n\\t.verifyContainer {\\r\\n\\t\\tbackground: #1c0522;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: column;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\theight: 100vh;\\r\\n\\t}\\r\\n\\t.text {\\r\\n\\t\\tcolor: white;\\r\\n\\t\\tmargin-top: 24px;\\r\\n\\t}\\r\\n\\t.loader {\\r\\n\\t\\tposition: relative;\\r\\n\\t\\theight: 44px;\\r\\n\\t\\twidth: 44px;\\r\\n\\t\\tborder-radius: 50%;\\r\\n\\t\\tanimation: loaderAnimation 4s infinite;\\r\\n\\t}\\r\\n\\t@keyframes loaderAnimation {\\r\\n\\t\\t0%,\\r\\n\\t\\t100% {\\r\\n\\t\\t\\tborder: 4px solid #2d1633;\\r\\n\\t\\t\\tborder-top: 4px solid #ff1e67;\\r\\n\\t\\t\\tborder-bottom: 4px solid #ff1e67;\\r\\n\\t\\t\\ttransform: rotateX(0deg) rotateY(0deg) rotateY(0deg) scale(1.21);\\r\\n\\t\\t}\\r\\n\\t\\t50% {\\r\\n\\t\\t\\tborder: 4px solid #ff1e67;\\r\\n\\t\\t\\tborder-top: 4px solid #2d1633;\\r\\n\\t\\t\\tborder-bottom: 4px solid #2d1633;\\r\\n\\t\\t\\ttransform: rotateX(360deg) rotateY(360deg) rotateY(360deg) scale(1);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAYC,gBAAgB,cAAC,CAAC,AACjB,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,KAAK,AACd,CAAC,AACD,KAAK,cAAC,CAAC,AACN,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,IAAI,AACjB,CAAC,AACD,OAAO,cAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,GAAG,CAClB,SAAS,CAAE,6BAAe,CAAC,EAAE,CAAC,QAAQ,AACvC,CAAC,AACD,WAAW,6BAAgB,CAAC,AAC3B,EAAE,CACF,IAAI,AAAC,CAAC,AACL,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAC7B,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAChC,SAAS,CAAE,QAAQ,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,AACjE,CAAC,AACD,GAAG,AAAC,CAAC,AACJ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAC7B,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CAChC,SAAS,CAAE,QAAQ,MAAM,CAAC,CAAC,QAAQ,MAAM,CAAC,CAAC,QAAQ,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,AACpE,CAAC,AACF,CAAC"}`
};
var Loader = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { text = "Loading..." } = $$props;
  if ($$props.text === void 0 && $$bindings.text && text !== void 0)
    $$bindings.text(text);
  $$result.css.add(css$j);
  return `<div class="${"verifyContainer svelte-2vsuqw"}"><div class="${"loader svelte-2vsuqw"}"></div>
	<p class="${"text svelte-2vsuqw"}">${escape2(text)}</p>
</div>`;
});
var _layout$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${`${validate_component(Loader, "Loader").$$render($$result, {}, {}, {})}`}`;
});
var __layout$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _layout$1
});
function load$2({ error: error2, status }) {
  return { props: { error: error2, status } };
}
var Error$1 = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { status } = $$props;
  let { error: error2 } = $$props;
  if ($$props.status === void 0 && $$bindings.status && status !== void 0)
    $$bindings.status(status);
  if ($$props.error === void 0 && $$bindings.error && error2 !== void 0)
    $$bindings.error(error2);
  return `<h1>${escape2(status)}</h1>

<pre>${escape2(error2.message)}</pre>



${error2.frame ? `<pre>${escape2(error2.frame)}</pre>` : ``}
${error2.stack ? `<pre>${escape2(error2.stack)}</pre>` : ``}`;
});
var error = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Error$1,
  load: load$2
});
var parallaxHero_svelte_svelte_type_style_lang = "section.svelte-x1vjxb.svelte-x1vjxb::before{content:'';position:absolute;bottom:0;width:100%;height:100px;background:linear-gradient(to top, #1c0522, transparent);z-index:100}section.svelte-x1vjxb.svelte-x1vjxb{position:relative;width:100%;height:100vh;display:grid;place-items:center;overflow:hidden}section.svelte-x1vjxb img.svelte-x1vjxb{position:absolute;top:0;left:0;width:100%;height:100%;object-fit:cover;pointer-events:none}section.svelte-x1vjxb img#moon.svelte-x1vjxb{mix-blend-mode:screen}section.svelte-x1vjxb img#mountains_front.svelte-x1vjxb{z-index:10}#text.svelte-x1vjxb.svelte-x1vjxb{position:absolute;color:#fff;white-space:nowrap;font-size:5rem;z-index:9;font-family:'Poppins', sans-serif;right:-500px;-webkit-text-stroke:1px solid grey}#button.svelte-x1vjxb.svelte-x1vjxb{text-decoration:none;padding:8px 30px;border-radius:40px;background:#fff;color:#2b1055;font-size:1.5em;display:inline-block;z-index:9;transform:translateY(111px);font-family:'Poppins', sans-serif;border:1px solid grey}";
var css$i = {
  code: "section.svelte-x1vjxb.svelte-x1vjxb::before{content:'';position:absolute;bottom:0;width:100%;height:100px;background:linear-gradient(to top, #1c0522, transparent);z-index:100}section.svelte-x1vjxb.svelte-x1vjxb{position:relative;width:100%;height:100vh;display:grid;place-items:center;overflow:hidden}section.svelte-x1vjxb img.svelte-x1vjxb{position:absolute;top:0;left:0;width:100%;height:100%;object-fit:cover;pointer-events:none}section.svelte-x1vjxb img#moon.svelte-x1vjxb{mix-blend-mode:screen}section.svelte-x1vjxb img#mountains_front.svelte-x1vjxb{z-index:10}#text.svelte-x1vjxb.svelte-x1vjxb{position:absolute;color:#fff;white-space:nowrap;font-size:5rem;z-index:9;font-family:'Poppins', sans-serif;right:-500px;-webkit-text-stroke:1px solid grey}#button.svelte-x1vjxb.svelte-x1vjxb{text-decoration:none;padding:8px 30px;border-radius:40px;background:#fff;color:#2b1055;font-size:1.5em;display:inline-block;z-index:9;transform:translateY(111px);font-family:'Poppins', sans-serif;border:1px solid grey}",
  map: '{"version":3,"file":"parallaxHero.svelte","sources":["parallaxHero.svelte"],"sourcesContent":["<script>\\r\\n\\timport { blur, fly } from \'svelte/transition\';\\r\\n\\r\\n\\texport let scrollY;\\r\\n\\r\\n\\tlet stars;\\r\\n\\tlet moon;\\r\\n\\tlet mountains_behind;\\r\\n\\tlet mountains_front;\\r\\n\\tlet text;\\r\\n\\tlet button;\\r\\n\\r\\n\\t$: stars && (stars.style.left = `${scrollY * 0.25}px`);\\r\\n\\t$: moon && (moon.style.top = `${scrollY * 1.05}px`);\\r\\n\\t$: mountains_behind && (mountains_behind.style.top = `${scrollY * 0.5}px`);\\r\\n\\t$: mountains_front && (mountains_front.style.top = `${scrollY * 0}px`);\\r\\n\\t$: text && (text.style.marginRight = `${scrollY * 4}px`);\\r\\n\\t$: text && (text.style.marginTop = `${scrollY * 1.5}px`);\\r\\n\\t$: button && (button.style.marginTop = `${scrollY * 1.5}px`);\\r\\n<\/script>\\r\\n\\r\\n<section>\\r\\n\\t<img\\r\\n\\t\\tsrc=\\"/stars.png\\"\\r\\n\\t\\talt=\\"stars\\"\\r\\n\\t\\tid=\\"stars\\"\\r\\n\\t\\tbind:this={stars}\\r\\n\\t\\tin:blur={{ delay: 321, duration: 771 }}\\r\\n\\t/>\\r\\n\\t<img src=\\"/moon.png\\" alt=\\"moon\\" id=\\"moon\\" bind:this={moon} in:blur={{ duration: 1551 }} />\\r\\n\\t<img\\r\\n\\t\\tsrc=\\"/mountains_behind.png\\"\\r\\n\\t\\talt=\\"mountains_behind\\"\\r\\n\\t\\tid=\\"mountains_behind\\"\\r\\n\\t\\tbind:this={mountains_behind}\\r\\n\\t\\tin:blur={{ duration: 571, delay: 271 }}\\r\\n\\t/>\\r\\n\\t<h2 id=\\"text\\" bind:this={text} in:blur={{ delay: 1221 }}>SignCounter</h2>\\r\\n\\t<a href=\\"#login\\" id=\\"button\\" bind:this={button} in:fly={{ y: 500, opacity: 0, delay: 1221 }}\\r\\n\\t\\t>Let\'s go!</a\\r\\n\\t>\\r\\n\\t<img\\r\\n\\t\\tsrc=\\"/mountains_front.png\\"\\r\\n\\t\\talt=\\"mountains_front\\"\\r\\n\\t\\tid=\\"mountains_front\\"\\r\\n\\t\\tbind:this={mountains_front}\\r\\n\\t\\tin:blur={{ duration: 571, delay: 271 }}\\r\\n\\t/>\\r\\n</section>\\r\\n\\r\\n<style>\\r\\n\\tsection::before {\\r\\n\\t\\tcontent: \'\';\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\tbottom: 0;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 100px;\\r\\n\\t\\tbackground: linear-gradient(to top, #1c0522, transparent);\\r\\n\\t\\tz-index: 100;\\r\\n\\t}\\r\\n\\tsection {\\r\\n\\t\\tposition: relative;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 100vh;\\r\\n\\t\\tdisplay: grid;\\r\\n\\t\\tplace-items: center;\\r\\n\\t\\toverflow: hidden;\\r\\n\\t}\\r\\n\\tsection img {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttop: 0;\\r\\n\\t\\tleft: 0;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 100%;\\r\\n\\t\\tobject-fit: cover;\\r\\n\\t\\tpointer-events: none;\\r\\n\\t}\\r\\n\\tsection img#moon {\\r\\n\\t\\tmix-blend-mode: screen;\\r\\n\\t}\\r\\n\\tsection img#mountains_front {\\r\\n\\t\\tz-index: 10;\\r\\n\\t}\\r\\n\\t#text {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\tcolor: #fff;\\r\\n\\t\\twhite-space: nowrap;\\r\\n\\t\\tfont-size: 5rem;\\r\\n\\t\\tz-index: 9;\\r\\n\\t\\tfont-family: \'Poppins\', sans-serif;\\r\\n\\t\\tright: -500px;\\r\\n\\t\\t-webkit-text-stroke: 1px solid grey;\\r\\n\\t}\\r\\n\\t#button {\\r\\n\\t\\ttext-decoration: none;\\r\\n\\t\\tpadding: 8px 30px;\\r\\n\\t\\tborder-radius: 40px;\\r\\n\\t\\tbackground: #fff;\\r\\n\\t\\tcolor: #2b1055;\\r\\n\\t\\tfont-size: 1.5em;\\r\\n\\t\\tdisplay: inline-block;\\r\\n\\t\\tz-index: 9;\\r\\n\\t\\ttransform: translateY(111px);\\r\\n\\t\\tfont-family: \'Poppins\', sans-serif;\\r\\n\\t\\tborder: 1px solid grey;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAmDC,mCAAO,QAAQ,AAAC,CAAC,AAChB,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,gBAAgB,EAAE,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,CAAC,WAAW,CAAC,CACzD,OAAO,CAAE,GAAG,AACb,CAAC,AACD,OAAO,4BAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,MAAM,AACjB,CAAC,AACD,qBAAO,CAAC,GAAG,cAAC,CAAC,AACZ,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,CAAC,CACN,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CACjB,cAAc,CAAE,IAAI,AACrB,CAAC,AACD,qBAAO,CAAC,GAAG,KAAK,cAAC,CAAC,AACjB,cAAc,CAAE,MAAM,AACvB,CAAC,AACD,qBAAO,CAAC,GAAG,gBAAgB,cAAC,CAAC,AAC5B,OAAO,CAAE,EAAE,AACZ,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,KAAK,CAAE,MAAM,CACb,mBAAmB,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACpC,CAAC,AACD,OAAO,4BAAC,CAAC,AACR,eAAe,CAAE,IAAI,CACrB,OAAO,CAAE,GAAG,CAAC,IAAI,CACjB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,KAAK,CAChB,OAAO,CAAE,YAAY,CACrB,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,WAAW,KAAK,CAAC,CAC5B,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,AACvB,CAAC"}'
};
var ParallaxHero = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { scrollY } = $$props;
  let stars;
  let moon;
  let mountains_behind;
  let mountains_front;
  let text;
  let button;
  if ($$props.scrollY === void 0 && $$bindings.scrollY && scrollY !== void 0)
    $$bindings.scrollY(scrollY);
  $$result.css.add(css$i);
  return `<section class="${"svelte-x1vjxb"}"><img src="${"/stars.png"}" alt="${"stars"}" id="${"stars"}" class="${"svelte-x1vjxb"}"${add_attribute("this", stars, 0)}>
	<img src="${"/moon.png"}" alt="${"moon"}" id="${"moon"}" class="${"svelte-x1vjxb"}"${add_attribute("this", moon, 0)}>
	<img src="${"/mountains_behind.png"}" alt="${"mountains_behind"}" id="${"mountains_behind"}" class="${"svelte-x1vjxb"}"${add_attribute("this", mountains_behind, 0)}>
	<h2 id="${"text"}" class="${"svelte-x1vjxb"}"${add_attribute("this", text, 0)}>SignCounter</h2>
	<a href="${"#login"}" id="${"button"}" class="${"svelte-x1vjxb"}"${add_attribute("this", button, 0)}>Let&#39;s go!</a>
	<img src="${"/mountains_front.png"}" alt="${"mountains_front"}" id="${"mountains_front"}" class="${"svelte-x1vjxb"}"${add_attribute("this", mountains_front, 0)}>
</section>`;
});
var CONSTANTS = {
  NODE_CLIENT: false,
  NODE_ADMIN: false,
  SDK_VERSION: "${JSCORE_VERSION}"
};
var assert = function(assertion, message2) {
  if (!assertion) {
    throw assertionError(message2);
  }
};
var assertionError = function(message2) {
  return new Error("Firebase Database (" + CONSTANTS.SDK_VERSION + ") INTERNAL ASSERT FAILED: " + message2);
};
var stringToByteArray$1 = function(str) {
  const out = [];
  let p = 0;
  for (let i = 0; i < str.length; i++) {
    let c = str.charCodeAt(i);
    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if ((c & 64512) === 55296 && i + 1 < str.length && (str.charCodeAt(i + 1) & 64512) === 56320) {
      c = 65536 + ((c & 1023) << 10) + (str.charCodeAt(++i) & 1023);
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }
  return out;
};
var byteArrayToString = function(bytes) {
  const out = [];
  let pos = 0, c = 0;
  while (pos < bytes.length) {
    const c1 = bytes[pos++];
    if (c1 < 128) {
      out[c++] = String.fromCharCode(c1);
    } else if (c1 > 191 && c1 < 224) {
      const c2 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 31) << 6 | c2 & 63);
    } else if (c1 > 239 && c1 < 365) {
      const c2 = bytes[pos++];
      const c3 = bytes[pos++];
      const c4 = bytes[pos++];
      const u = ((c1 & 7) << 18 | (c2 & 63) << 12 | (c3 & 63) << 6 | c4 & 63) - 65536;
      out[c++] = String.fromCharCode(55296 + (u >> 10));
      out[c++] = String.fromCharCode(56320 + (u & 1023));
    } else {
      const c2 = bytes[pos++];
      const c3 = bytes[pos++];
      out[c++] = String.fromCharCode((c1 & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
    }
  }
  return out.join("");
};
var base64$2 = {
  byteToCharMap_: null,
  charToByteMap_: null,
  byteToCharMapWebSafe_: null,
  charToByteMapWebSafe_: null,
  ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + "+/=";
  },
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + "-_.";
  },
  HAS_NATIVE_SUPPORT: typeof atob === "function",
  encodeByteArray(input, webSafe) {
    if (!Array.isArray(input)) {
      throw Error("encodeByteArray takes an array as a parameter");
    }
    this.init_();
    const byteToCharMap = webSafe ? this.byteToCharMapWebSafe_ : this.byteToCharMap_;
    const output = [];
    for (let i = 0; i < input.length; i += 3) {
      const byte1 = input[i];
      const haveByte2 = i + 1 < input.length;
      const byte2 = haveByte2 ? input[i + 1] : 0;
      const haveByte3 = i + 2 < input.length;
      const byte3 = haveByte3 ? input[i + 2] : 0;
      const outByte1 = byte1 >> 2;
      const outByte2 = (byte1 & 3) << 4 | byte2 >> 4;
      let outByte3 = (byte2 & 15) << 2 | byte3 >> 6;
      let outByte4 = byte3 & 63;
      if (!haveByte3) {
        outByte4 = 64;
        if (!haveByte2) {
          outByte3 = 64;
        }
      }
      output.push(byteToCharMap[outByte1], byteToCharMap[outByte2], byteToCharMap[outByte3], byteToCharMap[outByte4]);
    }
    return output.join("");
  },
  encodeString(input, webSafe) {
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return btoa(input);
    }
    return this.encodeByteArray(stringToByteArray$1(input), webSafe);
  },
  decodeString(input, webSafe) {
    if (this.HAS_NATIVE_SUPPORT && !webSafe) {
      return atob(input);
    }
    return byteArrayToString(this.decodeStringToByteArray(input, webSafe));
  },
  decodeStringToByteArray(input, webSafe) {
    this.init_();
    const charToByteMap = webSafe ? this.charToByteMapWebSafe_ : this.charToByteMap_;
    const output = [];
    for (let i = 0; i < input.length; ) {
      const byte1 = charToByteMap[input.charAt(i++)];
      const haveByte2 = i < input.length;
      const byte2 = haveByte2 ? charToByteMap[input.charAt(i)] : 0;
      ++i;
      const haveByte3 = i < input.length;
      const byte3 = haveByte3 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      const haveByte4 = i < input.length;
      const byte4 = haveByte4 ? charToByteMap[input.charAt(i)] : 64;
      ++i;
      if (byte1 == null || byte2 == null || byte3 == null || byte4 == null) {
        throw Error();
      }
      const outByte1 = byte1 << 2 | byte2 >> 4;
      output.push(outByte1);
      if (byte3 !== 64) {
        const outByte2 = byte2 << 4 & 240 | byte3 >> 2;
        output.push(outByte2);
        if (byte4 !== 64) {
          const outByte3 = byte3 << 6 & 192 | byte4;
          output.push(outByte3);
        }
      }
    }
    return output;
  },
  init_() {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {};
      this.charToByteMap_ = {};
      this.byteToCharMapWebSafe_ = {};
      this.charToByteMapWebSafe_ = {};
      for (let i = 0; i < this.ENCODED_VALS.length; i++) {
        this.byteToCharMap_[i] = this.ENCODED_VALS.charAt(i);
        this.charToByteMap_[this.byteToCharMap_[i]] = i;
        this.byteToCharMapWebSafe_[i] = this.ENCODED_VALS_WEBSAFE.charAt(i);
        this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[i]] = i;
        if (i >= this.ENCODED_VALS_BASE.length) {
          this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(i)] = i;
          this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(i)] = i;
        }
      }
    }
  }
};
var base64Encode = function(str) {
  const utf8Bytes = stringToByteArray$1(str);
  return base64$2.encodeByteArray(utf8Bytes, true);
};
var base64urlEncodeWithoutPadding = function(str) {
  return base64Encode(str).replace(/\./g, "");
};
var base64Decode = function(str) {
  try {
    return base64$2.decodeString(str, true);
  } catch (e) {
    console.error("base64Decode failed: ", e);
  }
  return null;
};
function deepCopy(value) {
  return deepExtend(void 0, value);
}
function deepExtend(target, source) {
  if (!(source instanceof Object)) {
    return source;
  }
  switch (source.constructor) {
    case Date:
      const dateValue = source;
      return new Date(dateValue.getTime());
    case Object:
      if (target === void 0) {
        target = {};
      }
      break;
    case Array:
      target = [];
      break;
    default:
      return source;
  }
  for (const prop in source) {
    if (!source.hasOwnProperty(prop) || !isValidKey(prop)) {
      continue;
    }
    target[prop] = deepExtend(target[prop], source[prop]);
  }
  return target;
}
function isValidKey(key) {
  return key !== "__proto__";
}
var Deferred$1 = class {
  constructor() {
    this.reject = () => {
    };
    this.resolve = () => {
    };
    this.promise = new Promise((resolve6, reject) => {
      this.resolve = resolve6;
      this.reject = reject;
    });
  }
  wrapCallback(callback) {
    return (error2, value) => {
      if (error2) {
        this.reject(error2);
      } else {
        this.resolve(value);
      }
      if (typeof callback === "function") {
        this.promise.catch(() => {
        });
        if (callback.length === 1) {
          callback(error2);
        } else {
          callback(error2, value);
        }
      }
    };
  }
};
function createMockUserToken(token, projectId) {
  if (token.uid) {
    throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
  }
  const header = {
    alg: "none",
    type: "JWT"
  };
  const project = projectId || "demo-project";
  const iat = token.iat || 0;
  const sub = token.sub || token.user_id;
  if (!sub) {
    throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
  }
  const payload = Object.assign({
    iss: `https://securetoken.google.com/${project}`,
    aud: project,
    iat,
    exp: iat + 3600,
    auth_time: iat,
    sub,
    user_id: sub,
    firebase: {
      sign_in_provider: "custom",
      identities: {}
    }
  }, token);
  const signature = "";
  return [
    base64urlEncodeWithoutPadding(JSON.stringify(header)),
    base64urlEncodeWithoutPadding(JSON.stringify(payload)),
    signature
  ].join(".");
}
function getUA() {
  if (typeof navigator !== "undefined" && typeof navigator["userAgent"] === "string") {
    return navigator["userAgent"];
  } else {
    return "";
  }
}
function isMobileCordova() {
  return typeof window !== "undefined" && !!(window["cordova"] || window["phonegap"] || window["PhoneGap"]) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(getUA());
}
function isNode() {
  try {
    return Object.prototype.toString.call(global.process) === "[object process]";
  } catch (e) {
    return false;
  }
}
function isBrowser() {
  return typeof self === "object" && self.self === self;
}
function isBrowserExtension() {
  const runtime = typeof chrome === "object" ? chrome.runtime : typeof browser === "object" ? browser.runtime : void 0;
  return typeof runtime === "object" && runtime.id !== void 0;
}
function isReactNative() {
  return typeof navigator === "object" && navigator["product"] === "ReactNative";
}
function isElectron() {
  return getUA().indexOf("Electron/") >= 0;
}
function isIE() {
  const ua = getUA();
  return ua.indexOf("MSIE ") >= 0 || ua.indexOf("Trident/") >= 0;
}
function isUWP() {
  return getUA().indexOf("MSAppHost/") >= 0;
}
function isNodeSdk() {
  return CONSTANTS.NODE_CLIENT === true || CONSTANTS.NODE_ADMIN === true;
}
function isSafari() {
  return !isNode() && navigator.userAgent.includes("Safari") && !navigator.userAgent.includes("Chrome");
}
function isIndexedDBAvailable() {
  return typeof indexedDB === "object";
}
function validateIndexedDBOpenable() {
  return new Promise((resolve6, reject) => {
    try {
      let preExist = true;
      const DB_CHECK_NAME = "validate-browser-context-for-indexeddb-analytics-module";
      const request = self.indexedDB.open(DB_CHECK_NAME);
      request.onsuccess = () => {
        request.result.close();
        if (!preExist) {
          self.indexedDB.deleteDatabase(DB_CHECK_NAME);
        }
        resolve6(true);
      };
      request.onupgradeneeded = () => {
        preExist = false;
      };
      request.onerror = () => {
        var _a;
        reject(((_a = request.error) === null || _a === void 0 ? void 0 : _a.message) || "");
      };
    } catch (error2) {
      reject(error2);
    }
  });
}
function areCookiesEnabled() {
  if (typeof navigator === "undefined" || !navigator.cookieEnabled) {
    return false;
  }
  return true;
}
function getGlobal() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("Unable to locate global object.");
}
var ERROR_NAME = "FirebaseError";
var FirebaseError = class extends Error {
  constructor(code, message2, customData) {
    super(message2);
    this.code = code;
    this.customData = customData;
    this.name = ERROR_NAME;
    Object.setPrototypeOf(this, FirebaseError.prototype);
    if (Error.captureStackTrace) {
      Error.captureStackTrace(this, ErrorFactory.prototype.create);
    }
  }
};
var ErrorFactory = class {
  constructor(service2, serviceName, errors) {
    this.service = service2;
    this.serviceName = serviceName;
    this.errors = errors;
  }
  create(code, ...data) {
    const customData = data[0] || {};
    const fullCode = `${this.service}/${code}`;
    const template2 = this.errors[code];
    const message2 = template2 ? replaceTemplate(template2, customData) : "Error";
    const fullMessage = `${this.serviceName}: ${message2} (${fullCode}).`;
    const error2 = new FirebaseError(fullCode, fullMessage, customData);
    return error2;
  }
};
function replaceTemplate(template2, data) {
  return template2.replace(PATTERN, (_, key) => {
    const value = data[key];
    return value != null ? String(value) : `<${key}?>`;
  });
}
var PATTERN = /\{\$([^}]+)}/g;
function jsonEval(str) {
  return JSON.parse(str);
}
function stringify(data) {
  return JSON.stringify(data);
}
var decode = function(token) {
  let header = {}, claims = {}, data = {}, signature = "";
  try {
    const parts = token.split(".");
    header = jsonEval(base64Decode(parts[0]) || "");
    claims = jsonEval(base64Decode(parts[1]) || "");
    signature = parts[2];
    data = claims["d"] || {};
    delete claims["d"];
  } catch (e) {
  }
  return {
    header,
    claims,
    data,
    signature
  };
};
var isValidTimestamp = function(token) {
  const claims = decode(token).claims;
  const now = Math.floor(new Date().getTime() / 1e3);
  let validSince = 0, validUntil = 0;
  if (typeof claims === "object") {
    if (claims.hasOwnProperty("nbf")) {
      validSince = claims["nbf"];
    } else if (claims.hasOwnProperty("iat")) {
      validSince = claims["iat"];
    }
    if (claims.hasOwnProperty("exp")) {
      validUntil = claims["exp"];
    } else {
      validUntil = validSince + 86400;
    }
  }
  return !!now && !!validSince && !!validUntil && now >= validSince && now <= validUntil;
};
var issuedAtTime = function(token) {
  const claims = decode(token).claims;
  if (typeof claims === "object" && claims.hasOwnProperty("iat")) {
    return claims["iat"];
  }
  return null;
};
var isValidFormat = function(token) {
  const decoded = decode(token), claims = decoded.claims;
  return !!claims && typeof claims === "object" && claims.hasOwnProperty("iat");
};
var isAdmin = function(token) {
  const claims = decode(token).claims;
  return typeof claims === "object" && claims["admin"] === true;
};
function contains(obj, key) {
  return Object.prototype.hasOwnProperty.call(obj, key);
}
function safeGet(obj, key) {
  if (Object.prototype.hasOwnProperty.call(obj, key)) {
    return obj[key];
  } else {
    return void 0;
  }
}
function isEmpty$1(obj) {
  for (const key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      return false;
    }
  }
  return true;
}
function map(obj, fn, contextObj) {
  const res = {};
  for (const key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      res[key] = fn.call(contextObj, obj[key], key, obj);
    }
  }
  return res;
}
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  const aKeys = Object.keys(a);
  const bKeys = Object.keys(b);
  for (const k of aKeys) {
    if (!bKeys.includes(k)) {
      return false;
    }
    const aProp = a[k];
    const bProp = b[k];
    if (isObject(aProp) && isObject(bProp)) {
      if (!deepEqual(aProp, bProp)) {
        return false;
      }
    } else if (aProp !== bProp) {
      return false;
    }
  }
  for (const k of bKeys) {
    if (!aKeys.includes(k)) {
      return false;
    }
  }
  return true;
}
function isObject(thing) {
  return thing !== null && typeof thing === "object";
}
function querystring(querystringParams) {
  const params = [];
  for (const [key, value] of Object.entries(querystringParams)) {
    if (Array.isArray(value)) {
      value.forEach((arrayVal) => {
        params.push(encodeURIComponent(key) + "=" + encodeURIComponent(arrayVal));
      });
    } else {
      params.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
    }
  }
  return params.length ? "&" + params.join("&") : "";
}
function querystringDecode(querystring2) {
  const obj = {};
  const tokens = querystring2.replace(/^\?/, "").split("&");
  tokens.forEach((token) => {
    if (token) {
      const [key, value] = token.split("=");
      obj[decodeURIComponent(key)] = decodeURIComponent(value);
    }
  });
  return obj;
}
function extractQuerystring(url) {
  const queryStart = url.indexOf("?");
  if (!queryStart) {
    return "";
  }
  const fragmentStart = url.indexOf("#", queryStart);
  return url.substring(queryStart, fragmentStart > 0 ? fragmentStart : void 0);
}
var Sha1 = class {
  constructor() {
    this.chain_ = [];
    this.buf_ = [];
    this.W_ = [];
    this.pad_ = [];
    this.inbuf_ = 0;
    this.total_ = 0;
    this.blockSize = 512 / 8;
    this.pad_[0] = 128;
    for (let i = 1; i < this.blockSize; ++i) {
      this.pad_[i] = 0;
    }
    this.reset();
  }
  reset() {
    this.chain_[0] = 1732584193;
    this.chain_[1] = 4023233417;
    this.chain_[2] = 2562383102;
    this.chain_[3] = 271733878;
    this.chain_[4] = 3285377520;
    this.inbuf_ = 0;
    this.total_ = 0;
  }
  compress_(buf, offset) {
    if (!offset) {
      offset = 0;
    }
    const W = this.W_;
    if (typeof buf === "string") {
      for (let i = 0; i < 16; i++) {
        W[i] = buf.charCodeAt(offset) << 24 | buf.charCodeAt(offset + 1) << 16 | buf.charCodeAt(offset + 2) << 8 | buf.charCodeAt(offset + 3);
        offset += 4;
      }
    } else {
      for (let i = 0; i < 16; i++) {
        W[i] = buf[offset] << 24 | buf[offset + 1] << 16 | buf[offset + 2] << 8 | buf[offset + 3];
        offset += 4;
      }
    }
    for (let i = 16; i < 80; i++) {
      const t = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
      W[i] = (t << 1 | t >>> 31) & 4294967295;
    }
    let a = this.chain_[0];
    let b = this.chain_[1];
    let c = this.chain_[2];
    let d = this.chain_[3];
    let e = this.chain_[4];
    let f, k;
    for (let i = 0; i < 80; i++) {
      if (i < 40) {
        if (i < 20) {
          f = d ^ b & (c ^ d);
          k = 1518500249;
        } else {
          f = b ^ c ^ d;
          k = 1859775393;
        }
      } else {
        if (i < 60) {
          f = b & c | d & (b | c);
          k = 2400959708;
        } else {
          f = b ^ c ^ d;
          k = 3395469782;
        }
      }
      const t = (a << 5 | a >>> 27) + f + e + k + W[i] & 4294967295;
      e = d;
      d = c;
      c = (b << 30 | b >>> 2) & 4294967295;
      b = a;
      a = t;
    }
    this.chain_[0] = this.chain_[0] + a & 4294967295;
    this.chain_[1] = this.chain_[1] + b & 4294967295;
    this.chain_[2] = this.chain_[2] + c & 4294967295;
    this.chain_[3] = this.chain_[3] + d & 4294967295;
    this.chain_[4] = this.chain_[4] + e & 4294967295;
  }
  update(bytes, length2) {
    if (bytes == null) {
      return;
    }
    if (length2 === void 0) {
      length2 = bytes.length;
    }
    const lengthMinusBlock = length2 - this.blockSize;
    let n = 0;
    const buf = this.buf_;
    let inbuf = this.inbuf_;
    while (n < length2) {
      if (inbuf === 0) {
        while (n <= lengthMinusBlock) {
          this.compress_(bytes, n);
          n += this.blockSize;
        }
      }
      if (typeof bytes === "string") {
        while (n < length2) {
          buf[inbuf] = bytes.charCodeAt(n);
          ++inbuf;
          ++n;
          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0;
            break;
          }
        }
      } else {
        while (n < length2) {
          buf[inbuf] = bytes[n];
          ++inbuf;
          ++n;
          if (inbuf === this.blockSize) {
            this.compress_(buf);
            inbuf = 0;
            break;
          }
        }
      }
    }
    this.inbuf_ = inbuf;
    this.total_ += length2;
  }
  digest() {
    const digest = [];
    let totalBits = this.total_ * 8;
    if (this.inbuf_ < 56) {
      this.update(this.pad_, 56 - this.inbuf_);
    } else {
      this.update(this.pad_, this.blockSize - (this.inbuf_ - 56));
    }
    for (let i = this.blockSize - 1; i >= 56; i--) {
      this.buf_[i] = totalBits & 255;
      totalBits /= 256;
    }
    this.compress_(this.buf_);
    let n = 0;
    for (let i = 0; i < 5; i++) {
      for (let j = 24; j >= 0; j -= 8) {
        digest[n] = this.chain_[i] >> j & 255;
        ++n;
      }
    }
    return digest;
  }
};
function createSubscribe(executor, onNoObservers) {
  const proxy = new ObserverProxy(executor, onNoObservers);
  return proxy.subscribe.bind(proxy);
}
var ObserverProxy = class {
  constructor(executor, onNoObservers) {
    this.observers = [];
    this.unsubscribes = [];
    this.observerCount = 0;
    this.task = Promise.resolve();
    this.finalized = false;
    this.onNoObservers = onNoObservers;
    this.task.then(() => {
      executor(this);
    }).catch((e) => {
      this.error(e);
    });
  }
  next(value) {
    this.forEachObserver((observer) => {
      observer.next(value);
    });
  }
  error(error2) {
    this.forEachObserver((observer) => {
      observer.error(error2);
    });
    this.close(error2);
  }
  complete() {
    this.forEachObserver((observer) => {
      observer.complete();
    });
    this.close();
  }
  subscribe(nextOrObserver, error2, complete) {
    let observer;
    if (nextOrObserver === void 0 && error2 === void 0 && complete === void 0) {
      throw new Error("Missing Observer.");
    }
    if (implementsAnyMethods$1(nextOrObserver, [
      "next",
      "error",
      "complete"
    ])) {
      observer = nextOrObserver;
    } else {
      observer = {
        next: nextOrObserver,
        error: error2,
        complete
      };
    }
    if (observer.next === void 0) {
      observer.next = noop$2;
    }
    if (observer.error === void 0) {
      observer.error = noop$2;
    }
    if (observer.complete === void 0) {
      observer.complete = noop$2;
    }
    const unsub = this.unsubscribeOne.bind(this, this.observers.length);
    if (this.finalized) {
      this.task.then(() => {
        try {
          if (this.finalError) {
            observer.error(this.finalError);
          } else {
            observer.complete();
          }
        } catch (e) {
        }
        return;
      });
    }
    this.observers.push(observer);
    return unsub;
  }
  unsubscribeOne(i) {
    if (this.observers === void 0 || this.observers[i] === void 0) {
      return;
    }
    delete this.observers[i];
    this.observerCount -= 1;
    if (this.observerCount === 0 && this.onNoObservers !== void 0) {
      this.onNoObservers(this);
    }
  }
  forEachObserver(fn) {
    if (this.finalized) {
      return;
    }
    for (let i = 0; i < this.observers.length; i++) {
      this.sendOne(i, fn);
    }
  }
  sendOne(i, fn) {
    this.task.then(() => {
      if (this.observers !== void 0 && this.observers[i] !== void 0) {
        try {
          fn(this.observers[i]);
        } catch (e) {
          if (typeof console !== "undefined" && console.error) {
            console.error(e);
          }
        }
      }
    });
  }
  close(err) {
    if (this.finalized) {
      return;
    }
    this.finalized = true;
    if (err !== void 0) {
      this.finalError = err;
    }
    this.task.then(() => {
      this.observers = void 0;
      this.onNoObservers = void 0;
    });
  }
};
function async(fn, onError) {
  return (...args) => {
    Promise.resolve(true).then(() => {
      fn(...args);
    }).catch((error2) => {
      if (onError) {
        onError(error2);
      }
    });
  };
}
function implementsAnyMethods$1(obj, methods) {
  if (typeof obj !== "object" || obj === null) {
    return false;
  }
  for (const method2 of methods) {
    if (method2 in obj && typeof obj[method2] === "function") {
      return true;
    }
  }
  return false;
}
function noop$2() {
}
var validateArgCount = function(fnName, minCount, maxCount, argCount) {
  let argError;
  if (argCount < minCount) {
    argError = "at least " + minCount;
  } else if (argCount > maxCount) {
    argError = maxCount === 0 ? "none" : "no more than " + maxCount;
  }
  if (argError) {
    const error2 = fnName + " failed: Was called with " + argCount + (argCount === 1 ? " argument." : " arguments.") + " Expects " + argError + ".";
    throw new Error(error2);
  }
};
function errorPrefix(fnName, argName) {
  return `${fnName} failed: ${argName} argument `;
}
function validateNamespace(fnName, namespace2, optional) {
  if (optional && !namespace2) {
    return;
  }
  if (typeof namespace2 !== "string") {
    throw new Error(errorPrefix(fnName, "namespace") + "must be a valid firebase namespace.");
  }
}
function validateCallback(fnName, argumentName, callback, optional) {
  if (optional && !callback) {
    return;
  }
  if (typeof callback !== "function") {
    throw new Error(errorPrefix(fnName, argumentName) + "must be a valid function.");
  }
}
function validateContextObject(fnName, argumentName, context, optional) {
  if (optional && !context) {
    return;
  }
  if (typeof context !== "object" || context === null) {
    throw new Error(errorPrefix(fnName, argumentName) + "must be a valid context object.");
  }
}
var stringToByteArray = function(str) {
  const out = [];
  let p = 0;
  for (let i = 0; i < str.length; i++) {
    let c = str.charCodeAt(i);
    if (c >= 55296 && c <= 56319) {
      const high = c - 55296;
      i++;
      assert(i < str.length, "Surrogate pair missing trail surrogate.");
      const low = str.charCodeAt(i) - 56320;
      c = 65536 + (high << 10) + low;
    }
    if (c < 128) {
      out[p++] = c;
    } else if (c < 2048) {
      out[p++] = c >> 6 | 192;
      out[p++] = c & 63 | 128;
    } else if (c < 65536) {
      out[p++] = c >> 12 | 224;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    } else {
      out[p++] = c >> 18 | 240;
      out[p++] = c >> 12 & 63 | 128;
      out[p++] = c >> 6 & 63 | 128;
      out[p++] = c & 63 | 128;
    }
  }
  return out;
};
var stringLength = function(str) {
  let p = 0;
  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      p++;
    } else if (c < 2048) {
      p += 2;
    } else if (c >= 55296 && c <= 56319) {
      p += 4;
      i++;
    } else {
      p += 3;
    }
  }
  return p;
};
var DEFAULT_INTERVAL_MILLIS = 1e3;
var DEFAULT_BACKOFF_FACTOR$1 = 2;
var MAX_VALUE_MILLIS = 4 * 60 * 60 * 1e3;
var RANDOM_FACTOR = 0.5;
function calculateBackoffMillis(backoffCount, intervalMillis = DEFAULT_INTERVAL_MILLIS, backoffFactor = DEFAULT_BACKOFF_FACTOR$1) {
  const currBaseValue = intervalMillis * Math.pow(backoffFactor, backoffCount);
  const randomWait = Math.round(RANDOM_FACTOR * currBaseValue * (Math.random() - 0.5) * 2);
  return Math.min(MAX_VALUE_MILLIS, currBaseValue + randomWait);
}
function ordinal(i) {
  if (!Number.isFinite(i)) {
    return `${i}`;
  }
  return i + indicator(i);
}
function indicator(i) {
  i = Math.abs(i);
  const cent = i % 100;
  if (cent >= 10 && cent <= 20) {
    return "th";
  }
  const dec = i % 10;
  if (dec === 1) {
    return "st";
  }
  if (dec === 2) {
    return "nd";
  }
  if (dec === 3) {
    return "rd";
  }
  return "th";
}
function getModularInstance(service2) {
  if (service2 && service2._delegate) {
    return service2._delegate;
  } else {
    return service2;
  }
}
var index_esm2017$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  CONSTANTS,
  Deferred: Deferred$1,
  ErrorFactory,
  FirebaseError,
  MAX_VALUE_MILLIS,
  RANDOM_FACTOR,
  Sha1,
  areCookiesEnabled,
  assert,
  assertionError,
  async,
  base64: base64$2,
  base64Decode,
  base64Encode,
  base64urlEncodeWithoutPadding,
  calculateBackoffMillis,
  contains,
  createMockUserToken,
  createSubscribe,
  decode,
  deepCopy,
  deepEqual,
  deepExtend,
  errorPrefix,
  extractQuerystring,
  getGlobal,
  getModularInstance,
  getUA,
  isAdmin,
  isBrowser,
  isBrowserExtension,
  isElectron,
  isEmpty: isEmpty$1,
  isIE,
  isIndexedDBAvailable,
  isMobileCordova,
  isNode,
  isNodeSdk,
  isReactNative,
  isSafari,
  isUWP,
  isValidFormat,
  isValidTimestamp,
  issuedAtTime,
  jsonEval,
  map,
  ordinal,
  querystring,
  querystringDecode,
  safeGet,
  stringLength,
  stringToByteArray,
  stringify,
  validateArgCount,
  validateCallback,
  validateContextObject,
  validateIndexedDBOpenable,
  validateNamespace
});
function __rest(s2, e) {
  var t = {};
  for (var p in s2)
    if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
      t[p] = s2[p];
  if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
        t[p[i]] = s2[p[i]];
    }
  return t;
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve6) {
      resolve6(value);
    });
  }
  return new (P || (P = Promise))(function(resolve6, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve6(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __values(o) {
  var s2 = typeof Symbol === "function" && Symbol.iterator, m = s2 && o[s2], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error2) {
    e = { error: error2 };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spreadArray(to, from2, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from2.length, ar; i < l; i++) {
      if (ar || !(i in from2)) {
        if (!ar)
          ar = Array.prototype.slice.call(from2, 0, i);
        ar[i] = from2[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from2));
}
var instances = [];
var LogLevel;
(function(LogLevel2) {
  LogLevel2[LogLevel2["DEBUG"] = 0] = "DEBUG";
  LogLevel2[LogLevel2["VERBOSE"] = 1] = "VERBOSE";
  LogLevel2[LogLevel2["INFO"] = 2] = "INFO";
  LogLevel2[LogLevel2["WARN"] = 3] = "WARN";
  LogLevel2[LogLevel2["ERROR"] = 4] = "ERROR";
  LogLevel2[LogLevel2["SILENT"] = 5] = "SILENT";
})(LogLevel || (LogLevel = {}));
var levelStringToEnum = {
  "debug": LogLevel.DEBUG,
  "verbose": LogLevel.VERBOSE,
  "info": LogLevel.INFO,
  "warn": LogLevel.WARN,
  "error": LogLevel.ERROR,
  "silent": LogLevel.SILENT
};
var defaultLogLevel = LogLevel.INFO;
var ConsoleMethod = {
  [LogLevel.DEBUG]: "log",
  [LogLevel.VERBOSE]: "log",
  [LogLevel.INFO]: "info",
  [LogLevel.WARN]: "warn",
  [LogLevel.ERROR]: "error"
};
var defaultLogHandler = (instance, logType, ...args) => {
  if (logType < instance.logLevel) {
    return;
  }
  const now = new Date().toISOString();
  const method2 = ConsoleMethod[logType];
  if (method2) {
    console[method2](`[${now}]  ${instance.name}:`, ...args);
  } else {
    throw new Error(`Attempted to log a message with an invalid logType (value: ${logType})`);
  }
};
var Logger = class {
  constructor(name2) {
    this.name = name2;
    this._logLevel = defaultLogLevel;
    this._logHandler = defaultLogHandler;
    this._userLogHandler = null;
    instances.push(this);
  }
  get logLevel() {
    return this._logLevel;
  }
  set logLevel(val) {
    if (!(val in LogLevel)) {
      throw new TypeError(`Invalid value "${val}" assigned to \`logLevel\``);
    }
    this._logLevel = val;
  }
  setLogLevel(val) {
    this._logLevel = typeof val === "string" ? levelStringToEnum[val] : val;
  }
  get logHandler() {
    return this._logHandler;
  }
  set logHandler(val) {
    if (typeof val !== "function") {
      throw new TypeError("Value assigned to `logHandler` must be a function");
    }
    this._logHandler = val;
  }
  get userLogHandler() {
    return this._userLogHandler;
  }
  set userLogHandler(val) {
    this._userLogHandler = val;
  }
  debug(...args) {
    this._userLogHandler && this._userLogHandler(this, LogLevel.DEBUG, ...args);
    this._logHandler(this, LogLevel.DEBUG, ...args);
  }
  log(...args) {
    this._userLogHandler && this._userLogHandler(this, LogLevel.VERBOSE, ...args);
    this._logHandler(this, LogLevel.VERBOSE, ...args);
  }
  info(...args) {
    this._userLogHandler && this._userLogHandler(this, LogLevel.INFO, ...args);
    this._logHandler(this, LogLevel.INFO, ...args);
  }
  warn(...args) {
    this._userLogHandler && this._userLogHandler(this, LogLevel.WARN, ...args);
    this._logHandler(this, LogLevel.WARN, ...args);
  }
  error(...args) {
    this._userLogHandler && this._userLogHandler(this, LogLevel.ERROR, ...args);
    this._logHandler(this, LogLevel.ERROR, ...args);
  }
};
function setLogLevel$1(level) {
  instances.forEach((inst) => {
    inst.setLogLevel(level);
  });
}
function setUserLogHandler(logCallback, options2) {
  for (const instance of instances) {
    let customLogLevel = null;
    if (options2 && options2.level) {
      customLogLevel = levelStringToEnum[options2.level];
    }
    if (logCallback === null) {
      instance.userLogHandler = null;
    } else {
      instance.userLogHandler = (instance2, level, ...args) => {
        const message2 = args.map((arg) => {
          if (arg == null) {
            return null;
          } else if (typeof arg === "string") {
            return arg;
          } else if (typeof arg === "number" || typeof arg === "boolean") {
            return arg.toString();
          } else if (arg instanceof Error) {
            return arg.message;
          } else {
            try {
              return JSON.stringify(arg);
            } catch (ignored) {
              return null;
            }
          }
        }).filter((arg) => arg).join(" ");
        if (level >= (customLogLevel !== null && customLogLevel !== void 0 ? customLogLevel : instance2.logLevel)) {
          logCallback({
            level: LogLevel[level].toLowerCase(),
            message: message2,
            args,
            type: instance2.name
          });
        }
      };
    }
  }
}
var index_esm2017 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  get LogLevel() {
    return LogLevel;
  },
  Logger,
  setLogLevel: setLogLevel$1,
  setUserLogHandler
});
var Component = function() {
  function Component2(name2, instanceFactory, type2) {
    this.name = name2;
    this.instanceFactory = instanceFactory;
    this.type = type2;
    this.multipleInstances = false;
    this.serviceProps = {};
    this.instantiationMode = "LAZY";
    this.onInstanceCreated = null;
  }
  Component2.prototype.setInstantiationMode = function(mode) {
    this.instantiationMode = mode;
    return this;
  };
  Component2.prototype.setMultipleInstances = function(multipleInstances) {
    this.multipleInstances = multipleInstances;
    return this;
  };
  Component2.prototype.setServiceProps = function(props) {
    this.serviceProps = props;
    return this;
  };
  Component2.prototype.setInstanceCreatedCallback = function(callback) {
    this.onInstanceCreated = callback;
    return this;
  };
  return Component2;
}();
var DEFAULT_ENTRY_NAME = "[DEFAULT]";
var Provider = function() {
  function Provider2(name2, container) {
    this.name = name2;
    this.container = container;
    this.component = null;
    this.instances = new Map();
    this.instancesDeferred = new Map();
    this.instancesOptions = new Map();
    this.onInitCallbacks = new Map();
  }
  Provider2.prototype.get = function(identifier) {
    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
    if (!this.instancesDeferred.has(normalizedIdentifier)) {
      var deferred = new Deferred$1();
      this.instancesDeferred.set(normalizedIdentifier, deferred);
      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
        try {
          var instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier
          });
          if (instance) {
            deferred.resolve(instance);
          }
        } catch (e) {
        }
      }
    }
    return this.instancesDeferred.get(normalizedIdentifier).promise;
  };
  Provider2.prototype.getImmediate = function(options2) {
    var _a;
    var normalizedIdentifier = this.normalizeInstanceIdentifier(options2 === null || options2 === void 0 ? void 0 : options2.identifier);
    var optional = (_a = options2 === null || options2 === void 0 ? void 0 : options2.optional) !== null && _a !== void 0 ? _a : false;
    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {
      try {
        return this.getOrInitializeService({
          instanceIdentifier: normalizedIdentifier
        });
      } catch (e) {
        if (optional) {
          return null;
        } else {
          throw e;
        }
      }
    } else {
      if (optional) {
        return null;
      } else {
        throw Error("Service " + this.name + " is not available");
      }
    }
  };
  Provider2.prototype.getComponent = function() {
    return this.component;
  };
  Provider2.prototype.setComponent = function(component2) {
    var e_1, _a;
    if (component2.name !== this.name) {
      throw Error("Mismatching Component " + component2.name + " for Provider " + this.name + ".");
    }
    if (this.component) {
      throw Error("Component for " + this.name + " has already been provided");
    }
    this.component = component2;
    if (!this.shouldAutoInitialize()) {
      return;
    }
    if (isComponentEager(component2)) {
      try {
        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });
      } catch (e) {
      }
    }
    try {
      for (var _b = __values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {
        var _d = __read(_c.value, 2), instanceIdentifier = _d[0], instanceDeferred = _d[1];
        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
        try {
          var instance = this.getOrInitializeService({
            instanceIdentifier: normalizedIdentifier
          });
          instanceDeferred.resolve(instance);
        } catch (e) {
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (_c && !_c.done && (_a = _b.return))
          _a.call(_b);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
  };
  Provider2.prototype.clearInstance = function(identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    }
    this.instancesDeferred.delete(identifier);
    this.instancesOptions.delete(identifier);
    this.instances.delete(identifier);
  };
  Provider2.prototype.delete = function() {
    return __awaiter(this, void 0, void 0, function() {
      var services;
      return __generator(this, function(_a) {
        switch (_a.label) {
          case 0:
            services = Array.from(this.instances.values());
            return [4, Promise.all(__spreadArray(__spreadArray([], __read(services.filter(function(service2) {
              return "INTERNAL" in service2;
            }).map(function(service2) {
              return service2.INTERNAL.delete();
            }))), __read(services.filter(function(service2) {
              return "_delete" in service2;
            }).map(function(service2) {
              return service2._delete();
            }))))];
          case 1:
            _a.sent();
            return [2];
        }
      });
    });
  };
  Provider2.prototype.isComponentSet = function() {
    return this.component != null;
  };
  Provider2.prototype.isInitialized = function(identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    }
    return this.instances.has(identifier);
  };
  Provider2.prototype.getOptions = function(identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    }
    return this.instancesOptions.get(identifier) || {};
  };
  Provider2.prototype.initialize = function(opts) {
    var e_2, _a;
    if (opts === void 0) {
      opts = {};
    }
    var _b = opts.options, options2 = _b === void 0 ? {} : _b;
    var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);
    if (this.isInitialized(normalizedIdentifier)) {
      throw Error(this.name + "(" + normalizedIdentifier + ") has already been initialized");
    }
    if (!this.isComponentSet()) {
      throw Error("Component " + this.name + " has not been registered yet");
    }
    var instance = this.getOrInitializeService({
      instanceIdentifier: normalizedIdentifier,
      options: options2
    });
    try {
      for (var _c = __values(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
        var _e = __read(_d.value, 2), instanceIdentifier = _e[0], instanceDeferred = _e[1];
        var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);
        if (normalizedIdentifier === normalizedDeferredIdentifier) {
          instanceDeferred.resolve(instance);
        }
      }
    } catch (e_2_1) {
      e_2 = { error: e_2_1 };
    } finally {
      try {
        if (_d && !_d.done && (_a = _c.return))
          _a.call(_c);
      } finally {
        if (e_2)
          throw e_2.error;
      }
    }
    return instance;
  };
  Provider2.prototype.onInit = function(callback, identifier) {
    var _a;
    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);
    var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();
    existingCallbacks.add(callback);
    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);
    var existingInstance = this.instances.get(normalizedIdentifier);
    if (existingInstance) {
      callback(existingInstance, normalizedIdentifier);
    }
    return function() {
      existingCallbacks.delete(callback);
    };
  };
  Provider2.prototype.invokeOnInitCallbacks = function(instance, identifier) {
    var e_3, _a;
    var callbacks = this.onInitCallbacks.get(identifier);
    if (!callbacks) {
      return;
    }
    try {
      for (var callbacks_1 = __values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {
        var callback = callbacks_1_1.value;
        try {
          callback(instance, identifier);
        } catch (_b) {
        }
      }
    } catch (e_3_1) {
      e_3 = { error: e_3_1 };
    } finally {
      try {
        if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return))
          _a.call(callbacks_1);
      } finally {
        if (e_3)
          throw e_3.error;
      }
    }
  };
  Provider2.prototype.getOrInitializeService = function(_a) {
    var instanceIdentifier = _a.instanceIdentifier, _b = _a.options, options2 = _b === void 0 ? {} : _b;
    var instance = this.instances.get(instanceIdentifier);
    if (!instance && this.component) {
      instance = this.component.instanceFactory(this.container, {
        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),
        options: options2
      });
      this.instances.set(instanceIdentifier, instance);
      this.instancesOptions.set(instanceIdentifier, options2);
      this.invokeOnInitCallbacks(instance, instanceIdentifier);
      if (this.component.onInstanceCreated) {
        try {
          this.component.onInstanceCreated(this.container, instanceIdentifier, instance);
        } catch (_c) {
        }
      }
    }
    return instance || null;
  };
  Provider2.prototype.normalizeInstanceIdentifier = function(identifier) {
    if (identifier === void 0) {
      identifier = DEFAULT_ENTRY_NAME;
    }
    if (this.component) {
      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;
    } else {
      return identifier;
    }
  };
  Provider2.prototype.shouldAutoInitialize = function() {
    return !!this.component && this.component.instantiationMode !== "EXPLICIT";
  };
  return Provider2;
}();
function normalizeIdentifierForFactory(identifier) {
  return identifier === DEFAULT_ENTRY_NAME ? void 0 : identifier;
}
function isComponentEager(component2) {
  return component2.instantiationMode === "EAGER";
}
var ComponentContainer = function() {
  function ComponentContainer2(name2) {
    this.name = name2;
    this.providers = new Map();
  }
  ComponentContainer2.prototype.addComponent = function(component2) {
    var provider = this.getProvider(component2.name);
    if (provider.isComponentSet()) {
      throw new Error("Component " + component2.name + " has already been registered with " + this.name);
    }
    provider.setComponent(component2);
  };
  ComponentContainer2.prototype.addOrOverwriteComponent = function(component2) {
    var provider = this.getProvider(component2.name);
    if (provider.isComponentSet()) {
      this.providers.delete(component2.name);
    }
    this.addComponent(component2);
  };
  ComponentContainer2.prototype.getProvider = function(name2) {
    if (this.providers.has(name2)) {
      return this.providers.get(name2);
    }
    var provider = new Provider(name2, this);
    this.providers.set(name2, provider);
    return provider;
  };
  ComponentContainer2.prototype.getProviders = function() {
    return Array.from(this.providers.values());
  };
  return ComponentContainer2;
}();
var index_esm = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  Component,
  ComponentContainer,
  Provider
});
function _prodErrorMap() {
  return {
    ["dependent-sdk-initialized-before-auth"]: "Another Firebase SDK was initialized and is trying to use Auth before Auth is initialized. Please be sure to call `initializeAuth` or `getAuth` before starting any other Firebase SDK."
  };
}
var prodErrorMap = _prodErrorMap;
var _DEFAULT_AUTH_ERROR_FACTORY = new ErrorFactory("auth", "Firebase", _prodErrorMap());
var logClient$1 = new Logger("@firebase/auth");
function _logError(msg, ...args) {
  if (logClient$1.logLevel <= LogLevel.ERROR) {
    logClient$1.error(`Auth (${import_app.SDK_VERSION}): ${msg}`, ...args);
  }
}
function _fail(authOrCode, ...rest) {
  throw createErrorInternal(authOrCode, ...rest);
}
function _createError(authOrCode, ...rest) {
  return createErrorInternal(authOrCode, ...rest);
}
function _errorWithCustomMessage(auth, code, message2) {
  const errorMap = Object.assign(Object.assign({}, prodErrorMap()), { [code]: message2 });
  const factory2 = new ErrorFactory("auth", "Firebase", errorMap);
  return factory2.create(code, {
    appName: auth.name
  });
}
function createErrorInternal(authOrCode, ...rest) {
  if (typeof authOrCode !== "string") {
    const code = rest[0];
    const fullParams = [...rest.slice(1)];
    if (fullParams[0]) {
      fullParams[0].appName = authOrCode.name;
    }
    return authOrCode._errorFactory.create(code, ...fullParams);
  }
  return _DEFAULT_AUTH_ERROR_FACTORY.create(authOrCode, ...rest);
}
function _assert(assertion, authOrCode, ...rest) {
  if (!assertion) {
    throw createErrorInternal(authOrCode, ...rest);
  }
}
function debugFail(failure) {
  const message2 = `INTERNAL ASSERTION FAILED: ` + failure;
  _logError(message2);
  throw new Error(message2);
}
function debugAssert$1(assertion, message2) {
  if (!assertion) {
    debugFail(message2);
  }
}
var instanceCache = new Map();
function _getInstance(cls) {
  debugAssert$1(cls instanceof Function, "Expected a class definition");
  let instance = instanceCache.get(cls);
  if (instance) {
    debugAssert$1(instance instanceof cls, "Instance stored in cache mismatched with class");
    return instance;
  }
  instance = new cls();
  instanceCache.set(cls, instance);
  return instance;
}
function _initializeAuthInstance(auth, deps) {
  const persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];
  const hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);
  if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {
    auth._updateErrorMap(deps.errorMap);
  }
  auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);
}
function _isHttpOrHttps() {
  return _getCurrentScheme() === "http:" || _getCurrentScheme() === "https:";
}
function _getCurrentScheme() {
  var _a;
  return typeof self !== "undefined" && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;
}
function _isOnline() {
  if (typeof navigator !== "undefined" && navigator && "onLine" in navigator && typeof navigator.onLine === "boolean" && (_isHttpOrHttps() || isBrowserExtension() || "connection" in navigator)) {
    return navigator.onLine;
  }
  return true;
}
function _getUserLanguage() {
  if (typeof navigator === "undefined") {
    return null;
  }
  const navigatorLanguage = navigator;
  return navigatorLanguage.languages && navigatorLanguage.languages[0] || navigatorLanguage.language || null;
}
var Delay = class {
  constructor(shortDelay, longDelay) {
    this.shortDelay = shortDelay;
    this.longDelay = longDelay;
    debugAssert$1(longDelay > shortDelay, "Short delay should be less than long delay!");
    this.isMobile = isMobileCordova() || isReactNative();
  }
  get() {
    if (!_isOnline()) {
      return Math.min(5e3, this.shortDelay);
    }
    return this.isMobile ? this.longDelay : this.shortDelay;
  }
};
function _emulatorUrl(config, path2) {
  debugAssert$1(config.emulator, "Emulator should always be set here");
  const { url } = config.emulator;
  if (!path2) {
    return url;
  }
  return `${url}${path2.startsWith("/") ? path2.slice(1) : path2}`;
}
var FetchProvider = class {
  static initialize(fetchImpl, headersImpl, responseImpl) {
    this.fetchImpl = fetchImpl;
    if (headersImpl) {
      this.headersImpl = headersImpl;
    }
    if (responseImpl) {
      this.responseImpl = responseImpl;
    }
  }
  static fetch() {
    if (this.fetchImpl) {
      return this.fetchImpl;
    }
    if (typeof self !== "undefined" && "fetch" in self) {
      return self.fetch;
    }
    debugFail("Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
  }
  static headers() {
    if (this.headersImpl) {
      return this.headersImpl;
    }
    if (typeof self !== "undefined" && "Headers" in self) {
      return self.Headers;
    }
    debugFail("Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
  }
  static response() {
    if (this.responseImpl) {
      return this.responseImpl;
    }
    if (typeof self !== "undefined" && "Response" in self) {
      return self.Response;
    }
    debugFail("Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill");
  }
};
var SERVER_ERROR_MAP = {
  ["CREDENTIAL_MISMATCH"]: "custom-token-mismatch",
  ["MISSING_CUSTOM_TOKEN"]: "internal-error",
  ["INVALID_IDENTIFIER"]: "invalid-email",
  ["MISSING_CONTINUE_URI"]: "internal-error",
  ["INVALID_PASSWORD"]: "wrong-password",
  ["MISSING_PASSWORD"]: "internal-error",
  ["EMAIL_EXISTS"]: "email-already-in-use",
  ["PASSWORD_LOGIN_DISABLED"]: "operation-not-allowed",
  ["INVALID_IDP_RESPONSE"]: "invalid-credential",
  ["INVALID_PENDING_TOKEN"]: "invalid-credential",
  ["FEDERATED_USER_ID_ALREADY_LINKED"]: "credential-already-in-use",
  ["MISSING_REQ_TYPE"]: "internal-error",
  ["EMAIL_NOT_FOUND"]: "user-not-found",
  ["RESET_PASSWORD_EXCEED_LIMIT"]: "too-many-requests",
  ["EXPIRED_OOB_CODE"]: "expired-action-code",
  ["INVALID_OOB_CODE"]: "invalid-action-code",
  ["MISSING_OOB_CODE"]: "internal-error",
  ["CREDENTIAL_TOO_OLD_LOGIN_AGAIN"]: "requires-recent-login",
  ["INVALID_ID_TOKEN"]: "invalid-user-token",
  ["TOKEN_EXPIRED"]: "user-token-expired",
  ["USER_NOT_FOUND"]: "user-token-expired",
  ["TOO_MANY_ATTEMPTS_TRY_LATER"]: "too-many-requests",
  ["INVALID_CODE"]: "invalid-verification-code",
  ["INVALID_SESSION_INFO"]: "invalid-verification-id",
  ["INVALID_TEMPORARY_PROOF"]: "invalid-credential",
  ["MISSING_SESSION_INFO"]: "missing-verification-id",
  ["SESSION_EXPIRED"]: "code-expired",
  ["MISSING_ANDROID_PACKAGE_NAME"]: "missing-android-pkg-name",
  ["UNAUTHORIZED_DOMAIN"]: "unauthorized-continue-uri",
  ["INVALID_OAUTH_CLIENT_ID"]: "invalid-oauth-client-id",
  ["ADMIN_ONLY_OPERATION"]: "admin-restricted-operation",
  ["INVALID_MFA_PENDING_CREDENTIAL"]: "invalid-multi-factor-session",
  ["MFA_ENROLLMENT_NOT_FOUND"]: "multi-factor-info-not-found",
  ["MISSING_MFA_ENROLLMENT_ID"]: "missing-multi-factor-info",
  ["MISSING_MFA_PENDING_CREDENTIAL"]: "missing-multi-factor-session",
  ["SECOND_FACTOR_EXISTS"]: "second-factor-already-in-use",
  ["SECOND_FACTOR_LIMIT_EXCEEDED"]: "maximum-second-factor-count-exceeded",
  ["BLOCKING_FUNCTION_ERROR_RESPONSE"]: "internal-error"
};
var DEFAULT_API_TIMEOUT_MS = new Delay(3e4, 6e4);
async function _performApiRequest(auth, method2, path2, request, customErrorMap = {}) {
  return _performFetchWithErrorHandling(auth, customErrorMap, () => {
    let body = {};
    let params = {};
    if (request) {
      if (method2 === "GET") {
        params = request;
      } else {
        body = {
          body: JSON.stringify(request)
        };
      }
    }
    const query2 = querystring(Object.assign({ key: auth.config.apiKey }, params)).slice(1);
    const headers = new (FetchProvider.headers())();
    headers.set("Content-Type", "application/json");
    headers.set("X-Client-Version", auth._getSdkClientVersion());
    if (auth.languageCode) {
      headers.set("X-Firebase-Locale", auth.languageCode);
    }
    return FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path2, query2), Object.assign({
      method: method2,
      headers,
      referrerPolicy: "no-referrer"
    }, body));
  });
}
async function _performFetchWithErrorHandling(auth, customErrorMap, fetchFn) {
  auth._canInitEmulator = false;
  const errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);
  try {
    const networkTimeout = new NetworkTimeout(auth);
    const response = await Promise.race([
      fetchFn(),
      networkTimeout.promise
    ]);
    networkTimeout.clearNetworkTimeout();
    const json = await response.json();
    if ("needConfirmation" in json) {
      throw _makeTaggedError(auth, "account-exists-with-different-credential", json);
    }
    if (response.ok && !("errorMessage" in json)) {
      return json;
    } else {
      const errorMessage = response.ok ? json.errorMessage : json.error.message;
      const [serverErrorCode, serverErrorMessage] = errorMessage.split(" : ");
      if (serverErrorCode === "FEDERATED_USER_ID_ALREADY_LINKED") {
        throw _makeTaggedError(auth, "credential-already-in-use", json);
      } else if (serverErrorCode === "EMAIL_EXISTS") {
        throw _makeTaggedError(auth, "email-already-in-use", json);
      }
      const authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\s]+/g, "-");
      if (serverErrorMessage) {
        throw _errorWithCustomMessage(auth, authError, serverErrorMessage);
      } else {
        _fail(auth, authError);
      }
    }
  } catch (e) {
    if (e instanceof FirebaseError) {
      throw e;
    }
    _fail(auth, "network-request-failed");
  }
}
function _getFinalTarget(auth, host, path2, query2) {
  const base2 = `${host}${path2}?${query2}`;
  if (!auth.config.emulator) {
    return `${auth.config.apiScheme}://${base2}`;
  }
  return _emulatorUrl(auth.config, base2);
}
var NetworkTimeout = class {
  constructor(auth) {
    this.auth = auth;
    this.timer = null;
    this.promise = new Promise((_, reject) => {
      this.timer = setTimeout(() => {
        return reject(_createError(this.auth, "timeout"));
      }, DEFAULT_API_TIMEOUT_MS.get());
    });
  }
  clearNetworkTimeout() {
    clearTimeout(this.timer);
  }
};
function _makeTaggedError(auth, code, response) {
  const errorParams = {
    appName: auth.name
  };
  if (response.email) {
    errorParams.email = response.email;
  }
  if (response.phoneNumber) {
    errorParams.phoneNumber = response.phoneNumber;
  }
  const error2 = _createError(auth, code, errorParams);
  error2.customData._tokenResponse = response;
  return error2;
}
async function deleteAccount(auth, request) {
  return _performApiRequest(auth, "POST", "/v1/accounts:delete", request);
}
async function getAccountInfo(auth, request) {
  return _performApiRequest(auth, "POST", "/v1/accounts:lookup", request);
}
function utcTimestampToDateString(utcTimestamp) {
  if (!utcTimestamp) {
    return void 0;
  }
  try {
    const date = new Date(Number(utcTimestamp));
    if (!isNaN(date.getTime())) {
      return date.toUTCString();
    }
  } catch (e) {
  }
  return void 0;
}
async function getIdTokenResult(user2, forceRefresh = false) {
  const userInternal = getModularInstance(user2);
  const token = await userInternal.getIdToken(forceRefresh);
  const claims = _parseToken(token);
  _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, "internal-error");
  const firebase = typeof claims.firebase === "object" ? claims.firebase : void 0;
  const signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase["sign_in_provider"];
  return {
    claims,
    token,
    authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),
    issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),
    expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),
    signInProvider: signInProvider || null,
    signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase["sign_in_second_factor"]) || null
  };
}
function secondsStringToMilliseconds(seconds) {
  return Number(seconds) * 1e3;
}
function _parseToken(token) {
  const [algorithm, payload, signature] = token.split(".");
  if (algorithm === void 0 || payload === void 0 || signature === void 0) {
    _logError("JWT malformed, contained fewer than 3 sections");
    return null;
  }
  try {
    const decoded = base64Decode(payload);
    if (!decoded) {
      _logError("Failed to decode base64 JWT payload");
      return null;
    }
    return JSON.parse(decoded);
  } catch (e) {
    _logError("Caught error parsing JWT payload as JSON", e);
    return null;
  }
}
function _tokenExpiresIn(token) {
  const parsedToken = _parseToken(token);
  _assert(parsedToken, "internal-error");
  _assert(typeof parsedToken.exp !== "undefined", "internal-error");
  _assert(typeof parsedToken.iat !== "undefined", "internal-error");
  return Number(parsedToken.exp) - Number(parsedToken.iat);
}
async function _logoutIfInvalidated(user2, promise, bypassAuthState = false) {
  if (bypassAuthState) {
    return promise;
  }
  try {
    return await promise;
  } catch (e) {
    if (e instanceof FirebaseError && isUserInvalidated(e)) {
      if (user2.auth.currentUser === user2) {
        await user2.auth.signOut();
      }
    }
    throw e;
  }
}
function isUserInvalidated({ code }) {
  return code === `auth/${"user-disabled"}` || code === `auth/${"user-token-expired"}`;
}
var ProactiveRefresh = class {
  constructor(user2) {
    this.user = user2;
    this.isRunning = false;
    this.timerId = null;
    this.errorBackoff = 3e4;
  }
  _start() {
    if (this.isRunning) {
      return;
    }
    this.isRunning = true;
    this.schedule();
  }
  _stop() {
    if (!this.isRunning) {
      return;
    }
    this.isRunning = false;
    if (this.timerId !== null) {
      clearTimeout(this.timerId);
    }
  }
  getInterval(wasError) {
    var _a;
    if (wasError) {
      const interval = this.errorBackoff;
      this.errorBackoff = Math.min(this.errorBackoff * 2, 96e4);
      return interval;
    } else {
      this.errorBackoff = 3e4;
      const expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;
      const interval = expTime - Date.now() - 3e5;
      return Math.max(0, interval);
    }
  }
  schedule(wasError = false) {
    if (!this.isRunning) {
      return;
    }
    const interval = this.getInterval(wasError);
    this.timerId = setTimeout(async () => {
      await this.iteration();
    }, interval);
  }
  async iteration() {
    try {
      await this.user.getIdToken(true);
    } catch (e) {
      if (e.code === `auth/${"network-request-failed"}`) {
        this.schedule(true);
      }
      return;
    }
    this.schedule();
  }
};
var UserMetadata = class {
  constructor(createdAt, lastLoginAt) {
    this.createdAt = createdAt;
    this.lastLoginAt = lastLoginAt;
    this._initializeTime();
  }
  _initializeTime() {
    this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);
    this.creationTime = utcTimestampToDateString(this.createdAt);
  }
  _copy(metadata2) {
    this.createdAt = metadata2.createdAt;
    this.lastLoginAt = metadata2.lastLoginAt;
    this._initializeTime();
  }
  toJSON() {
    return {
      createdAt: this.createdAt,
      lastLoginAt: this.lastLoginAt
    };
  }
};
async function _reloadWithoutSaving(user2) {
  var _a;
  const auth = user2.auth;
  const idToken = await user2.getIdToken();
  const response = await _logoutIfInvalidated(user2, getAccountInfo(auth, { idToken }));
  _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, "internal-error");
  const coreAccount = response.users[0];
  user2._notifyReloadListener(coreAccount);
  const newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];
  const providerData = mergeProviderData(user2.providerData, newProviderData);
  const oldIsAnonymous = user2.isAnonymous;
  const newIsAnonymous = !(user2.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);
  const isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;
  const updates = {
    uid: coreAccount.localId,
    displayName: coreAccount.displayName || null,
    photoURL: coreAccount.photoUrl || null,
    email: coreAccount.email || null,
    emailVerified: coreAccount.emailVerified || false,
    phoneNumber: coreAccount.phoneNumber || null,
    tenantId: coreAccount.tenantId || null,
    providerData,
    metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),
    isAnonymous
  };
  Object.assign(user2, updates);
}
async function reload(user2) {
  const userInternal = getModularInstance(user2);
  await _reloadWithoutSaving(userInternal);
  await userInternal.auth._persistUserIfCurrent(userInternal);
  userInternal.auth._notifyListenersIfCurrent(userInternal);
}
function mergeProviderData(original, newData) {
  const deduped = original.filter((o) => !newData.some((n) => n.providerId === o.providerId));
  return [...deduped, ...newData];
}
function extractProviderData(providers) {
  return providers.map((_a) => {
    var { providerId } = _a, provider = __rest(_a, ["providerId"]);
    return {
      providerId,
      uid: provider.rawId || "",
      displayName: provider.displayName || null,
      email: provider.email || null,
      phoneNumber: provider.phoneNumber || null,
      photoURL: provider.photoUrl || null
    };
  });
}
async function requestStsToken(auth, refreshToken) {
  const response = await _performFetchWithErrorHandling(auth, {}, () => {
    const body = querystring({
      "grant_type": "refresh_token",
      "refresh_token": refreshToken
    }).slice(1);
    const { tokenApiHost, apiKey } = auth.config;
    const url = _getFinalTarget(auth, tokenApiHost, "/v1/token", `key=${apiKey}`);
    return FetchProvider.fetch()(url, {
      method: "POST",
      headers: {
        "X-Client-Version": auth._getSdkClientVersion(),
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body
    });
  });
  return {
    accessToken: response.access_token,
    expiresIn: response.expires_in,
    refreshToken: response.refresh_token
  };
}
var StsTokenManager = class {
  constructor() {
    this.refreshToken = null;
    this.accessToken = null;
    this.expirationTime = null;
  }
  get isExpired() {
    return !this.expirationTime || Date.now() > this.expirationTime - 3e4;
  }
  updateFromServerResponse(response) {
    _assert(response.idToken, "internal-error");
    _assert(typeof response.idToken !== "undefined", "internal-error");
    _assert(typeof response.refreshToken !== "undefined", "internal-error");
    const expiresIn = "expiresIn" in response && typeof response.expiresIn !== "undefined" ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);
    this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);
  }
  async getToken(auth, forceRefresh = false) {
    _assert(!this.accessToken || this.refreshToken, auth, "user-token-expired");
    if (!forceRefresh && this.accessToken && !this.isExpired) {
      return this.accessToken;
    }
    if (this.refreshToken) {
      await this.refresh(auth, this.refreshToken);
      return this.accessToken;
    }
    return null;
  }
  clearRefreshToken() {
    this.refreshToken = null;
  }
  async refresh(auth, oldToken) {
    const { accessToken, refreshToken, expiresIn } = await requestStsToken(auth, oldToken);
    this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));
  }
  updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {
    this.refreshToken = refreshToken || null;
    this.accessToken = accessToken || null;
    this.expirationTime = Date.now() + expiresInSec * 1e3;
  }
  static fromJSON(appName, object2) {
    const { refreshToken, accessToken, expirationTime } = object2;
    const manager = new StsTokenManager();
    if (refreshToken) {
      _assert(typeof refreshToken === "string", "internal-error", {
        appName
      });
      manager.refreshToken = refreshToken;
    }
    if (accessToken) {
      _assert(typeof accessToken === "string", "internal-error", {
        appName
      });
      manager.accessToken = accessToken;
    }
    if (expirationTime) {
      _assert(typeof expirationTime === "number", "internal-error", {
        appName
      });
      manager.expirationTime = expirationTime;
    }
    return manager;
  }
  toJSON() {
    return {
      refreshToken: this.refreshToken,
      accessToken: this.accessToken,
      expirationTime: this.expirationTime
    };
  }
  _assign(stsTokenManager) {
    this.accessToken = stsTokenManager.accessToken;
    this.refreshToken = stsTokenManager.refreshToken;
    this.expirationTime = stsTokenManager.expirationTime;
  }
  _clone() {
    return Object.assign(new StsTokenManager(), this.toJSON());
  }
  _performRefresh() {
    return debugFail("not implemented");
  }
};
function assertStringOrUndefined(assertion, appName) {
  _assert(typeof assertion === "string" || typeof assertion === "undefined", "internal-error", { appName });
}
var UserImpl = class {
  constructor(_a) {
    var { uid, auth, stsTokenManager } = _a, opt = __rest(_a, ["uid", "auth", "stsTokenManager"]);
    this.providerId = "firebase";
    this.emailVerified = false;
    this.isAnonymous = false;
    this.tenantId = null;
    this.providerData = [];
    this.proactiveRefresh = new ProactiveRefresh(this);
    this.reloadUserInfo = null;
    this.reloadListener = null;
    this.uid = uid;
    this.auth = auth;
    this.stsTokenManager = stsTokenManager;
    this.accessToken = stsTokenManager.accessToken;
    this.displayName = opt.displayName || null;
    this.email = opt.email || null;
    this.emailVerified = opt.emailVerified || false;
    this.phoneNumber = opt.phoneNumber || null;
    this.photoURL = opt.photoURL || null;
    this.isAnonymous = opt.isAnonymous || false;
    this.metadata = new UserMetadata(opt.createdAt || void 0, opt.lastLoginAt || void 0);
  }
  async getIdToken(forceRefresh) {
    const accessToken = await _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));
    _assert(accessToken, this.auth, "internal-error");
    if (this.accessToken !== accessToken) {
      this.accessToken = accessToken;
      await this.auth._persistUserIfCurrent(this);
      this.auth._notifyListenersIfCurrent(this);
    }
    return accessToken;
  }
  getIdTokenResult(forceRefresh) {
    return getIdTokenResult(this, forceRefresh);
  }
  reload() {
    return reload(this);
  }
  _assign(user2) {
    if (this === user2) {
      return;
    }
    _assert(this.uid === user2.uid, this.auth, "internal-error");
    this.displayName = user2.displayName;
    this.photoURL = user2.photoURL;
    this.email = user2.email;
    this.emailVerified = user2.emailVerified;
    this.phoneNumber = user2.phoneNumber;
    this.isAnonymous = user2.isAnonymous;
    this.tenantId = user2.tenantId;
    this.providerData = user2.providerData.map((userInfo) => Object.assign({}, userInfo));
    this.metadata._copy(user2.metadata);
    this.stsTokenManager._assign(user2.stsTokenManager);
  }
  _clone(auth) {
    return new UserImpl(Object.assign(Object.assign({}, this), { auth, stsTokenManager: this.stsTokenManager._clone() }));
  }
  _onReload(callback) {
    _assert(!this.reloadListener, this.auth, "internal-error");
    this.reloadListener = callback;
    if (this.reloadUserInfo) {
      this._notifyReloadListener(this.reloadUserInfo);
      this.reloadUserInfo = null;
    }
  }
  _notifyReloadListener(userInfo) {
    if (this.reloadListener) {
      this.reloadListener(userInfo);
    } else {
      this.reloadUserInfo = userInfo;
    }
  }
  _startProactiveRefresh() {
    this.proactiveRefresh._start();
  }
  _stopProactiveRefresh() {
    this.proactiveRefresh._stop();
  }
  async _updateTokensIfNecessary(response, reload2 = false) {
    let tokensRefreshed = false;
    if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {
      this.stsTokenManager.updateFromServerResponse(response);
      tokensRefreshed = true;
    }
    if (reload2) {
      await _reloadWithoutSaving(this);
    }
    await this.auth._persistUserIfCurrent(this);
    if (tokensRefreshed) {
      this.auth._notifyListenersIfCurrent(this);
    }
  }
  async delete() {
    const idToken = await this.getIdToken();
    await _logoutIfInvalidated(this, deleteAccount(this.auth, { idToken }));
    this.stsTokenManager.clearRefreshToken();
    return this.auth.signOut();
  }
  toJSON() {
    return Object.assign(Object.assign({
      uid: this.uid,
      email: this.email || void 0,
      emailVerified: this.emailVerified,
      displayName: this.displayName || void 0,
      isAnonymous: this.isAnonymous,
      photoURL: this.photoURL || void 0,
      phoneNumber: this.phoneNumber || void 0,
      tenantId: this.tenantId || void 0,
      providerData: this.providerData.map((userInfo) => Object.assign({}, userInfo)),
      stsTokenManager: this.stsTokenManager.toJSON(),
      _redirectEventId: this._redirectEventId
    }, this.metadata.toJSON()), {
      apiKey: this.auth.config.apiKey,
      appName: this.auth.name
    });
  }
  get refreshToken() {
    return this.stsTokenManager.refreshToken || "";
  }
  static _fromJSON(auth, object2) {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    const displayName = (_a = object2.displayName) !== null && _a !== void 0 ? _a : void 0;
    const email = (_b = object2.email) !== null && _b !== void 0 ? _b : void 0;
    const phoneNumber = (_c = object2.phoneNumber) !== null && _c !== void 0 ? _c : void 0;
    const photoURL = (_d = object2.photoURL) !== null && _d !== void 0 ? _d : void 0;
    const tenantId = (_e = object2.tenantId) !== null && _e !== void 0 ? _e : void 0;
    const _redirectEventId = (_f = object2._redirectEventId) !== null && _f !== void 0 ? _f : void 0;
    const createdAt = (_g = object2.createdAt) !== null && _g !== void 0 ? _g : void 0;
    const lastLoginAt = (_h = object2.lastLoginAt) !== null && _h !== void 0 ? _h : void 0;
    const { uid, emailVerified, isAnonymous, providerData, stsTokenManager: plainObjectTokenManager } = object2;
    _assert(uid && plainObjectTokenManager, auth, "internal-error");
    const stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);
    _assert(typeof uid === "string", auth, "internal-error");
    assertStringOrUndefined(displayName, auth.name);
    assertStringOrUndefined(email, auth.name);
    _assert(typeof emailVerified === "boolean", auth, "internal-error");
    _assert(typeof isAnonymous === "boolean", auth, "internal-error");
    assertStringOrUndefined(phoneNumber, auth.name);
    assertStringOrUndefined(photoURL, auth.name);
    assertStringOrUndefined(tenantId, auth.name);
    assertStringOrUndefined(_redirectEventId, auth.name);
    assertStringOrUndefined(createdAt, auth.name);
    assertStringOrUndefined(lastLoginAt, auth.name);
    const user2 = new UserImpl({
      uid,
      auth,
      email,
      emailVerified,
      displayName,
      isAnonymous,
      photoURL,
      phoneNumber,
      tenantId,
      stsTokenManager,
      createdAt,
      lastLoginAt
    });
    if (providerData && Array.isArray(providerData)) {
      user2.providerData = providerData.map((userInfo) => Object.assign({}, userInfo));
    }
    if (_redirectEventId) {
      user2._redirectEventId = _redirectEventId;
    }
    return user2;
  }
  static async _fromIdTokenResponse(auth, idTokenResponse, isAnonymous = false) {
    const stsTokenManager = new StsTokenManager();
    stsTokenManager.updateFromServerResponse(idTokenResponse);
    const user2 = new UserImpl({
      uid: idTokenResponse.localId,
      auth,
      stsTokenManager,
      isAnonymous
    });
    await _reloadWithoutSaving(user2);
    return user2;
  }
};
var InMemoryPersistence = class {
  constructor() {
    this.type = "NONE";
    this.storage = {};
  }
  async _isAvailable() {
    return true;
  }
  async _set(key, value) {
    this.storage[key] = value;
  }
  async _get(key) {
    const value = this.storage[key];
    return value === void 0 ? null : value;
  }
  async _remove(key) {
    delete this.storage[key];
  }
  _addListener(_key, _listener) {
    return;
  }
  _removeListener(_key, _listener) {
    return;
  }
};
InMemoryPersistence.type = "NONE";
var inMemoryPersistence = InMemoryPersistence;
function _persistenceKeyName(key, apiKey, appName) {
  return `${"firebase"}:${key}:${apiKey}:${appName}`;
}
var PersistenceUserManager = class {
  constructor(persistence, auth, userKey) {
    this.persistence = persistence;
    this.auth = auth;
    this.userKey = userKey;
    const { config, name: name2 } = this.auth;
    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name2);
    this.fullPersistenceKey = _persistenceKeyName("persistence", config.apiKey, name2);
    this.boundEventHandler = auth._onStorageEvent.bind(auth);
    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);
  }
  setCurrentUser(user2) {
    return this.persistence._set(this.fullUserKey, user2.toJSON());
  }
  async getCurrentUser() {
    const blob = await this.persistence._get(this.fullUserKey);
    return blob ? UserImpl._fromJSON(this.auth, blob) : null;
  }
  removeCurrentUser() {
    return this.persistence._remove(this.fullUserKey);
  }
  savePersistenceForRedirect() {
    return this.persistence._set(this.fullPersistenceKey, this.persistence.type);
  }
  async setPersistence(newPersistence) {
    if (this.persistence === newPersistence) {
      return;
    }
    const currentUser = await this.getCurrentUser();
    await this.removeCurrentUser();
    this.persistence = newPersistence;
    if (currentUser) {
      return this.setCurrentUser(currentUser);
    }
  }
  delete() {
    this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);
  }
  static async create(auth, persistenceHierarchy, userKey = "authUser") {
    if (!persistenceHierarchy.length) {
      return new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey);
    }
    const availablePersistences = (await Promise.all(persistenceHierarchy.map(async (persistence) => {
      if (await persistence._isAvailable()) {
        return persistence;
      }
      return void 0;
    }))).filter((persistence) => persistence);
    let selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);
    const key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name);
    let userToMigrate = null;
    for (const persistence of persistenceHierarchy) {
      try {
        const blob = await persistence._get(key);
        if (blob) {
          const user2 = UserImpl._fromJSON(auth, blob);
          if (persistence !== selectedPersistence) {
            userToMigrate = user2;
          }
          selectedPersistence = persistence;
          break;
        }
      } catch (_a) {
      }
    }
    const migrationHierarchy = availablePersistences.filter((p) => p._shouldAllowMigration);
    if (!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length) {
      return new PersistenceUserManager(selectedPersistence, auth, userKey);
    }
    selectedPersistence = migrationHierarchy[0];
    if (userToMigrate) {
      await selectedPersistence._set(key, userToMigrate.toJSON());
    }
    await Promise.all(persistenceHierarchy.map(async (persistence) => {
      if (persistence !== selectedPersistence) {
        try {
          await persistence._remove(key);
        } catch (_a) {
        }
      }
    }));
    return new PersistenceUserManager(selectedPersistence, auth, userKey);
  }
};
function _getBrowserName(userAgent) {
  const ua = userAgent.toLowerCase();
  if (ua.includes("opera/") || ua.includes("opr/") || ua.includes("opios/")) {
    return "Opera";
  } else if (_isIEMobile(ua)) {
    return "IEMobile";
  } else if (ua.includes("msie") || ua.includes("trident/")) {
    return "IE";
  } else if (ua.includes("edge/")) {
    return "Edge";
  } else if (_isFirefox(ua)) {
    return "Firefox";
  } else if (ua.includes("silk/")) {
    return "Silk";
  } else if (_isBlackBerry(ua)) {
    return "Blackberry";
  } else if (_isWebOS(ua)) {
    return "Webos";
  } else if (_isSafari(ua)) {
    return "Safari";
  } else if ((ua.includes("chrome/") || _isChromeIOS(ua)) && !ua.includes("edge/")) {
    return "Chrome";
  } else if (_isAndroid(ua)) {
    return "Android";
  } else {
    const re = /([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/;
    const matches = userAgent.match(re);
    if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {
      return matches[1];
    }
  }
  return "Other";
}
function _isFirefox(ua = getUA()) {
  return /firefox\//i.test(ua);
}
function _isSafari(userAgent = getUA()) {
  const ua = userAgent.toLowerCase();
  return ua.includes("safari/") && !ua.includes("chrome/") && !ua.includes("crios/") && !ua.includes("android");
}
function _isChromeIOS(ua = getUA()) {
  return /crios\//i.test(ua);
}
function _isIEMobile(ua = getUA()) {
  return /iemobile/i.test(ua);
}
function _isAndroid(ua = getUA()) {
  return /android/i.test(ua);
}
function _isBlackBerry(ua = getUA()) {
  return /blackberry/i.test(ua);
}
function _isWebOS(ua = getUA()) {
  return /webos/i.test(ua);
}
function _getClientVersion(clientPlatform, frameworks = []) {
  let reportedPlatform;
  switch (clientPlatform) {
    case "Browser":
      reportedPlatform = _getBrowserName(getUA());
      break;
    case "Worker":
      reportedPlatform = `${_getBrowserName(getUA())}-${clientPlatform}`;
      break;
    default:
      reportedPlatform = clientPlatform;
  }
  const reportedFrameworks = frameworks.length ? frameworks.join(",") : "FirebaseCore-web";
  return `${reportedPlatform}/${"JsCore"}/${import_app.SDK_VERSION}/${reportedFrameworks}`;
}
var AuthImpl = class {
  constructor(app2, config) {
    this.app = app2;
    this.config = config;
    this.currentUser = null;
    this.emulatorConfig = null;
    this.operations = Promise.resolve();
    this.authStateSubscription = new Subscription(this);
    this.idTokenSubscription = new Subscription(this);
    this.redirectUser = null;
    this.isProactiveRefreshEnabled = false;
    this._canInitEmulator = true;
    this._isInitialized = false;
    this._deleted = false;
    this._initializationPromise = null;
    this._popupRedirectResolver = null;
    this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;
    this.lastNotifiedUid = void 0;
    this.languageCode = null;
    this.tenantId = null;
    this.settings = { appVerificationDisabledForTesting: false };
    this.frameworks = [];
    this.name = app2.name;
    this.clientVersion = config.sdkClientVersion;
  }
  _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {
    if (popupRedirectResolver) {
      this._popupRedirectResolver = _getInstance(popupRedirectResolver);
    }
    this._initializationPromise = this.queue(async () => {
      var _a;
      if (this._deleted) {
        return;
      }
      this.persistenceManager = await PersistenceUserManager.create(this, persistenceHierarchy);
      if (this._deleted) {
        return;
      }
      if ((_a = this._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively) {
        await this._popupRedirectResolver._initialize(this);
      }
      await this.initializeCurrentUser(popupRedirectResolver);
      if (this._deleted) {
        return;
      }
      this._isInitialized = true;
    });
    return this._initializationPromise;
  }
  async _onStorageEvent() {
    if (this._deleted) {
      return;
    }
    const user2 = await this.assertedPersistence.getCurrentUser();
    if (!this.currentUser && !user2) {
      return;
    }
    if (this.currentUser && user2 && this.currentUser.uid === user2.uid) {
      this._currentUser._assign(user2);
      await this.currentUser.getIdToken();
      return;
    }
    await this._updateCurrentUser(user2);
  }
  async initializeCurrentUser(popupRedirectResolver) {
    var _a;
    let storedUser = await this.assertedPersistence.getCurrentUser();
    if (popupRedirectResolver && this.config.authDomain) {
      await this.getOrInitRedirectPersistenceManager();
      const redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;
      const storedUserEventId = storedUser === null || storedUser === void 0 ? void 0 : storedUser._redirectEventId;
      const result = await this.tryRedirectSignIn(popupRedirectResolver);
      if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {
        storedUser = result.user;
      }
    }
    if (!storedUser) {
      return this.directlySetCurrentUser(null);
    }
    if (!storedUser._redirectEventId) {
      return this.reloadAndSetCurrentUserOrClear(storedUser);
    }
    _assert(this._popupRedirectResolver, this, "argument-error");
    await this.getOrInitRedirectPersistenceManager();
    if (this.redirectUser && this.redirectUser._redirectEventId === storedUser._redirectEventId) {
      return this.directlySetCurrentUser(storedUser);
    }
    return this.reloadAndSetCurrentUserOrClear(storedUser);
  }
  async tryRedirectSignIn(redirectResolver) {
    let result = null;
    try {
      result = await this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);
    } catch (e) {
      await this._setRedirectUser(null);
    }
    return result;
  }
  async reloadAndSetCurrentUserOrClear(user2) {
    try {
      await _reloadWithoutSaving(user2);
    } catch (e) {
      if (e.code !== `auth/${"network-request-failed"}`) {
        return this.directlySetCurrentUser(null);
      }
    }
    return this.directlySetCurrentUser(user2);
  }
  useDeviceLanguage() {
    this.languageCode = _getUserLanguage();
  }
  async _delete() {
    this._deleted = true;
  }
  async updateCurrentUser(userExtern) {
    const user2 = userExtern ? getModularInstance(userExtern) : null;
    if (user2) {
      _assert(user2.auth.config.apiKey === this.config.apiKey, this, "invalid-user-token");
    }
    return this._updateCurrentUser(user2 && user2._clone(this));
  }
  async _updateCurrentUser(user2) {
    if (this._deleted) {
      return;
    }
    if (user2) {
      _assert(this.tenantId === user2.tenantId, this, "tenant-id-mismatch");
    }
    return this.queue(async () => {
      await this.directlySetCurrentUser(user2);
      this.notifyAuthListeners();
    });
  }
  async signOut() {
    if (this.redirectPersistenceManager || this._popupRedirectResolver) {
      await this._setRedirectUser(null);
    }
    return this._updateCurrentUser(null);
  }
  setPersistence(persistence) {
    return this.queue(async () => {
      await this.assertedPersistence.setPersistence(_getInstance(persistence));
    });
  }
  _getPersistence() {
    return this.assertedPersistence.persistence.type;
  }
  _updateErrorMap(errorMap) {
    this._errorFactory = new ErrorFactory("auth", "Firebase", errorMap());
  }
  onAuthStateChanged(nextOrObserver, error2, completed) {
    return this.registerStateListener(this.authStateSubscription, nextOrObserver, error2, completed);
  }
  onIdTokenChanged(nextOrObserver, error2, completed) {
    return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error2, completed);
  }
  toJSON() {
    var _a;
    return {
      apiKey: this.config.apiKey,
      authDomain: this.config.authDomain,
      appName: this.name,
      currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()
    };
  }
  async _setRedirectUser(user2, popupRedirectResolver) {
    const redirectManager = await this.getOrInitRedirectPersistenceManager(popupRedirectResolver);
    return user2 === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user2);
  }
  async getOrInitRedirectPersistenceManager(popupRedirectResolver) {
    if (!this.redirectPersistenceManager) {
      const resolver2 = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;
      _assert(resolver2, this, "argument-error");
      this.redirectPersistenceManager = await PersistenceUserManager.create(this, [_getInstance(resolver2._redirectPersistence)], "redirectUser");
      this.redirectUser = await this.redirectPersistenceManager.getCurrentUser();
    }
    return this.redirectPersistenceManager;
  }
  async _redirectUserForId(id) {
    var _a, _b;
    if (this._isInitialized) {
      await this.queue(async () => {
      });
    }
    if (((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id) {
      return this._currentUser;
    }
    if (((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id) {
      return this.redirectUser;
    }
    return null;
  }
  async _persistUserIfCurrent(user2) {
    if (user2 === this.currentUser) {
      return this.queue(async () => this.directlySetCurrentUser(user2));
    }
  }
  _notifyListenersIfCurrent(user2) {
    if (user2 === this.currentUser) {
      this.notifyAuthListeners();
    }
  }
  _key() {
    return `${this.config.authDomain}:${this.config.apiKey}:${this.name}`;
  }
  _startProactiveRefresh() {
    this.isProactiveRefreshEnabled = true;
    if (this.currentUser) {
      this._currentUser._startProactiveRefresh();
    }
  }
  _stopProactiveRefresh() {
    this.isProactiveRefreshEnabled = false;
    if (this.currentUser) {
      this._currentUser._stopProactiveRefresh();
    }
  }
  get _currentUser() {
    return this.currentUser;
  }
  notifyAuthListeners() {
    var _a, _b;
    if (!this._isInitialized) {
      return;
    }
    this.idTokenSubscription.next(this.currentUser);
    const currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;
    if (this.lastNotifiedUid !== currentUid) {
      this.lastNotifiedUid = currentUid;
      this.authStateSubscription.next(this.currentUser);
    }
  }
  registerStateListener(subscription, nextOrObserver, error2, completed) {
    if (this._deleted) {
      return () => {
      };
    }
    const cb = typeof nextOrObserver === "function" ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);
    const promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;
    _assert(promise, this, "internal-error");
    promise.then(() => cb(this.currentUser));
    if (typeof nextOrObserver === "function") {
      return subscription.addObserver(nextOrObserver, error2, completed);
    } else {
      return subscription.addObserver(nextOrObserver);
    }
  }
  async directlySetCurrentUser(user2) {
    if (this.currentUser && this.currentUser !== user2) {
      this._currentUser._stopProactiveRefresh();
      if (user2 && this.isProactiveRefreshEnabled) {
        user2._startProactiveRefresh();
      }
    }
    this.currentUser = user2;
    if (user2) {
      await this.assertedPersistence.setCurrentUser(user2);
    } else {
      await this.assertedPersistence.removeCurrentUser();
    }
  }
  queue(action) {
    this.operations = this.operations.then(action, action);
    return this.operations;
  }
  get assertedPersistence() {
    _assert(this.persistenceManager, this, "internal-error");
    return this.persistenceManager;
  }
  _logFramework(framework) {
    if (!framework || this.frameworks.includes(framework)) {
      return;
    }
    this.frameworks.push(framework);
    this.frameworks.sort();
    this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());
  }
  _getFrameworks() {
    return this.frameworks;
  }
  _getSdkClientVersion() {
    return this.clientVersion;
  }
};
function _castAuth(auth) {
  return getModularInstance(auth);
}
var Subscription = class {
  constructor(auth) {
    this.auth = auth;
    this.observer = null;
    this.addObserver = createSubscribe((observer) => this.observer = observer);
  }
  get next() {
    _assert(this.observer, this.auth, "internal-error");
    return this.observer.next.bind(this.observer);
  }
};
new Delay(3e4, 6e4);
new Delay(2e3, 1e4);
new Delay(3e4, 6e4);
new Delay(5e3, 15e3);
var name$2 = "@firebase/auth";
var version$3 = "0.18.0";
var AuthInterop = class {
  constructor(auth) {
    this.auth = auth;
    this.internalListeners = new Map();
  }
  getUid() {
    var _a;
    this.assertAuthConfigured();
    return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;
  }
  async getToken(forceRefresh) {
    this.assertAuthConfigured();
    await this.auth._initializationPromise;
    if (!this.auth.currentUser) {
      return null;
    }
    const accessToken = await this.auth.currentUser.getIdToken(forceRefresh);
    return { accessToken };
  }
  addAuthTokenListener(listener) {
    this.assertAuthConfigured();
    if (this.internalListeners.has(listener)) {
      return;
    }
    const unsubscribe = this.auth.onIdTokenChanged((user2) => {
      var _a;
      listener(((_a = user2) === null || _a === void 0 ? void 0 : _a.stsTokenManager.accessToken) || null);
    });
    this.internalListeners.set(listener, unsubscribe);
    this.updateProactiveRefresh();
  }
  removeAuthTokenListener(listener) {
    this.assertAuthConfigured();
    const unsubscribe = this.internalListeners.get(listener);
    if (!unsubscribe) {
      return;
    }
    this.internalListeners.delete(listener);
    unsubscribe();
    this.updateProactiveRefresh();
  }
  assertAuthConfigured() {
    _assert(this.auth._initializationPromise, "dependent-sdk-initialized-before-auth");
  }
  updateProactiveRefresh() {
    if (this.internalListeners.size > 0) {
      this.auth._startProactiveRefresh();
    } else {
      this.auth._stopProactiveRefresh();
    }
  }
};
function getVersionForPlatform(clientPlatform) {
  switch (clientPlatform) {
    case "Node":
      return "node";
    case "ReactNative":
      return "rn";
    case "Worker":
      return "webworker";
    case "Cordova":
      return "cordova";
    default:
      return void 0;
  }
}
function registerAuth(clientPlatform) {
  (0, import_app._registerComponent)(new Component("auth", (container, { options: deps }) => {
    const app2 = container.getProvider("app").getImmediate();
    const { apiKey, authDomain } = app2.options;
    return ((app3) => {
      _assert(apiKey && !apiKey.includes(":"), "invalid-api-key", { appName: app3.name });
      _assert(!(authDomain === null || authDomain === void 0 ? void 0 : authDomain.includes(":")), "argument-error", {
        appName: app3.name
      });
      const config = {
        apiKey,
        authDomain,
        clientPlatform,
        apiHost: "identitytoolkit.googleapis.com",
        tokenApiHost: "securetoken.googleapis.com",
        apiScheme: "https",
        sdkClientVersion: _getClientVersion(clientPlatform)
      };
      const authInstance = new AuthImpl(app3, config);
      _initializeAuthInstance(authInstance, deps);
      return authInstance;
    })(app2);
  }, "PUBLIC").setInstantiationMode("EXPLICIT").setInstanceCreatedCallback((container, _instanceIdentifier, _instance) => {
    const authInternalProvider = container.getProvider("auth-internal");
    authInternalProvider.initialize();
  }));
  (0, import_app._registerComponent)(new Component("auth-internal", (container) => {
    const auth = _castAuth(container.getProvider("auth").getImmediate());
    return ((auth2) => new AuthInterop(auth2))(auth);
  }, "PRIVATE").setInstantiationMode("EXPLICIT"));
  (0, import_app.registerVersion)(name$2, version$3, getVersionForPlatform(clientPlatform));
}
registerAuth("Browser");
var snackbar_svelte_svelte_type_style_lang = ".snackbar.svelte-1qizy5d{position:fixed;top:100%;left:calc(50% - 4px);transform:translateX(-50%) translateY(-120%);width:fit-content;max-width:800px;margin-left:4px;margin-right:4px;display:flex;align-items:center;z-index:9999;padding-top:7px;padding-bottom:7px;border-style:solid}.text.svelte-1qizy5d{margin-left:11px;flex:1;font-size:14px}.icon.svelte-1qizy5d{margin:0;padding:0;display:grid;place-items:center;margin-right:11px !important;margin-left:11px !important;border-radius:50%;height:24px;width:24px;cursor:pointer}";
var css$h = {
  code: ".snackbar.svelte-1qizy5d{position:fixed;top:100%;left:calc(50% - 4px);transform:translateX(-50%) translateY(-120%);width:fit-content;max-width:800px;margin-left:4px;margin-right:4px;display:flex;align-items:center;z-index:9999;padding-top:7px;padding-bottom:7px;border-style:solid}.text.svelte-1qizy5d{margin-left:11px;flex:1;font-size:14px}.icon.svelte-1qizy5d{margin:0;padding:0;display:grid;place-items:center;margin-right:11px !important;margin-left:11px !important;border-radius:50%;height:24px;width:24px;cursor:pointer}",
  map: `{"version":3,"file":"snackbar.svelte","sources":["snackbar.svelte"],"sourcesContent":["<script>\\r\\n\\timport { blur, slide } from 'svelte/transition';\\r\\n\\r\\n\\texport let hideSnackbar = () => {};\\r\\n\\texport let showSnackbar = false;\\r\\n\\texport let autoDismissDuration = 2424;\\r\\n\\texport let inTransition = slide;\\r\\n\\texport let outTransition = blur;\\r\\n\\texport let text = 'Welcome to the Snackbar by Om Londhe.';\\r\\n\\texport let borderTopLeftRadius = '7px';\\r\\n\\texport let borderTopRightRadius = '7px';\\r\\n\\texport let borderBottomLeftRadius = '7px';\\r\\n\\texport let borderBottomRightRadius = '7px';\\r\\n\\texport let borderWidth = '2px';\\r\\n\\texport let borderColor = '#98FB98';\\r\\n\\texport let backgroundColor = 'lightgreen';\\r\\n\\texport let showHighlightBorder = false;\\r\\n\\texport let highlightBorderColor = 'lightgreen';\\r\\n\\texport let highlightBorderWidth = '2px';\\r\\n\\texport let textColor = 'black';\\r\\n\\texport let iconColor = 'black';\\r\\n\\r\\n\\tconst snackbatStyle = \`\\r\\n\\t\\tborder-bottom-left-radius: \${borderBottomLeftRadius};\\r\\n\\t\\tborder-bottom-right-radius: \${borderBottomRightRadius};\\r\\n\\t\\tborder-top-right-radius: \${borderTopRightRadius};\\r\\n\\t\\tborder-top-left-radius: \${borderTopLeftRadius};\\r\\n\\t\\tborder-width: \${borderWidth};\\r\\n\\t\\tborder-color: \${borderColor};\\r\\n\\t\\tbackground-color: \${backgroundColor};\\r\\n\\t\\tborder-left-color: \${showHighlightBorder ? highlightBorderColor : borderColor};\\r\\n\\t\\tborder-left-width: \${showHighlightBorder ? highlightBorderWidth : borderWidth};\\r\\n\\t\`;\\r\\n\\tconst textStyle = \`color: \${textColor}\`;\\r\\n\\r\\n\\t$: if (showSnackbar && autoDismissDuration) {\\r\\n\\t\\tsetTimeout(hideSnackbar, autoDismissDuration);\\r\\n\\t}\\r\\n<\/script>\\r\\n\\r\\n{#if showSnackbar}\\r\\n\\t<div class=\\"snackbar\\" style={snackbatStyle} in:inTransition out:outTransition>\\r\\n\\t\\t<p class=\\"text\\" style={textStyle}>{text}</p>\\r\\n\\t\\t<div class=\\"icon\\" on:click={hideSnackbar}>\\r\\n\\t\\t\\t<svg xmlns=\\"http://www.w3.org/2000/svg\\" class=\\"ionicon\\" viewBox=\\"0 0 512 512\\"\\r\\n\\t\\t\\t\\t><title>Close</title><path\\r\\n\\t\\t\\t\\t\\tfill=\\"none\\"\\r\\n\\t\\t\\t\\t\\tstroke={iconColor}\\r\\n\\t\\t\\t\\t\\tstroke-linecap=\\"round\\"\\r\\n\\t\\t\\t\\t\\tstroke-linejoin=\\"round\\"\\r\\n\\t\\t\\t\\t\\tstroke-width=\\"32\\"\\r\\n\\t\\t\\t\\t\\td=\\"M368 368L144 144M368 144L144 368\\"\\r\\n\\t\\t\\t\\t/></svg\\r\\n\\t\\t\\t>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n{/if}\\r\\n\\r\\n<style>\\r\\n\\t.snackbar {\\r\\n\\t\\tposition: fixed;\\r\\n\\t\\ttop: 100%;\\r\\n\\t\\tleft: calc(50% - 4px);\\r\\n\\t\\ttransform: translateX(-50%) translateY(-120%);\\r\\n\\t\\twidth: fit-content;\\r\\n\\t\\tmax-width: 800px;\\r\\n\\t\\tmargin-left: 4px;\\r\\n\\t\\tmargin-right: 4px;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tz-index: 9999;\\r\\n\\t\\tpadding-top: 7px;\\r\\n\\t\\tpadding-bottom: 7px;\\r\\n\\t\\tborder-style: solid;\\r\\n\\t}\\r\\n\\t.text {\\r\\n\\t\\tmargin-left: 11px;\\r\\n\\t\\tflex: 1;\\r\\n\\t\\tfont-size: 14px;\\r\\n\\t}\\r\\n\\t.icon {\\r\\n\\t\\tmargin: 0;\\r\\n\\t\\tpadding: 0;\\r\\n\\t\\tdisplay: grid;\\r\\n\\t\\tplace-items: center;\\r\\n\\t\\tmargin-right: 11px !important;\\r\\n\\t\\tmargin-left: 11px !important;\\r\\n\\t\\tborder-radius: 50%;\\r\\n\\t\\theight: 24px;\\r\\n\\t\\twidth: 24px;\\r\\n\\t\\tcursor: pointer;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AA2DC,SAAS,eAAC,CAAC,AACV,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,IAAI,CACT,IAAI,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CACrB,SAAS,CAAE,WAAW,IAAI,CAAC,CAAC,WAAW,KAAK,CAAC,CAC7C,KAAK,CAAE,WAAW,CAClB,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,CAChB,YAAY,CAAE,GAAG,CACjB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,GAAG,CAChB,cAAc,CAAE,GAAG,CACnB,YAAY,CAAE,KAAK,AACpB,CAAC,AACD,KAAK,eAAC,CAAC,AACN,WAAW,CAAE,IAAI,CACjB,IAAI,CAAE,CAAC,CACP,SAAS,CAAE,IAAI,AAChB,CAAC,AACD,KAAK,eAAC,CAAC,AACN,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,YAAY,CAAE,IAAI,CAAC,UAAU,CAC7B,WAAW,CAAE,IAAI,CAAC,UAAU,CAC5B,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,OAAO,AAChB,CAAC"}`
};
var Snackbar = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { hideSnackbar = () => {
  } } = $$props;
  let { showSnackbar = false } = $$props;
  let { autoDismissDuration = 2424 } = $$props;
  let { inTransition = slide } = $$props;
  let { outTransition = blur } = $$props;
  let { text = "Welcome to the Snackbar by Om Londhe." } = $$props;
  let { borderTopLeftRadius = "7px" } = $$props;
  let { borderTopRightRadius = "7px" } = $$props;
  let { borderBottomLeftRadius = "7px" } = $$props;
  let { borderBottomRightRadius = "7px" } = $$props;
  let { borderWidth = "2px" } = $$props;
  let { borderColor = "#98FB98" } = $$props;
  let { backgroundColor = "lightgreen" } = $$props;
  let { showHighlightBorder = false } = $$props;
  let { highlightBorderColor = "lightgreen" } = $$props;
  let { highlightBorderWidth = "2px" } = $$props;
  let { textColor = "black" } = $$props;
  let { iconColor = "black" } = $$props;
  const snackbatStyle = `
		border-bottom-left-radius: ${borderBottomLeftRadius};
		border-bottom-right-radius: ${borderBottomRightRadius};
		border-top-right-radius: ${borderTopRightRadius};
		border-top-left-radius: ${borderTopLeftRadius};
		border-width: ${borderWidth};
		border-color: ${borderColor};
		background-color: ${backgroundColor};
		border-left-color: ${showHighlightBorder ? highlightBorderColor : borderColor};
		border-left-width: ${showHighlightBorder ? highlightBorderWidth : borderWidth};
	`;
  const textStyle = `color: ${textColor}`;
  if ($$props.hideSnackbar === void 0 && $$bindings.hideSnackbar && hideSnackbar !== void 0)
    $$bindings.hideSnackbar(hideSnackbar);
  if ($$props.showSnackbar === void 0 && $$bindings.showSnackbar && showSnackbar !== void 0)
    $$bindings.showSnackbar(showSnackbar);
  if ($$props.autoDismissDuration === void 0 && $$bindings.autoDismissDuration && autoDismissDuration !== void 0)
    $$bindings.autoDismissDuration(autoDismissDuration);
  if ($$props.inTransition === void 0 && $$bindings.inTransition && inTransition !== void 0)
    $$bindings.inTransition(inTransition);
  if ($$props.outTransition === void 0 && $$bindings.outTransition && outTransition !== void 0)
    $$bindings.outTransition(outTransition);
  if ($$props.text === void 0 && $$bindings.text && text !== void 0)
    $$bindings.text(text);
  if ($$props.borderTopLeftRadius === void 0 && $$bindings.borderTopLeftRadius && borderTopLeftRadius !== void 0)
    $$bindings.borderTopLeftRadius(borderTopLeftRadius);
  if ($$props.borderTopRightRadius === void 0 && $$bindings.borderTopRightRadius && borderTopRightRadius !== void 0)
    $$bindings.borderTopRightRadius(borderTopRightRadius);
  if ($$props.borderBottomLeftRadius === void 0 && $$bindings.borderBottomLeftRadius && borderBottomLeftRadius !== void 0)
    $$bindings.borderBottomLeftRadius(borderBottomLeftRadius);
  if ($$props.borderBottomRightRadius === void 0 && $$bindings.borderBottomRightRadius && borderBottomRightRadius !== void 0)
    $$bindings.borderBottomRightRadius(borderBottomRightRadius);
  if ($$props.borderWidth === void 0 && $$bindings.borderWidth && borderWidth !== void 0)
    $$bindings.borderWidth(borderWidth);
  if ($$props.borderColor === void 0 && $$bindings.borderColor && borderColor !== void 0)
    $$bindings.borderColor(borderColor);
  if ($$props.backgroundColor === void 0 && $$bindings.backgroundColor && backgroundColor !== void 0)
    $$bindings.backgroundColor(backgroundColor);
  if ($$props.showHighlightBorder === void 0 && $$bindings.showHighlightBorder && showHighlightBorder !== void 0)
    $$bindings.showHighlightBorder(showHighlightBorder);
  if ($$props.highlightBorderColor === void 0 && $$bindings.highlightBorderColor && highlightBorderColor !== void 0)
    $$bindings.highlightBorderColor(highlightBorderColor);
  if ($$props.highlightBorderWidth === void 0 && $$bindings.highlightBorderWidth && highlightBorderWidth !== void 0)
    $$bindings.highlightBorderWidth(highlightBorderWidth);
  if ($$props.textColor === void 0 && $$bindings.textColor && textColor !== void 0)
    $$bindings.textColor(textColor);
  if ($$props.iconColor === void 0 && $$bindings.iconColor && iconColor !== void 0)
    $$bindings.iconColor(iconColor);
  $$result.css.add(css$h);
  {
    if (showSnackbar && autoDismissDuration) {
      setTimeout(hideSnackbar, autoDismissDuration);
    }
  }
  return `${showSnackbar ? `<div class="${"snackbar svelte-1qizy5d"}"${add_attribute("style", snackbatStyle, 0)}><p class="${"text svelte-1qizy5d"}"${add_attribute("style", textStyle, 0)}>${escape2(text)}</p>
		<div class="${"icon svelte-1qizy5d"}"><svg xmlns="${"http://www.w3.org/2000/svg"}" class="${"ionicon"}" viewBox="${"0 0 512 512"}"><title>Close</title><path fill="${"none"}"${add_attribute("stroke", iconColor, 0)} stroke-linecap="${"round"}" stroke-linejoin="${"round"}" stroke-width="${"32"}" d="${"M368 368L144 144M368 144L144 368"}"></path></svg></div></div>` : ``}`;
});
var login_svelte_svelte_type_style_lang = ".loginContainer.svelte-uyki7r.svelte-uyki7r{width:100%;display:flex;justify-content:center;align-items:center;height:124px;margin:0}.formField.svelte-uyki7r.svelte-uyki7r{margin:0;display:flex;align-items:center;width:100%;max-width:521px;border-radius:51px;background:#1c0522;transition:271ms;height:50%}.formField.svelte-uyki7r input.svelte-uyki7r{flex:1;background:transparent;outline:none;border:none;font-size:16px;padding:11px;padding-left:17px;color:#fff;font-weight:500;min-width:10px}.icon.svelte-uyki7r.svelte-uyki7r{width:60px;height:calc(100% - 4px);margin-right:2px;border-radius:50%;border:none;display:grid;place-items:center;background:#03dac5;cursor:pointer;transition:271ms}.isFocused.svelte-uyki7r.svelte-uyki7r{box-shadow:none}";
var css$g = {
  code: ".loginContainer.svelte-uyki7r.svelte-uyki7r{width:100%;display:flex;justify-content:center;align-items:center;height:124px;margin:0}.formField.svelte-uyki7r.svelte-uyki7r{margin:0;display:flex;align-items:center;width:100%;max-width:521px;border-radius:51px;background:#1c0522;transition:271ms;height:50%}.formField.svelte-uyki7r input.svelte-uyki7r{flex:1;background:transparent;outline:none;border:none;font-size:16px;padding:11px;padding-left:17px;color:#fff;font-weight:500;min-width:10px}.icon.svelte-uyki7r.svelte-uyki7r{width:60px;height:calc(100% - 4px);margin-right:2px;border-radius:50%;border:none;display:grid;place-items:center;background:#03dac5;cursor:pointer;transition:271ms}.isFocused.svelte-uyki7r.svelte-uyki7r{box-shadow:none}",
  map: `{"version":3,"file":"login.svelte","sources":["login.svelte"],"sourcesContent":["<script>\\r\\n\\timport { getAuth, sendSignInLinkToEmail } from 'firebase/auth';\\r\\n\\timport { slide, fly } from 'svelte/transition';\\r\\n\\timport Snackbar from '../commons/snackbar.svelte';\\r\\n\\timport { blur } from 'svelte/transition';\\r\\n\\timport { getFirebaseApp } from '../../../services/firebase';\\r\\n\\r\\n\\tlet email = '';\\r\\n\\tlet isFocused = false;\\r\\n\\tlet showSnackbar = false;\\r\\n\\tlet loading = false;\\r\\n\\r\\n\\tconst hideSnackbar = () => (showSnackbar = false);\\r\\n\\r\\n\\t$: actionCodeSettings = {\\r\\n\\t\\turl: \`https://signcounter.vercel.app/verify\`,\\r\\n\\t\\thandleCodeInApp: true\\r\\n\\t};\\r\\n\\r\\n\\tconst toggleFocus = () => (isFocused = !isFocused);\\r\\n\\r\\n\\tconst submit = () => {\\r\\n\\t\\tlocalStorage.setItem('loginEmail', email);\\r\\n\\t\\tloading = true;\\r\\n\\t\\tsendSignInLinkToEmail(getAuth(getFirebaseApp()), email, actionCodeSettings)\\r\\n\\t\\t\\t.then(() => {\\r\\n\\t\\t\\t\\tshowSnackbar = true;\\r\\n\\t\\t\\t\\tloading = false;\\r\\n\\t\\t\\t})\\r\\n\\t\\t\\t.catch((error) => alert(error));\\r\\n\\t};\\r\\n<\/script>\\r\\n\\r\\n<div class=\\"loginContainer\\">\\r\\n\\t<Snackbar\\r\\n\\t\\t{showSnackbar}\\r\\n\\t\\t{hideSnackbar}\\r\\n\\t\\toutTransition={slide}\\r\\n\\t\\ttext={\`Click the link in your email '\${email} to login.'\`}\\r\\n\\t/>\\r\\n\\t<form class=\\"formField\\" class:isFocused on:submit|preventDefault={submit}>\\r\\n\\t\\t{#if loading}\\r\\n\\t\\t\\t<progress style=\\"margin: auto;\\" in:blur />\\r\\n\\t\\t{:else}\\r\\n\\t\\t\\t<input\\r\\n\\t\\t\\t\\tplaceholder=\\"Enter your E-mail to login\\"\\r\\n\\t\\t\\t\\ttype=\\"email\\"\\r\\n\\t\\t\\t\\tbind:value={email}\\r\\n\\t\\t\\t\\ton:blur={toggleFocus}\\r\\n\\t\\t\\t\\ton:focus={toggleFocus}\\r\\n\\t\\t\\t\\trequired\\r\\n\\t\\t\\t\\tin:fly={{ x: -100, opacity: 0 }}\\r\\n\\t\\t\\t/>\\r\\n\\t\\t\\t<button type=\\"submit\\" class=\\"icon\\" class:isFocused in:fly={{ x: 100, opacity: 0 }}>\\r\\n\\t\\t\\t\\t<ion-icon name=\\"chevron-forward-outline\\" />\\r\\n\\t\\t\\t</button>\\r\\n\\t\\t{/if}\\r\\n\\t</form>\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n\\t.loginContainer {\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\theight: 124px;\\r\\n\\t\\tmargin: 0;\\r\\n\\t}\\r\\n\\t.formField {\\r\\n\\t\\tmargin: 0;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\tmax-width: 521px;\\r\\n\\t\\tborder-radius: 51px;\\r\\n\\t\\tbackground: #1c0522;\\r\\n\\t\\ttransition: 271ms;\\r\\n\\t\\theight: 50%;\\r\\n\\t}\\r\\n\\t.formField input {\\r\\n\\t\\tflex: 1;\\r\\n\\t\\tbackground: transparent;\\r\\n\\t\\toutline: none;\\r\\n\\t\\tborder: none;\\r\\n\\t\\tfont-size: 16px;\\r\\n\\t\\tpadding: 11px;\\r\\n\\t\\tpadding-left: 17px;\\r\\n\\t\\tcolor: #fff;\\r\\n\\t\\tfont-weight: 500;\\r\\n\\t\\tmin-width: 10px;\\r\\n\\t}\\r\\n\\t.icon {\\r\\n\\t\\twidth: 60px;\\r\\n\\t\\theight: calc(100% - 4px);\\r\\n\\t\\tmargin-right: 2px;\\r\\n\\t\\tborder-radius: 50%;\\r\\n\\t\\tborder: none;\\r\\n\\t\\tdisplay: grid;\\r\\n\\t\\tplace-items: center;\\r\\n\\t\\tbackground: #03dac5;\\r\\n\\t\\tcursor: pointer;\\r\\n\\t\\ttransition: 271ms;\\r\\n\\t}\\r\\n\\t.isFocused {\\r\\n\\t\\tbox-shadow: none;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AA6DC,eAAe,4BAAC,CAAC,AAChB,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,CAAC,AACV,CAAC,AACD,UAAU,4BAAC,CAAC,AACX,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,KAAK,CAChB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,OAAO,CACnB,UAAU,CAAE,KAAK,CACjB,MAAM,CAAE,GAAG,AACZ,CAAC,AACD,wBAAU,CAAC,KAAK,cAAC,CAAC,AACjB,IAAI,CAAE,CAAC,CACP,UAAU,CAAE,WAAW,CACvB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,IAAI,CACf,OAAO,CAAE,IAAI,CACb,YAAY,CAAE,IAAI,CAClB,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,IAAI,AAChB,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CACxB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,OAAO,CACnB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,KAAK,AAClB,CAAC,AACD,UAAU,4BAAC,CAAC,AACX,UAAU,CAAE,IAAI,AACjB,CAAC"}`
};
var Login = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let email = "";
  let showSnackbar = false;
  const hideSnackbar = () => showSnackbar = false;
  $$result.css.add(css$g);
  return `<div class="${"loginContainer svelte-uyki7r"}">${validate_component(Snackbar, "Snackbar").$$render($$result, {
    showSnackbar,
    hideSnackbar,
    outTransition: slide,
    text: `Click the link in your email '${email} to login.'`
  }, {}, {})}
	<form class="${["formField svelte-uyki7r", ""].join(" ").trim()}">${`<input placeholder="${"Enter your E-mail to login"}" type="${"email"}" required class="${"svelte-uyki7r"}"${add_attribute("value", email, 0)}>
			<button type="${"submit"}" class="${["icon svelte-uyki7r", ""].join(" ").trim()}"><ion-icon name="${"chevron-forward-outline"}"></ion-icon></button>`}</form>
</div>`;
});
var wavedTagline_svelte_svelte_type_style_lang = ".layer-wave-separator.svelte-qz6nc9{position:relative;width:100%;height:271px;background-repeat:no-repeat;background-position:center;background-size:cover;background:url('/layer-wave-separator.svg')}.tagline.svelte-qz6nc9{background:#ff1e67;display:flex;flex-direction:column;justify-content:center;align-items:center;padding-left:7px;padding-right:7px;padding-top:30px;position:relative;overflow:visible;margin:0}.combiner.svelte-qz6nc9{position:absolute;left:0;bottom:0;z-index:4;height:21px;width:100%;background:#ff1e67}.tagline-text.svelte-qz6nc9{font-family:'Poppins', sans-serif;font-size:18px;font-weight:bold;letter-spacing:1px;text-align:center;color:#121212;overflow:visible}.flip.svelte-qz6nc9{transform:rotate(180deg)}";
var css$f = {
  code: ".layer-wave-separator.svelte-qz6nc9{position:relative;width:100%;height:271px;background-repeat:no-repeat;background-position:center;background-size:cover;background:url('/layer-wave-separator.svg')}.tagline.svelte-qz6nc9{background:#ff1e67;display:flex;flex-direction:column;justify-content:center;align-items:center;padding-left:7px;padding-right:7px;padding-top:30px;position:relative;overflow:visible;margin:0}.combiner.svelte-qz6nc9{position:absolute;left:0;bottom:0;z-index:4;height:21px;width:100%;background:#ff1e67}.tagline-text.svelte-qz6nc9{font-family:'Poppins', sans-serif;font-size:18px;font-weight:bold;letter-spacing:1px;text-align:center;color:#121212;overflow:visible}.flip.svelte-qz6nc9{transform:rotate(180deg)}",
  map: `{"version":3,"file":"wavedTagline.svelte","sources":["wavedTagline.svelte"],"sourcesContent":["<script>\\r\\n\\timport Login from './login.svelte';\\r\\n<\/script>\\r\\n\\r\\n<div class=\\"layer-wave-separator\\">\\r\\n\\t<div class=\\"combiner\\" />\\r\\n</div>\\r\\n<div class=\\"tagline\\" id=\\"login\\">\\r\\n\\t<p class=\\"tagline-text\\">The one who is here to protect your Passwords!</p>\\r\\n\\t<Login />\\r\\n</div>\\r\\n<div class=\\"layer-wave-separator flip\\">\\r\\n\\t<div class=\\"combiner\\" />\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n\\t.layer-wave-separator {\\r\\n\\t\\tposition: relative;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 271px;\\r\\n\\t\\tbackground-repeat: no-repeat;\\r\\n\\t\\tbackground-position: center;\\r\\n\\t\\tbackground-size: cover;\\r\\n\\t\\tbackground: url('/layer-wave-separator.svg');\\r\\n\\t}\\r\\n\\t.tagline {\\r\\n\\t\\tbackground: #ff1e67;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: column;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tpadding-left: 7px;\\r\\n\\t\\tpadding-right: 7px;\\r\\n\\t\\tpadding-top: 30px;\\r\\n\\t\\tposition: relative;\\r\\n\\t\\toverflow: visible;\\r\\n\\t\\tmargin: 0;\\r\\n\\t}\\r\\n\\t.combiner {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\tleft: 0;\\r\\n\\t\\tbottom: 0;\\r\\n\\t\\tz-index: 4;\\r\\n\\t\\theight: 21px;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\tbackground: #ff1e67;\\r\\n\\t}\\r\\n\\t.tagline-text {\\r\\n\\t\\tfont-family: 'Poppins', sans-serif;\\r\\n\\t\\tfont-size: 18px;\\r\\n\\t\\tfont-weight: bold;\\r\\n\\t\\tletter-spacing: 1px;\\r\\n\\t\\ttext-align: center;\\r\\n\\t\\tcolor: #121212;\\r\\n\\t\\toverflow: visible;\\r\\n\\t}\\r\\n\\r\\n\\t.flip {\\r\\n\\t\\ttransform: rotate(180deg);\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAgBC,qBAAqB,cAAC,CAAC,AACtB,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,iBAAiB,CAAE,SAAS,CAC5B,mBAAmB,CAAE,MAAM,CAC3B,eAAe,CAAE,KAAK,CACtB,UAAU,CAAE,IAAI,2BAA2B,CAAC,AAC7C,CAAC,AACD,QAAQ,cAAC,CAAC,AACT,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,IAAI,CACjB,QAAQ,CAAE,QAAQ,CAClB,QAAQ,CAAE,OAAO,CACjB,MAAM,CAAE,CAAC,AACV,CAAC,AACD,SAAS,cAAC,CAAC,AACV,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,OAAO,AACpB,CAAC,AACD,aAAa,cAAC,CAAC,AACd,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,GAAG,CACnB,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,OAAO,CACd,QAAQ,CAAE,OAAO,AAClB,CAAC,AAED,KAAK,cAAC,CAAC,AACN,SAAS,CAAE,OAAO,MAAM,CAAC,AAC1B,CAAC"}`
};
var WavedTagline = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$f);
  return `<div class="${"layer-wave-separator svelte-qz6nc9"}"><div class="${"combiner svelte-qz6nc9"}"></div></div>
<div class="${"tagline svelte-qz6nc9"}" id="${"login"}"><p class="${"tagline-text svelte-qz6nc9"}">The one who is here to protect your Passwords!</p>
	${validate_component(Login, "Login").$$render($$result, {}, {}, {})}</div>
<div class="${"layer-wave-separator flip svelte-qz6nc9"}"><div class="${"combiner svelte-qz6nc9"}"></div>
</div>`;
});
var footer_svelte_svelte_type_style_lang = "footer.svelte-19x4cvh.svelte-19x4cvh{position:relative;width:100%;min-width:50px;background:#3586ff;padding-top:21px;height:250px;user-select:none}footer.svelte-19x4cvh .social-icons.svelte-19x4cvh{position:relative;display:flex;justify-content:center;align-items:center;margin:10px 0;flex-wrap:wrap}footer.svelte-19x4cvh .social-icons li.svelte-19x4cvh{list-style:none}footer.svelte-19x4cvh .social-icons li a.svelte-19x4cvh{font-size:2em;color:white;margin:0 10px;display:grid;place-items:center;transition:0.5s;border-radius:21px;width:44px;height:44px}footer.svelte-19x4cvh .wave.svelte-19x4cvh{position:absolute;top:-95px;left:0;width:100%;height:100px;background:url('/wave.png');background-size:1000px 100px}footer.svelte-19x4cvh .wave#wave1.svelte-19x4cvh{z-index:10;opacity:1;bottom:0;animation:svelte-19x4cvh-animateWave_1 4s linear infinite}footer.svelte-19x4cvh .wave#wave2.svelte-19x4cvh{z-index:9;opacity:0.5;bottom:10px;animation:svelte-19x4cvh-animateWave_2 4s linear infinite}footer.svelte-19x4cvh .wave#wave3.svelte-19x4cvh{z-index:10;opacity:0.2;bottom:15px;animation:svelte-19x4cvh-animateWave_1 3s linear infinite}footer.svelte-19x4cvh .wave#wave4.svelte-19x4cvh{z-index:9;opacity:0.7;bottom:20px;animation:svelte-19x4cvh-animateWave_2 3s linear infinite}.social-title.svelte-19x4cvh.svelte-19x4cvh{font-family:'Poppins', sans-serif;font-size:24px;text-align:center;width:100%;margin:0;padding:0;padding-bottom:4px;color:white}.dev.svelte-19x4cvh.svelte-19x4cvh,.copyright.svelte-19x4cvh.svelte-19x4cvh{color:white;text-align:center}.dev.svelte-19x4cvh.svelte-19x4cvh{margin-top:51px;margin-bottom:21px;font-size:18px;font-family:'Ubuntu', sans-serif;display:flex;justify-content:center;align-items:center}.dev.svelte-19x4cvh img.svelte-19x4cvh{height:24px}.icon.svelte-19x4cvh.svelte-19x4cvh{font-size:24px;margin:0;padding:0}.copyright.svelte-19x4cvh.svelte-19x4cvh{font-size:13px;letter-spacing:0.5px;font-family:'Poppins', sans-serif}@keyframes svelte-19x4cvh-animateWave_1{0%{background-position-x:1000px}100%{background-position-x:0px}}@keyframes svelte-19x4cvh-animateWave_2{0%{background-position-x:0px}100%{background-position-x:1000px}}@media only screen and (min-width: 750px){footer.svelte-19x4cvh .social-icons li a.svelte-19x4cvh:hover{transform:translateY(-7px) rotateZ(360deg);border-radius:50%;background:white}.logo-facebook.svelte-19x4cvh.svelte-19x4cvh:hover{color:#3b5998}.logo-instagram.svelte-19x4cvh.svelte-19x4cvh:hover{color:#cd486b}.logo-twitter.svelte-19x4cvh.svelte-19x4cvh:hover{color:#1da1f2}.logo-github.svelte-19x4cvh.svelte-19x4cvh:hover{color:#333}.logo-linkedin.svelte-19x4cvh.svelte-19x4cvh:hover{color:#0e76a8}}@media only screen and (max-width: 750px){footer.svelte-19x4cvh .social-icons li a.svelte-19x4cvh{border-radius:50%;background:white}.logo-facebook.svelte-19x4cvh.svelte-19x4cvh{color:#3b5998 !important}.logo-instagram.svelte-19x4cvh.svelte-19x4cvh{color:#cd486b !important}.logo-twitter.svelte-19x4cvh.svelte-19x4cvh{color:#1da1f2 !important}.logo-github.svelte-19x4cvh.svelte-19x4cvh{color:#333 !important}.logo-linkedin.svelte-19x4cvh.svelte-19x4cvh{color:#0e76a8 !important}}";
var css$e = {
  code: "footer.svelte-19x4cvh.svelte-19x4cvh{position:relative;width:100%;min-width:50px;background:#3586ff;padding-top:21px;height:250px;user-select:none}footer.svelte-19x4cvh .social-icons.svelte-19x4cvh{position:relative;display:flex;justify-content:center;align-items:center;margin:10px 0;flex-wrap:wrap}footer.svelte-19x4cvh .social-icons li.svelte-19x4cvh{list-style:none}footer.svelte-19x4cvh .social-icons li a.svelte-19x4cvh{font-size:2em;color:white;margin:0 10px;display:grid;place-items:center;transition:0.5s;border-radius:21px;width:44px;height:44px}footer.svelte-19x4cvh .wave.svelte-19x4cvh{position:absolute;top:-95px;left:0;width:100%;height:100px;background:url('/wave.png');background-size:1000px 100px}footer.svelte-19x4cvh .wave#wave1.svelte-19x4cvh{z-index:10;opacity:1;bottom:0;animation:svelte-19x4cvh-animateWave_1 4s linear infinite}footer.svelte-19x4cvh .wave#wave2.svelte-19x4cvh{z-index:9;opacity:0.5;bottom:10px;animation:svelte-19x4cvh-animateWave_2 4s linear infinite}footer.svelte-19x4cvh .wave#wave3.svelte-19x4cvh{z-index:10;opacity:0.2;bottom:15px;animation:svelte-19x4cvh-animateWave_1 3s linear infinite}footer.svelte-19x4cvh .wave#wave4.svelte-19x4cvh{z-index:9;opacity:0.7;bottom:20px;animation:svelte-19x4cvh-animateWave_2 3s linear infinite}.social-title.svelte-19x4cvh.svelte-19x4cvh{font-family:'Poppins', sans-serif;font-size:24px;text-align:center;width:100%;margin:0;padding:0;padding-bottom:4px;color:white}.dev.svelte-19x4cvh.svelte-19x4cvh,.copyright.svelte-19x4cvh.svelte-19x4cvh{color:white;text-align:center}.dev.svelte-19x4cvh.svelte-19x4cvh{margin-top:51px;margin-bottom:21px;font-size:18px;font-family:'Ubuntu', sans-serif;display:flex;justify-content:center;align-items:center}.dev.svelte-19x4cvh img.svelte-19x4cvh{height:24px}.icon.svelte-19x4cvh.svelte-19x4cvh{font-size:24px;margin:0;padding:0}.copyright.svelte-19x4cvh.svelte-19x4cvh{font-size:13px;letter-spacing:0.5px;font-family:'Poppins', sans-serif}@keyframes svelte-19x4cvh-animateWave_1{0%{background-position-x:1000px}100%{background-position-x:0px}}@keyframes svelte-19x4cvh-animateWave_2{0%{background-position-x:0px}100%{background-position-x:1000px}}@media only screen and (min-width: 750px){footer.svelte-19x4cvh .social-icons li a.svelte-19x4cvh:hover{transform:translateY(-7px) rotateZ(360deg);border-radius:50%;background:white}.logo-facebook.svelte-19x4cvh.svelte-19x4cvh:hover{color:#3b5998}.logo-instagram.svelte-19x4cvh.svelte-19x4cvh:hover{color:#cd486b}.logo-twitter.svelte-19x4cvh.svelte-19x4cvh:hover{color:#1da1f2}.logo-github.svelte-19x4cvh.svelte-19x4cvh:hover{color:#333}.logo-linkedin.svelte-19x4cvh.svelte-19x4cvh:hover{color:#0e76a8}}@media only screen and (max-width: 750px){footer.svelte-19x4cvh .social-icons li a.svelte-19x4cvh{border-radius:50%;background:white}.logo-facebook.svelte-19x4cvh.svelte-19x4cvh{color:#3b5998 !important}.logo-instagram.svelte-19x4cvh.svelte-19x4cvh{color:#cd486b !important}.logo-twitter.svelte-19x4cvh.svelte-19x4cvh{color:#1da1f2 !important}.logo-github.svelte-19x4cvh.svelte-19x4cvh{color:#333 !important}.logo-linkedin.svelte-19x4cvh.svelte-19x4cvh{color:#0e76a8 !important}}",
  map: `{"version":3,"file":"footer.svelte","sources":["footer.svelte"],"sourcesContent":["<script>\\r\\n\\timport { onMount } from 'svelte';\\r\\n\\r\\n\\tonMount(async () => {\\r\\n\\t\\tawait import('https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.esm.js');\\r\\n\\t\\tawait import('https://unpkg.com/ionicons@5.5.2/dist/ionicons/ionicons.js');\\r\\n\\t});\\r\\n<\/script>\\r\\n\\r\\n<footer>\\r\\n\\t<div class=\\"waves\\">\\r\\n\\t\\t<div class=\\"wave\\" id=\\"wave1\\" />\\r\\n\\t\\t<div class=\\"wave\\" id=\\"wave2\\" />\\r\\n\\t\\t<div class=\\"wave\\" id=\\"wave3\\" />\\r\\n\\t\\t<div class=\\"wave\\" id=\\"wave4\\" />\\r\\n\\t</div>\\r\\n\\t<h1 class=\\"social-title\\">My Socials</h1>\\r\\n\\t<ul class=\\"social-icons\\">\\r\\n\\t\\t<li>\\r\\n\\t\\t\\t<a target=\\"_blank\\" href=\\"https://www.facebook.com/om.londhe.332/\\" class=\\"logo-facebook\\">\\r\\n\\t\\t\\t\\t<ion-icon name=\\"logo-facebook\\" />\\r\\n\\t\\t\\t</a>\\r\\n\\t\\t</li>\\r\\n\\t\\t<li>\\r\\n\\t\\t\\t<a target=\\"_blank\\" href=\\"https://www.instagram.com/theomlondhe/\\" class=\\"logo-instagram\\">\\r\\n\\t\\t\\t\\t<ion-icon name=\\"logo-instagram\\" />\\r\\n\\t\\t\\t</a>\\r\\n\\t\\t</li>\\r\\n\\t\\t<li>\\r\\n\\t\\t\\t<a target=\\"_blank\\" href=\\"https://twitter.com/OmLondhe2003\\" class=\\"logo-twitter\\">\\r\\n\\t\\t\\t\\t<ion-icon name=\\"logo-twitter\\" />\\r\\n\\t\\t\\t</a>\\r\\n\\t\\t</li>\\r\\n\\t\\t<li>\\r\\n\\t\\t\\t<a target=\\"_blank\\" href=\\"https://github.com/Om-Londhe\\" class=\\"logo-github\\">\\r\\n\\t\\t\\t\\t<ion-icon name=\\"logo-github\\" />\\r\\n\\t\\t\\t</a>\\r\\n\\t\\t</li>\\r\\n\\t\\t<li>\\r\\n\\t\\t\\t<a target=\\"_blank\\" href=\\"https://www.linkedin.com/in/omlondhe/\\" class=\\"logo-linkedin\\">\\r\\n\\t\\t\\t\\t<ion-icon name=\\"logo-linkedin\\" />\\r\\n\\t\\t\\t</a>\\r\\n\\t\\t</li>\\r\\n\\t</ul>\\r\\n\\t<p class=\\"dev\\">\\r\\n\\t\\t<ion-icon name=\\"code-outline\\" class=\\"icon\\" /> &nbsp;with&nbsp;\\r\\n\\t\\t<ion-icon name=\\"heart\\" class=\\"icon\\" style=\\"color: #ED4956;\\" />&nbsp;by Om Londhe using&nbsp;\\r\\n\\t\\t<img src=\\"/svelte.png\\" alt=\\"\\" />\\r\\n\\t</p>\\r\\n\\t<p class=\\"copyright\\">Copyright &copy; Om Prashant Londhe 2021</p>\\r\\n</footer>\\r\\n\\r\\n<style>\\r\\n\\tfooter {\\r\\n\\t\\tposition: relative;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\tmin-width: 50px;\\r\\n\\t\\tbackground: #3586ff;\\r\\n\\t\\tpadding-top: 21px;\\r\\n\\t\\theight: 250px;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n\\tfooter .social-icons {\\r\\n\\t\\tposition: relative;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tmargin: 10px 0;\\r\\n\\t\\tflex-wrap: wrap;\\r\\n\\t}\\r\\n\\tfooter .social-icons li {\\r\\n\\t\\tlist-style: none;\\r\\n\\t}\\r\\n\\tfooter .social-icons li a {\\r\\n\\t\\tfont-size: 2em;\\r\\n\\t\\tcolor: white;\\r\\n\\t\\tmargin: 0 10px;\\r\\n\\t\\tdisplay: grid;\\r\\n\\t\\tplace-items: center;\\r\\n\\t\\ttransition: 0.5s;\\r\\n\\t\\tborder-radius: 21px;\\r\\n\\t\\twidth: 44px;\\r\\n\\t\\theight: 44px;\\r\\n\\t}\\r\\n\\tfooter .wave {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttop: -95px;\\r\\n\\t\\tleft: 0;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 100px;\\r\\n\\t\\tbackground: url('/wave.png');\\r\\n\\t\\tbackground-size: 1000px 100px;\\r\\n\\t}\\r\\n\\tfooter .wave#wave1 {\\r\\n\\t\\tz-index: 10;\\r\\n\\t\\topacity: 1;\\r\\n\\t\\tbottom: 0;\\r\\n\\t\\tanimation: animateWave_1 4s linear infinite;\\r\\n\\t}\\r\\n\\tfooter .wave#wave2 {\\r\\n\\t\\tz-index: 9;\\r\\n\\t\\topacity: 0.5;\\r\\n\\t\\tbottom: 10px;\\r\\n\\t\\tanimation: animateWave_2 4s linear infinite;\\r\\n\\t}\\r\\n\\tfooter .wave#wave3 {\\r\\n\\t\\tz-index: 10;\\r\\n\\t\\topacity: 0.2;\\r\\n\\t\\tbottom: 15px;\\r\\n\\t\\tanimation: animateWave_1 3s linear infinite;\\r\\n\\t}\\r\\n\\tfooter .wave#wave4 {\\r\\n\\t\\tz-index: 9;\\r\\n\\t\\topacity: 0.7;\\r\\n\\t\\tbottom: 20px;\\r\\n\\t\\tanimation: animateWave_2 3s linear infinite;\\r\\n\\t}\\r\\n\\t.social-title {\\r\\n\\t\\tfont-family: 'Poppins', sans-serif;\\r\\n\\t\\tfont-size: 24px;\\r\\n\\t\\ttext-align: center;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\tmargin: 0;\\r\\n\\t\\tpadding: 0;\\r\\n\\t\\tpadding-bottom: 4px;\\r\\n\\t\\tcolor: white;\\r\\n\\t}\\r\\n\\r\\n\\t.dev,\\r\\n\\t.copyright {\\r\\n\\t\\tcolor: white;\\r\\n\\t\\ttext-align: center;\\r\\n\\t}\\r\\n\\r\\n\\t.dev {\\r\\n\\t\\tmargin-top: 51px;\\r\\n\\t\\tmargin-bottom: 21px;\\r\\n\\t\\tfont-size: 18px;\\r\\n\\t\\tfont-family: 'Ubuntu', sans-serif;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t\\talign-items: center;\\r\\n\\t}\\r\\n\\t.dev img {\\r\\n\\t\\theight: 24px;\\r\\n\\t}\\r\\n\\t.icon {\\r\\n\\t\\tfont-size: 24px;\\r\\n\\t\\tmargin: 0;\\r\\n\\t\\tpadding: 0;\\r\\n\\t}\\r\\n\\t.copyright {\\r\\n\\t\\tfont-size: 13px;\\r\\n\\t\\tletter-spacing: 0.5px;\\r\\n\\t\\tfont-family: 'Poppins', sans-serif;\\r\\n\\t}\\r\\n\\r\\n\\t@keyframes animateWave_1 {\\r\\n\\t\\t0% {\\r\\n\\t\\t\\tbackground-position-x: 1000px;\\r\\n\\t\\t}\\r\\n\\t\\t100% {\\r\\n\\t\\t\\tbackground-position-x: 0px;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t@keyframes animateWave_2 {\\r\\n\\t\\t0% {\\r\\n\\t\\t\\tbackground-position-x: 0px;\\r\\n\\t\\t}\\r\\n\\t\\t100% {\\r\\n\\t\\t\\tbackground-position-x: 1000px;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\r\\n\\t@media only screen and (min-width: 750px) {\\r\\n\\t\\tfooter .social-icons li a:hover {\\r\\n\\t\\t\\ttransform: translateY(-7px) rotateZ(360deg);\\r\\n\\t\\t\\tborder-radius: 50%;\\r\\n\\t\\t\\tbackground: white;\\r\\n\\t\\t}\\r\\n\\t\\t.logo-facebook:hover {\\r\\n\\t\\t\\tcolor: #3b5998;\\r\\n\\t\\t}\\r\\n\\t\\t.logo-instagram:hover {\\r\\n\\t\\t\\tcolor: #cd486b;\\r\\n\\t\\t}\\r\\n\\t\\t.logo-twitter:hover {\\r\\n\\t\\t\\tcolor: #1da1f2;\\r\\n\\t\\t}\\r\\n\\t\\t.logo-github:hover {\\r\\n\\t\\t\\tcolor: #333;\\r\\n\\t\\t}\\r\\n\\t\\t.logo-linkedin:hover {\\r\\n\\t\\t\\tcolor: #0e76a8;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t@media only screen and (max-width: 750px) {\\r\\n\\t\\tfooter .social-icons li a {\\r\\n\\t\\t\\tborder-radius: 50%;\\r\\n\\t\\t\\tbackground: white;\\r\\n\\t\\t}\\r\\n\\t\\t.logo-facebook {\\r\\n\\t\\t\\tcolor: #3b5998 !important;\\r\\n\\t\\t}\\r\\n\\t\\t.logo-instagram {\\r\\n\\t\\t\\tcolor: #cd486b !important;\\r\\n\\t\\t}\\r\\n\\t\\t.logo-twitter {\\r\\n\\t\\t\\tcolor: #1da1f2 !important;\\r\\n\\t\\t}\\r\\n\\t\\t.logo-github {\\r\\n\\t\\t\\tcolor: #333 !important;\\r\\n\\t\\t}\\r\\n\\t\\t.logo-linkedin {\\r\\n\\t\\t\\tcolor: #0e76a8 !important;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAqDC,MAAM,8BAAC,CAAC,AACP,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,OAAO,CACnB,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,KAAK,CACb,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,qBAAM,CAAC,aAAa,eAAC,CAAC,AACrB,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,IAAI,CAAC,CAAC,CACd,SAAS,CAAE,IAAI,AAChB,CAAC,AACD,qBAAM,CAAC,aAAa,CAAC,EAAE,eAAC,CAAC,AACxB,UAAU,CAAE,IAAI,AACjB,CAAC,AACD,qBAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,eAAC,CAAC,AAC1B,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACb,CAAC,AACD,qBAAM,CAAC,KAAK,eAAC,CAAC,AACb,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,CACV,IAAI,CAAE,CAAC,CACP,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,KAAK,CACb,UAAU,CAAE,IAAI,WAAW,CAAC,CAC5B,eAAe,CAAE,MAAM,CAAC,KAAK,AAC9B,CAAC,AACD,qBAAM,CAAC,KAAK,MAAM,eAAC,CAAC,AACnB,OAAO,CAAE,EAAE,CACX,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,SAAS,CAAE,4BAAa,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,AAC5C,CAAC,AACD,qBAAM,CAAC,KAAK,MAAM,eAAC,CAAC,AACnB,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,4BAAa,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,AAC5C,CAAC,AACD,qBAAM,CAAC,KAAK,MAAM,eAAC,CAAC,AACnB,OAAO,CAAE,EAAE,CACX,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,4BAAa,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,AAC5C,CAAC,AACD,qBAAM,CAAC,KAAK,MAAM,eAAC,CAAC,AACnB,OAAO,CAAE,CAAC,CACV,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,4BAAa,CAAC,EAAE,CAAC,MAAM,CAAC,QAAQ,AAC5C,CAAC,AACD,aAAa,8BAAC,CAAC,AACd,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,MAAM,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,cAAc,CAAE,GAAG,CACnB,KAAK,CAAE,KAAK,AACb,CAAC,AAED,kCAAI,CACJ,UAAU,8BAAC,CAAC,AACX,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,MAAM,AACnB,CAAC,AAED,IAAI,8BAAC,CAAC,AACL,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,CACnB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,QAAQ,CAAC,CAAC,UAAU,CACjC,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,AACpB,CAAC,AACD,mBAAI,CAAC,GAAG,eAAC,CAAC,AACT,MAAM,CAAE,IAAI,AACb,CAAC,AACD,KAAK,8BAAC,CAAC,AACN,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,AACX,CAAC,AACD,UAAU,8BAAC,CAAC,AACX,SAAS,CAAE,IAAI,CACf,cAAc,CAAE,KAAK,CACrB,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,AACnC,CAAC,AAED,WAAW,4BAAc,CAAC,AACzB,EAAE,AAAC,CAAC,AACH,qBAAqB,CAAE,MAAM,AAC9B,CAAC,AACD,IAAI,AAAC,CAAC,AACL,qBAAqB,CAAE,GAAG,AAC3B,CAAC,AACF,CAAC,AACD,WAAW,4BAAc,CAAC,AACzB,EAAE,AAAC,CAAC,AACH,qBAAqB,CAAE,GAAG,AAC3B,CAAC,AACD,IAAI,AAAC,CAAC,AACL,qBAAqB,CAAE,MAAM,AAC9B,CAAC,AACF,CAAC,AAED,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1C,qBAAM,CAAC,aAAa,CAAC,EAAE,CAAC,gBAAC,MAAM,AAAC,CAAC,AAChC,SAAS,CAAE,WAAW,IAAI,CAAC,CAAC,QAAQ,MAAM,CAAC,CAC3C,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,KAAK,AAClB,CAAC,AACD,4CAAc,MAAM,AAAC,CAAC,AACrB,KAAK,CAAE,OAAO,AACf,CAAC,AACD,6CAAe,MAAM,AAAC,CAAC,AACtB,KAAK,CAAE,OAAO,AACf,CAAC,AACD,2CAAa,MAAM,AAAC,CAAC,AACpB,KAAK,CAAE,OAAO,AACf,CAAC,AACD,0CAAY,MAAM,AAAC,CAAC,AACnB,KAAK,CAAE,IAAI,AACZ,CAAC,AACD,4CAAc,MAAM,AAAC,CAAC,AACrB,KAAK,CAAE,OAAO,AACf,CAAC,AACF,CAAC,AACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1C,qBAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,eAAC,CAAC,AAC1B,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,KAAK,AAClB,CAAC,AACD,cAAc,8BAAC,CAAC,AACf,KAAK,CAAE,OAAO,CAAC,UAAU,AAC1B,CAAC,AACD,eAAe,8BAAC,CAAC,AAChB,KAAK,CAAE,OAAO,CAAC,UAAU,AAC1B,CAAC,AACD,aAAa,8BAAC,CAAC,AACd,KAAK,CAAE,OAAO,CAAC,UAAU,AAC1B,CAAC,AACD,YAAY,8BAAC,CAAC,AACb,KAAK,CAAE,IAAI,CAAC,UAAU,AACvB,CAAC,AACD,cAAc,8BAAC,CAAC,AACf,KAAK,CAAE,OAAO,CAAC,UAAU,AAC1B,CAAC,AACF,CAAC"}`
};
var Footer = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$e);
  return `<footer class="${"svelte-19x4cvh"}"><div class="${"waves"}"><div class="${"wave svelte-19x4cvh"}" id="${"wave1"}"></div>
		<div class="${"wave svelte-19x4cvh"}" id="${"wave2"}"></div>
		<div class="${"wave svelte-19x4cvh"}" id="${"wave3"}"></div>
		<div class="${"wave svelte-19x4cvh"}" id="${"wave4"}"></div></div>
	<h1 class="${"social-title svelte-19x4cvh"}">My Socials</h1>
	<ul class="${"social-icons svelte-19x4cvh"}"><li class="${"svelte-19x4cvh"}"><a target="${"_blank"}" href="${"https://www.facebook.com/om.londhe.332/"}" class="${"logo-facebook svelte-19x4cvh"}"><ion-icon name="${"logo-facebook"}"></ion-icon></a></li>
		<li class="${"svelte-19x4cvh"}"><a target="${"_blank"}" href="${"https://www.instagram.com/theomlondhe/"}" class="${"logo-instagram svelte-19x4cvh"}"><ion-icon name="${"logo-instagram"}"></ion-icon></a></li>
		<li class="${"svelte-19x4cvh"}"><a target="${"_blank"}" href="${"https://twitter.com/OmLondhe2003"}" class="${"logo-twitter svelte-19x4cvh"}"><ion-icon name="${"logo-twitter"}"></ion-icon></a></li>
		<li class="${"svelte-19x4cvh"}"><a target="${"_blank"}" href="${"https://github.com/Om-Londhe"}" class="${"logo-github svelte-19x4cvh"}"><ion-icon name="${"logo-github"}"></ion-icon></a></li>
		<li class="${"svelte-19x4cvh"}"><a target="${"_blank"}" href="${"https://www.linkedin.com/in/omlondhe/"}" class="${"logo-linkedin svelte-19x4cvh"}"><ion-icon name="${"logo-linkedin"}"></ion-icon></a></li></ul>
	<p class="${"dev svelte-19x4cvh"}"><ion-icon name="${"code-outline"}" class="${"icon svelte-19x4cvh"}"></ion-icon> \xA0with\xA0
		<ion-icon name="${"heart"}" class="${"icon svelte-19x4cvh"}" style="${"color: #ED4956;"}"></ion-icon>\xA0by Om Londhe using\xA0
		<img src="${"/svelte.png"}" alt="${""}" class="${"svelte-19x4cvh"}"></p>
	<p class="${"copyright svelte-19x4cvh"}">Copyright \xA9 Om Prashant Londhe 2021</p>
</footer>`;
});
var goalCard_svelte_svelte_type_style_lang = ".goalCard.svelte-14o77jh.svelte-14o77jh{height:275px;width:200px;padding:7px;position:relative;box-shadow:20px 20px 50px rgba(0, 0, 0, 0.5);border-radius:15px;background:rgba(255, 255, 255, 0.1);overflow:hidden;display:flex;flex-direction:column;justify-content:center;align-items:center;border-top:1px solid rgba(255, 255, 255, 0.5);border-left:1px solid rgba(255, 255, 255, 0.5);backdrop-filter:blur(4px);padding:20px;text-align:center;transition:0.5s;cursor:none;user-select:none;margin:11px}.number.svelte-14o77jh.svelte-14o77jh{position:absolute;top:-20px;right:20px;font-size:8em;color:rgba(255, 255, 255, 0.05);font-family:'Raleway', sans-serif;transition:0.7s}.title.svelte-14o77jh.svelte-14o77jh{font-size:24px;color:black;z-index:1;font-family:'Varela Round', sans-serif;margin-bottom:11px;background:whitesmoke;border-radius:51px 21px;padding:21px;padding-top:7px;padding-bottom:7px}.content.svelte-14o77jh.svelte-14o77jh{font-size:18px;color:white;font-weight:300;font-family:'Baloo Paaji 2', cursive}@media only screen and (min-width: 750px){.number.svelte-14o77jh.svelte-14o77jh{top:calc(35% - 40px);right:calc(35% - 40px);color:whitesmoke}.goalCard.svelte-14o77jh:hover .number.svelte-14o77jh{top:-20px;right:20px;color:rgba(255, 255, 255, 0.05)}.title.svelte-14o77jh.svelte-14o77jh{transform:translateY(-150px);transition:0.7s;opacity:0}.goalCard.svelte-14o77jh:hover .title.svelte-14o77jh{transform:translateY(0);opacity:1}.content.svelte-14o77jh.svelte-14o77jh{transform:translateY(200px);transition:0.7s;opacity:0}.goalCard.svelte-14o77jh:hover .content.svelte-14o77jh{transform:translateY(0);opacity:1}}";
var css$d = {
  code: ".goalCard.svelte-14o77jh.svelte-14o77jh{height:275px;width:200px;padding:7px;position:relative;box-shadow:20px 20px 50px rgba(0, 0, 0, 0.5);border-radius:15px;background:rgba(255, 255, 255, 0.1);overflow:hidden;display:flex;flex-direction:column;justify-content:center;align-items:center;border-top:1px solid rgba(255, 255, 255, 0.5);border-left:1px solid rgba(255, 255, 255, 0.5);backdrop-filter:blur(4px);padding:20px;text-align:center;transition:0.5s;cursor:none;user-select:none;margin:11px}.number.svelte-14o77jh.svelte-14o77jh{position:absolute;top:-20px;right:20px;font-size:8em;color:rgba(255, 255, 255, 0.05);font-family:'Raleway', sans-serif;transition:0.7s}.title.svelte-14o77jh.svelte-14o77jh{font-size:24px;color:black;z-index:1;font-family:'Varela Round', sans-serif;margin-bottom:11px;background:whitesmoke;border-radius:51px 21px;padding:21px;padding-top:7px;padding-bottom:7px}.content.svelte-14o77jh.svelte-14o77jh{font-size:18px;color:white;font-weight:300;font-family:'Baloo Paaji 2', cursive}@media only screen and (min-width: 750px){.number.svelte-14o77jh.svelte-14o77jh{top:calc(35% - 40px);right:calc(35% - 40px);color:whitesmoke}.goalCard.svelte-14o77jh:hover .number.svelte-14o77jh{top:-20px;right:20px;color:rgba(255, 255, 255, 0.05)}.title.svelte-14o77jh.svelte-14o77jh{transform:translateY(-150px);transition:0.7s;opacity:0}.goalCard.svelte-14o77jh:hover .title.svelte-14o77jh{transform:translateY(0);opacity:1}.content.svelte-14o77jh.svelte-14o77jh{transform:translateY(200px);transition:0.7s;opacity:0}.goalCard.svelte-14o77jh:hover .content.svelte-14o77jh{transform:translateY(0);opacity:1}}",
  map: `{"version":3,"file":"goalCard.svelte","sources":["goalCard.svelte"],"sourcesContent":["<script>\\r\\n\\texport let goalNumber;\\r\\n\\texport let content;\\r\\n<\/script>\\r\\n\\r\\n<div class=\\"goalCard\\">\\r\\n\\t<h2 class=\\"number\\">0{goalNumber}</h2>\\r\\n\\t<h3 class=\\"title\\">Goal {goalNumber}</h3>\\r\\n\\t<p class=\\"content\\">{content}</p>\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n\\t.goalCard {\\r\\n\\t\\theight: 275px;\\r\\n\\t\\twidth: 200px;\\r\\n\\t\\tpadding: 7px;\\r\\n\\t\\tposition: relative;\\r\\n\\t\\tbox-shadow: 20px 20px 50px rgba(0, 0, 0, 0.5);\\r\\n\\t\\tborder-radius: 15px;\\r\\n\\t\\tbackground: rgba(255, 255, 255, 0.1);\\r\\n\\t\\toverflow: hidden;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: column;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tborder-top: 1px solid rgba(255, 255, 255, 0.5);\\r\\n\\t\\tborder-left: 1px solid rgba(255, 255, 255, 0.5);\\r\\n\\t\\tbackdrop-filter: blur(4px);\\r\\n\\t\\tpadding: 20px;\\r\\n\\t\\ttext-align: center;\\r\\n\\t\\ttransition: 0.5s;\\r\\n\\t\\tcursor: none;\\r\\n\\t\\tuser-select: none;\\r\\n\\t\\tmargin: 11px;\\r\\n\\t}\\r\\n\\t.number {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttop: -20px;\\r\\n\\t\\tright: 20px;\\r\\n\\t\\tfont-size: 8em;\\r\\n\\t\\tcolor: rgba(255, 255, 255, 0.05);\\r\\n\\t\\tfont-family: 'Raleway', sans-serif;\\r\\n\\t\\ttransition: 0.7s;\\r\\n\\t}\\r\\n\\t.title {\\r\\n\\t\\tfont-size: 24px;\\r\\n\\t\\tcolor: black;\\r\\n\\t\\tz-index: 1;\\r\\n\\t\\tfont-family: 'Varela Round', sans-serif;\\r\\n\\t\\tmargin-bottom: 11px;\\r\\n\\t\\tbackground: whitesmoke;\\r\\n\\t\\tborder-radius: 51px 21px;\\r\\n\\t\\tpadding: 21px;\\r\\n\\t\\tpadding-top: 7px;\\r\\n\\t\\tpadding-bottom: 7px;\\r\\n\\t}\\r\\n\\t.content {\\r\\n\\t\\tfont-size: 18px;\\r\\n\\t\\tcolor: white;\\r\\n\\t\\tfont-weight: 300;\\r\\n\\t\\tfont-family: 'Baloo Paaji 2', cursive;\\r\\n\\t}\\r\\n\\t@media only screen and (min-width: 750px) {\\r\\n\\t\\t.number {\\r\\n\\t\\t\\ttop: calc(35% - 40px);\\r\\n\\t\\t\\tright: calc(35% - 40px);\\r\\n\\t\\t\\tcolor: whitesmoke;\\r\\n\\t\\t}\\r\\n\\t\\t.goalCard:hover .number {\\r\\n\\t\\t\\ttop: -20px;\\r\\n\\t\\t\\tright: 20px;\\r\\n\\t\\t\\tcolor: rgba(255, 255, 255, 0.05);\\r\\n\\t\\t}\\r\\n\\t\\t.title {\\r\\n\\t\\t\\ttransform: translateY(-150px);\\r\\n\\t\\t\\ttransition: 0.7s;\\r\\n\\t\\t\\topacity: 0;\\r\\n\\t\\t}\\r\\n\\t\\t.goalCard:hover .title {\\r\\n\\t\\t\\ttransform: translateY(0);\\r\\n\\t\\t\\topacity: 1;\\r\\n\\t\\t}\\r\\n\\t\\t.content {\\r\\n\\t\\t\\ttransform: translateY(200px);\\r\\n\\t\\t\\ttransition: 0.7s;\\r\\n\\t\\t\\topacity: 0;\\r\\n\\t\\t}\\r\\n\\t\\t.goalCard:hover .content {\\r\\n\\t\\t\\ttransform: translateY(0);\\r\\n\\t\\t\\topacity: 1;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAYC,SAAS,8BAAC,CAAC,AACV,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,GAAG,CACZ,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC7C,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACpC,QAAQ,CAAE,MAAM,CAChB,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC9C,WAAW,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAC/C,eAAe,CAAE,KAAK,GAAG,CAAC,CAC1B,OAAO,CAAE,IAAI,CACb,UAAU,CAAE,MAAM,CAClB,UAAU,CAAE,IAAI,CAChB,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,IAAI,AACb,CAAC,AACD,OAAO,8BAAC,CAAC,AACR,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,CACV,KAAK,CAAE,IAAI,CACX,SAAS,CAAE,GAAG,CACd,KAAK,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAChC,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,UAAU,CAAE,IAAI,AACjB,CAAC,AACD,MAAM,8BAAC,CAAC,AACP,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,cAAc,CAAC,CAAC,UAAU,CACvC,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,UAAU,CACtB,aAAa,CAAE,IAAI,CAAC,IAAI,CACxB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,GAAG,CAChB,cAAc,CAAE,GAAG,AACpB,CAAC,AACD,QAAQ,8BAAC,CAAC,AACT,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,eAAe,CAAC,CAAC,OAAO,AACtC,CAAC,AACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1C,OAAO,8BAAC,CAAC,AACR,GAAG,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CACrB,KAAK,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CACvB,KAAK,CAAE,UAAU,AAClB,CAAC,AACD,wBAAS,MAAM,CAAC,OAAO,eAAC,CAAC,AACxB,GAAG,CAAE,KAAK,CACV,KAAK,CAAE,IAAI,CACX,KAAK,CAAE,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,AACjC,CAAC,AACD,MAAM,8BAAC,CAAC,AACP,SAAS,CAAE,WAAW,MAAM,CAAC,CAC7B,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,CAAC,AACX,CAAC,AACD,wBAAS,MAAM,CAAC,MAAM,eAAC,CAAC,AACvB,SAAS,CAAE,WAAW,CAAC,CAAC,CACxB,OAAO,CAAE,CAAC,AACX,CAAC,AACD,QAAQ,8BAAC,CAAC,AACT,SAAS,CAAE,WAAW,KAAK,CAAC,CAC5B,UAAU,CAAE,IAAI,CAChB,OAAO,CAAE,CAAC,AACX,CAAC,AACD,wBAAS,MAAM,CAAC,QAAQ,eAAC,CAAC,AACzB,SAAS,CAAE,WAAW,CAAC,CAAC,CACxB,OAAO,CAAE,CAAC,AACX,CAAC,AACF,CAAC"}`
};
var GoalCard = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { goalNumber } = $$props;
  let { content } = $$props;
  if ($$props.goalNumber === void 0 && $$bindings.goalNumber && goalNumber !== void 0)
    $$bindings.goalNumber(goalNumber);
  if ($$props.content === void 0 && $$bindings.content && content !== void 0)
    $$bindings.content(content);
  $$result.css.add(css$d);
  return `<div class="${"goalCard svelte-14o77jh"}"><h2 class="${"number svelte-14o77jh"}">0${escape2(goalNumber)}</h2>
	<h3 class="${"title svelte-14o77jh"}">Goal ${escape2(goalNumber)}</h3>
	<p class="${"content svelte-14o77jh"}">${escape2(content)}</p>
</div>`;
});
var goals_svelte_svelte_type_style_lang = ".goalsContainer.svelte-10tut6w{width:100%;padding-top:121px;padding-bottom:111px;background:url('/blob-scene.svg');background-repeat:no-repeat;background-position:center;background-size:cover;position:relative}.goalsContainer.svelte-10tut6w::before{content:'';position:absolute;top:-1px;background:linear-gradient(#1c0522, transparent);height:150px;width:100%;z-index:1}.goalsContainer.svelte-10tut6w::after{content:'';position:absolute;bottom:-1px;background:linear-gradient(transparent, #1c0522);height:150px;width:100%;z-index:1}.goalTitle.svelte-10tut6w{font-size:21px;font-family:'Merienda', cursive;color:#1c0522;border-radius:44px;background:white;display:inline-block;padding-top:11px;padding-bottom:11px;width:150px;text-align:center;margin-left:calc(50% - 75px);margin-bottom:21px;z-index:5}.goals.svelte-10tut6w{display:flex;justify-content:center;align-items:center;flex-wrap:wrap}@media only screen and (max-width: 675px){.goalsContainer.svelte-10tut6w{background:url('/blob-scene-tab.svg')}}@media only screen and (max-width: 525px){.goalsContainer.svelte-10tut6w{background:url('/blob-scene-mobile.svg');padding-bottom:60px}}";
var css$c = {
  code: ".goalsContainer.svelte-10tut6w{width:100%;padding-top:121px;padding-bottom:111px;background:url('/blob-scene.svg');background-repeat:no-repeat;background-position:center;background-size:cover;position:relative}.goalsContainer.svelte-10tut6w::before{content:'';position:absolute;top:-1px;background:linear-gradient(#1c0522, transparent);height:150px;width:100%;z-index:1}.goalsContainer.svelte-10tut6w::after{content:'';position:absolute;bottom:-1px;background:linear-gradient(transparent, #1c0522);height:150px;width:100%;z-index:1}.goalTitle.svelte-10tut6w{font-size:21px;font-family:'Merienda', cursive;color:#1c0522;border-radius:44px;background:white;display:inline-block;padding-top:11px;padding-bottom:11px;width:150px;text-align:center;margin-left:calc(50% - 75px);margin-bottom:21px;z-index:5}.goals.svelte-10tut6w{display:flex;justify-content:center;align-items:center;flex-wrap:wrap}@media only screen and (max-width: 675px){.goalsContainer.svelte-10tut6w{background:url('/blob-scene-tab.svg')}}@media only screen and (max-width: 525px){.goalsContainer.svelte-10tut6w{background:url('/blob-scene-mobile.svg');padding-bottom:60px}}",
  map: `{"version":3,"file":"goals.svelte","sources":["goals.svelte"],"sourcesContent":["<script>\\r\\n\\timport GoalCard from './goalCard.svelte';\\r\\n\\r\\n\\tlet goalCardData = [\\r\\n\\t\\t{\\r\\n\\t\\t\\tgoalNumber: 1,\\r\\n\\t\\t\\tcontent: 'To protect you online by protecting your CounterSigns/Passwords.'\\r\\n\\t\\t},\\r\\n\\t\\t{\\r\\n\\t\\t\\tgoalNumber: 2,\\r\\n\\t\\t\\tcontent:\\r\\n\\t\\t\\t\\t'To not let you go out of memory by remembering your passwords for any login able thing.'\\r\\n\\t\\t},\\r\\n\\t\\t{\\r\\n\\t\\t\\tgoalNumber: 3,\\r\\n\\t\\t\\tcontent:\\r\\n\\t\\t\\t\\t'To provide a single, dedicated & trustworthy place to store your CounterSigns/Passwords.'\\r\\n\\t\\t},\\r\\n\\t\\t{\\r\\n\\t\\t\\tgoalNumber: 4,\\r\\n\\t\\t\\tcontent:\\r\\n\\t\\t\\t\\t'To keep your credentials secure from those online thieves who can attack you anytime.'\\r\\n\\t\\t}\\r\\n\\t];\\r\\n<\/script>\\r\\n\\r\\n<div class=\\"goalsContainer\\">\\r\\n\\t<h2 class=\\"goalTitle\\">Our Goals</h2>\\r\\n\\t<div class=\\"goals\\">\\r\\n\\t\\t{#each goalCardData as goalCard (goalCard.goalNumber)}\\r\\n\\t\\t\\t<GoalCard goalNumber={goalCard.goalNumber} content={goalCard.content} />\\r\\n\\t\\t{/each}\\r\\n\\t</div>\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n\\t.goalsContainer {\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\tpadding-top: 121px;\\r\\n\\t\\tpadding-bottom: 111px;\\r\\n\\t\\tbackground: url('/blob-scene.svg');\\r\\n\\t\\tbackground-repeat: no-repeat;\\r\\n\\t\\tbackground-position: center;\\r\\n\\t\\tbackground-size: cover;\\r\\n\\t\\tposition: relative;\\r\\n\\t}\\r\\n\\t.goalsContainer::before {\\r\\n\\t\\tcontent: '';\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttop: -1px;\\r\\n\\t\\tbackground: linear-gradient(#1c0522, transparent);\\r\\n\\t\\theight: 150px;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\tz-index: 1;\\r\\n\\t}\\r\\n\\t.goalsContainer::after {\\r\\n\\t\\tcontent: '';\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\tbottom: -1px;\\r\\n\\t\\tbackground: linear-gradient(transparent, #1c0522);\\r\\n\\t\\theight: 150px;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\tz-index: 1;\\r\\n\\t}\\r\\n\\t.goalTitle {\\r\\n\\t\\tfont-size: 21px;\\r\\n\\t\\tfont-family: 'Merienda', cursive;\\r\\n\\t\\tcolor: #1c0522;\\r\\n\\t\\tborder-radius: 44px;\\r\\n\\t\\tbackground: white;\\r\\n\\t\\tdisplay: inline-block;\\r\\n\\t\\tpadding-top: 11px;\\r\\n\\t\\tpadding-bottom: 11px;\\r\\n\\t\\twidth: 150px;\\r\\n\\t\\ttext-align: center;\\r\\n\\t\\tmargin-left: calc(50% - 75px);\\r\\n\\t\\tmargin-bottom: 21px;\\r\\n\\t\\tz-index: 5;\\r\\n\\t}\\r\\n\\t.goals {\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tflex-wrap: wrap;\\r\\n\\t}\\r\\n\\t@media only screen and (max-width: 675px) {\\r\\n\\t\\t.goalsContainer {\\r\\n\\t\\t\\tbackground: url('/blob-scene-tab.svg');\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t@media only screen and (max-width: 525px) {\\r\\n\\t\\t.goalsContainer {\\r\\n\\t\\t\\tbackground: url('/blob-scene-mobile.svg');\\r\\n\\t\\t\\tpadding-bottom: 60px;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAoCC,eAAe,eAAC,CAAC,AAChB,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,KAAK,CAClB,cAAc,CAAE,KAAK,CACrB,UAAU,CAAE,IAAI,iBAAiB,CAAC,CAClC,iBAAiB,CAAE,SAAS,CAC5B,mBAAmB,CAAE,MAAM,CAC3B,eAAe,CAAE,KAAK,CACtB,QAAQ,CAAE,QAAQ,AACnB,CAAC,AACD,8BAAe,QAAQ,AAAC,CAAC,AACxB,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,IAAI,CACT,UAAU,CAAE,gBAAgB,OAAO,CAAC,CAAC,WAAW,CAAC,CACjD,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,CAAC,AACX,CAAC,AACD,8BAAe,OAAO,AAAC,CAAC,AACvB,OAAO,CAAE,EAAE,CACX,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,gBAAgB,WAAW,CAAC,CAAC,OAAO,CAAC,CACjD,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,CAAC,AACX,CAAC,AACD,UAAU,eAAC,CAAC,AACX,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,UAAU,CAAC,CAAC,OAAO,CAChC,KAAK,CAAE,OAAO,CACd,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,YAAY,CACrB,WAAW,CAAE,IAAI,CACjB,cAAc,CAAE,IAAI,CACpB,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,MAAM,CAClB,WAAW,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CAC7B,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,CAAC,AACX,CAAC,AACD,MAAM,eAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,IAAI,AAChB,CAAC,AACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1C,eAAe,eAAC,CAAC,AAChB,UAAU,CAAE,IAAI,qBAAqB,CAAC,AACvC,CAAC,AACF,CAAC,AACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1C,eAAe,eAAC,CAAC,AAChB,UAAU,CAAE,IAAI,wBAAwB,CAAC,CACzC,cAAc,CAAE,IAAI,AACrB,CAAC,AACF,CAAC"}`
};
var Goals = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let goalCardData = [
    {
      goalNumber: 1,
      content: "To protect you online by protecting your CounterSigns/Passwords."
    },
    {
      goalNumber: 2,
      content: "To not let you go out of memory by remembering your passwords for any login able thing."
    },
    {
      goalNumber: 3,
      content: "To provide a single, dedicated & trustworthy place to store your CounterSigns/Passwords."
    },
    {
      goalNumber: 4,
      content: "To keep your credentials secure from those online thieves who can attack you anytime."
    }
  ];
  $$result.css.add(css$c);
  return `<div class="${"goalsContainer svelte-10tut6w"}"><h2 class="${"goalTitle svelte-10tut6w"}">Our Goals</h2>
	<div class="${"goals svelte-10tut6w"}">${each(goalCardData, (goalCard) => `${validate_component(GoalCard, "GoalCard").$$render($$result, {
    goalNumber: goalCard.goalNumber,
    content: goalCard.content
  }, {}, {})}`)}</div>
</div>`;
});
var index_svelte_svelte_type_style_lang$1 = "main.svelte-tzsrkx{min-height:100vh;width:100vw;background:linear-gradient(#2b1055, #7597de);overflow-x:hidden}.content.svelte-tzsrkx{position:relative;background:#1c0522;padding-top:111px}";
var css$b = {
  code: "main.svelte-tzsrkx{min-height:100vh;width:100vw;background:linear-gradient(#2b1055, #7597de);overflow-x:hidden}.content.svelte-tzsrkx{position:relative;background:#1c0522;padding-top:111px}",
  map: `{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script>\\r\\n\\timport ParallaxHero from '../components/landing/parallaxHero.svelte';\\r\\n\\timport { blur } from 'svelte/transition';\\r\\n\\timport WavedTagline from '../components/landing/wavedTagline.svelte';\\r\\n\\timport Footer from '../components/landing/footer.svelte';\\r\\n\\timport Goals from '../components/landing/goals.svelte';\\r\\n\\r\\n\\tlet scrollY;\\r\\n<\/script>\\r\\n\\r\\n<svelte:window bind:scrollY />\\r\\n<svelte:head>\\r\\n\\t<title>SignCounter | Landing page</title>\\r\\n</svelte:head>\\r\\n<main>\\r\\n\\t<ParallaxHero {scrollY} />\\r\\n\\t<div class=\\"content\\" in:blur|local>\\r\\n\\t\\t<WavedTagline />\\r\\n\\t\\t<Goals />\\r\\n\\t</div>\\r\\n\\t<Footer />\\r\\n</main>\\r\\n\\r\\n<style>\\r\\n\\tmain {\\r\\n\\t\\tmin-height: 100vh;\\r\\n\\t\\twidth: 100vw;\\r\\n\\t\\tbackground: linear-gradient(#2b1055, #7597de);\\r\\n\\t\\toverflow-x: hidden;\\r\\n\\t}\\r\\n\\t.content {\\r\\n\\t\\tposition: relative;\\r\\n\\t\\tbackground: #1c0522;\\r\\n\\t\\tpadding-top: 111px;\\r\\n\\t\\t/* height: 500vh; */\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAwBC,IAAI,cAAC,CAAC,AACL,UAAU,CAAE,KAAK,CACjB,KAAK,CAAE,KAAK,CACZ,UAAU,CAAE,gBAAgB,OAAO,CAAC,CAAC,OAAO,CAAC,CAC7C,UAAU,CAAE,MAAM,AACnB,CAAC,AACD,QAAQ,cAAC,CAAC,AACT,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,OAAO,CACnB,WAAW,CAAE,KAAK,AAEnB,CAAC"}`
};
var Routes = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let scrollY;
  $$result.css.add(css$b);
  return `
${$$result.head += `${$$result.title = `<title>SignCounter | Landing page</title>`, ""}`, ""}
<main class="${"svelte-tzsrkx"}">${validate_component(ParallaxHero, "ParallaxHero").$$render($$result, { scrollY }, {}, {})}
	<div class="${"content svelte-tzsrkx"}">${validate_component(WavedTagline, "WavedTagline").$$render($$result, {}, {}, {})}
		${validate_component(Goals, "Goals").$$render($$result, {}, {}, {})}</div>
	${validate_component(Footer, "Footer").$$render($$result, {}, {}, {})}
</main>`;
});
var index$1 = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Routes
});
var subscriber_queue = [];
function writable(value, start = noop$3) {
  let stop;
  const subscribers = new Set();
  function set(new_value) {
    if (safe_not_equal(value, new_value)) {
      value = new_value;
      if (stop) {
        const run_queue = !subscriber_queue.length;
        for (const subscriber of subscribers) {
          subscriber[1]();
          subscriber_queue.push(subscriber, value);
        }
        if (run_queue) {
          for (let i = 0; i < subscriber_queue.length; i += 2) {
            subscriber_queue[i][0](subscriber_queue[i + 1]);
          }
          subscriber_queue.length = 0;
        }
      }
    }
  }
  function update(fn) {
    set(fn(value));
  }
  function subscribe2(run2, invalidate = noop$3) {
    const subscriber = [run2, invalidate];
    subscribers.add(subscriber);
    if (subscribers.size === 1) {
      stop = start(set) || noop$3;
    }
    run2(value);
    return () => {
      subscribers.delete(subscriber);
      if (subscribers.size === 0) {
        stop();
        stop = null;
      }
    };
  }
  return { set, update, subscribe: subscribe2 };
}
var user = writable(null);
var getStores = () => {
  const stores = getContext("__svelte__");
  return {
    page: {
      subscribe: stores.page.subscribe
    },
    navigating: {
      subscribe: stores.navigating.subscribe
    },
    get preloading() {
      console.error("stores.preloading is deprecated; use stores.navigating instead");
      return {
        subscribe: stores.navigating.subscribe
      };
    },
    session: stores.session
  };
};
var page = {
  subscribe(fn) {
    const store = getStores().page;
    return store.subscribe(fn);
  }
};
var bottomNav_svelte_svelte_type_style_lang = ".bottomNav.svelte-o1m2ae.svelte-o1m2ae{height:60px;width:98%;margin-left:1%;margin-right:1%;margin-bottom:4px;border-radius:51px;background:#212121;display:flex;justify-content:space-between;align-items:center;box-shadow:0px 2px 11px 1px}.links.svelte-o1m2ae.svelte-o1m2ae{padding:0;margin:0;width:100%;height:100%;text-align:center;display:flex;justify-content:space-evenly;align-items:center;position:relative;user-select:none}.link.svelte-o1m2ae.svelte-o1m2ae{list-style:none;font-weight:bold;font-size:large;font-family:'Blinker', sans-serif;width:100%;height:100%;z-index:1;user-select:none}.link.svelte-o1m2ae a.svelte-o1m2ae{width:100%;height:100%;text-decoration:none;color:grey;transition:all 251ms;user-select:none;display:grid;place-items:center}a.svelte-o1m2ae.svelte-o1m2ae:hover{color:white}.active.svelte-o1m2ae.svelte-o1m2ae{color:black !important}.tab.svelte-o1m2ae.svelte-o1m2ae{display:flex;align-items:center;max-width:24px;overflow:hidden;transition:721ms}.activeTab.svelte-o1m2ae.svelte-o1m2ae{max-width:110px}.icon.svelte-o1m2ae.svelte-o1m2ae{font-size:24px}.tab-text.svelte-o1m2ae.svelte-o1m2ae{font-size:15px}.indicator.svelte-o1m2ae.svelte-o1m2ae{position:absolute;width:50px;height:44px;background:white;z-index:0;border-radius:51px;transition:all 444ms cubic-bezier(0.5, -0.5, 0.5, 1.5);color:transparent}@media only screen and (min-width: 750px){.bottomNav.svelte-o1m2ae.svelte-o1m2ae{display:none}}";
var css$a = {
  code: ".bottomNav.svelte-o1m2ae.svelte-o1m2ae{height:60px;width:98%;margin-left:1%;margin-right:1%;margin-bottom:4px;border-radius:51px;background:#212121;display:flex;justify-content:space-between;align-items:center;box-shadow:0px 2px 11px 1px}.links.svelte-o1m2ae.svelte-o1m2ae{padding:0;margin:0;width:100%;height:100%;text-align:center;display:flex;justify-content:space-evenly;align-items:center;position:relative;user-select:none}.link.svelte-o1m2ae.svelte-o1m2ae{list-style:none;font-weight:bold;font-size:large;font-family:'Blinker', sans-serif;width:100%;height:100%;z-index:1;user-select:none}.link.svelte-o1m2ae a.svelte-o1m2ae{width:100%;height:100%;text-decoration:none;color:grey;transition:all 251ms;user-select:none;display:grid;place-items:center}a.svelte-o1m2ae.svelte-o1m2ae:hover{color:white}.active.svelte-o1m2ae.svelte-o1m2ae{color:black !important}.tab.svelte-o1m2ae.svelte-o1m2ae{display:flex;align-items:center;max-width:24px;overflow:hidden;transition:721ms}.activeTab.svelte-o1m2ae.svelte-o1m2ae{max-width:110px}.icon.svelte-o1m2ae.svelte-o1m2ae{font-size:24px}.tab-text.svelte-o1m2ae.svelte-o1m2ae{font-size:15px}.indicator.svelte-o1m2ae.svelte-o1m2ae{position:absolute;width:50px;height:44px;background:white;z-index:0;border-radius:51px;transition:all 444ms cubic-bezier(0.5, -0.5, 0.5, 1.5);color:transparent}@media only screen and (min-width: 750px){.bottomNav.svelte-o1m2ae.svelte-o1m2ae{display:none}}",
  map: `{"version":3,"file":"bottomNav.svelte","sources":["bottomNav.svelte"],"sourcesContent":["<script>\\r\\n\\timport { page } from '$app/stores';\\r\\n\\timport { fly } from 'svelte/transition';\\r\\n<\/script>\\r\\n\\r\\n<div class=\\"bottomNav\\">\\r\\n\\t<ul class=\\"links\\">\\r\\n\\t\\t<li\\r\\n\\t\\t\\tclass=\\"indicator\\"\\r\\n\\t\\t\\tstyle=\\"left: {$page.path === '/dashboard' ? 'calc(25% - 54px)' : 'calc(75% - 58px)'}; \\r\\n\\t\\t\\t\\twidth: {$page.path === '/dashboard' ? '100px' : '124px'}\\"\\r\\n\\t\\t/>\\r\\n\\t\\t<li class=\\"link\\">\\r\\n\\t\\t\\t<a href=\\"/dashboard\\" class:active={$page.path === '/dashboard'}>\\r\\n\\t\\t\\t\\t<div class=\\"tab\\" class:activeTab={$page.path === '/dashboard'}>\\r\\n\\t\\t\\t\\t\\t<span class=\\"material-icons-round icon\\"> house </span>\\r\\n\\t\\t\\t\\t\\t<span class=\\"tab-text\\">&nbsp;Home</span>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</a>\\r\\n\\t\\t</li>\\r\\n\\t\\t&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n\\t\\t<li class=\\"link\\">\\r\\n\\t\\t\\t<a href=\\"/dashboard/manage\\" class:active={$page.path === '/dashboard/manage'}>\\r\\n\\t\\t\\t\\t<div class=\\"tab\\" class:activeTab={$page.path === '/dashboard/manage'}>\\r\\n\\t\\t\\t\\t\\t<span class=\\"material-icons-round icon\\"> manage_accounts </span>\\r\\n\\t\\t\\t\\t\\t<span class=\\"tab-text\\">&nbsp;Manage</span>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</a>\\r\\n\\t\\t</li>\\r\\n\\t</ul>\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n\\t.bottomNav {\\r\\n\\t\\theight: 60px;\\r\\n\\t\\twidth: 98%;\\r\\n\\t\\tmargin-left: 1%;\\r\\n\\t\\tmargin-right: 1%;\\r\\n\\t\\tmargin-bottom: 4px;\\r\\n\\t\\tborder-radius: 51px;\\r\\n\\t\\tbackground: #212121;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tjustify-content: space-between;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tbox-shadow: 0px 2px 11px 1px;\\r\\n\\t}\\r\\n\\t.links {\\r\\n\\t\\tpadding: 0;\\r\\n\\t\\tmargin: 0;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 100%;\\r\\n\\t\\ttext-align: center;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tjustify-content: space-evenly;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tposition: relative;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n\\t.link {\\r\\n\\t\\tlist-style: none;\\r\\n\\t\\tfont-weight: bold;\\r\\n\\t\\tfont-size: large;\\r\\n\\t\\tfont-family: 'Blinker', sans-serif;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 100%;\\r\\n\\t\\tz-index: 1;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n\\t.link a {\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 100%;\\r\\n\\t\\ttext-decoration: none;\\r\\n\\t\\tcolor: grey;\\r\\n\\t\\ttransition: all 251ms;\\r\\n\\t\\tuser-select: none;\\r\\n\\t\\tdisplay: grid;\\r\\n\\t\\tplace-items: center;\\r\\n\\t}\\r\\n\\ta:hover {\\r\\n\\t\\tcolor: white;\\r\\n\\t}\\r\\n\\t.active {\\r\\n\\t\\tcolor: black !important;\\r\\n\\t}\\r\\n\\t.tab {\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tmax-width: 24px;\\r\\n\\t\\toverflow: hidden;\\r\\n\\t\\ttransition: 721ms;\\r\\n\\t}\\r\\n\\t.activeTab {\\r\\n\\t\\tmax-width: 110px;\\r\\n\\t}\\r\\n\\t.icon {\\r\\n\\t\\tfont-size: 24px;\\r\\n\\t}\\r\\n\\t.tab-text {\\r\\n\\t\\tfont-size: 15px;\\r\\n\\t}\\r\\n\\t.indicator {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\twidth: 50px;\\r\\n\\t\\theight: 44px;\\r\\n\\t\\tbackground: white;\\r\\n\\t\\tz-index: 0;\\r\\n\\t\\tborder-radius: 51px;\\r\\n\\t\\ttransition: all 444ms cubic-bezier(0.5, -0.5, 0.5, 1.5);\\r\\n\\t\\tcolor: transparent;\\r\\n\\t}\\r\\n\\t@media only screen and (min-width: 750px) {\\r\\n\\t\\t.bottomNav {\\r\\n\\t\\t\\tdisplay: none;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAiCC,UAAU,4BAAC,CAAC,AACX,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,EAAE,CACf,YAAY,CAAE,EAAE,CAChB,aAAa,CAAE,GAAG,CAClB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,AAC7B,CAAC,AACD,MAAM,4BAAC,CAAC,AACP,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,YAAY,CAC7B,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,QAAQ,CAClB,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,mBAAK,CAAC,CAAC,cAAC,CAAC,AACR,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,eAAe,CAAE,IAAI,CACrB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,GAAG,CAAC,KAAK,CACrB,WAAW,CAAE,IAAI,CACjB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,AACpB,CAAC,AACD,6BAAC,MAAM,AAAC,CAAC,AACR,KAAK,CAAE,KAAK,AACb,CAAC,AACD,OAAO,4BAAC,CAAC,AACR,KAAK,CAAE,KAAK,CAAC,UAAU,AACxB,CAAC,AACD,IAAI,4BAAC,CAAC,AACL,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,MAAM,CAChB,UAAU,CAAE,KAAK,AAClB,CAAC,AACD,UAAU,4BAAC,CAAC,AACX,SAAS,CAAE,KAAK,AACjB,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,SAAS,CAAE,IAAI,AAChB,CAAC,AACD,SAAS,4BAAC,CAAC,AACV,SAAS,CAAE,IAAI,AAChB,CAAC,AACD,UAAU,4BAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,CAAC,CACV,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACvD,KAAK,CAAE,WAAW,AACnB,CAAC,AACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1C,UAAU,4BAAC,CAAC,AACX,OAAO,CAAE,IAAI,AACd,CAAC,AACF,CAAC"}`
};
var BottomNav = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $page, $$unsubscribe_page;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  $$result.css.add(css$a);
  $$unsubscribe_page();
  return `<div class="${"bottomNav svelte-o1m2ae"}"><ul class="${"links svelte-o1m2ae"}"><li class="${"indicator svelte-o1m2ae"}" style="${"left: " + escape2($page.path === "/dashboard" ? "calc(25% - 54px)" : "calc(75% - 58px)") + "; width: " + escape2($page.path === "/dashboard" ? "100px" : "124px")}"></li>
		<li class="${"link svelte-o1m2ae"}"><a href="${"/dashboard"}" class="${["svelte-o1m2ae", $page.path === "/dashboard" ? "active" : ""].join(" ").trim()}"><div class="${["tab svelte-o1m2ae", $page.path === "/dashboard" ? "activeTab" : ""].join(" ").trim()}"><span class="${"material-icons-round icon svelte-o1m2ae"}">house </span>
					<span class="${"tab-text svelte-o1m2ae"}">\xA0Home</span></div></a></li>
		\xA0\xA0\xA0\xA0
		<li class="${"link svelte-o1m2ae"}"><a href="${"/dashboard/manage"}" class="${["svelte-o1m2ae", $page.path === "/dashboard/manage" ? "active" : ""].join(" ").trim()}"><div class="${["tab svelte-o1m2ae", $page.path === "/dashboard/manage" ? "activeTab" : ""].join(" ").trim()}"><span class="${"material-icons-round icon svelte-o1m2ae"}">manage_accounts </span>
					<span class="${"tab-text svelte-o1m2ae"}">\xA0Manage</span></div></a></li></ul>
</div>`;
});
var navbar_svelte_svelte_type_style_lang = ".nav.svelte-8xn891.svelte-8xn891{height:75px;width:100%;background:#212121;display:flex;justify-content:space-between;align-items:center;box-shadow:0px 2px 11px 1px}.logo.svelte-8xn891.svelte-8xn891{margin-left:21px;cursor:pointer;margin-top:11px}.right.svelte-8xn891.svelte-8xn891{display:flex;align-items:center;margin-right:21px}.links.svelte-8xn891.svelte-8xn891{padding:0;margin:0;text-align:center;display:flex;align-items:center;position:relative;user-select:none}.link.svelte-8xn891.svelte-8xn891{list-style:none;font-weight:bold;font-size:large;font-family:'Blinker', sans-serif;width:100px;z-index:1;user-select:none}.link.svelte-8xn891 a.svelte-8xn891{text-decoration:none;color:grey;transition:all 251ms;user-select:none}a.svelte-8xn891.svelte-8xn891:hover{color:white}.active.svelte-8xn891.svelte-8xn891{color:black !important}.logoutIcon.svelte-8xn891.svelte-8xn891{margin-left:21px;background:#cf6679;padding:11px;border-radius:50%;cursor:pointer}.indicator.svelte-8xn891.svelte-8xn891{position:absolute;width:100px;height:44px;background:white;z-index:0;border-radius:51px;transition:all 444ms cubic-bezier(0.5, -0.5, 0.5, 1.5);color:transparent}@media only screen and (max-width: 750px){.links.svelte-8xn891.svelte-8xn891{display:none}}";
var css$9 = {
  code: ".nav.svelte-8xn891.svelte-8xn891{height:75px;width:100%;background:#212121;display:flex;justify-content:space-between;align-items:center;box-shadow:0px 2px 11px 1px}.logo.svelte-8xn891.svelte-8xn891{margin-left:21px;cursor:pointer;margin-top:11px}.right.svelte-8xn891.svelte-8xn891{display:flex;align-items:center;margin-right:21px}.links.svelte-8xn891.svelte-8xn891{padding:0;margin:0;text-align:center;display:flex;align-items:center;position:relative;user-select:none}.link.svelte-8xn891.svelte-8xn891{list-style:none;font-weight:bold;font-size:large;font-family:'Blinker', sans-serif;width:100px;z-index:1;user-select:none}.link.svelte-8xn891 a.svelte-8xn891{text-decoration:none;color:grey;transition:all 251ms;user-select:none}a.svelte-8xn891.svelte-8xn891:hover{color:white}.active.svelte-8xn891.svelte-8xn891{color:black !important}.logoutIcon.svelte-8xn891.svelte-8xn891{margin-left:21px;background:#cf6679;padding:11px;border-radius:50%;cursor:pointer}.indicator.svelte-8xn891.svelte-8xn891{position:absolute;width:100px;height:44px;background:white;z-index:0;border-radius:51px;transition:all 444ms cubic-bezier(0.5, -0.5, 0.5, 1.5);color:transparent}@media only screen and (max-width: 750px){.links.svelte-8xn891.svelte-8xn891{display:none}}",
  map: `{"version":3,"file":"navbar.svelte","sources":["navbar.svelte"],"sourcesContent":["<script>\\r\\n\\timport { goto } from '$app/navigation';\\r\\n\\r\\n\\timport { page } from '$app/stores';\\r\\n\\timport { getAuth } from 'firebase/auth';\\r\\n\\timport { getFirebaseApp } from '../../services/firebase';\\r\\n\\r\\n\\tconst logout = () => {\\r\\n\\t\\tlocalStorage.clear();\\r\\n\\t\\tgetAuth(getFirebaseApp()).signOut();\\r\\n\\t\\tgoto('/');\\r\\n\\t};\\r\\n<\/script>\\r\\n\\r\\n<svelte:head>\\r\\n\\t<link href=\\"https://fonts.googleapis.com/css2?family=Blinker&display=swap\\" rel=\\"stylesheet\\" />\\r\\n</svelte:head>\\r\\n<nav class=\\"nav\\">\\r\\n\\t<a href=\\"/\\">\\r\\n\\t\\t<img class=\\"logo\\" src=\\"/logo.svg\\" alt=\\"\\" />\\r\\n\\t</a>\\r\\n\\t<div class=\\"right\\">\\r\\n\\t\\t<ul class=\\"links\\">\\r\\n\\t\\t\\t<li\\r\\n\\t\\t\\t\\tclass=\\"indicator\\"\\r\\n\\t\\t\\t\\tstyle=\\"left: {$page.path === '/dashboard' ? 0 : 'calc(100% - 100px)'};\\"\\r\\n\\t\\t\\t/>\\r\\n\\t\\t\\t<li class=\\"link\\">\\r\\n\\t\\t\\t\\t<a href=\\"/dashboard\\" class:active={$page.path === '/dashboard'}>Home</a>\\r\\n\\t\\t\\t</li>\\r\\n\\t\\t\\t&nbsp;&nbsp;&nbsp;&nbsp;\\r\\n\\t\\t\\t<li class=\\"link\\">\\r\\n\\t\\t\\t\\t<a href=\\"/dashboard/manage\\" class:active={$page.path === '/dashboard/manage'}>Manage</a>\\r\\n\\t\\t\\t</li>\\r\\n\\t\\t</ul>\\r\\n\\t\\t<span class=\\"material-icons-round logoutIcon\\" on:click={logout}> logout </span>\\r\\n\\t</div>\\r\\n</nav>\\r\\n\\r\\n<style>\\r\\n\\t.nav {\\r\\n\\t\\theight: 75px;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\tbackground: #212121;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tjustify-content: space-between;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tbox-shadow: 0px 2px 11px 1px;\\r\\n\\t}\\r\\n\\t.logo {\\r\\n\\t\\tmargin-left: 21px;\\r\\n\\t\\tcursor: pointer;\\r\\n\\t\\tmargin-top: 11px;\\r\\n\\t}\\r\\n\\t.right {\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tmargin-right: 21px;\\r\\n\\t}\\r\\n\\t.links {\\r\\n\\t\\tpadding: 0;\\r\\n\\t\\tmargin: 0;\\r\\n\\t\\ttext-align: center;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tposition: relative;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n\\t.link {\\r\\n\\t\\tlist-style: none;\\r\\n\\t\\tfont-weight: bold;\\r\\n\\t\\tfont-size: large;\\r\\n\\t\\tfont-family: 'Blinker', sans-serif;\\r\\n\\t\\twidth: 100px;\\r\\n\\t\\tz-index: 1;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n\\t.link a {\\r\\n\\t\\ttext-decoration: none;\\r\\n\\t\\tcolor: grey;\\r\\n\\t\\ttransition: all 251ms;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n\\ta:hover {\\r\\n\\t\\tcolor: white;\\r\\n\\t}\\r\\n\\t.active {\\r\\n\\t\\tcolor: black !important;\\r\\n\\t}\\r\\n\\t.logoutIcon {\\r\\n\\t\\tmargin-left: 21px;\\r\\n\\t\\tbackground: #cf6679;\\r\\n\\t\\tpadding: 11px;\\r\\n\\t\\tborder-radius: 50%;\\r\\n\\t\\tcursor: pointer;\\r\\n\\t}\\r\\n\\t.indicator {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\twidth: 100px;\\r\\n\\t\\theight: 44px;\\r\\n\\t\\tbackground: white;\\r\\n\\t\\tz-index: 0;\\r\\n\\t\\tborder-radius: 51px;\\r\\n\\t\\ttransition: all 444ms cubic-bezier(0.5, -0.5, 0.5, 1.5);\\r\\n\\t\\tcolor: transparent;\\r\\n\\t}\\r\\n\\t@media only screen and (max-width: 750px) {\\r\\n\\t\\t.links {\\r\\n\\t\\t\\tdisplay: none;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAwCC,IAAI,4BAAC,CAAC,AACL,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,aAAa,CAC9B,WAAW,CAAE,MAAM,CACnB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,AAC7B,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,IAAI,AACjB,CAAC,AACD,MAAM,4BAAC,CAAC,AACP,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,YAAY,CAAE,IAAI,AACnB,CAAC,AACD,MAAM,4BAAC,CAAC,AACP,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,QAAQ,CAClB,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,UAAU,CAAE,IAAI,CAChB,WAAW,CAAE,IAAI,CACjB,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,mBAAK,CAAC,CAAC,cAAC,CAAC,AACR,eAAe,CAAE,IAAI,CACrB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,GAAG,CAAC,KAAK,CACrB,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,6BAAC,MAAM,AAAC,CAAC,AACR,KAAK,CAAE,KAAK,AACb,CAAC,AACD,OAAO,4BAAC,CAAC,AACR,KAAK,CAAE,KAAK,CAAC,UAAU,AACxB,CAAC,AACD,WAAW,4BAAC,CAAC,AACZ,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,OAAO,CACnB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,OAAO,AAChB,CAAC,AACD,UAAU,4BAAC,CAAC,AACX,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,CAAC,CACV,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,aAAa,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,CACvD,KAAK,CAAE,WAAW,AACnB,CAAC,AACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1C,MAAM,4BAAC,CAAC,AACP,OAAO,CAAE,IAAI,AACd,CAAC,AACF,CAAC"}`
};
var Navbar = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $page, $$unsubscribe_page;
  $$unsubscribe_page = subscribe(page, (value) => $page = value);
  $$result.css.add(css$9);
  $$unsubscribe_page();
  return `${$$result.head += `<link href="${"https://fonts.googleapis.com/css2?family=Blinker&display=swap"}" rel="${"stylesheet"}" data-svelte="svelte-bgie3x">`, ""}
<nav class="${"nav svelte-8xn891"}"><a href="${"/"}" class="${"svelte-8xn891"}"><img class="${"logo svelte-8xn891"}" src="${"/logo.svg"}" alt="${""}"></a>
	<div class="${"right svelte-8xn891"}"><ul class="${"links svelte-8xn891"}"><li class="${"indicator svelte-8xn891"}" style="${"left: " + escape2($page.path === "/dashboard" ? 0 : "calc(100% - 100px)") + ";"}"></li>
			<li class="${"link svelte-8xn891"}"><a href="${"/dashboard"}" class="${["svelte-8xn891", $page.path === "/dashboard" ? "active" : ""].join(" ").trim()}">Home</a></li>
			\xA0\xA0\xA0\xA0
			<li class="${"link svelte-8xn891"}"><a href="${"/dashboard/manage"}" class="${["svelte-8xn891", $page.path === "/dashboard/manage" ? "active" : ""].join(" ").trim()}">Manage</a></li></ul>
		<span class="${"material-icons-round logoutIcon svelte-8xn891"}">logout </span></div>
</nav>`;
});
var commonjsGlobal = typeof globalThis !== "undefined" ? globalThis : typeof window !== "undefined" ? window : typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : {};
function getAugmentedNamespace(n) {
  if (n.__esModule)
    return n;
  var a = Object.defineProperty({}, "__esModule", { value: true });
  Object.keys(n).forEach(function(k) {
    var d = Object.getOwnPropertyDescriptor(n, k);
    Object.defineProperty(a, k, d.get ? d : {
      enumerable: true,
      get: function() {
        return n[k];
      }
    });
  });
  return a;
}
var index_node_cjs = {};
var tslib$1 = { exports: {} };
(function(module2) {
  var __extends;
  var __assign;
  var __rest2;
  var __decorate;
  var __param;
  var __metadata;
  var __awaiter2;
  var __generator2;
  var __exportStar;
  var __values2;
  var __read2;
  var __spread;
  var __spreadArrays;
  var __spreadArray2;
  var __await;
  var __asyncGenerator;
  var __asyncDelegator;
  var __asyncValues;
  var __makeTemplateObject;
  var __importStar;
  var __importDefault;
  var __classPrivateFieldGet;
  var __classPrivateFieldSet;
  var __createBinding;
  (function(factory2) {
    var root2 = typeof commonjsGlobal === "object" ? commonjsGlobal : typeof self === "object" ? self : typeof this === "object" ? this : {};
    {
      factory2(createExporter(root2, createExporter(module2.exports)));
    }
    function createExporter(exports, previous) {
      if (exports !== root2) {
        if (typeof Object.create === "function") {
          Object.defineProperty(exports, "__esModule", { value: true });
        } else {
          exports.__esModule = true;
        }
      }
      return function(id, v) {
        return exports[id] = previous ? previous(id, v) : v;
      };
    }
  })(function(exporter) {
    var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d, b) {
      d.__proto__ = b;
    } || function(d, b) {
      for (var p in b)
        if (Object.prototype.hasOwnProperty.call(b, p))
          d[p] = b[p];
    };
    __extends = function(d, b) {
      if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
      extendStatics(d, b);
      function __() {
        this.constructor = d;
      }
      d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
    __assign = Object.assign || function(t) {
      for (var s2, i = 1, n = arguments.length; i < n; i++) {
        s2 = arguments[i];
        for (var p in s2)
          if (Object.prototype.hasOwnProperty.call(s2, p))
            t[p] = s2[p];
      }
      return t;
    };
    __rest2 = function(s2, e) {
      var t = {};
      for (var p in s2)
        if (Object.prototype.hasOwnProperty.call(s2, p) && e.indexOf(p) < 0)
          t[p] = s2[p];
      if (s2 != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s2); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s2, p[i]))
            t[p[i]] = s2[p[i]];
        }
      return t;
    };
    __decorate = function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
        r = Reflect.decorate(decorators, target, key, desc);
      else
        for (var i = decorators.length - 1; i >= 0; i--)
          if (d = decorators[i])
            r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    __param = function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    __metadata = function(metadataKey, metadataValue) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
        return Reflect.metadata(metadataKey, metadataValue);
    };
    __awaiter2 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve6) {
          resolve6(value);
        });
      }
      return new (P || (P = Promise))(function(resolve6, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve6(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    __generator2 = function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1)
          throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f)
          throw new TypeError("Generator is already executing.");
        while (_)
          try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
              return t;
            if (y = 0, t)
              op = [op[0] & 2, t.value];
            switch (op[0]) {
              case 0:
              case 1:
                t = op;
                break;
              case 4:
                _.label++;
                return { value: op[1], done: false };
              case 5:
                _.label++;
                y = op[1];
                op = [0];
                continue;
              case 7:
                op = _.ops.pop();
                _.trys.pop();
                continue;
              default:
                if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                  _ = 0;
                  continue;
                }
                if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                  _.label = op[1];
                  break;
                }
                if (op[0] === 6 && _.label < t[1]) {
                  _.label = t[1];
                  t = op;
                  break;
                }
                if (t && _.label < t[2]) {
                  _.label = t[2];
                  _.ops.push(op);
                  break;
                }
                if (t[2])
                  _.ops.pop();
                _.trys.pop();
                continue;
            }
            op = body.call(thisArg, _);
          } catch (e) {
            op = [6, e];
            y = 0;
          } finally {
            f = t = 0;
          }
        if (op[0] & 5)
          throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    __exportStar = function(m, o) {
      for (var p in m)
        if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
          __createBinding(o, m, p);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      Object.defineProperty(o, k2, { enumerable: true, get: function() {
        return m[k];
      } });
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __values2 = function(o) {
      var s2 = typeof Symbol === "function" && Symbol.iterator, m = s2 && o[s2], i = 0;
      if (m)
        return m.call(o);
      if (o && typeof o.length === "number")
        return {
          next: function() {
            if (o && i >= o.length)
              o = void 0;
            return { value: o && o[i++], done: !o };
          }
        };
      throw new TypeError(s2 ? "Object is not iterable." : "Symbol.iterator is not defined.");
    };
    __read2 = function(o, n) {
      var m = typeof Symbol === "function" && o[Symbol.iterator];
      if (!m)
        return o;
      var i = m.call(o), r, ar = [], e;
      try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
          ar.push(r.value);
      } catch (error2) {
        e = { error: error2 };
      } finally {
        try {
          if (r && !r.done && (m = i["return"]))
            m.call(i);
        } finally {
          if (e)
            throw e.error;
        }
      }
      return ar;
    };
    __spread = function() {
      for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read2(arguments[i]));
      return ar;
    };
    __spreadArrays = function() {
      for (var s2 = 0, i = 0, il = arguments.length; i < il; i++)
        s2 += arguments[i].length;
      for (var r = Array(s2), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
          r[k] = a[j];
      return r;
    };
    __spreadArray2 = function(to, from2, pack) {
      if (pack || arguments.length === 2)
        for (var i = 0, l = from2.length, ar; i < l; i++) {
          if (ar || !(i in from2)) {
            if (!ar)
              ar = Array.prototype.slice.call(from2, 0, i);
            ar[i] = from2[i];
          }
        }
      return to.concat(ar || Array.prototype.slice.call(from2));
    };
    __await = function(v) {
      return this instanceof __await ? (this.v = v, this) : new __await(v);
    };
    __asyncGenerator = function(thisArg, _arguments, generator) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var g = generator.apply(thisArg, _arguments || []), i, q = [];
      return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i;
      function verb(n) {
        if (g[n])
          i[n] = function(v) {
            return new Promise(function(a, b) {
              q.push([n, v, a, b]) > 1 || resume(n, v);
            });
          };
      }
      function resume(n, v) {
        try {
          step(g[n](v));
        } catch (e) {
          settle(q[0][3], e);
        }
      }
      function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
      }
      function fulfill(value) {
        resume("next", value);
      }
      function reject(value) {
        resume("throw", value);
      }
      function settle(f, v) {
        if (f(v), q.shift(), q.length)
          resume(q[0][0], q[0][1]);
      }
    };
    __asyncDelegator = function(o) {
      var i, p;
      return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
      }), verb("return"), i[Symbol.iterator] = function() {
        return this;
      }, i;
      function verb(n, f) {
        i[n] = o[n] ? function(v) {
          return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v;
        } : f;
      }
    };
    __asyncValues = function(o) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var m = o[Symbol.asyncIterator], i;
      return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
      }, i);
      function verb(n) {
        i[n] = o[n] && function(v) {
          return new Promise(function(resolve6, reject) {
            v = o[n](v), settle(resolve6, reject, v.done, v.value);
          });
        };
      }
      function settle(resolve6, reject, d, v) {
        Promise.resolve(v).then(function(v2) {
          resolve6({ value: v2, done: d });
        }, reject);
      }
    };
    __makeTemplateObject = function(cooked, raw) {
      if (Object.defineProperty) {
        Object.defineProperty(cooked, "raw", { value: raw });
      } else {
        cooked.raw = raw;
      }
      return cooked;
    };
    var __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    __importStar = function(mod2) {
      if (mod2 && mod2.__esModule)
        return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k in mod2)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k))
            __createBinding(result, mod2, k);
      }
      __setModuleDefault(result, mod2);
      return result;
    };
    __importDefault = function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    __classPrivateFieldGet = function(receiver, state, kind, f) {
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    };
    __classPrivateFieldSet = function(receiver, state, value, kind, f) {
      if (kind === "m")
        throw new TypeError("Private method is not writable");
      if (kind === "a" && !f)
        throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
        throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
    };
    exporter("__extends", __extends);
    exporter("__assign", __assign);
    exporter("__rest", __rest2);
    exporter("__decorate", __decorate);
    exporter("__param", __param);
    exporter("__metadata", __metadata);
    exporter("__awaiter", __awaiter2);
    exporter("__generator", __generator2);
    exporter("__exportStar", __exportStar);
    exporter("__createBinding", __createBinding);
    exporter("__values", __values2);
    exporter("__read", __read2);
    exporter("__spread", __spread);
    exporter("__spreadArrays", __spreadArrays);
    exporter("__spreadArray", __spreadArray2);
    exporter("__await", __await);
    exporter("__asyncGenerator", __asyncGenerator);
    exporter("__asyncDelegator", __asyncDelegator);
    exporter("__asyncValues", __asyncValues);
    exporter("__makeTemplateObject", __makeTemplateObject);
    exporter("__importStar", __importStar);
    exporter("__importDefault", __importDefault);
    exporter("__classPrivateFieldGet", __classPrivateFieldGet);
    exporter("__classPrivateFieldSet", __classPrivateFieldSet);
  });
})(tslib$1);
var require$$2 = /* @__PURE__ */ getAugmentedNamespace(index_esm);
var require$$3$1 = /* @__PURE__ */ getAugmentedNamespace(index_esm2017);
var require$$5$1 = /* @__PURE__ */ getAugmentedNamespace(index_esm2017$1);
var src$2 = {};
var callCredentials = {};
var metadata = {};
var logging$a = {};
var constants = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = exports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = exports.Propagate = exports.LogVerbosity = exports.Status = void 0;
  (function(Status) {
    Status[Status["OK"] = 0] = "OK";
    Status[Status["CANCELLED"] = 1] = "CANCELLED";
    Status[Status["UNKNOWN"] = 2] = "UNKNOWN";
    Status[Status["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
    Status[Status["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
    Status[Status["NOT_FOUND"] = 5] = "NOT_FOUND";
    Status[Status["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
    Status[Status["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
    Status[Status["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
    Status[Status["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
    Status[Status["ABORTED"] = 10] = "ABORTED";
    Status[Status["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
    Status[Status["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
    Status[Status["INTERNAL"] = 13] = "INTERNAL";
    Status[Status["UNAVAILABLE"] = 14] = "UNAVAILABLE";
    Status[Status["DATA_LOSS"] = 15] = "DATA_LOSS";
    Status[Status["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
  })(exports.Status || (exports.Status = {}));
  (function(LogVerbosity) {
    LogVerbosity[LogVerbosity["DEBUG"] = 0] = "DEBUG";
    LogVerbosity[LogVerbosity["INFO"] = 1] = "INFO";
    LogVerbosity[LogVerbosity["ERROR"] = 2] = "ERROR";
    LogVerbosity[LogVerbosity["NONE"] = 3] = "NONE";
  })(exports.LogVerbosity || (exports.LogVerbosity = {}));
  (function(Propagate) {
    Propagate[Propagate["DEADLINE"] = 1] = "DEADLINE";
    Propagate[Propagate["CENSUS_STATS_CONTEXT"] = 2] = "CENSUS_STATS_CONTEXT";
    Propagate[Propagate["CENSUS_TRACING_CONTEXT"] = 4] = "CENSUS_TRACING_CONTEXT";
    Propagate[Propagate["CANCELLATION"] = 8] = "CANCELLATION";
    Propagate[Propagate["DEFAULTS"] = 65535] = "DEFAULTS";
  })(exports.Propagate || (exports.Propagate = {}));
  exports.DEFAULT_MAX_SEND_MESSAGE_LENGTH = -1;
  exports.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH = 4 * 1024 * 1024;
})(constants);
(function(exports) {
  var _a, _b, _c, _d;
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.trace = exports.log = exports.setLoggerVerbosity = exports.setLogger = exports.getLogger = void 0;
  const constants_12 = constants;
  let _logger = console;
  let _logVerbosity = constants_12.LogVerbosity.ERROR;
  const verbosityString = (_b = (_a = {}.GRPC_NODE_VERBOSITY) !== null && _a !== void 0 ? _a : {}.GRPC_VERBOSITY) !== null && _b !== void 0 ? _b : "";
  switch (verbosityString.toUpperCase()) {
    case "DEBUG":
      _logVerbosity = constants_12.LogVerbosity.DEBUG;
      break;
    case "INFO":
      _logVerbosity = constants_12.LogVerbosity.INFO;
      break;
    case "ERROR":
      _logVerbosity = constants_12.LogVerbosity.ERROR;
      break;
    case "NONE":
      _logVerbosity = constants_12.LogVerbosity.NONE;
      break;
  }
  exports.getLogger = () => {
    return _logger;
  };
  exports.setLogger = (logger2) => {
    _logger = logger2;
  };
  exports.setLoggerVerbosity = (verbosity) => {
    _logVerbosity = verbosity;
  };
  exports.log = (severity, ...args) => {
    if (severity >= _logVerbosity && typeof _logger.error === "function") {
      _logger.error(...args);
    }
  };
  const tracersString = (_d = (_c = {}.GRPC_NODE_TRACE) !== null && _c !== void 0 ? _c : {}.GRPC_TRACE) !== null && _d !== void 0 ? _d : "";
  const enabledTracers = new Set();
  const disabledTracers = new Set();
  for (const tracerName of tracersString.split(",")) {
    if (tracerName.startsWith("-")) {
      disabledTracers.add(tracerName.substring(1));
    } else {
      enabledTracers.add(tracerName);
    }
  }
  const allEnabled = enabledTracers.has("all");
  function trace2(severity, tracer, text) {
    if (!disabledTracers.has(tracer) && (allEnabled || enabledTracers.has(tracer))) {
      exports.log(severity, new Date().toISOString() + " | " + tracer + " | " + text);
    }
  }
  exports.trace = trace2;
})(logging$a);
Object.defineProperty(metadata, "__esModule", { value: true });
metadata.Metadata = void 0;
var logging_1$1 = logging$a;
var constants_1$g = constants;
var LEGAL_KEY_REGEX = /^[0-9a-z_.-]+$/;
var LEGAL_NON_BINARY_VALUE_REGEX = /^[ -~]*$/;
function isLegalKey(key) {
  return LEGAL_KEY_REGEX.test(key);
}
function isLegalNonBinaryValue(value) {
  return LEGAL_NON_BINARY_VALUE_REGEX.test(value);
}
function isBinaryKey(key) {
  return key.endsWith("-bin");
}
function isCustomMetadata(key) {
  return !key.startsWith("grpc-");
}
function normalizeKey(key) {
  return key.toLowerCase();
}
function validate(key, value) {
  if (!isLegalKey(key)) {
    throw new Error('Metadata key "' + key + '" contains illegal characters');
  }
  if (value !== null && value !== void 0) {
    if (isBinaryKey(key)) {
      if (!(value instanceof Buffer)) {
        throw new Error("keys that end with '-bin' must have Buffer values");
      }
    } else {
      if (value instanceof Buffer) {
        throw new Error("keys that don't end with '-bin' must have String values");
      }
      if (!isLegalNonBinaryValue(value)) {
        throw new Error('Metadata string value "' + value + '" contains illegal characters');
      }
    }
  }
}
var Metadata = class {
  constructor(options2) {
    this.internalRepr = new Map();
    if (options2 === void 0) {
      this.options = {};
    } else {
      this.options = options2;
    }
  }
  set(key, value) {
    key = normalizeKey(key);
    validate(key, value);
    this.internalRepr.set(key, [value]);
  }
  add(key, value) {
    key = normalizeKey(key);
    validate(key, value);
    const existingValue = this.internalRepr.get(key);
    if (existingValue === void 0) {
      this.internalRepr.set(key, [value]);
    } else {
      existingValue.push(value);
    }
  }
  remove(key) {
    key = normalizeKey(key);
    validate(key);
    this.internalRepr.delete(key);
  }
  get(key) {
    key = normalizeKey(key);
    validate(key);
    return this.internalRepr.get(key) || [];
  }
  getMap() {
    const result = {};
    this.internalRepr.forEach((values, key) => {
      if (values.length > 0) {
        const v = values[0];
        result[key] = v instanceof Buffer ? v.slice() : v;
      }
    });
    return result;
  }
  clone() {
    const newMetadata = new Metadata(this.options);
    const newInternalRepr = newMetadata.internalRepr;
    this.internalRepr.forEach((value, key) => {
      const clonedValue = value.map((v) => {
        if (v instanceof Buffer) {
          return Buffer.from(v);
        } else {
          return v;
        }
      });
      newInternalRepr.set(key, clonedValue);
    });
    return newMetadata;
  }
  merge(other) {
    other.internalRepr.forEach((values, key) => {
      const mergedValue = (this.internalRepr.get(key) || []).concat(values);
      this.internalRepr.set(key, mergedValue);
    });
  }
  setOptions(options2) {
    this.options = options2;
  }
  getOptions() {
    return this.options;
  }
  toHttp2Headers() {
    const result = {};
    this.internalRepr.forEach((values, key) => {
      result[key] = values.map((value) => {
        if (value instanceof Buffer) {
          return value.toString("base64");
        } else {
          return value;
        }
      });
    });
    return result;
  }
  _getCoreRepresentation() {
    return this.internalRepr;
  }
  static fromHttp2Headers(headers) {
    const result = new Metadata();
    Object.keys(headers).forEach((key) => {
      if (key.charAt(0) === ":") {
        return;
      }
      const values = headers[key];
      try {
        if (isBinaryKey(key)) {
          if (Array.isArray(values)) {
            values.forEach((value) => {
              result.add(key, Buffer.from(value, "base64"));
            });
          } else if (values !== void 0) {
            if (isCustomMetadata(key)) {
              values.split(",").forEach((v) => {
                result.add(key, Buffer.from(v.trim(), "base64"));
              });
            } else {
              result.add(key, Buffer.from(values, "base64"));
            }
          }
        } else {
          if (Array.isArray(values)) {
            values.forEach((value) => {
              result.add(key, value);
            });
          } else if (values !== void 0) {
            result.add(key, values);
          }
        }
      } catch (error2) {
        const message2 = `Failed to add metadata entry ${key}: ${values}. ${error2.message}. For more information see https://github.com/grpc/grpc-node/issues/1173`;
        logging_1$1.log(constants_1$g.LogVerbosity.ERROR, message2);
      }
    });
    return result;
  }
};
metadata.Metadata = Metadata;
Object.defineProperty(callCredentials, "__esModule", { value: true });
callCredentials.CallCredentials = void 0;
var metadata_1$8 = metadata;
function isCurrentOauth2Client(client2) {
  return "getRequestHeaders" in client2 && typeof client2.getRequestHeaders === "function";
}
var CallCredentials = class {
  static createFromMetadataGenerator(metadataGenerator) {
    return new SingleCallCredentials(metadataGenerator);
  }
  static createFromGoogleCredential(googleCredentials) {
    return CallCredentials.createFromMetadataGenerator((options2, callback) => {
      let getHeaders;
      if (isCurrentOauth2Client(googleCredentials)) {
        getHeaders = googleCredentials.getRequestHeaders(options2.service_url);
      } else {
        getHeaders = new Promise((resolve6, reject) => {
          googleCredentials.getRequestMetadata(options2.service_url, (err, headers) => {
            if (err) {
              reject(err);
              return;
            }
            resolve6(headers);
          });
        });
      }
      getHeaders.then((headers) => {
        const metadata2 = new metadata_1$8.Metadata();
        for (const key of Object.keys(headers)) {
          metadata2.add(key, headers[key]);
        }
        callback(null, metadata2);
      }, (err) => {
        callback(err);
      });
    });
  }
  static createEmpty() {
    return new EmptyCallCredentials();
  }
};
callCredentials.CallCredentials = CallCredentials;
var ComposedCallCredentials = class extends CallCredentials {
  constructor(creds) {
    super();
    this.creds = creds;
  }
  async generateMetadata(options2) {
    const base2 = new metadata_1$8.Metadata();
    const generated = await Promise.all(this.creds.map((cred) => cred.generateMetadata(options2)));
    for (const gen of generated) {
      base2.merge(gen);
    }
    return base2;
  }
  compose(other) {
    return new ComposedCallCredentials(this.creds.concat([other]));
  }
  _equals(other) {
    if (this === other) {
      return true;
    }
    if (other instanceof ComposedCallCredentials) {
      return this.creds.every((value, index2) => value._equals(other.creds[index2]));
    } else {
      return false;
    }
  }
};
var SingleCallCredentials = class extends CallCredentials {
  constructor(metadataGenerator) {
    super();
    this.metadataGenerator = metadataGenerator;
  }
  generateMetadata(options2) {
    return new Promise((resolve6, reject) => {
      this.metadataGenerator(options2, (err, metadata2) => {
        if (metadata2 !== void 0) {
          resolve6(metadata2);
        } else {
          reject(err);
        }
      });
    });
  }
  compose(other) {
    return new ComposedCallCredentials([this, other]);
  }
  _equals(other) {
    if (this === other) {
      return true;
    }
    if (other instanceof SingleCallCredentials) {
      return this.metadataGenerator === other.metadataGenerator;
    } else {
      return false;
    }
  }
};
var EmptyCallCredentials = class extends CallCredentials {
  generateMetadata(options2) {
    return Promise.resolve(new metadata_1$8.Metadata());
  }
  compose(other) {
    return other;
  }
  _equals(other) {
    return other instanceof EmptyCallCredentials;
  }
};
var channel = {};
var callStream = {};
var filterStack = {};
Object.defineProperty(filterStack, "__esModule", { value: true });
filterStack.FilterStackFactory = filterStack.FilterStack = void 0;
var FilterStack = class {
  constructor(filters) {
    this.filters = filters;
  }
  sendMetadata(metadata2) {
    let result = metadata2;
    for (let i = 0; i < this.filters.length; i++) {
      result = this.filters[i].sendMetadata(result);
    }
    return result;
  }
  receiveMetadata(metadata2) {
    let result = metadata2;
    for (let i = this.filters.length - 1; i >= 0; i--) {
      result = this.filters[i].receiveMetadata(result);
    }
    return result;
  }
  sendMessage(message2) {
    let result = message2;
    for (let i = 0; i < this.filters.length; i++) {
      result = this.filters[i].sendMessage(result);
    }
    return result;
  }
  receiveMessage(message2) {
    let result = message2;
    for (let i = this.filters.length - 1; i >= 0; i--) {
      result = this.filters[i].receiveMessage(result);
    }
    return result;
  }
  receiveTrailers(status) {
    let result = status;
    for (let i = this.filters.length - 1; i >= 0; i--) {
      result = this.filters[i].receiveTrailers(result);
    }
    return result;
  }
};
filterStack.FilterStack = FilterStack;
var FilterStackFactory = class {
  constructor(factories) {
    this.factories = factories;
  }
  createFilter(callStream2) {
    return new FilterStack(this.factories.map((factory2) => factory2.createFilter(callStream2)));
  }
};
filterStack.FilterStackFactory = FilterStackFactory;
var streamDecoder = {};
Object.defineProperty(streamDecoder, "__esModule", { value: true });
streamDecoder.StreamDecoder = void 0;
var ReadState;
(function(ReadState2) {
  ReadState2[ReadState2["NO_DATA"] = 0] = "NO_DATA";
  ReadState2[ReadState2["READING_SIZE"] = 1] = "READING_SIZE";
  ReadState2[ReadState2["READING_MESSAGE"] = 2] = "READING_MESSAGE";
})(ReadState || (ReadState = {}));
var StreamDecoder = class {
  constructor() {
    this.readState = ReadState.NO_DATA;
    this.readCompressFlag = Buffer.alloc(1);
    this.readPartialSize = Buffer.alloc(4);
    this.readSizeRemaining = 4;
    this.readMessageSize = 0;
    this.readPartialMessage = [];
    this.readMessageRemaining = 0;
  }
  write(data) {
    let readHead = 0;
    let toRead;
    const result = [];
    while (readHead < data.length) {
      switch (this.readState) {
        case ReadState.NO_DATA:
          this.readCompressFlag = data.slice(readHead, readHead + 1);
          readHead += 1;
          this.readState = ReadState.READING_SIZE;
          this.readPartialSize.fill(0);
          this.readSizeRemaining = 4;
          this.readMessageSize = 0;
          this.readMessageRemaining = 0;
          this.readPartialMessage = [];
          break;
        case ReadState.READING_SIZE:
          toRead = Math.min(data.length - readHead, this.readSizeRemaining);
          data.copy(this.readPartialSize, 4 - this.readSizeRemaining, readHead, readHead + toRead);
          this.readSizeRemaining -= toRead;
          readHead += toRead;
          if (this.readSizeRemaining === 0) {
            this.readMessageSize = this.readPartialSize.readUInt32BE(0);
            this.readMessageRemaining = this.readMessageSize;
            if (this.readMessageRemaining > 0) {
              this.readState = ReadState.READING_MESSAGE;
            } else {
              const message2 = Buffer.concat([this.readCompressFlag, this.readPartialSize], 5);
              this.readState = ReadState.NO_DATA;
              result.push(message2);
            }
          }
          break;
        case ReadState.READING_MESSAGE:
          toRead = Math.min(data.length - readHead, this.readMessageRemaining);
          this.readPartialMessage.push(data.slice(readHead, readHead + toRead));
          this.readMessageRemaining -= toRead;
          readHead += toRead;
          if (this.readMessageRemaining === 0) {
            const framedMessageBuffers = [
              this.readCompressFlag,
              this.readPartialSize
            ].concat(this.readPartialMessage);
            const framedMessage = Buffer.concat(framedMessageBuffers, this.readMessageSize + 5);
            this.readState = ReadState.NO_DATA;
            result.push(framedMessage);
          }
          break;
        default:
          throw new Error("Unexpected read state");
      }
    }
    return result;
  }
};
streamDecoder.StreamDecoder = StreamDecoder;
Object.defineProperty(callStream, "__esModule", { value: true });
callStream.Http2CallStream = callStream.InterceptingListenerImpl = callStream.isInterceptingListener = void 0;
var http2$3 = import_http2.default;
var os$1 = import_os.default;
var constants_1$f = constants;
var filter_stack_1 = filterStack;
var metadata_1$7 = metadata;
var stream_decoder_1$1 = streamDecoder;
var logging$9 = logging$a;
var constants_2$2 = constants;
var TRACER_NAME$9 = "call_stream";
var { HTTP2_HEADER_STATUS, HTTP2_HEADER_CONTENT_TYPE: HTTP2_HEADER_CONTENT_TYPE$1, NGHTTP2_CANCEL } = http2$3.constants;
function getSystemErrorName(errno) {
  for (const [name2, num] of Object.entries(os$1.constants.errno)) {
    if (num === errno) {
      return name2;
    }
  }
  return "Unknown system error " + errno;
}
function isInterceptingListener(listener) {
  return listener.onReceiveMetadata !== void 0 && listener.onReceiveMetadata.length === 1;
}
callStream.isInterceptingListener = isInterceptingListener;
var InterceptingListenerImpl = class {
  constructor(listener, nextListener) {
    this.listener = listener;
    this.nextListener = nextListener;
    this.processingMessage = false;
    this.pendingStatus = null;
  }
  onReceiveMetadata(metadata2) {
    this.listener.onReceiveMetadata(metadata2, (metadata3) => {
      this.nextListener.onReceiveMetadata(metadata3);
    });
  }
  onReceiveMessage(message2) {
    this.processingMessage = true;
    this.listener.onReceiveMessage(message2, (msg) => {
      this.processingMessage = false;
      this.nextListener.onReceiveMessage(msg);
      if (this.pendingStatus) {
        this.nextListener.onReceiveStatus(this.pendingStatus);
      }
    });
  }
  onReceiveStatus(status) {
    this.listener.onReceiveStatus(status, (processedStatus) => {
      if (this.processingMessage) {
        this.pendingStatus = processedStatus;
      } else {
        this.nextListener.onReceiveStatus(processedStatus);
      }
    });
  }
};
callStream.InterceptingListenerImpl = InterceptingListenerImpl;
var Http2CallStream = class {
  constructor(methodName, channel2, options2, filterStackFactory, channelCallCredentials, callNumber) {
    this.methodName = methodName;
    this.channel = channel2;
    this.options = options2;
    this.channelCallCredentials = channelCallCredentials;
    this.callNumber = callNumber;
    this.http2Stream = null;
    this.pendingRead = false;
    this.isWriteFilterPending = false;
    this.pendingWrite = null;
    this.pendingWriteCallback = null;
    this.writesClosed = false;
    this.decoder = new stream_decoder_1$1.StreamDecoder();
    this.isReadFilterPending = false;
    this.canPush = false;
    this.readsClosed = false;
    this.statusOutput = false;
    this.unpushedReadMessages = [];
    this.unfilteredReadMessages = [];
    this.mappedStatusCode = constants_1$f.Status.UNKNOWN;
    this.finalStatus = null;
    this.subchannel = null;
    this.listener = null;
    this.internalError = null;
    this.filterStack = filterStackFactory.createFilter(this);
    this.credentials = channelCallCredentials;
    this.disconnectListener = () => {
      this.endCall({
        code: constants_1$f.Status.UNAVAILABLE,
        details: "Connection dropped",
        metadata: new metadata_1$7.Metadata()
      });
    };
    if (this.options.parentCall && this.options.flags & constants_1$f.Propagate.CANCELLATION) {
      this.options.parentCall.on("cancelled", () => {
        this.cancelWithStatus(constants_1$f.Status.CANCELLED, "Cancelled by parent call");
      });
    }
  }
  outputStatus() {
    if (!this.statusOutput) {
      this.statusOutput = true;
      const filteredStatus = this.filterStack.receiveTrailers(this.finalStatus);
      process.nextTick(() => {
        var _a;
        (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveStatus(filteredStatus);
      });
      if (this.subchannel) {
        this.subchannel.callUnref();
        this.subchannel.removeDisconnectListener(this.disconnectListener);
      }
    }
  }
  trace(text) {
    logging$9.trace(constants_2$2.LogVerbosity.DEBUG, TRACER_NAME$9, "[" + this.callNumber + "] " + text);
  }
  endCall(status) {
    if (this.finalStatus === null || this.finalStatus.code === constants_1$f.Status.OK) {
      this.trace("ended with status: code=" + status.code + ' details="' + status.details + '"');
      this.finalStatus = status;
      this.maybeOutputStatus();
    }
    this.destroyHttp2Stream();
  }
  maybeOutputStatus() {
    if (this.finalStatus !== null) {
      if (this.finalStatus.code !== constants_1$f.Status.OK || this.readsClosed && this.unpushedReadMessages.length === 0 && this.unfilteredReadMessages.length === 0 && !this.isReadFilterPending) {
        this.outputStatus();
      }
    }
  }
  push(message2) {
    this.trace("pushing to reader message of length " + (message2 instanceof Buffer ? message2.length : null));
    this.canPush = false;
    process.nextTick(() => {
      var _a;
      if (this.statusOutput) {
        return;
      }
      (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMessage(message2);
      this.maybeOutputStatus();
    });
  }
  handleFilterError(error2) {
    this.cancelWithStatus(constants_1$f.Status.INTERNAL, error2.message);
  }
  handleFilteredRead(message2) {
    if (this.finalStatus !== null && this.finalStatus.code !== constants_1$f.Status.OK) {
      this.maybeOutputStatus();
      return;
    }
    this.isReadFilterPending = false;
    if (this.canPush) {
      this.http2Stream.pause();
      this.push(message2);
    } else {
      this.trace("unpushedReadMessages.push message of length " + message2.length);
      this.unpushedReadMessages.push(message2);
    }
    if (this.unfilteredReadMessages.length > 0) {
      const nextMessage = this.unfilteredReadMessages.shift();
      this.filterReceivedMessage(nextMessage);
    }
  }
  filterReceivedMessage(framedMessage) {
    if (this.finalStatus !== null && this.finalStatus.code !== constants_1$f.Status.OK) {
      this.maybeOutputStatus();
      return;
    }
    this.trace("filterReceivedMessage of length " + framedMessage.length);
    this.isReadFilterPending = true;
    this.filterStack.receiveMessage(Promise.resolve(framedMessage)).then(this.handleFilteredRead.bind(this), this.handleFilterError.bind(this));
  }
  tryPush(messageBytes) {
    if (this.isReadFilterPending) {
      this.trace("unfilteredReadMessages.push message of length " + (messageBytes && messageBytes.length));
      this.unfilteredReadMessages.push(messageBytes);
    } else {
      this.filterReceivedMessage(messageBytes);
    }
  }
  handleTrailers(headers) {
    let headersString = "";
    for (const header of Object.keys(headers)) {
      headersString += "		" + header + ": " + headers[header] + "\n";
    }
    this.trace("Received server trailers:\n" + headersString);
    let metadata2;
    try {
      metadata2 = metadata_1$7.Metadata.fromHttp2Headers(headers);
    } catch (e) {
      metadata2 = new metadata_1$7.Metadata();
    }
    const metadataMap = metadata2.getMap();
    let code = this.mappedStatusCode;
    if (code === constants_1$f.Status.UNKNOWN && typeof metadataMap["grpc-status"] === "string") {
      const receivedStatus = Number(metadataMap["grpc-status"]);
      if (receivedStatus in constants_1$f.Status) {
        code = receivedStatus;
        this.trace("received status code " + receivedStatus + " from server");
      }
      metadata2.remove("grpc-status");
    }
    let details = "";
    if (typeof metadataMap["grpc-message"] === "string") {
      details = decodeURI(metadataMap["grpc-message"]);
      metadata2.remove("grpc-message");
      this.trace('received status details string "' + details + '" from server');
    }
    const status = { code, details, metadata: metadata2 };
    this.endCall(status);
  }
  attachHttp2Stream(stream, subchannel2, extraFilterFactory) {
    if (extraFilterFactory !== void 0) {
      this.filterStack = new filter_stack_1.FilterStack([
        this.filterStack,
        extraFilterFactory.createFilter(this)
      ]);
    }
    if (this.finalStatus !== null) {
      stream.close(NGHTTP2_CANCEL);
    } else {
      this.trace("attachHttp2Stream from subchannel " + subchannel2.getAddress());
      this.http2Stream = stream;
      this.subchannel = subchannel2;
      subchannel2.addDisconnectListener(this.disconnectListener);
      subchannel2.callRef();
      stream.on("response", (headers, flags) => {
        var _a;
        let headersString = "";
        for (const header of Object.keys(headers)) {
          headersString += "		" + header + ": " + headers[header] + "\n";
        }
        this.trace("Received server headers:\n" + headersString);
        switch (headers[":status"]) {
          case 400:
            this.mappedStatusCode = constants_1$f.Status.INTERNAL;
            break;
          case 401:
            this.mappedStatusCode = constants_1$f.Status.UNAUTHENTICATED;
            break;
          case 403:
            this.mappedStatusCode = constants_1$f.Status.PERMISSION_DENIED;
            break;
          case 404:
            this.mappedStatusCode = constants_1$f.Status.UNIMPLEMENTED;
            break;
          case 429:
          case 502:
          case 503:
          case 504:
            this.mappedStatusCode = constants_1$f.Status.UNAVAILABLE;
            break;
          default:
            this.mappedStatusCode = constants_1$f.Status.UNKNOWN;
        }
        if (flags & http2$3.constants.NGHTTP2_FLAG_END_STREAM) {
          this.handleTrailers(headers);
        } else {
          let metadata2;
          try {
            metadata2 = metadata_1$7.Metadata.fromHttp2Headers(headers);
          } catch (error2) {
            this.endCall({
              code: constants_1$f.Status.UNKNOWN,
              details: error2.message,
              metadata: new metadata_1$7.Metadata()
            });
            return;
          }
          try {
            const finalMetadata = this.filterStack.receiveMetadata(metadata2);
            (_a = this.listener) === null || _a === void 0 ? void 0 : _a.onReceiveMetadata(finalMetadata);
          } catch (error2) {
            this.endCall({
              code: constants_1$f.Status.UNKNOWN,
              details: error2.message,
              metadata: new metadata_1$7.Metadata()
            });
          }
        }
      });
      stream.on("trailers", this.handleTrailers.bind(this));
      stream.on("data", (data) => {
        this.trace("receive HTTP/2 data frame of length " + data.length);
        const messages = this.decoder.write(data);
        for (const message2 of messages) {
          this.trace("parsed message of length " + message2.length);
          this.tryPush(message2);
        }
      });
      stream.on("end", () => {
        this.readsClosed = true;
        this.maybeOutputStatus();
      });
      stream.on("close", () => {
        process.nextTick(() => {
          var _a;
          this.trace("HTTP/2 stream closed with code " + stream.rstCode);
          if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1$f.Status.OK) {
            return;
          }
          let code;
          let details = "";
          switch (stream.rstCode) {
            case http2$3.constants.NGHTTP2_NO_ERROR:
              if (this.finalStatus !== null) {
                return;
              }
              code = constants_1$f.Status.INTERNAL;
              details = `Received RST_STREAM with code ${stream.rstCode}`;
              break;
            case http2$3.constants.NGHTTP2_REFUSED_STREAM:
              code = constants_1$f.Status.UNAVAILABLE;
              details = "Stream refused by server";
              break;
            case http2$3.constants.NGHTTP2_CANCEL:
              code = constants_1$f.Status.CANCELLED;
              details = "Call cancelled";
              break;
            case http2$3.constants.NGHTTP2_ENHANCE_YOUR_CALM:
              code = constants_1$f.Status.RESOURCE_EXHAUSTED;
              details = "Bandwidth exhausted";
              break;
            case http2$3.constants.NGHTTP2_INADEQUATE_SECURITY:
              code = constants_1$f.Status.PERMISSION_DENIED;
              details = "Protocol not secure enough";
              break;
            case http2$3.constants.NGHTTP2_INTERNAL_ERROR:
              code = constants_1$f.Status.INTERNAL;
              if (this.internalError === null) {
                details = `Received RST_STREAM with code ${stream.rstCode} (Internal server error)`;
              } else {
                if (this.internalError.code === "ECONNRESET") {
                  code = constants_1$f.Status.UNAVAILABLE;
                  details = this.internalError.message;
                } else {
                  details = `Received RST_STREAM with code ${stream.rstCode} triggered by internal client error: ${this.internalError.message}`;
                }
              }
              break;
            default:
              code = constants_1$f.Status.INTERNAL;
              details = `Received RST_STREAM with code ${stream.rstCode}`;
          }
          this.endCall({ code, details, metadata: new metadata_1$7.Metadata() });
        });
      });
      stream.on("error", (err) => {
        if (err.code !== "ERR_HTTP2_STREAM_ERROR") {
          this.trace("Node error event: message=" + err.message + " code=" + err.code + " errno=" + getSystemErrorName(err.errno) + " syscall=" + err.syscall);
          this.internalError = err;
        }
      });
      if (!this.pendingRead) {
        stream.pause();
      }
      if (this.pendingWrite) {
        if (!this.pendingWriteCallback) {
          throw new Error("Invalid state in write handling code");
        }
        this.trace("sending data chunk of length " + this.pendingWrite.length + " (deferred)");
        try {
          stream.write(this.pendingWrite, this.pendingWriteCallback);
        } catch (error2) {
          this.endCall({
            code: constants_1$f.Status.UNAVAILABLE,
            details: `Write failed with error ${error2.message}`,
            metadata: new metadata_1$7.Metadata()
          });
        }
      }
      this.maybeCloseWrites();
    }
  }
  start(metadata2, listener) {
    this.trace("Sending metadata");
    this.listener = listener;
    this.channel._startCallStream(this, metadata2);
  }
  destroyHttp2Stream() {
    var _a;
    if (this.http2Stream !== null && !this.http2Stream.destroyed) {
      let code;
      if (((_a = this.finalStatus) === null || _a === void 0 ? void 0 : _a.code) === constants_1$f.Status.OK) {
        code = http2$3.constants.NGHTTP2_NO_ERROR;
      } else {
        code = http2$3.constants.NGHTTP2_CANCEL;
      }
      this.trace("close http2 stream with code " + code);
      this.http2Stream.close(code);
    }
  }
  cancelWithStatus(status, details) {
    this.trace("cancelWithStatus code: " + status + ' details: "' + details + '"');
    this.endCall({ code: status, details, metadata: new metadata_1$7.Metadata() });
  }
  getDeadline() {
    if (this.options.parentCall && this.options.flags & constants_1$f.Propagate.DEADLINE) {
      const parentDeadline = this.options.parentCall.getDeadline();
      const selfDeadline = this.options.deadline;
      const parentDeadlineMsecs = parentDeadline instanceof Date ? parentDeadline.getTime() : parentDeadline;
      const selfDeadlineMsecs = selfDeadline instanceof Date ? selfDeadline.getTime() : selfDeadline;
      return Math.min(parentDeadlineMsecs, selfDeadlineMsecs);
    } else {
      return this.options.deadline;
    }
  }
  getCredentials() {
    return this.credentials;
  }
  setCredentials(credentials) {
    this.credentials = this.channelCallCredentials.compose(credentials);
  }
  getStatus() {
    return this.finalStatus;
  }
  getPeer() {
    var _a, _b;
    return (_b = (_a = this.subchannel) === null || _a === void 0 ? void 0 : _a.getAddress()) !== null && _b !== void 0 ? _b : this.channel.getTarget();
  }
  getMethod() {
    return this.methodName;
  }
  getHost() {
    return this.options.host;
  }
  startRead() {
    if (this.finalStatus !== null && this.finalStatus.code !== constants_1$f.Status.OK) {
      this.readsClosed = true;
      this.maybeOutputStatus();
      return;
    }
    this.canPush = true;
    if (this.http2Stream === null) {
      this.pendingRead = true;
    } else {
      if (this.unpushedReadMessages.length > 0) {
        const nextMessage = this.unpushedReadMessages.shift();
        this.push(nextMessage);
        return;
      }
      this.http2Stream.resume();
    }
  }
  maybeCloseWrites() {
    if (this.writesClosed && !this.isWriteFilterPending && this.http2Stream !== null) {
      this.trace("calling end() on HTTP/2 stream");
      this.http2Stream.end();
    }
  }
  sendMessageWithContext(context, message2) {
    var _a;
    this.trace("write() called with message of length " + message2.length);
    const writeObj = {
      message: message2,
      flags: context.flags
    };
    const cb = (_a = context.callback) !== null && _a !== void 0 ? _a : () => {
    };
    this.isWriteFilterPending = true;
    this.filterStack.sendMessage(Promise.resolve(writeObj)).then((message3) => {
      this.isWriteFilterPending = false;
      if (this.http2Stream === null) {
        this.trace("deferring writing data chunk of length " + message3.message.length);
        this.pendingWrite = message3.message;
        this.pendingWriteCallback = cb;
      } else {
        this.trace("sending data chunk of length " + message3.message.length);
        try {
          this.http2Stream.write(message3.message, cb);
        } catch (error2) {
          this.endCall({
            code: constants_1$f.Status.UNAVAILABLE,
            details: `Write failed with error ${error2.message}`,
            metadata: new metadata_1$7.Metadata()
          });
        }
        this.maybeCloseWrites();
      }
    }, this.handleFilterError.bind(this));
  }
  halfClose() {
    this.trace("end() called");
    this.writesClosed = true;
    this.maybeCloseWrites();
  }
};
callStream.Http2CallStream = Http2CallStream;
var channelCredentials = {};
var tlsHelpers = {};
Object.defineProperty(tlsHelpers, "__esModule", { value: true });
tlsHelpers.getDefaultRootsData = tlsHelpers.CIPHER_SUITES = void 0;
tlsHelpers.CIPHER_SUITES = {}.GRPC_SSL_CIPHER_SUITES;
function getDefaultRootsData() {
  return null;
}
tlsHelpers.getDefaultRootsData = getDefaultRootsData;
Object.defineProperty(channelCredentials, "__esModule", { value: true });
channelCredentials.ChannelCredentials = void 0;
var tls_1$1 = import_tls.default;
var call_credentials_1 = callCredentials;
var tls_helpers_1$1 = tlsHelpers;
function verifyIsBufferOrNull(obj, friendlyName) {
  if (obj && !(obj instanceof Buffer)) {
    throw new TypeError(`${friendlyName}, if provided, must be a Buffer.`);
  }
}
function bufferOrNullEqual(buf1, buf2) {
  if (buf1 === null && buf2 === null) {
    return true;
  } else {
    return buf1 !== null && buf2 !== null && buf1.equals(buf2);
  }
}
var ChannelCredentials = class {
  constructor(callCredentials2) {
    this.callCredentials = callCredentials2 || call_credentials_1.CallCredentials.createEmpty();
  }
  _getCallCredentials() {
    return this.callCredentials;
  }
  static createSsl(rootCerts, privateKey, certChain, verifyOptions) {
    verifyIsBufferOrNull(rootCerts, "Root certificate");
    verifyIsBufferOrNull(privateKey, "Private key");
    verifyIsBufferOrNull(certChain, "Certificate chain");
    if (privateKey && !certChain) {
      throw new Error("Private key must be given with accompanying certificate chain");
    }
    if (!privateKey && certChain) {
      throw new Error("Certificate chain must be given with accompanying private key");
    }
    return new SecureChannelCredentialsImpl(rootCerts || tls_helpers_1$1.getDefaultRootsData(), privateKey || null, certChain || null, verifyOptions || {});
  }
  static createInsecure() {
    return new InsecureChannelCredentialsImpl();
  }
};
channelCredentials.ChannelCredentials = ChannelCredentials;
var InsecureChannelCredentialsImpl = class extends ChannelCredentials {
  constructor(callCredentials2) {
    super(callCredentials2);
  }
  compose(callCredentials2) {
    throw new Error("Cannot compose insecure credentials");
  }
  _getConnectionOptions() {
    return null;
  }
  _isSecure() {
    return false;
  }
  _equals(other) {
    return other instanceof InsecureChannelCredentialsImpl;
  }
};
var SecureChannelCredentialsImpl = class extends ChannelCredentials {
  constructor(rootCerts, privateKey, certChain, verifyOptions) {
    super();
    this.rootCerts = rootCerts;
    this.privateKey = privateKey;
    this.certChain = certChain;
    this.verifyOptions = verifyOptions;
    const secureContext = tls_1$1.createSecureContext({
      ca: rootCerts || void 0,
      key: privateKey || void 0,
      cert: certChain || void 0,
      ciphers: tls_helpers_1$1.CIPHER_SUITES
    });
    this.connectionOptions = { secureContext };
    if (verifyOptions && verifyOptions.checkServerIdentity) {
      this.connectionOptions.checkServerIdentity = (host, cert) => {
        return verifyOptions.checkServerIdentity(host, { raw: cert.raw });
      };
    }
  }
  compose(callCredentials2) {
    const combinedCallCredentials = this.callCredentials.compose(callCredentials2);
    return new ComposedChannelCredentialsImpl(this, combinedCallCredentials);
  }
  _getConnectionOptions() {
    return Object.assign({}, this.connectionOptions);
  }
  _isSecure() {
    return true;
  }
  _equals(other) {
    if (this === other) {
      return true;
    }
    if (other instanceof SecureChannelCredentialsImpl) {
      if (!bufferOrNullEqual(this.rootCerts, other.rootCerts)) {
        return false;
      }
      if (!bufferOrNullEqual(this.privateKey, other.privateKey)) {
        return false;
      }
      if (!bufferOrNullEqual(this.certChain, other.certChain)) {
        return false;
      }
      return this.verifyOptions.checkServerIdentity === other.verifyOptions.checkServerIdentity;
    } else {
      return false;
    }
  }
};
var ComposedChannelCredentialsImpl = class extends ChannelCredentials {
  constructor(channelCredentials2, callCreds) {
    super(callCreds);
    this.channelCredentials = channelCredentials2;
  }
  compose(callCredentials2) {
    const combinedCallCredentials = this.callCredentials.compose(callCredentials2);
    return new ComposedChannelCredentialsImpl(this.channelCredentials, combinedCallCredentials);
  }
  _getConnectionOptions() {
    return this.channelCredentials._getConnectionOptions();
  }
  _isSecure() {
    return true;
  }
  _equals(other) {
    if (this === other) {
      return true;
    }
    if (other instanceof ComposedChannelCredentialsImpl) {
      return this.channelCredentials._equals(other.channelCredentials) && this.callCredentials._equals(other.callCredentials);
    } else {
      return false;
    }
  }
};
var resolvingLoadBalancer = {};
var loadBalancer = {};
var loadBalancerPickFirst = {};
var picker = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.QueuePicker = exports.UnavailablePicker = exports.PickResultType = void 0;
  const metadata_12 = metadata;
  const constants_12 = constants;
  var PickResultType;
  (function(PickResultType2) {
    PickResultType2[PickResultType2["COMPLETE"] = 0] = "COMPLETE";
    PickResultType2[PickResultType2["QUEUE"] = 1] = "QUEUE";
    PickResultType2[PickResultType2["TRANSIENT_FAILURE"] = 2] = "TRANSIENT_FAILURE";
    PickResultType2[PickResultType2["DROP"] = 3] = "DROP";
  })(PickResultType = exports.PickResultType || (exports.PickResultType = {}));
  class UnavailablePicker {
    constructor(status) {
      if (status !== void 0) {
        this.status = status;
      } else {
        this.status = {
          code: constants_12.Status.UNAVAILABLE,
          details: "No connection established",
          metadata: new metadata_12.Metadata()
        };
      }
    }
    pick(pickArgs) {
      return {
        pickResultType: PickResultType.TRANSIENT_FAILURE,
        subchannel: null,
        status: this.status,
        extraFilterFactory: null,
        onCallStarted: null
      };
    }
  }
  exports.UnavailablePicker = UnavailablePicker;
  class QueuePicker {
    constructor(loadBalancer2) {
      this.loadBalancer = loadBalancer2;
      this.calledExitIdle = false;
    }
    pick(pickArgs) {
      if (!this.calledExitIdle) {
        process.nextTick(() => {
          this.loadBalancer.exitIdle();
        });
        this.calledExitIdle = true;
      }
      return {
        pickResultType: PickResultType.QUEUE,
        subchannel: null,
        status: null,
        extraFilterFactory: null,
        onCallStarted: null
      };
    }
  }
  exports.QueuePicker = QueuePicker;
})(picker);
var subchannel = {};
var backoffTimeout = {};
Object.defineProperty(backoffTimeout, "__esModule", { value: true });
backoffTimeout.BackoffTimeout = void 0;
var INITIAL_BACKOFF_MS = 1e3;
var BACKOFF_MULTIPLIER = 1.6;
var MAX_BACKOFF_MS = 12e4;
var BACKOFF_JITTER = 0.2;
function uniformRandom(min, max) {
  return Math.random() * (max - min) + min;
}
var BackoffTimeout = class {
  constructor(callback, options2) {
    this.callback = callback;
    this.initialDelay = INITIAL_BACKOFF_MS;
    this.multiplier = BACKOFF_MULTIPLIER;
    this.maxDelay = MAX_BACKOFF_MS;
    this.jitter = BACKOFF_JITTER;
    this.running = false;
    this.hasRef = true;
    if (options2) {
      if (options2.initialDelay) {
        this.initialDelay = options2.initialDelay;
      }
      if (options2.multiplier) {
        this.multiplier = options2.multiplier;
      }
      if (options2.jitter) {
        this.jitter = options2.jitter;
      }
      if (options2.maxDelay) {
        this.maxDelay = options2.maxDelay;
      }
    }
    this.nextDelay = this.initialDelay;
    this.timerId = setTimeout(() => {
    }, 0);
    clearTimeout(this.timerId);
  }
  runOnce() {
    var _a, _b;
    this.running = true;
    this.timerId = setTimeout(() => {
      this.callback();
      this.running = false;
    }, this.nextDelay);
    if (!this.hasRef) {
      (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
    const nextBackoff = Math.min(this.nextDelay * this.multiplier, this.maxDelay);
    const jitterMagnitude = nextBackoff * this.jitter;
    this.nextDelay = nextBackoff + uniformRandom(-jitterMagnitude, jitterMagnitude);
  }
  stop() {
    clearTimeout(this.timerId);
    this.running = false;
  }
  reset() {
    this.nextDelay = this.initialDelay;
  }
  isRunning() {
    return this.running;
  }
  ref() {
    var _a, _b;
    this.hasRef = true;
    (_b = (_a = this.timerId).ref) === null || _b === void 0 ? void 0 : _b.call(_a);
  }
  unref() {
    var _a, _b;
    this.hasRef = false;
    (_b = (_a = this.timerId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
  }
};
backoffTimeout.BackoffTimeout = BackoffTimeout;
var resolver = {};
var resolverDns = {};
var serviceConfig = {};
Object.defineProperty(serviceConfig, "__esModule", { value: true });
serviceConfig.extractAndSelectServiceConfig = serviceConfig.validateServiceConfig = void 0;
var os = import_os.default;
var load_balancer_1$4 = loadBalancer;
var TIMEOUT_REGEX = /^\d+(\.\d{1,9})?s$/;
var CLIENT_LANGUAGE_STRING = "node";
function validateName(obj) {
  if (!("service" in obj) || typeof obj.service !== "string") {
    throw new Error("Invalid method config name: invalid service");
  }
  const result = {
    service: obj.service
  };
  if ("method" in obj) {
    if (typeof obj.method === "string") {
      result.method = obj.method;
    } else {
      throw new Error("Invalid method config name: invalid method");
    }
  }
  return result;
}
function validateMethodConfig(obj) {
  const result = {
    name: []
  };
  if (!("name" in obj) || !Array.isArray(obj.name)) {
    throw new Error("Invalid method config: invalid name array");
  }
  for (const name2 of obj.name) {
    result.name.push(validateName(name2));
  }
  if ("waitForReady" in obj) {
    if (typeof obj.waitForReady !== "boolean") {
      throw new Error("Invalid method config: invalid waitForReady");
    }
    result.waitForReady = obj.waitForReady;
  }
  if ("timeout" in obj) {
    if (!(typeof obj.timeout === "string") || !TIMEOUT_REGEX.test(obj.timeout)) {
      throw new Error("Invalid method config: invalid timeout");
    }
    result.timeout = obj.timeout;
  }
  if ("maxRequestBytes" in obj) {
    if (typeof obj.maxRequestBytes !== "number") {
      throw new Error("Invalid method config: invalid maxRequestBytes");
    }
    result.maxRequestBytes = obj.maxRequestBytes;
  }
  if ("maxResponseBytes" in obj) {
    if (typeof obj.maxResponseBytes !== "number") {
      throw new Error("Invalid method config: invalid maxRequestBytes");
    }
    result.maxResponseBytes = obj.maxResponseBytes;
  }
  return result;
}
function validateServiceConfig(obj) {
  const result = {
    loadBalancingConfig: [],
    methodConfig: []
  };
  if ("loadBalancingPolicy" in obj) {
    if (typeof obj.loadBalancingPolicy === "string") {
      result.loadBalancingPolicy = obj.loadBalancingPolicy;
    } else {
      throw new Error("Invalid service config: invalid loadBalancingPolicy");
    }
  }
  if ("loadBalancingConfig" in obj) {
    if (Array.isArray(obj.loadBalancingConfig)) {
      for (const config of obj.loadBalancingConfig) {
        result.loadBalancingConfig.push(load_balancer_1$4.validateLoadBalancingConfig(config));
      }
    } else {
      throw new Error("Invalid service config: invalid loadBalancingConfig");
    }
  }
  if ("methodConfig" in obj) {
    if (Array.isArray(obj.methodConfig)) {
      for (const methodConfig of obj.methodConfig) {
        result.methodConfig.push(validateMethodConfig(methodConfig));
      }
    }
  }
  const seenMethodNames = [];
  for (const methodConfig of result.methodConfig) {
    for (const name2 of methodConfig.name) {
      for (const seenName of seenMethodNames) {
        if (name2.service === seenName.service && name2.method === seenName.method) {
          throw new Error(`Invalid service config: duplicate name ${name2.service}/${name2.method}`);
        }
      }
      seenMethodNames.push(name2);
    }
  }
  return result;
}
serviceConfig.validateServiceConfig = validateServiceConfig;
function validateCanaryConfig(obj) {
  if (!("serviceConfig" in obj)) {
    throw new Error("Invalid service config choice: missing service config");
  }
  const result = {
    serviceConfig: validateServiceConfig(obj.serviceConfig)
  };
  if ("clientLanguage" in obj) {
    if (Array.isArray(obj.clientLanguage)) {
      result.clientLanguage = [];
      for (const lang of obj.clientLanguage) {
        if (typeof lang === "string") {
          result.clientLanguage.push(lang);
        } else {
          throw new Error("Invalid service config choice: invalid clientLanguage");
        }
      }
    } else {
      throw new Error("Invalid service config choice: invalid clientLanguage");
    }
  }
  if ("clientHostname" in obj) {
    if (Array.isArray(obj.clientHostname)) {
      result.clientHostname = [];
      for (const lang of obj.clientHostname) {
        if (typeof lang === "string") {
          result.clientHostname.push(lang);
        } else {
          throw new Error("Invalid service config choice: invalid clientHostname");
        }
      }
    } else {
      throw new Error("Invalid service config choice: invalid clientHostname");
    }
  }
  if ("percentage" in obj) {
    if (typeof obj.percentage === "number" && 0 <= obj.percentage && obj.percentage <= 100) {
      result.percentage = obj.percentage;
    } else {
      throw new Error("Invalid service config choice: invalid percentage");
    }
  }
  const allowedFields = [
    "clientLanguage",
    "percentage",
    "clientHostname",
    "serviceConfig"
  ];
  for (const field2 in obj) {
    if (!allowedFields.includes(field2)) {
      throw new Error(`Invalid service config choice: unexpected field ${field2}`);
    }
  }
  return result;
}
function validateAndSelectCanaryConfig(obj, percentage) {
  if (!Array.isArray(obj)) {
    throw new Error("Invalid service config list");
  }
  for (const config of obj) {
    const validatedConfig = validateCanaryConfig(config);
    if (typeof validatedConfig.percentage === "number" && percentage > validatedConfig.percentage) {
      continue;
    }
    if (Array.isArray(validatedConfig.clientHostname)) {
      let hostnameMatched = false;
      for (const hostname of validatedConfig.clientHostname) {
        if (hostname === os.hostname()) {
          hostnameMatched = true;
        }
      }
      if (!hostnameMatched) {
        continue;
      }
    }
    if (Array.isArray(validatedConfig.clientLanguage)) {
      let languageMatched = false;
      for (const language of validatedConfig.clientLanguage) {
        if (language === CLIENT_LANGUAGE_STRING) {
          languageMatched = true;
        }
      }
      if (!languageMatched) {
        continue;
      }
    }
    return validatedConfig.serviceConfig;
  }
  throw new Error("No matching service config found");
}
function extractAndSelectServiceConfig(txtRecord, percentage) {
  for (const record of txtRecord) {
    if (record.length > 0 && record[0].startsWith("grpc_config=")) {
      const recordString = record.join("").substring("grpc_config=".length);
      const recordJson = JSON.parse(recordString);
      return validateAndSelectCanaryConfig(recordJson, percentage);
    }
  }
  return null;
}
serviceConfig.extractAndSelectServiceConfig = extractAndSelectServiceConfig;
var uriParser = {};
Object.defineProperty(uriParser, "__esModule", { value: true });
uriParser.uriToString = uriParser.splitHostPort = uriParser.parseUri = void 0;
var URI_REGEX = /^(?:([A-Za-z0-9+.-]+):)?(?:\/\/([^/]*)\/)?(.+)$/;
function parseUri(uriString) {
  const parsedUri = URI_REGEX.exec(uriString);
  if (parsedUri === null) {
    return null;
  }
  return {
    scheme: parsedUri[1],
    authority: parsedUri[2],
    path: parsedUri[3]
  };
}
uriParser.parseUri = parseUri;
var NUMBER_REGEX = /^\d+$/;
function splitHostPort(path2) {
  if (path2.startsWith("[")) {
    const hostEnd = path2.indexOf("]");
    if (hostEnd === -1) {
      return null;
    }
    const host = path2.substring(1, hostEnd);
    if (host.indexOf(":") === -1) {
      return null;
    }
    if (path2.length > hostEnd + 1) {
      if (path2[hostEnd + 1] === ":") {
        const portString = path2.substring(hostEnd + 2);
        if (NUMBER_REGEX.test(portString)) {
          return {
            host,
            port: +portString
          };
        } else {
          return null;
        }
      } else {
        return null;
      }
    } else {
      return {
        host
      };
    }
  } else {
    const splitPath = path2.split(":");
    if (splitPath.length === 2) {
      if (NUMBER_REGEX.test(splitPath[1])) {
        return {
          host: splitPath[0],
          port: +splitPath[1]
        };
      } else {
        return null;
      }
    } else {
      return {
        host: path2
      };
    }
  }
}
uriParser.splitHostPort = splitHostPort;
function uriToString(uri) {
  let result = "";
  if (uri.scheme !== void 0) {
    result += uri.scheme + ":";
  }
  if (uri.authority !== void 0) {
    result += "//" + uri.authority + "/";
  }
  result += uri.path;
  return result;
}
uriParser.uriToString = uriToString;
Object.defineProperty(resolverDns, "__esModule", { value: true });
resolverDns.setup = void 0;
var resolver_1$6 = resolver;
var dns = import_dns.default;
var util$q = import_util2.default;
var service_config_1$1 = serviceConfig;
var constants_1$e = constants;
var metadata_1$6 = metadata;
var logging$8 = logging$a;
var constants_2$1 = constants;
var uri_parser_1$8 = uriParser;
var net_1$1 = import_net.default;
var TRACER_NAME$8 = "dns_resolver";
function trace$8(text) {
  logging$8.trace(constants_2$1.LogVerbosity.DEBUG, TRACER_NAME$8, text);
}
var DEFAULT_PORT$1 = 443;
var resolveTxtPromise = util$q.promisify(dns.resolveTxt);
var dnsLookupPromise = util$q.promisify(dns.lookup);
function mergeArrays(...arrays) {
  const result = [];
  for (let i = 0; i < Math.max.apply(null, arrays.map((array) => array.length)); i++) {
    for (const array of arrays) {
      if (i < array.length) {
        result.push(array[i]);
      }
    }
  }
  return result;
}
var DnsResolver = class {
  constructor(target, listener, channelOptions2) {
    var _a, _b;
    this.target = target;
    this.listener = listener;
    this.pendingLookupPromise = null;
    this.pendingTxtPromise = null;
    this.latestLookupResult = null;
    this.latestServiceConfig = null;
    this.latestServiceConfigError = null;
    trace$8("Resolver constructed for target " + uri_parser_1$8.uriToString(target));
    const hostPort = uri_parser_1$8.splitHostPort(target.path);
    if (hostPort === null) {
      this.ipResult = null;
      this.dnsHostname = null;
      this.port = null;
    } else {
      if (net_1$1.isIPv4(hostPort.host) || net_1$1.isIPv6(hostPort.host)) {
        this.ipResult = [
          {
            host: hostPort.host,
            port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT$1
          }
        ];
        this.dnsHostname = null;
        this.port = null;
      } else {
        this.ipResult = null;
        this.dnsHostname = hostPort.host;
        this.port = (_b = hostPort.port) !== null && _b !== void 0 ? _b : DEFAULT_PORT$1;
      }
    }
    this.percentage = Math.random() * 100;
    this.defaultResolutionError = {
      code: constants_1$e.Status.UNAVAILABLE,
      details: `Name resolution failed for target ${uri_parser_1$8.uriToString(this.target)}`,
      metadata: new metadata_1$6.Metadata()
    };
  }
  startResolution() {
    if (this.ipResult !== null) {
      trace$8("Returning IP address for target " + uri_parser_1$8.uriToString(this.target));
      setImmediate(() => {
        this.listener.onSuccessfulResolution(this.ipResult, null, null, null, {});
      });
      return;
    }
    if (this.dnsHostname === null) {
      setImmediate(() => {
        this.listener.onError({
          code: constants_1$e.Status.UNAVAILABLE,
          details: `Failed to parse DNS address ${uri_parser_1$8.uriToString(this.target)}`,
          metadata: new metadata_1$6.Metadata()
        });
      });
    } else {
      this.latestLookupResult = null;
      const hostname = this.dnsHostname;
      this.pendingLookupPromise = dnsLookupPromise(hostname, { all: true });
      this.pendingLookupPromise.then((addressList) => {
        this.pendingLookupPromise = null;
        const ip4Addresses = addressList.filter((addr) => addr.family === 4);
        const ip6Addresses = addressList.filter((addr) => addr.family === 6);
        this.latestLookupResult = mergeArrays(ip6Addresses, ip4Addresses).map((addr) => ({ host: addr.address, port: +this.port }));
        const allAddressesString = "[" + this.latestLookupResult.map((addr) => addr.host + ":" + addr.port).join(",") + "]";
        trace$8("Resolved addresses for target " + uri_parser_1$8.uriToString(this.target) + ": " + allAddressesString);
        if (this.latestLookupResult.length === 0) {
          this.listener.onError(this.defaultResolutionError);
          return;
        }
        this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});
      }, (err) => {
        trace$8("Resolution error for target " + uri_parser_1$8.uriToString(this.target) + ": " + err.message);
        this.pendingLookupPromise = null;
        this.listener.onError(this.defaultResolutionError);
      });
      if (this.pendingTxtPromise === null) {
        this.pendingTxtPromise = resolveTxtPromise(hostname);
        this.pendingTxtPromise.then((txtRecord) => {
          this.pendingTxtPromise = null;
          try {
            this.latestServiceConfig = service_config_1$1.extractAndSelectServiceConfig(txtRecord, this.percentage);
          } catch (err) {
            this.latestServiceConfigError = {
              code: constants_1$e.Status.UNAVAILABLE,
              details: "Parsing service config failed",
              metadata: new metadata_1$6.Metadata()
            };
          }
          if (this.latestLookupResult !== null) {
            this.listener.onSuccessfulResolution(this.latestLookupResult, this.latestServiceConfig, this.latestServiceConfigError, null, {});
          }
        }, (err) => {
        });
      }
    }
  }
  updateResolution() {
    trace$8("Resolution update requested for target " + uri_parser_1$8.uriToString(this.target));
    if (this.pendingLookupPromise === null) {
      this.startResolution();
    }
  }
  destroy() {
  }
  static getDefaultAuthority(target) {
    return target.path;
  }
};
function setup$4() {
  resolver_1$6.registerResolver("dns", DnsResolver);
  resolver_1$6.registerDefaultScheme("dns");
}
resolverDns.setup = setup$4;
var resolverUds = {};
Object.defineProperty(resolverUds, "__esModule", { value: true });
resolverUds.setup = void 0;
var resolver_1$5 = resolver;
var UdsResolver = class {
  constructor(target, listener, channelOptions2) {
    this.listener = listener;
    this.addresses = [];
    let path2;
    if (target.authority === "") {
      path2 = "/" + target.path;
    } else {
      path2 = target.path;
    }
    this.addresses = [{ path: path2 }];
  }
  updateResolution() {
    process.nextTick(this.listener.onSuccessfulResolution, this.addresses, null, null, null, {});
  }
  destroy() {
  }
  static getDefaultAuthority(target) {
    return "localhost";
  }
};
function setup$3() {
  resolver_1$5.registerResolver("unix", UdsResolver);
}
resolverUds.setup = setup$3;
var resolverIp = {};
Object.defineProperty(resolverIp, "__esModule", { value: true });
resolverIp.setup = void 0;
var net_1 = import_net.default;
var constants_1$d = constants;
var metadata_1$5 = metadata;
var resolver_1$4 = resolver;
var uri_parser_1$7 = uriParser;
var logging$7 = logging$a;
var TRACER_NAME$7 = "ip_resolver";
function trace$7(text) {
  logging$7.trace(constants_1$d.LogVerbosity.DEBUG, TRACER_NAME$7, text);
}
var IPV4_SCHEME = "ipv4";
var IPV6_SCHEME = "ipv6";
var DEFAULT_PORT = 443;
var IpResolver = class {
  constructor(target, listener, channelOptions2) {
    var _a;
    this.target = target;
    this.listener = listener;
    this.addresses = [];
    this.error = null;
    trace$7("Resolver constructed for target " + uri_parser_1$7.uriToString(target));
    const addresses = [];
    if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {
      this.error = {
        code: constants_1$d.Status.UNAVAILABLE,
        details: `Unrecognized scheme ${target.scheme} in IP resolver`,
        metadata: new metadata_1$5.Metadata()
      };
      return;
    }
    const pathList = target.path.split(",");
    for (const path2 of pathList) {
      const hostPort = uri_parser_1$7.splitHostPort(path2);
      if (hostPort === null) {
        this.error = {
          code: constants_1$d.Status.UNAVAILABLE,
          details: `Failed to parse ${target.scheme} address ${path2}`,
          metadata: new metadata_1$5.Metadata()
        };
        return;
      }
      if (target.scheme === IPV4_SCHEME && !net_1.isIPv4(hostPort.host) || target.scheme === IPV6_SCHEME && !net_1.isIPv6(hostPort.host)) {
        this.error = {
          code: constants_1$d.Status.UNAVAILABLE,
          details: `Failed to parse ${target.scheme} address ${path2}`,
          metadata: new metadata_1$5.Metadata()
        };
        return;
      }
      addresses.push({
        host: hostPort.host,
        port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT
      });
    }
    this.addresses = addresses;
    trace$7("Parsed " + target.scheme + " address list " + this.addresses);
  }
  updateResolution() {
    process.nextTick(() => {
      if (this.error) {
        this.listener.onError(this.error);
      } else {
        this.listener.onSuccessfulResolution(this.addresses, null, null, null, {});
      }
    });
  }
  destroy() {
  }
  static getDefaultAuthority(target) {
    return target.path.split(",")[0];
  }
};
function setup$2() {
  resolver_1$4.registerResolver(IPV4_SCHEME, IpResolver);
  resolver_1$4.registerResolver(IPV6_SCHEME, IpResolver);
}
resolverIp.setup = setup$2;
Object.defineProperty(resolver, "__esModule", { value: true });
resolver.registerAll = resolver.mapUriDefaultScheme = resolver.getDefaultAuthority = resolver.createResolver = resolver.registerDefaultScheme = resolver.registerResolver = void 0;
var resolver_dns = resolverDns;
var resolver_uds = resolverUds;
var resolver_ip = resolverIp;
var uri_parser_1$6 = uriParser;
var registeredResolvers = {};
var defaultScheme = null;
function registerResolver(scheme, resolverClass) {
  registeredResolvers[scheme] = resolverClass;
}
resolver.registerResolver = registerResolver;
function registerDefaultScheme(scheme) {
  defaultScheme = scheme;
}
resolver.registerDefaultScheme = registerDefaultScheme;
function createResolver(target, listener, options2) {
  if (target.scheme !== void 0 && target.scheme in registeredResolvers) {
    return new registeredResolvers[target.scheme](target, listener, options2);
  } else {
    throw new Error(`No resolver could be created for target ${uri_parser_1$6.uriToString(target)}`);
  }
}
resolver.createResolver = createResolver;
function getDefaultAuthority(target) {
  if (target.scheme !== void 0 && target.scheme in registeredResolvers) {
    return registeredResolvers[target.scheme].getDefaultAuthority(target);
  } else {
    throw new Error(`Invalid target ${uri_parser_1$6.uriToString(target)}`);
  }
}
resolver.getDefaultAuthority = getDefaultAuthority;
function mapUriDefaultScheme(target) {
  if (target.scheme === void 0 || !(target.scheme in registeredResolvers)) {
    if (defaultScheme !== null) {
      return {
        scheme: defaultScheme,
        authority: void 0,
        path: uri_parser_1$6.uriToString(target)
      };
    } else {
      return null;
    }
  }
  return target;
}
resolver.mapUriDefaultScheme = mapUriDefaultScheme;
function registerAll$1() {
  resolver_dns.setup();
  resolver_uds.setup();
  resolver_ip.setup();
}
resolver.registerAll = registerAll$1;
var http_proxy = {};
Object.defineProperty(http_proxy, "__esModule", { value: true });
http_proxy.getProxiedConnection = http_proxy.mapProxyName = void 0;
var logging_1 = logging$a;
var constants_1$c = constants;
var resolver_1$3 = resolver;
var http2 = import_http3.default;
var tls = import_tls.default;
var logging$6 = logging$a;
var subchannel_1$4 = subchannel;
var uri_parser_1$5 = uriParser;
var TRACER_NAME$6 = "proxy";
function trace$6(text) {
  logging$6.trace(constants_1$c.LogVerbosity.DEBUG, TRACER_NAME$6, text);
}
function getProxyInfo() {
  {
    return {};
  }
}
function getNoProxyHostList() {
  let noProxyStr = {}.no_grpc_proxy;
  let envVar = "no_grpc_proxy";
  if (!noProxyStr) {
    noProxyStr = {}.no_proxy;
    envVar = "no_proxy";
  }
  if (noProxyStr) {
    trace$6("No proxy server list set by environment variable " + envVar);
    return noProxyStr.split(",");
  } else {
    return [];
  }
}
function mapProxyName(target, options2) {
  var _a;
  const noProxyResult = {
    target,
    extraOptions: {}
  };
  if (((_a = options2["grpc.enable_http_proxy"]) !== null && _a !== void 0 ? _a : 1) === 0) {
    return noProxyResult;
  }
  const proxyInfo = getProxyInfo();
  if (!proxyInfo.address) {
    return noProxyResult;
  }
  const hostPort = uri_parser_1$5.splitHostPort(target.path);
  if (!hostPort) {
    return noProxyResult;
  }
  const serverHost = hostPort.host;
  for (const host of getNoProxyHostList()) {
    if (host === serverHost) {
      trace$6("Not using proxy for target in no_proxy list: " + uri_parser_1$5.uriToString(target));
      return noProxyResult;
    }
  }
  const extraOptions = {
    "grpc.http_connect_target": uri_parser_1$5.uriToString(target)
  };
  if (proxyInfo.creds) {
    extraOptions["grpc.http_connect_creds"] = proxyInfo.creds;
  }
  return {
    target: {
      scheme: "dns",
      path: proxyInfo.address
    },
    extraOptions
  };
}
http_proxy.mapProxyName = mapProxyName;
function getProxiedConnection(address, channelOptions2, connectionOptions) {
  if (!("grpc.http_connect_target" in channelOptions2)) {
    return Promise.resolve({});
  }
  const realTarget = channelOptions2["grpc.http_connect_target"];
  const parsedTarget = uri_parser_1$5.parseUri(realTarget);
  if (parsedTarget === null) {
    return Promise.resolve({});
  }
  const options2 = {
    method: "CONNECT",
    path: parsedTarget.path
  };
  if (subchannel_1$4.isTcpSubchannelAddress(address)) {
    options2.host = address.host;
    options2.port = address.port;
  } else {
    options2.socketPath = address.path;
  }
  if ("grpc.http_connect_creds" in channelOptions2) {
    options2.headers = {
      "Proxy-Authorization": "Basic " + Buffer.from(channelOptions2["grpc.http_connect_creds"]).toString("base64")
    };
  }
  const proxyAddressString = subchannel_1$4.subchannelAddressToString(address);
  trace$6("Using proxy " + proxyAddressString + " to connect to " + options2.path);
  return new Promise((resolve6, reject) => {
    const request = http2.request(options2);
    request.once("connect", (res, socket, head) => {
      var _a;
      request.removeAllListeners();
      socket.removeAllListeners();
      if (res.statusCode === 200) {
        trace$6("Successfully connected to " + options2.path + " through proxy " + proxyAddressString);
        if ("secureContext" in connectionOptions) {
          const targetPath = resolver_1$3.getDefaultAuthority(parsedTarget);
          const hostPort = uri_parser_1$5.splitHostPort(targetPath);
          const remoteHost = (_a = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _a !== void 0 ? _a : targetPath;
          const cts = tls.connect(Object.assign({ host: remoteHost, servername: remoteHost, socket }, connectionOptions), () => {
            trace$6("Successfully established a TLS connection to " + options2.path + " through proxy " + proxyAddressString);
            resolve6({ socket: cts, realTarget: parsedTarget });
          });
          cts.on("error", (error2) => {
            trace$6("Failed to establish a TLS connection to " + options2.path + " through proxy " + proxyAddressString + " with error " + error2.message);
            reject();
          });
        } else {
          trace$6("Successfully established a plaintext connection to " + options2.path + " through proxy " + proxyAddressString);
          resolve6({
            socket,
            realTarget: parsedTarget
          });
        }
      } else {
        logging_1.log(constants_1$c.LogVerbosity.ERROR, "Failed to connect to " + options2.path + " through proxy " + proxyAddressString + " with status " + res.statusCode);
        reject();
      }
    });
    request.once("error", (err) => {
      request.removeAllListeners();
      logging_1.log(constants_1$c.LogVerbosity.ERROR, "Failed to connect to proxy " + proxyAddressString + " with error " + err.message);
      reject();
    });
    request.end();
  });
}
http_proxy.getProxiedConnection = getProxiedConnection;
var _from = "@grpc/grpc-js@^1.3.2";
var _id = "@grpc/grpc-js@1.3.7";
var _inBundle = false;
var _integrity = "sha512-CKQVuwuSPh40tgOkR7c0ZisxYRiN05PcKPW72mQL5y++qd7CwBRoaJZvU5xfXnCJDFBmS3qZGQ71Frx6Ofo2XA==";
var _location = "/@grpc/grpc-js";
var _phantomChildren = {};
var _requested = {
  type: "range",
  registry: true,
  raw: "@grpc/grpc-js@^1.3.2",
  name: "@grpc/grpc-js",
  escapedName: "@grpc%2fgrpc-js",
  scope: "@grpc",
  rawSpec: "^1.3.2",
  saveSpec: null,
  fetchSpec: "^1.3.2"
};
var _requiredBy = [
  "/@firebase/firestore"
];
var _resolved = "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.3.7.tgz";
var _shasum = "58b687aff93b743aafde237fd2ee9a3259d7f2d8";
var _spec = "@grpc/grpc-js@^1.3.2";
var _where = "E:\\SvelteJS\\signcounter\\node_modules\\@firebase\\firestore";
var author = {
  name: "Google Inc."
};
var bundleDependencies = false;
var contributors = [
  {
    name: "Google Inc."
  }
];
var dependencies = {
  "@types/node": ">=12.12.47"
};
var deprecated = false;
var description = "gRPC Library for Node - pure JS implementation";
var devDependencies = {
  "@grpc/proto-loader": "^0.5.5",
  "@types/gulp": "^4.0.6",
  "@types/gulp-mocha": "0.0.32",
  "@types/lodash": "^4.14.108",
  "@types/mocha": "^5.2.6",
  "@types/ncp": "^2.0.1",
  "@types/pify": "^3.0.2",
  "@types/yargs": "^15.0.5",
  "clang-format": "^1.0.55",
  execa: "^2.0.3",
  gts: "^2.0.0",
  gulp: "^4.0.2",
  "gulp-mocha": "^6.0.0",
  lodash: "^4.17.4",
  "mocha-jenkins-reporter": "^0.4.1",
  ncp: "^2.0.0",
  pify: "^4.0.1",
  rimraf: "^3.0.2",
  "ts-node": "^8.3.0",
  typescript: "^3.7.2",
  yargs: "^15.4.1"
};
var engines = {
  node: "^8.13.0 || >=10.10.0"
};
var files = [
  "src/**/*.ts",
  "build/src/*.{js,d.ts,js.map}",
  "LICENSE",
  "deps/envoy-api/envoy/api/v2/**/*.proto",
  "deps/envoy-api/envoy/config/**/*.proto",
  "deps/envoy-api/envoy/service/**/*.proto",
  "deps/envoy-api/envoy/type/**/*.proto",
  "deps/udpa/udpa/**/*.proto",
  "deps/googleapis/google/api/*.proto",
  "deps/googleapis/google/rpc/*.proto",
  "deps/protoc-gen-validate/validate/**/*.proto"
];
var homepage = "https://grpc.io/";
var keywords = [];
var license = "Apache-2.0";
var main = "build/src/index.js";
var name$1 = "@grpc/grpc-js";
var repository = {
  type: "git",
  url: "https://github.com/grpc/grpc-node/tree/master/packages/grpc-js"
};
var scripts = {
  build: "npm run compile",
  check: "gts check src/**/*.ts",
  clean: `node -e 'require("rimraf")("./build", () => {})'`,
  compile: "tsc -p .",
  fix: "gts fix src/*.ts",
  format: 'clang-format -i -style="{Language: JavaScript, BasedOnStyle: Google, ColumnLimit: 80}" src/*.ts test/*.ts',
  lint: "npm run check",
  posttest: "npm run check",
  prepare: "npm run compile",
  pretest: "npm run compile",
  test: "gulp test"
};
var types$6 = "build/src/index.d.ts";
var version$2 = "1.3.7";
var require$$8 = {
  _from,
  _id,
  _inBundle,
  _integrity,
  _location,
  _phantomChildren,
  _requested,
  _requiredBy,
  _resolved,
  _shasum,
  _spec,
  _where,
  author,
  bundleDependencies,
  contributors,
  dependencies,
  deprecated,
  description,
  devDependencies,
  engines,
  files,
  homepage,
  keywords,
  license,
  main,
  name: name$1,
  repository,
  scripts,
  types: types$6,
  version: version$2
};
Object.defineProperty(subchannel, "__esModule", { value: true });
subchannel.Subchannel = subchannel.subchannelAddressToString = subchannel.subchannelAddressEqual = subchannel.isTcpSubchannelAddress = void 0;
var http2$2 = import_http2.default;
var tls_1 = import_tls.default;
var channel_1$5 = channel;
var backoff_timeout_1$1 = backoffTimeout;
var resolver_1$2 = resolver;
var logging$5 = logging$a;
var constants_1$b = constants;
var http_proxy_1 = http_proxy;
var net = import_net.default;
var uri_parser_1$4 = uriParser;
var clientVersion = require$$8.version;
var TRACER_NAME$5 = "subchannel";
function trace$5(text) {
  logging$5.trace(constants_1$b.LogVerbosity.DEBUG, TRACER_NAME$5, text);
}
function refTrace(text) {
  logging$5.trace(constants_1$b.LogVerbosity.DEBUG, "subchannel_refcount", text);
}
var KEEPALIVE_MAX_TIME_MS = ~(1 << 31);
var KEEPALIVE_TIMEOUT_MS = 2e4;
var { HTTP2_HEADER_AUTHORITY, HTTP2_HEADER_CONTENT_TYPE, HTTP2_HEADER_METHOD, HTTP2_HEADER_PATH, HTTP2_HEADER_TE, HTTP2_HEADER_USER_AGENT } = http2$2.constants;
var tooManyPingsData = Buffer.from("too_many_pings", "ascii");
function isTcpSubchannelAddress(address) {
  return "port" in address;
}
subchannel.isTcpSubchannelAddress = isTcpSubchannelAddress;
function subchannelAddressEqual(address1, address2) {
  if (isTcpSubchannelAddress(address1)) {
    return isTcpSubchannelAddress(address2) && address1.host === address2.host && address1.port === address2.port;
  } else {
    return !isTcpSubchannelAddress(address2) && address1.path === address2.path;
  }
}
subchannel.subchannelAddressEqual = subchannelAddressEqual;
function subchannelAddressToString(address) {
  if (isTcpSubchannelAddress(address)) {
    return address.host + ":" + address.port;
  } else {
    return address.path;
  }
}
subchannel.subchannelAddressToString = subchannelAddressToString;
var Subchannel = class {
  constructor(channelTarget, subchannelAddress, options2, credentials) {
    this.channelTarget = channelTarget;
    this.subchannelAddress = subchannelAddress;
    this.options = options2;
    this.credentials = credentials;
    this.connectivityState = channel_1$5.ConnectivityState.IDLE;
    this.session = null;
    this.continueConnecting = false;
    this.stateListeners = [];
    this.disconnectListeners = [];
    this.keepaliveTimeMs = KEEPALIVE_MAX_TIME_MS;
    this.keepaliveTimeoutMs = KEEPALIVE_TIMEOUT_MS;
    this.keepaliveWithoutCalls = false;
    this.callRefcount = 0;
    this.refcount = 0;
    this.userAgent = [
      options2["grpc.primary_user_agent"],
      `grpc-node-js/${clientVersion}`,
      options2["grpc.secondary_user_agent"]
    ].filter((e) => e).join(" ");
    if ("grpc.keepalive_time_ms" in options2) {
      this.keepaliveTimeMs = options2["grpc.keepalive_time_ms"];
    }
    if ("grpc.keepalive_timeout_ms" in options2) {
      this.keepaliveTimeoutMs = options2["grpc.keepalive_timeout_ms"];
    }
    if ("grpc.keepalive_permit_without_calls" in options2) {
      this.keepaliveWithoutCalls = options2["grpc.keepalive_permit_without_calls"] === 1;
    } else {
      this.keepaliveWithoutCalls = false;
    }
    this.keepaliveIntervalId = setTimeout(() => {
    }, 0);
    clearTimeout(this.keepaliveIntervalId);
    this.keepaliveTimeoutId = setTimeout(() => {
    }, 0);
    clearTimeout(this.keepaliveTimeoutId);
    const backoffOptions = {
      initialDelay: options2["grpc.initial_reconnect_backoff_ms"],
      maxDelay: options2["grpc.max_reconnect_backoff_ms"]
    };
    this.backoffTimeout = new backoff_timeout_1$1.BackoffTimeout(() => {
      this.handleBackoffTimer();
    }, backoffOptions);
    this.subchannelAddressString = subchannelAddressToString(subchannelAddress);
  }
  handleBackoffTimer() {
    if (this.continueConnecting) {
      this.transitionToState([channel_1$5.ConnectivityState.TRANSIENT_FAILURE], channel_1$5.ConnectivityState.CONNECTING);
    } else {
      this.transitionToState([channel_1$5.ConnectivityState.TRANSIENT_FAILURE], channel_1$5.ConnectivityState.IDLE);
    }
  }
  startBackoff() {
    this.backoffTimeout.runOnce();
  }
  stopBackoff() {
    this.backoffTimeout.stop();
    this.backoffTimeout.reset();
  }
  sendPing() {
    var _a, _b;
    logging$5.trace(constants_1$b.LogVerbosity.DEBUG, "keepalive", "Sending ping to " + this.subchannelAddressString);
    this.keepaliveTimeoutId = setTimeout(() => {
      this.transitionToState([channel_1$5.ConnectivityState.READY], channel_1$5.ConnectivityState.IDLE);
    }, this.keepaliveTimeoutMs);
    (_b = (_a = this.keepaliveTimeoutId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
    this.session.ping((err, duration, payload) => {
      clearTimeout(this.keepaliveTimeoutId);
    });
  }
  startKeepalivePings() {
    var _a, _b;
    this.keepaliveIntervalId = setInterval(() => {
      this.sendPing();
    }, this.keepaliveTimeMs);
    (_b = (_a = this.keepaliveIntervalId).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
  }
  stopKeepalivePings() {
    clearInterval(this.keepaliveIntervalId);
    clearTimeout(this.keepaliveTimeoutId);
  }
  createSession(proxyConnectionResult) {
    var _a, _b, _c;
    if (proxyConnectionResult.realTarget) {
      trace$5(this.subchannelAddressString + " creating HTTP/2 session through proxy to " + proxyConnectionResult.realTarget);
    } else {
      trace$5(this.subchannelAddressString + " creating HTTP/2 session");
    }
    const targetAuthority = resolver_1$2.getDefaultAuthority((_a = proxyConnectionResult.realTarget) !== null && _a !== void 0 ? _a : this.channelTarget);
    let connectionOptions = this.credentials._getConnectionOptions() || {};
    connectionOptions.maxSendHeaderBlockLength = Number.MAX_SAFE_INTEGER;
    if ("grpc-node.max_session_memory" in this.options) {
      connectionOptions.maxSessionMemory = this.options["grpc-node.max_session_memory"];
    }
    let addressScheme = "http://";
    if ("secureContext" in connectionOptions) {
      addressScheme = "https://";
      if (this.options["grpc.ssl_target_name_override"]) {
        const sslTargetNameOverride = this.options["grpc.ssl_target_name_override"];
        connectionOptions.checkServerIdentity = (host, cert) => {
          return tls_1.checkServerIdentity(sslTargetNameOverride, cert);
        };
        connectionOptions.servername = sslTargetNameOverride;
      } else {
        const authorityHostname = (_c = (_b = uri_parser_1$4.splitHostPort(targetAuthority)) === null || _b === void 0 ? void 0 : _b.host) !== null && _c !== void 0 ? _c : "localhost";
        connectionOptions.servername = authorityHostname;
      }
      if (proxyConnectionResult.socket) {
        connectionOptions.createConnection = (authority, option) => {
          return proxyConnectionResult.socket;
        };
      }
    } else {
      connectionOptions.createConnection = (authority, option) => {
        if (proxyConnectionResult.socket) {
          return proxyConnectionResult.socket;
        } else {
          return net.connect(this.subchannelAddress);
        }
      };
    }
    connectionOptions = Object.assign(Object.assign({}, connectionOptions), this.subchannelAddress);
    const session = http2$2.connect(addressScheme + targetAuthority, connectionOptions);
    this.session = session;
    session.unref();
    session.once("connect", () => {
      if (this.session === session) {
        this.transitionToState([channel_1$5.ConnectivityState.CONNECTING], channel_1$5.ConnectivityState.READY);
      }
    });
    session.once("close", () => {
      if (this.session === session) {
        trace$5(this.subchannelAddressString + " connection closed");
        this.transitionToState([channel_1$5.ConnectivityState.CONNECTING], channel_1$5.ConnectivityState.TRANSIENT_FAILURE);
        this.transitionToState([channel_1$5.ConnectivityState.READY], channel_1$5.ConnectivityState.IDLE);
      }
    });
    session.once("goaway", (errorCode, lastStreamID, opaqueData) => {
      if (this.session === session) {
        if (errorCode === http2$2.constants.NGHTTP2_ENHANCE_YOUR_CALM && opaqueData.equals(tooManyPingsData)) {
          this.keepaliveTimeMs = Math.min(2 * this.keepaliveTimeMs, KEEPALIVE_MAX_TIME_MS);
          logging$5.log(constants_1$b.LogVerbosity.ERROR, `Connection to ${uri_parser_1$4.uriToString(this.channelTarget)} at ${this.subchannelAddressString} rejected by server because of excess pings. Increasing ping interval to ${this.keepaliveTimeMs} ms`);
        }
        trace$5(this.subchannelAddressString + " connection closed by GOAWAY with code " + errorCode);
        this.transitionToState([channel_1$5.ConnectivityState.CONNECTING, channel_1$5.ConnectivityState.READY], channel_1$5.ConnectivityState.IDLE);
      }
    });
    session.once("error", (error2) => {
      trace$5(this.subchannelAddressString + " connection closed with error " + error2.message);
    });
  }
  startConnectingInternal() {
    var _a, _b;
    const connectionOptions = this.credentials._getConnectionOptions() || {};
    if ("secureContext" in connectionOptions) {
      connectionOptions.ALPNProtocols = ["h2"];
      if (this.options["grpc.ssl_target_name_override"]) {
        const sslTargetNameOverride = this.options["grpc.ssl_target_name_override"];
        connectionOptions.checkServerIdentity = (host, cert) => {
          return tls_1.checkServerIdentity(sslTargetNameOverride, cert);
        };
        connectionOptions.servername = sslTargetNameOverride;
      } else {
        if ("grpc.http_connect_target" in this.options) {
          const targetPath = resolver_1$2.getDefaultAuthority((_a = uri_parser_1$4.parseUri(this.options["grpc.http_connect_target"])) !== null && _a !== void 0 ? _a : {
            path: "localhost"
          });
          const hostPort = uri_parser_1$4.splitHostPort(targetPath);
          connectionOptions.servername = (_b = hostPort === null || hostPort === void 0 ? void 0 : hostPort.host) !== null && _b !== void 0 ? _b : targetPath;
        }
      }
    }
    http_proxy_1.getProxiedConnection(this.subchannelAddress, this.options, connectionOptions).then((result) => {
      this.createSession(result);
    }, (reason) => {
      this.transitionToState([channel_1$5.ConnectivityState.CONNECTING], channel_1$5.ConnectivityState.TRANSIENT_FAILURE);
    });
  }
  transitionToState(oldStates, newState) {
    if (oldStates.indexOf(this.connectivityState) === -1) {
      return false;
    }
    trace$5(this.subchannelAddressString + " " + channel_1$5.ConnectivityState[this.connectivityState] + " -> " + channel_1$5.ConnectivityState[newState]);
    const previousState = this.connectivityState;
    this.connectivityState = newState;
    switch (newState) {
      case channel_1$5.ConnectivityState.READY:
        this.stopBackoff();
        this.session.socket.once("close", () => {
          for (const listener of this.disconnectListeners) {
            listener();
          }
        });
        if (this.keepaliveWithoutCalls) {
          this.startKeepalivePings();
        }
        break;
      case channel_1$5.ConnectivityState.CONNECTING:
        this.startBackoff();
        this.startConnectingInternal();
        this.continueConnecting = false;
        break;
      case channel_1$5.ConnectivityState.TRANSIENT_FAILURE:
        if (this.session) {
          this.session.close();
        }
        this.session = null;
        this.stopKeepalivePings();
        if (!this.backoffTimeout.isRunning()) {
          process.nextTick(() => {
            this.handleBackoffTimer();
          });
        }
        break;
      case channel_1$5.ConnectivityState.IDLE:
        if (this.session) {
          this.session.close();
        }
        this.session = null;
        this.stopKeepalivePings();
        break;
      default:
        throw new Error(`Invalid state: unknown ConnectivityState ${newState}`);
    }
    for (const listener of [...this.stateListeners]) {
      listener(this, previousState, newState);
    }
    return true;
  }
  checkBothRefcounts() {
    if (this.callRefcount === 0 && this.refcount === 0) {
      this.transitionToState([
        channel_1$5.ConnectivityState.CONNECTING,
        channel_1$5.ConnectivityState.READY
      ], channel_1$5.ConnectivityState.TRANSIENT_FAILURE);
    }
  }
  callRef() {
    refTrace(this.subchannelAddressString + " callRefcount " + this.callRefcount + " -> " + (this.callRefcount + 1));
    if (this.callRefcount === 0) {
      if (this.session) {
        this.session.ref();
      }
      this.backoffTimeout.ref();
      if (!this.keepaliveWithoutCalls) {
        this.startKeepalivePings();
      }
    }
    this.callRefcount += 1;
  }
  callUnref() {
    refTrace(this.subchannelAddressString + " callRefcount " + this.callRefcount + " -> " + (this.callRefcount - 1));
    this.callRefcount -= 1;
    if (this.callRefcount === 0) {
      if (this.session) {
        this.session.unref();
      }
      this.backoffTimeout.unref();
      if (!this.keepaliveWithoutCalls) {
        this.stopKeepalivePings();
      }
      this.checkBothRefcounts();
    }
  }
  ref() {
    refTrace(this.subchannelAddressString + " refcount " + this.refcount + " -> " + (this.refcount + 1));
    this.refcount += 1;
  }
  unref() {
    refTrace(this.subchannelAddressString + " refcount " + this.refcount + " -> " + (this.refcount - 1));
    this.refcount -= 1;
    this.checkBothRefcounts();
  }
  unrefIfOneRef() {
    if (this.refcount === 1) {
      this.unref();
      return true;
    }
    return false;
  }
  startCallStream(metadata2, callStream2, extraFilterFactory) {
    const headers = metadata2.toHttp2Headers();
    headers[HTTP2_HEADER_AUTHORITY] = callStream2.getHost();
    headers[HTTP2_HEADER_USER_AGENT] = this.userAgent;
    headers[HTTP2_HEADER_CONTENT_TYPE] = "application/grpc";
    headers[HTTP2_HEADER_METHOD] = "POST";
    headers[HTTP2_HEADER_PATH] = callStream2.getMethod();
    headers[HTTP2_HEADER_TE] = "trailers";
    let http2Stream;
    try {
      http2Stream = this.session.request(headers);
    } catch (e) {
      this.transitionToState([channel_1$5.ConnectivityState.READY], channel_1$5.ConnectivityState.TRANSIENT_FAILURE);
      throw e;
    }
    let headersString = "";
    for (const header of Object.keys(headers)) {
      headersString += "		" + header + ": " + headers[header] + "\n";
    }
    logging$5.trace(constants_1$b.LogVerbosity.DEBUG, "call_stream", "Starting stream on subchannel " + this.subchannelAddressString + " with headers\n" + headersString);
    callStream2.attachHttp2Stream(http2Stream, this, extraFilterFactory);
  }
  startConnecting() {
    if (!this.transitionToState([channel_1$5.ConnectivityState.IDLE], channel_1$5.ConnectivityState.CONNECTING)) {
      if (this.connectivityState === channel_1$5.ConnectivityState.TRANSIENT_FAILURE) {
        this.continueConnecting = true;
      }
    }
  }
  getConnectivityState() {
    return this.connectivityState;
  }
  addConnectivityStateListener(listener) {
    this.stateListeners.push(listener);
  }
  removeConnectivityStateListener(listener) {
    const listenerIndex = this.stateListeners.indexOf(listener);
    if (listenerIndex > -1) {
      this.stateListeners.splice(listenerIndex, 1);
    }
  }
  addDisconnectListener(listener) {
    this.disconnectListeners.push(listener);
  }
  removeDisconnectListener(listener) {
    const listenerIndex = this.disconnectListeners.indexOf(listener);
    if (listenerIndex > -1) {
      this.disconnectListeners.splice(listenerIndex, 1);
    }
  }
  resetBackoff() {
    this.backoffTimeout.reset();
    this.transitionToState([channel_1$5.ConnectivityState.TRANSIENT_FAILURE], channel_1$5.ConnectivityState.CONNECTING);
  }
  getAddress() {
    return this.subchannelAddressString;
  }
};
subchannel.Subchannel = Subchannel;
Object.defineProperty(loadBalancerPickFirst, "__esModule", { value: true });
loadBalancerPickFirst.setup = loadBalancerPickFirst.PickFirstLoadBalancer = loadBalancerPickFirst.PickFirstLoadBalancingConfig = void 0;
var load_balancer_1$3 = loadBalancer;
var channel_1$4 = channel;
var picker_1$2 = picker;
var subchannel_1$3 = subchannel;
var logging$4 = logging$a;
var constants_1$a = constants;
var TRACER_NAME$4 = "pick_first";
function trace$4(text) {
  logging$4.trace(constants_1$a.LogVerbosity.DEBUG, TRACER_NAME$4, text);
}
var TYPE_NAME$2 = "pick_first";
var CONNECTION_DELAY_INTERVAL_MS = 250;
var PickFirstLoadBalancingConfig = class {
  getLoadBalancerName() {
    return TYPE_NAME$2;
  }
  constructor() {
  }
  toJsonObject() {
    return {
      [TYPE_NAME$2]: {}
    };
  }
  static createFromJson(obj) {
    return new PickFirstLoadBalancingConfig();
  }
};
loadBalancerPickFirst.PickFirstLoadBalancingConfig = PickFirstLoadBalancingConfig;
var PickFirstPicker = class {
  constructor(subchannel2) {
    this.subchannel = subchannel2;
  }
  pick(pickArgs) {
    return {
      pickResultType: picker_1$2.PickResultType.COMPLETE,
      subchannel: this.subchannel,
      status: null,
      extraFilterFactory: null,
      onCallStarted: null
    };
  }
};
var PickFirstLoadBalancer = class {
  constructor(channelControlHelper) {
    this.channelControlHelper = channelControlHelper;
    this.latestAddressList = [];
    this.subchannels = [];
    this.currentState = channel_1$4.ConnectivityState.IDLE;
    this.currentSubchannelIndex = 0;
    this.currentPick = null;
    this.triedAllSubchannels = false;
    this.subchannelStateCounts = {
      [channel_1$4.ConnectivityState.CONNECTING]: 0,
      [channel_1$4.ConnectivityState.IDLE]: 0,
      [channel_1$4.ConnectivityState.READY]: 0,
      [channel_1$4.ConnectivityState.SHUTDOWN]: 0,
      [channel_1$4.ConnectivityState.TRANSIENT_FAILURE]: 0
    };
    this.subchannelStateListener = (subchannel2, previousState, newState) => {
      this.subchannelStateCounts[previousState] -= 1;
      this.subchannelStateCounts[newState] += 1;
      if (subchannel2 === this.subchannels[this.currentSubchannelIndex] && newState === channel_1$4.ConnectivityState.TRANSIENT_FAILURE) {
        this.startNextSubchannelConnecting();
      }
      if (newState === channel_1$4.ConnectivityState.READY) {
        this.pickSubchannel(subchannel2);
        return;
      } else {
        if (this.triedAllSubchannels && this.subchannelStateCounts[channel_1$4.ConnectivityState.IDLE] === this.subchannels.length) {
          this.resetSubchannelList();
          this.updateState(channel_1$4.ConnectivityState.IDLE, new picker_1$2.QueuePicker(this));
          return;
        }
        if (this.currentPick === null) {
          if (this.triedAllSubchannels) {
            let newLBState;
            if (this.subchannelStateCounts[channel_1$4.ConnectivityState.CONNECTING] > 0) {
              newLBState = channel_1$4.ConnectivityState.CONNECTING;
            } else if (this.subchannelStateCounts[channel_1$4.ConnectivityState.TRANSIENT_FAILURE] > 0) {
              newLBState = channel_1$4.ConnectivityState.TRANSIENT_FAILURE;
            } else {
              newLBState = channel_1$4.ConnectivityState.IDLE;
            }
            if (newLBState !== this.currentState) {
              if (newLBState === channel_1$4.ConnectivityState.TRANSIENT_FAILURE) {
                this.updateState(newLBState, new picker_1$2.UnavailablePicker());
              } else {
                this.updateState(newLBState, new picker_1$2.QueuePicker(this));
              }
            }
          } else {
            this.updateState(channel_1$4.ConnectivityState.CONNECTING, new picker_1$2.QueuePicker(this));
          }
        }
      }
    };
    this.pickedSubchannelStateListener = (subchannel2, previousState, newState) => {
      if (newState !== channel_1$4.ConnectivityState.READY) {
        this.currentPick = null;
        subchannel2.unref();
        subchannel2.removeConnectivityStateListener(this.pickedSubchannelStateListener);
        if (this.subchannels.length > 0) {
          if (this.triedAllSubchannels) {
            let newLBState;
            if (this.subchannelStateCounts[channel_1$4.ConnectivityState.CONNECTING] > 0) {
              newLBState = channel_1$4.ConnectivityState.CONNECTING;
            } else if (this.subchannelStateCounts[channel_1$4.ConnectivityState.TRANSIENT_FAILURE] > 0) {
              newLBState = channel_1$4.ConnectivityState.TRANSIENT_FAILURE;
            } else {
              newLBState = channel_1$4.ConnectivityState.IDLE;
            }
            if (newLBState === channel_1$4.ConnectivityState.TRANSIENT_FAILURE) {
              this.updateState(newLBState, new picker_1$2.UnavailablePicker());
            } else {
              this.updateState(newLBState, new picker_1$2.QueuePicker(this));
            }
          } else {
            this.updateState(channel_1$4.ConnectivityState.CONNECTING, new picker_1$2.QueuePicker(this));
          }
        } else {
          this.updateState(channel_1$4.ConnectivityState.IDLE, new picker_1$2.QueuePicker(this));
        }
      }
    };
    this.connectionDelayTimeout = setTimeout(() => {
    }, 0);
    clearTimeout(this.connectionDelayTimeout);
  }
  startNextSubchannelConnecting() {
    if (this.triedAllSubchannels) {
      return;
    }
    for (const [index2, subchannel2] of this.subchannels.entries()) {
      if (index2 > this.currentSubchannelIndex) {
        const subchannelState = subchannel2.getConnectivityState();
        if (subchannelState === channel_1$4.ConnectivityState.IDLE || subchannelState === channel_1$4.ConnectivityState.CONNECTING) {
          this.startConnecting(index2);
          return;
        }
      }
    }
    this.triedAllSubchannels = true;
  }
  startConnecting(subchannelIndex) {
    clearTimeout(this.connectionDelayTimeout);
    this.currentSubchannelIndex = subchannelIndex;
    if (this.subchannels[subchannelIndex].getConnectivityState() === channel_1$4.ConnectivityState.IDLE) {
      trace$4("Start connecting to subchannel with address " + this.subchannels[subchannelIndex].getAddress());
      process.nextTick(() => {
        this.subchannels[subchannelIndex].startConnecting();
      });
    }
    this.connectionDelayTimeout = setTimeout(() => {
      this.startNextSubchannelConnecting();
    }, CONNECTION_DELAY_INTERVAL_MS);
  }
  pickSubchannel(subchannel2) {
    trace$4("Pick subchannel with address " + subchannel2.getAddress());
    if (this.currentPick !== null) {
      this.currentPick.unref();
      this.currentPick.removeConnectivityStateListener(this.pickedSubchannelStateListener);
    }
    this.currentPick = subchannel2;
    this.updateState(channel_1$4.ConnectivityState.READY, new PickFirstPicker(subchannel2));
    subchannel2.addConnectivityStateListener(this.pickedSubchannelStateListener);
    subchannel2.ref();
    this.resetSubchannelList();
    clearTimeout(this.connectionDelayTimeout);
  }
  updateState(newState, picker2) {
    trace$4(channel_1$4.ConnectivityState[this.currentState] + " -> " + channel_1$4.ConnectivityState[newState]);
    this.currentState = newState;
    this.channelControlHelper.updateState(newState, picker2);
  }
  resetSubchannelList() {
    for (const subchannel2 of this.subchannels) {
      subchannel2.removeConnectivityStateListener(this.subchannelStateListener);
      subchannel2.unref();
    }
    this.currentSubchannelIndex = 0;
    this.subchannelStateCounts = {
      [channel_1$4.ConnectivityState.CONNECTING]: 0,
      [channel_1$4.ConnectivityState.IDLE]: 0,
      [channel_1$4.ConnectivityState.READY]: 0,
      [channel_1$4.ConnectivityState.SHUTDOWN]: 0,
      [channel_1$4.ConnectivityState.TRANSIENT_FAILURE]: 0
    };
    this.subchannels = [];
    this.triedAllSubchannels = false;
  }
  connectToAddressList() {
    this.resetSubchannelList();
    trace$4("Connect to address list " + this.latestAddressList.map((address) => subchannel_1$3.subchannelAddressToString(address)));
    this.subchannels = this.latestAddressList.map((address) => this.channelControlHelper.createSubchannel(address, {}));
    for (const subchannel2 of this.subchannels) {
      subchannel2.ref();
    }
    for (const subchannel2 of this.subchannels) {
      subchannel2.addConnectivityStateListener(this.subchannelStateListener);
      this.subchannelStateCounts[subchannel2.getConnectivityState()] += 1;
      if (subchannel2.getConnectivityState() === channel_1$4.ConnectivityState.READY) {
        this.pickSubchannel(subchannel2);
        this.resetSubchannelList();
        return;
      }
    }
    for (const [index2, subchannel2] of this.subchannels.entries()) {
      const subchannelState = subchannel2.getConnectivityState();
      if (subchannelState === channel_1$4.ConnectivityState.IDLE || subchannelState === channel_1$4.ConnectivityState.CONNECTING) {
        this.startConnecting(index2);
        if (this.currentPick === null) {
          this.updateState(channel_1$4.ConnectivityState.CONNECTING, new picker_1$2.QueuePicker(this));
        }
        return;
      }
    }
    if (this.currentPick === null) {
      this.updateState(channel_1$4.ConnectivityState.TRANSIENT_FAILURE, new picker_1$2.UnavailablePicker());
    }
  }
  updateAddressList(addressList, lbConfig) {
    if (this.subchannels.length === 0 || !this.latestAddressList.every((value, index2) => addressList[index2] === value)) {
      this.latestAddressList = addressList;
      this.connectToAddressList();
    }
  }
  exitIdle() {
    for (const subchannel2 of this.subchannels) {
      subchannel2.startConnecting();
    }
    if (this.currentState === channel_1$4.ConnectivityState.IDLE) {
      if (this.latestAddressList.length > 0) {
        this.connectToAddressList();
      }
    }
    if (this.currentState === channel_1$4.ConnectivityState.IDLE || this.triedAllSubchannels) {
      this.channelControlHelper.requestReresolution();
    }
  }
  resetBackoff() {
  }
  destroy() {
    this.resetSubchannelList();
    if (this.currentPick !== null) {
      this.currentPick.unref();
      this.currentPick.removeConnectivityStateListener(this.pickedSubchannelStateListener);
    }
  }
  getTypeName() {
    return TYPE_NAME$2;
  }
};
loadBalancerPickFirst.PickFirstLoadBalancer = PickFirstLoadBalancer;
function setup$1() {
  load_balancer_1$3.registerLoadBalancerType(TYPE_NAME$2, PickFirstLoadBalancer, PickFirstLoadBalancingConfig);
}
loadBalancerPickFirst.setup = setup$1;
var loadBalancerRoundRobin = {};
Object.defineProperty(loadBalancerRoundRobin, "__esModule", { value: true });
loadBalancerRoundRobin.setup = loadBalancerRoundRobin.RoundRobinLoadBalancer = void 0;
var load_balancer_1$2 = loadBalancer;
var channel_1$3 = channel;
var picker_1$1 = picker;
var subchannel_1$2 = subchannel;
var logging$3 = logging$a;
var constants_1$9 = constants;
var TRACER_NAME$3 = "round_robin";
function trace$3(text) {
  logging$3.trace(constants_1$9.LogVerbosity.DEBUG, TRACER_NAME$3, text);
}
var TYPE_NAME$1 = "round_robin";
var RoundRobinLoadBalancingConfig = class {
  getLoadBalancerName() {
    return TYPE_NAME$1;
  }
  constructor() {
  }
  toJsonObject() {
    return {
      [TYPE_NAME$1]: {}
    };
  }
  static createFromJson(obj) {
    return new RoundRobinLoadBalancingConfig();
  }
};
var RoundRobinPicker = class {
  constructor(subchannelList, nextIndex = 0) {
    this.subchannelList = subchannelList;
    this.nextIndex = nextIndex;
  }
  pick(pickArgs) {
    const pickedSubchannel = this.subchannelList[this.nextIndex];
    this.nextIndex = (this.nextIndex + 1) % this.subchannelList.length;
    return {
      pickResultType: picker_1$1.PickResultType.COMPLETE,
      subchannel: pickedSubchannel,
      status: null,
      extraFilterFactory: null,
      onCallStarted: null
    };
  }
  peekNextSubchannel() {
    return this.subchannelList[this.nextIndex];
  }
};
var RoundRobinLoadBalancer = class {
  constructor(channelControlHelper) {
    this.channelControlHelper = channelControlHelper;
    this.subchannels = [];
    this.currentState = channel_1$3.ConnectivityState.IDLE;
    this.currentReadyPicker = null;
    this.subchannelStateCounts = {
      [channel_1$3.ConnectivityState.CONNECTING]: 0,
      [channel_1$3.ConnectivityState.IDLE]: 0,
      [channel_1$3.ConnectivityState.READY]: 0,
      [channel_1$3.ConnectivityState.SHUTDOWN]: 0,
      [channel_1$3.ConnectivityState.TRANSIENT_FAILURE]: 0
    };
    this.subchannelStateListener = (subchannel2, previousState, newState) => {
      this.subchannelStateCounts[previousState] -= 1;
      this.subchannelStateCounts[newState] += 1;
      this.calculateAndUpdateState();
      if (newState === channel_1$3.ConnectivityState.TRANSIENT_FAILURE || newState === channel_1$3.ConnectivityState.IDLE) {
        this.channelControlHelper.requestReresolution();
        subchannel2.startConnecting();
      }
    };
  }
  calculateAndUpdateState() {
    if (this.subchannelStateCounts[channel_1$3.ConnectivityState.READY] > 0) {
      const readySubchannels = this.subchannels.filter((subchannel2) => subchannel2.getConnectivityState() === channel_1$3.ConnectivityState.READY);
      let index2 = 0;
      if (this.currentReadyPicker !== null) {
        index2 = readySubchannels.indexOf(this.currentReadyPicker.peekNextSubchannel());
        if (index2 < 0) {
          index2 = 0;
        }
      }
      this.updateState(channel_1$3.ConnectivityState.READY, new RoundRobinPicker(readySubchannels, index2));
    } else if (this.subchannelStateCounts[channel_1$3.ConnectivityState.CONNECTING] > 0) {
      this.updateState(channel_1$3.ConnectivityState.CONNECTING, new picker_1$1.QueuePicker(this));
    } else if (this.subchannelStateCounts[channel_1$3.ConnectivityState.TRANSIENT_FAILURE] > 0) {
      this.updateState(channel_1$3.ConnectivityState.TRANSIENT_FAILURE, new picker_1$1.UnavailablePicker());
    } else {
      this.updateState(channel_1$3.ConnectivityState.IDLE, new picker_1$1.QueuePicker(this));
    }
  }
  updateState(newState, picker2) {
    trace$3(channel_1$3.ConnectivityState[this.currentState] + " -> " + channel_1$3.ConnectivityState[newState]);
    if (newState === channel_1$3.ConnectivityState.READY) {
      this.currentReadyPicker = picker2;
    } else {
      this.currentReadyPicker = null;
    }
    this.currentState = newState;
    this.channelControlHelper.updateState(newState, picker2);
  }
  resetSubchannelList() {
    for (const subchannel2 of this.subchannels) {
      subchannel2.removeConnectivityStateListener(this.subchannelStateListener);
      subchannel2.unref();
    }
    this.subchannelStateCounts = {
      [channel_1$3.ConnectivityState.CONNECTING]: 0,
      [channel_1$3.ConnectivityState.IDLE]: 0,
      [channel_1$3.ConnectivityState.READY]: 0,
      [channel_1$3.ConnectivityState.SHUTDOWN]: 0,
      [channel_1$3.ConnectivityState.TRANSIENT_FAILURE]: 0
    };
    this.subchannels = [];
  }
  updateAddressList(addressList, lbConfig) {
    this.resetSubchannelList();
    trace$3("Connect to address list " + addressList.map((address) => subchannel_1$2.subchannelAddressToString(address)));
    this.subchannels = addressList.map((address) => this.channelControlHelper.createSubchannel(address, {}));
    for (const subchannel2 of this.subchannels) {
      subchannel2.ref();
      subchannel2.addConnectivityStateListener(this.subchannelStateListener);
      const subchannelState = subchannel2.getConnectivityState();
      this.subchannelStateCounts[subchannelState] += 1;
      if (subchannelState === channel_1$3.ConnectivityState.IDLE || subchannelState === channel_1$3.ConnectivityState.TRANSIENT_FAILURE) {
        subchannel2.startConnecting();
      }
    }
    this.calculateAndUpdateState();
  }
  exitIdle() {
    for (const subchannel2 of this.subchannels) {
      subchannel2.startConnecting();
    }
  }
  resetBackoff() {
  }
  destroy() {
    this.resetSubchannelList();
  }
  getTypeName() {
    return TYPE_NAME$1;
  }
};
loadBalancerRoundRobin.RoundRobinLoadBalancer = RoundRobinLoadBalancer;
function setup() {
  load_balancer_1$2.registerLoadBalancerType(TYPE_NAME$1, RoundRobinLoadBalancer, RoundRobinLoadBalancingConfig);
}
loadBalancerRoundRobin.setup = setup;
Object.defineProperty(loadBalancer, "__esModule", { value: true });
loadBalancer.registerAll = loadBalancer.validateLoadBalancingConfig = loadBalancer.getFirstUsableConfig = loadBalancer.isLoadBalancerNameRegistered = loadBalancer.createLoadBalancer = loadBalancer.registerLoadBalancerType = void 0;
var load_balancer_pick_first = loadBalancerPickFirst;
var load_balancer_round_robin = loadBalancerRoundRobin;
var registeredLoadBalancerTypes = {};
function registerLoadBalancerType(typeName, loadBalancerType, loadBalancingConfigType) {
  registeredLoadBalancerTypes[typeName] = {
    LoadBalancer: loadBalancerType,
    LoadBalancingConfig: loadBalancingConfigType
  };
}
loadBalancer.registerLoadBalancerType = registerLoadBalancerType;
function createLoadBalancer(config, channelControlHelper) {
  const typeName = config.getLoadBalancerName();
  if (typeName in registeredLoadBalancerTypes) {
    return new registeredLoadBalancerTypes[typeName].LoadBalancer(channelControlHelper);
  } else {
    return null;
  }
}
loadBalancer.createLoadBalancer = createLoadBalancer;
function isLoadBalancerNameRegistered(typeName) {
  return typeName in registeredLoadBalancerTypes;
}
loadBalancer.isLoadBalancerNameRegistered = isLoadBalancerNameRegistered;
function getFirstUsableConfig(configs, defaultPickFirst = false) {
  for (const config of configs) {
    if (config.getLoadBalancerName() in registeredLoadBalancerTypes) {
      return config;
    }
  }
  if (defaultPickFirst) {
    return new load_balancer_pick_first.PickFirstLoadBalancingConfig();
  } else {
    return null;
  }
}
loadBalancer.getFirstUsableConfig = getFirstUsableConfig;
function validateLoadBalancingConfig(obj) {
  if (!(obj !== null && typeof obj === "object")) {
    throw new Error("Load balancing config must be an object");
  }
  const keys = Object.keys(obj);
  if (keys.length !== 1) {
    throw new Error("Provided load balancing config has multiple conflicting entries");
  }
  const typeName = keys[0];
  if (typeName in registeredLoadBalancerTypes) {
    return registeredLoadBalancerTypes[typeName].LoadBalancingConfig.createFromJson(obj[typeName]);
  } else {
    throw new Error(`Unrecognized load balancing config name ${typeName}`);
  }
}
loadBalancer.validateLoadBalancingConfig = validateLoadBalancingConfig;
function registerAll() {
  load_balancer_pick_first.setup();
  load_balancer_round_robin.setup();
}
loadBalancer.registerAll = registerAll;
var loadBalancerChildHandler = {};
Object.defineProperty(loadBalancerChildHandler, "__esModule", { value: true });
loadBalancerChildHandler.ChildLoadBalancerHandler = void 0;
var load_balancer_1$1 = loadBalancer;
var channel_1$2 = channel;
var TYPE_NAME = "child_load_balancer_helper";
var ChildLoadBalancerHandler = class {
  constructor(channelControlHelper) {
    this.channelControlHelper = channelControlHelper;
    this.currentChild = null;
    this.pendingChild = null;
    this.ChildPolicyHelper = class {
      constructor(parent) {
        this.parent = parent;
        this.child = null;
      }
      createSubchannel(subchannelAddress, subchannelArgs) {
        return this.parent.channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);
      }
      updateState(connectivityState, picker2) {
        var _a;
        if (this.calledByPendingChild()) {
          if (connectivityState !== channel_1$2.ConnectivityState.READY) {
            return;
          }
          (_a = this.parent.currentChild) === null || _a === void 0 ? void 0 : _a.destroy();
          this.parent.currentChild = this.parent.pendingChild;
          this.parent.pendingChild = null;
        } else if (!this.calledByCurrentChild()) {
          return;
        }
        this.parent.channelControlHelper.updateState(connectivityState, picker2);
      }
      requestReresolution() {
        var _a;
        const latestChild = (_a = this.parent.pendingChild) !== null && _a !== void 0 ? _a : this.parent.currentChild;
        if (this.child === latestChild) {
          this.parent.channelControlHelper.requestReresolution();
        }
      }
      setChild(newChild) {
        this.child = newChild;
      }
      calledByPendingChild() {
        return this.child === this.parent.pendingChild;
      }
      calledByCurrentChild() {
        return this.child === this.parent.currentChild;
      }
    };
  }
  updateAddressList(addressList, lbConfig, attributes) {
    let childToUpdate;
    if (this.currentChild === null || this.currentChild.getTypeName() !== lbConfig.getLoadBalancerName()) {
      const newHelper = new this.ChildPolicyHelper(this);
      const newChild = load_balancer_1$1.createLoadBalancer(lbConfig, newHelper);
      newHelper.setChild(newChild);
      if (this.currentChild === null) {
        this.currentChild = newChild;
        childToUpdate = this.currentChild;
      } else {
        if (this.pendingChild) {
          this.pendingChild.destroy();
        }
        this.pendingChild = newChild;
        childToUpdate = this.pendingChild;
      }
    } else {
      if (this.pendingChild === null) {
        childToUpdate = this.currentChild;
      } else {
        childToUpdate = this.pendingChild;
      }
    }
    childToUpdate.updateAddressList(addressList, lbConfig, attributes);
  }
  exitIdle() {
    if (this.currentChild) {
      this.currentChild.resetBackoff();
      if (this.pendingChild) {
        this.pendingChild.resetBackoff();
      }
    }
  }
  resetBackoff() {
    if (this.currentChild) {
      this.currentChild.resetBackoff();
      if (this.pendingChild) {
        this.pendingChild.resetBackoff();
      }
    }
  }
  destroy() {
    if (this.currentChild) {
      this.currentChild.destroy();
      this.currentChild = null;
    }
    if (this.pendingChild) {
      this.pendingChild.destroy();
      this.pendingChild = null;
    }
  }
  getTypeName() {
    return TYPE_NAME;
  }
};
loadBalancerChildHandler.ChildLoadBalancerHandler = ChildLoadBalancerHandler;
Object.defineProperty(resolvingLoadBalancer, "__esModule", { value: true });
resolvingLoadBalancer.ResolvingLoadBalancer = void 0;
var load_balancer_1 = loadBalancer;
var service_config_1 = serviceConfig;
var channel_1$1 = channel;
var resolver_1$1 = resolver;
var picker_1 = picker;
var backoff_timeout_1 = backoffTimeout;
var constants_1$8 = constants;
var metadata_1$4 = metadata;
var logging$2 = logging$a;
var constants_2 = constants;
var uri_parser_1$3 = uriParser;
var load_balancer_child_handler_1 = loadBalancerChildHandler;
var TRACER_NAME$2 = "resolving_load_balancer";
function trace$2(text) {
  logging$2.trace(constants_2.LogVerbosity.DEBUG, TRACER_NAME$2, text);
}
function getDefaultConfigSelector(serviceConfig2) {
  return function defaultConfigSelector(methodName, metadata2) {
    var _a, _b;
    const splitName = methodName.split("/").filter((x) => x.length > 0);
    const service2 = (_a = splitName[0]) !== null && _a !== void 0 ? _a : "";
    const method2 = (_b = splitName[1]) !== null && _b !== void 0 ? _b : "";
    if (serviceConfig2 && serviceConfig2.methodConfig) {
      for (const methodConfig of serviceConfig2.methodConfig) {
        for (const name2 of methodConfig.name) {
          if (name2.service === service2 && (name2.method === void 0 || name2.method === method2)) {
            return {
              methodConfig,
              pickInformation: {},
              status: constants_1$8.Status.OK
            };
          }
        }
      }
    }
    return {
      methodConfig: { name: [] },
      pickInformation: {},
      status: constants_1$8.Status.OK
    };
  };
}
var ResolvingLoadBalancer = class {
  constructor(target, channelControlHelper, channelOptions2, onSuccessfulResolution, onFailedResolution) {
    this.target = target;
    this.channelControlHelper = channelControlHelper;
    this.channelOptions = channelOptions2;
    this.onSuccessfulResolution = onSuccessfulResolution;
    this.onFailedResolution = onFailedResolution;
    this.latestChildState = channel_1$1.ConnectivityState.IDLE;
    this.latestChildPicker = new picker_1.QueuePicker(this);
    this.currentState = channel_1$1.ConnectivityState.IDLE;
    this.previousServiceConfig = null;
    this.continueResolving = false;
    if (channelOptions2["grpc.service_config"]) {
      this.defaultServiceConfig = service_config_1.validateServiceConfig(JSON.parse(channelOptions2["grpc.service_config"]));
    } else {
      this.defaultServiceConfig = {
        loadBalancingConfig: [],
        methodConfig: []
      };
    }
    this.updateState(channel_1$1.ConnectivityState.IDLE, new picker_1.QueuePicker(this));
    this.childLoadBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler({
      createSubchannel: channelControlHelper.createSubchannel.bind(channelControlHelper),
      requestReresolution: () => {
        if (this.backoffTimeout.isRunning()) {
          this.continueResolving = true;
        } else {
          this.updateResolution();
        }
      },
      updateState: (newState, picker2) => {
        this.latestChildState = newState;
        this.latestChildPicker = picker2;
        this.updateState(newState, picker2);
      }
    });
    this.innerResolver = resolver_1$1.createResolver(target, {
      onSuccessfulResolution: (addressList, serviceConfig2, serviceConfigError, configSelector, attributes) => {
        var _a;
        let workingServiceConfig = null;
        if (serviceConfig2 === null) {
          if (serviceConfigError === null) {
            this.previousServiceConfig = null;
            workingServiceConfig = this.defaultServiceConfig;
          } else {
            if (this.previousServiceConfig === null) {
              this.handleResolutionFailure(serviceConfigError);
            } else {
              workingServiceConfig = this.previousServiceConfig;
            }
          }
        } else {
          workingServiceConfig = serviceConfig2;
          this.previousServiceConfig = serviceConfig2;
        }
        const workingConfigList = (_a = workingServiceConfig === null || workingServiceConfig === void 0 ? void 0 : workingServiceConfig.loadBalancingConfig) !== null && _a !== void 0 ? _a : [];
        const loadBalancingConfig = load_balancer_1.getFirstUsableConfig(workingConfigList, true);
        if (loadBalancingConfig === null) {
          this.handleResolutionFailure({
            code: constants_1$8.Status.UNAVAILABLE,
            details: "All load balancer options in service config are not compatible",
            metadata: new metadata_1$4.Metadata()
          });
          return;
        }
        this.childLoadBalancer.updateAddressList(addressList, loadBalancingConfig, attributes);
        const finalServiceConfig = workingServiceConfig !== null && workingServiceConfig !== void 0 ? workingServiceConfig : this.defaultServiceConfig;
        this.onSuccessfulResolution(configSelector !== null && configSelector !== void 0 ? configSelector : getDefaultConfigSelector(finalServiceConfig));
      },
      onError: (error2) => {
        this.handleResolutionFailure(error2);
      }
    }, channelOptions2);
    this.backoffTimeout = new backoff_timeout_1.BackoffTimeout(() => {
      if (this.continueResolving) {
        this.updateResolution();
        this.continueResolving = false;
      } else {
        this.updateState(this.latestChildState, this.latestChildPicker);
      }
    });
    this.backoffTimeout.unref();
  }
  updateResolution() {
    this.innerResolver.updateResolution();
    if (this.currentState === channel_1$1.ConnectivityState.IDLE) {
      this.updateState(channel_1$1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
    }
  }
  updateState(connectivityState, picker2) {
    trace$2(uri_parser_1$3.uriToString(this.target) + " " + channel_1$1.ConnectivityState[this.currentState] + " -> " + channel_1$1.ConnectivityState[connectivityState]);
    if (connectivityState === channel_1$1.ConnectivityState.IDLE) {
      picker2 = new picker_1.QueuePicker(this);
    }
    this.currentState = connectivityState;
    this.channelControlHelper.updateState(connectivityState, picker2);
  }
  handleResolutionFailure(error2) {
    if (this.latestChildState === channel_1$1.ConnectivityState.IDLE) {
      this.updateState(channel_1$1.ConnectivityState.TRANSIENT_FAILURE, new picker_1.UnavailablePicker(error2));
      this.onFailedResolution(error2);
    }
    this.backoffTimeout.runOnce();
  }
  exitIdle() {
    this.childLoadBalancer.exitIdle();
    if (this.currentState === channel_1$1.ConnectivityState.IDLE) {
      if (this.backoffTimeout.isRunning()) {
        this.continueResolving = true;
      } else {
        this.updateResolution();
      }
      this.updateState(channel_1$1.ConnectivityState.CONNECTING, new picker_1.QueuePicker(this));
    }
  }
  updateAddressList(addressList, lbConfig) {
    throw new Error("updateAddressList not supported on ResolvingLoadBalancer");
  }
  resetBackoff() {
    this.backoffTimeout.reset();
    this.childLoadBalancer.resetBackoff();
  }
  destroy() {
    this.childLoadBalancer.destroy();
    this.innerResolver.destroy();
    this.updateState(channel_1$1.ConnectivityState.SHUTDOWN, new picker_1.UnavailablePicker());
  }
  getTypeName() {
    return "resolving_load_balancer";
  }
};
resolvingLoadBalancer.ResolvingLoadBalancer = ResolvingLoadBalancer;
var subchannelPool = {};
var channelOptions = {};
Object.defineProperty(channelOptions, "__esModule", { value: true });
channelOptions.channelOptionsEqual = channelOptions.recognizedOptions = void 0;
channelOptions.recognizedOptions = {
  "grpc.ssl_target_name_override": true,
  "grpc.primary_user_agent": true,
  "grpc.secondary_user_agent": true,
  "grpc.default_authority": true,
  "grpc.keepalive_time_ms": true,
  "grpc.keepalive_timeout_ms": true,
  "grpc.keepalive_permit_without_calls": true,
  "grpc.service_config": true,
  "grpc.max_concurrent_streams": true,
  "grpc.initial_reconnect_backoff_ms": true,
  "grpc.max_reconnect_backoff_ms": true,
  "grpc.use_local_subchannel_pool": true,
  "grpc.max_send_message_length": true,
  "grpc.max_receive_message_length": true,
  "grpc.enable_http_proxy": true,
  "grpc-node.max_session_memory": true
};
function channelOptionsEqual(options1, options2) {
  const keys1 = Object.keys(options1).sort();
  const keys2 = Object.keys(options2).sort();
  if (keys1.length !== keys2.length) {
    return false;
  }
  for (let i = 0; i < keys1.length; i += 1) {
    if (keys1[i] !== keys2[i]) {
      return false;
    }
    if (options1[keys1[i]] !== options2[keys2[i]]) {
      return false;
    }
  }
  return true;
}
channelOptions.channelOptionsEqual = channelOptionsEqual;
Object.defineProperty(subchannelPool, "__esModule", { value: true });
subchannelPool.getSubchannelPool = subchannelPool.SubchannelPool = void 0;
var channel_options_1 = channelOptions;
var subchannel_1$1 = subchannel;
var uri_parser_1$2 = uriParser;
var REF_CHECK_INTERVAL = 1e4;
var SubchannelPool = class {
  constructor(global2) {
    this.global = global2;
    this.pool = Object.create(null);
    this.cleanupTimer = null;
  }
  unrefUnusedSubchannels() {
    let allSubchannelsUnrefed = true;
    for (const channelTarget in this.pool) {
      const subchannelObjArray = this.pool[channelTarget];
      const refedSubchannels = subchannelObjArray.filter((value) => !value.subchannel.unrefIfOneRef());
      if (refedSubchannels.length > 0) {
        allSubchannelsUnrefed = false;
      }
      this.pool[channelTarget] = refedSubchannels;
    }
    if (allSubchannelsUnrefed && this.cleanupTimer !== null) {
      clearInterval(this.cleanupTimer);
      this.cleanupTimer = null;
    }
  }
  ensureCleanupTask() {
    var _a, _b;
    if (this.global && this.cleanupTimer === null) {
      this.cleanupTimer = setInterval(() => {
        this.unrefUnusedSubchannels();
      }, REF_CHECK_INTERVAL);
      (_b = (_a = this.cleanupTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
  }
  getOrCreateSubchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials2) {
    this.ensureCleanupTask();
    const channelTarget = uri_parser_1$2.uriToString(channelTargetUri);
    if (channelTarget in this.pool) {
      const subchannelObjArray = this.pool[channelTarget];
      for (const subchannelObj of subchannelObjArray) {
        if (subchannel_1$1.subchannelAddressEqual(subchannelTarget, subchannelObj.subchannelAddress) && channel_options_1.channelOptionsEqual(channelArguments, subchannelObj.channelArguments) && channelCredentials2._equals(subchannelObj.channelCredentials)) {
          return subchannelObj.subchannel;
        }
      }
    }
    const subchannel2 = new subchannel_1$1.Subchannel(channelTargetUri, subchannelTarget, channelArguments, channelCredentials2);
    if (!(channelTarget in this.pool)) {
      this.pool[channelTarget] = [];
    }
    this.pool[channelTarget].push({
      subchannelAddress: subchannelTarget,
      channelArguments,
      channelCredentials: channelCredentials2,
      subchannel: subchannel2
    });
    if (this.global) {
      subchannel2.ref();
    }
    return subchannel2;
  }
};
subchannelPool.SubchannelPool = SubchannelPool;
var globalSubchannelPool = new SubchannelPool(true);
function getSubchannelPool(global2) {
  if (global2) {
    return globalSubchannelPool;
  } else {
    return new SubchannelPool(false);
  }
}
subchannelPool.getSubchannelPool = getSubchannelPool;
var callCredentialsFilter = {};
var filter = {};
Object.defineProperty(filter, "__esModule", { value: true });
filter.BaseFilter = void 0;
var BaseFilter = class {
  async sendMetadata(metadata2) {
    return metadata2;
  }
  receiveMetadata(metadata2) {
    return metadata2;
  }
  async sendMessage(message2) {
    return message2;
  }
  async receiveMessage(message2) {
    return message2;
  }
  receiveTrailers(status) {
    return status;
  }
};
filter.BaseFilter = BaseFilter;
Object.defineProperty(callCredentialsFilter, "__esModule", { value: true });
callCredentialsFilter.CallCredentialsFilterFactory = callCredentialsFilter.CallCredentialsFilter = void 0;
var filter_1$3 = filter;
var constants_1$7 = constants;
var uri_parser_1$1 = uriParser;
var CallCredentialsFilter = class extends filter_1$3.BaseFilter {
  constructor(channel2, stream) {
    var _a, _b;
    super();
    this.channel = channel2;
    this.stream = stream;
    this.channel = channel2;
    this.stream = stream;
    const splitPath = stream.getMethod().split("/");
    let serviceName = "";
    if (splitPath.length >= 2) {
      serviceName = splitPath[1];
    }
    const hostname = (_b = (_a = uri_parser_1$1.splitHostPort(stream.getHost())) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : "localhost";
    this.serviceUrl = `https://${hostname}/${serviceName}`;
  }
  async sendMetadata(metadata2) {
    const credentials = this.stream.getCredentials();
    const credsMetadata = credentials.generateMetadata({
      service_url: this.serviceUrl
    });
    const resultMetadata = await metadata2;
    try {
      resultMetadata.merge(await credsMetadata);
    } catch (error2) {
      this.stream.cancelWithStatus(constants_1$7.Status.UNAUTHENTICATED, `Failed to retrieve auth metadata with error: ${error2.message}`);
      return Promise.reject("Failed to retrieve auth metadata");
    }
    if (resultMetadata.get("authorization").length > 1) {
      this.stream.cancelWithStatus(constants_1$7.Status.INTERNAL, '"authorization" metadata cannot have multiple values');
      return Promise.reject('"authorization" metadata cannot have multiple values');
    }
    return resultMetadata;
  }
};
callCredentialsFilter.CallCredentialsFilter = CallCredentialsFilter;
var CallCredentialsFilterFactory = class {
  constructor(channel2) {
    this.channel = channel2;
    this.channel = channel2;
  }
  createFilter(callStream2) {
    return new CallCredentialsFilter(this.channel, callStream2);
  }
};
callCredentialsFilter.CallCredentialsFilterFactory = CallCredentialsFilterFactory;
var deadlineFilter = {};
Object.defineProperty(deadlineFilter, "__esModule", { value: true });
deadlineFilter.DeadlineFilterFactory = deadlineFilter.DeadlineFilter = void 0;
var constants_1$6 = constants;
var filter_1$2 = filter;
var units = [
  ["m", 1],
  ["S", 1e3],
  ["M", 60 * 1e3],
  ["H", 60 * 60 * 1e3]
];
function getDeadline(deadline) {
  const now = new Date().getTime();
  const timeoutMs = Math.max(deadline - now, 0);
  for (const [unit, factor] of units) {
    const amount = timeoutMs / factor;
    if (amount < 1e8) {
      return String(Math.ceil(amount)) + unit;
    }
  }
  throw new Error("Deadline is too far in the future");
}
var DeadlineFilter = class extends filter_1$2.BaseFilter {
  constructor(channel2, callStream2) {
    var _a, _b;
    super();
    this.channel = channel2;
    this.callStream = callStream2;
    this.timer = null;
    const callDeadline = callStream2.getDeadline();
    if (callDeadline instanceof Date) {
      this.deadline = callDeadline.getTime();
    } else {
      this.deadline = callDeadline;
    }
    const now = new Date().getTime();
    let timeout = this.deadline - now;
    if (timeout <= 0) {
      process.nextTick(() => {
        callStream2.cancelWithStatus(constants_1$6.Status.DEADLINE_EXCEEDED, "Deadline exceeded");
      });
    } else if (this.deadline !== Infinity) {
      this.timer = setTimeout(() => {
        callStream2.cancelWithStatus(constants_1$6.Status.DEADLINE_EXCEEDED, "Deadline exceeded");
      }, timeout);
      (_b = (_a = this.timer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
    }
  }
  async sendMetadata(metadata2) {
    if (this.deadline === Infinity) {
      return metadata2;
    }
    const finalMetadata = await metadata2;
    const timeoutString = getDeadline(this.deadline);
    finalMetadata.set("grpc-timeout", timeoutString);
    return finalMetadata;
  }
  receiveTrailers(status) {
    if (this.timer) {
      clearTimeout(this.timer);
    }
    return status;
  }
};
deadlineFilter.DeadlineFilter = DeadlineFilter;
var DeadlineFilterFactory = class {
  constructor(channel2) {
    this.channel = channel2;
  }
  createFilter(callStream2) {
    return new DeadlineFilter(this.channel, callStream2);
  }
};
deadlineFilter.DeadlineFilterFactory = DeadlineFilterFactory;
var compressionFilter = {};
Object.defineProperty(compressionFilter, "__esModule", { value: true });
compressionFilter.CompressionFilterFactory = compressionFilter.CompressionFilter = void 0;
var zlib2 = import_zlib2.default;
var filter_1$1 = filter;
var CompressionHandler = class {
  async writeMessage(message2, compress) {
    let messageBuffer = message2;
    if (compress) {
      messageBuffer = await this.compressMessage(messageBuffer);
    }
    const output = Buffer.allocUnsafe(messageBuffer.length + 5);
    output.writeUInt8(compress ? 1 : 0, 0);
    output.writeUInt32BE(messageBuffer.length, 1);
    messageBuffer.copy(output, 5);
    return output;
  }
  async readMessage(data) {
    const compressed = data.readUInt8(0) === 1;
    let messageBuffer = data.slice(5);
    if (compressed) {
      messageBuffer = await this.decompressMessage(messageBuffer);
    }
    return messageBuffer;
  }
};
var IdentityHandler = class extends CompressionHandler {
  async compressMessage(message2) {
    return message2;
  }
  async writeMessage(message2, compress) {
    const output = Buffer.allocUnsafe(message2.length + 5);
    output.writeUInt8(0, 0);
    output.writeUInt32BE(message2.length, 1);
    message2.copy(output, 5);
    return output;
  }
  decompressMessage(message2) {
    return Promise.reject(new Error('Received compressed message but "grpc-encoding" header was identity'));
  }
};
var DeflateHandler = class extends CompressionHandler {
  compressMessage(message2) {
    return new Promise((resolve6, reject) => {
      zlib2.deflate(message2, (err, output) => {
        if (err) {
          reject(err);
        } else {
          resolve6(output);
        }
      });
    });
  }
  decompressMessage(message2) {
    return new Promise((resolve6, reject) => {
      zlib2.inflate(message2, (err, output) => {
        if (err) {
          reject(err);
        } else {
          resolve6(output);
        }
      });
    });
  }
};
var GzipHandler = class extends CompressionHandler {
  compressMessage(message2) {
    return new Promise((resolve6, reject) => {
      zlib2.gzip(message2, (err, output) => {
        if (err) {
          reject(err);
        } else {
          resolve6(output);
        }
      });
    });
  }
  decompressMessage(message2) {
    return new Promise((resolve6, reject) => {
      zlib2.unzip(message2, (err, output) => {
        if (err) {
          reject(err);
        } else {
          resolve6(output);
        }
      });
    });
  }
};
var UnknownHandler = class extends CompressionHandler {
  constructor(compressionName) {
    super();
    this.compressionName = compressionName;
  }
  compressMessage(message2) {
    return Promise.reject(new Error(`Received message compressed with unsupported compression method ${this.compressionName}`));
  }
  decompressMessage(message2) {
    return Promise.reject(new Error(`Compression method not supported: ${this.compressionName}`));
  }
};
function getCompressionHandler(compressionName) {
  switch (compressionName) {
    case "identity":
      return new IdentityHandler();
    case "deflate":
      return new DeflateHandler();
    case "gzip":
      return new GzipHandler();
    default:
      return new UnknownHandler(compressionName);
  }
}
var CompressionFilter = class extends filter_1$1.BaseFilter {
  constructor() {
    super(...arguments);
    this.sendCompression = new IdentityHandler();
    this.receiveCompression = new IdentityHandler();
  }
  async sendMetadata(metadata2) {
    const headers = await metadata2;
    headers.set("grpc-accept-encoding", "identity,deflate,gzip");
    headers.set("accept-encoding", "identity");
    return headers;
  }
  receiveMetadata(metadata2) {
    const receiveEncoding = metadata2.get("grpc-encoding");
    if (receiveEncoding.length > 0) {
      const encoding = receiveEncoding[0];
      if (typeof encoding === "string") {
        this.receiveCompression = getCompressionHandler(encoding);
      }
    }
    metadata2.remove("grpc-encoding");
    metadata2.remove("grpc-accept-encoding");
    return metadata2;
  }
  async sendMessage(message2) {
    const resolvedMessage = await message2;
    const compress = resolvedMessage.flags === void 0 ? false : (resolvedMessage.flags & 2) === 0;
    return {
      message: await this.sendCompression.writeMessage(resolvedMessage.message, compress),
      flags: resolvedMessage.flags
    };
  }
  async receiveMessage(message2) {
    return this.receiveCompression.readMessage(await message2);
  }
};
compressionFilter.CompressionFilter = CompressionFilter;
var CompressionFilterFactory = class {
  constructor(channel2) {
    this.channel = channel2;
  }
  createFilter(callStream2) {
    return new CompressionFilter();
  }
};
compressionFilter.CompressionFilterFactory = CompressionFilterFactory;
var maxMessageSizeFilter = {};
Object.defineProperty(maxMessageSizeFilter, "__esModule", { value: true });
maxMessageSizeFilter.MaxMessageSizeFilterFactory = maxMessageSizeFilter.MaxMessageSizeFilter = void 0;
var filter_1 = filter;
var constants_1$5 = constants;
var MaxMessageSizeFilter = class extends filter_1.BaseFilter {
  constructor(options2, callStream2) {
    super();
    this.options = options2;
    this.callStream = callStream2;
    this.maxSendMessageSize = constants_1$5.DEFAULT_MAX_SEND_MESSAGE_LENGTH;
    this.maxReceiveMessageSize = constants_1$5.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;
    if ("grpc.max_send_message_length" in options2) {
      this.maxSendMessageSize = options2["grpc.max_send_message_length"];
    }
    if ("grpc.max_receive_message_length" in options2) {
      this.maxReceiveMessageSize = options2["grpc.max_receive_message_length"];
    }
  }
  async sendMessage(message2) {
    if (this.maxSendMessageSize === -1) {
      return message2;
    } else {
      const concreteMessage = await message2;
      if (concreteMessage.message.length > this.maxSendMessageSize) {
        this.callStream.cancelWithStatus(constants_1$5.Status.RESOURCE_EXHAUSTED, `Sent message larger than max (${concreteMessage.message.length} vs. ${this.maxSendMessageSize})`);
        return Promise.reject("Message too large");
      } else {
        return concreteMessage;
      }
    }
  }
  async receiveMessage(message2) {
    if (this.maxReceiveMessageSize === -1) {
      return message2;
    } else {
      const concreteMessage = await message2;
      if (concreteMessage.length > this.maxReceiveMessageSize) {
        this.callStream.cancelWithStatus(constants_1$5.Status.RESOURCE_EXHAUSTED, `Received message larger than max (${concreteMessage.length} vs. ${this.maxReceiveMessageSize})`);
        return Promise.reject("Message too large");
      } else {
        return concreteMessage;
      }
    }
  }
};
maxMessageSizeFilter.MaxMessageSizeFilter = MaxMessageSizeFilter;
var MaxMessageSizeFilterFactory = class {
  constructor(options2) {
    this.options = options2;
  }
  createFilter(callStream2) {
    return new MaxMessageSizeFilter(this.options, callStream2);
  }
};
maxMessageSizeFilter.MaxMessageSizeFilterFactory = MaxMessageSizeFilterFactory;
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.ChannelImplementation = exports.ConnectivityState = void 0;
  const call_stream_12 = callStream;
  const channel_credentials_1 = channelCredentials;
  const resolving_load_balancer_1 = resolvingLoadBalancer;
  const subchannel_pool_1 = subchannelPool;
  const picker_12 = picker;
  const constants_12 = constants;
  const filter_stack_12 = filterStack;
  const call_credentials_filter_1 = callCredentialsFilter;
  const deadline_filter_1 = deadlineFilter;
  const compression_filter_1 = compressionFilter;
  const resolver_12 = resolver;
  const logging_12 = logging$a;
  const max_message_size_filter_1 = maxMessageSizeFilter;
  const http_proxy_12 = http_proxy;
  const uri_parser_12 = uriParser;
  var ConnectivityState;
  (function(ConnectivityState2) {
    ConnectivityState2[ConnectivityState2["IDLE"] = 0] = "IDLE";
    ConnectivityState2[ConnectivityState2["CONNECTING"] = 1] = "CONNECTING";
    ConnectivityState2[ConnectivityState2["READY"] = 2] = "READY";
    ConnectivityState2[ConnectivityState2["TRANSIENT_FAILURE"] = 3] = "TRANSIENT_FAILURE";
    ConnectivityState2[ConnectivityState2["SHUTDOWN"] = 4] = "SHUTDOWN";
  })(ConnectivityState = exports.ConnectivityState || (exports.ConnectivityState = {}));
  const MAX_TIMEOUT_TIME = 2147483647;
  let nextCallNumber = 0;
  function getNewCallNumber() {
    const callNumber = nextCallNumber;
    nextCallNumber += 1;
    if (nextCallNumber >= Number.MAX_SAFE_INTEGER) {
      nextCallNumber = 0;
    }
    return callNumber;
  }
  class ChannelImplementation {
    constructor(target, credentials, options2) {
      var _a, _b, _c;
      this.credentials = credentials;
      this.options = options2;
      this.connectivityState = ConnectivityState.IDLE;
      this.currentPicker = new picker_12.UnavailablePicker();
      this.configSelectionQueue = [];
      this.pickQueue = [];
      this.connectivityStateWatchers = [];
      this.configSelector = null;
      if (typeof target !== "string") {
        throw new TypeError("Channel target must be a string");
      }
      if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {
        throw new TypeError("Channel credentials must be a ChannelCredentials object");
      }
      if (options2) {
        if (typeof options2 !== "object" || !Object.values(options2).every((value) => typeof value === "string" || typeof value === "number" || typeof value === "undefined")) {
          throw new TypeError("Channel options must be an object with string or number values");
        }
      }
      const originalTargetUri = uri_parser_12.parseUri(target);
      if (originalTargetUri === null) {
        throw new Error(`Could not parse target name "${target}"`);
      }
      const defaultSchemeMapResult = resolver_12.mapUriDefaultScheme(originalTargetUri);
      if (defaultSchemeMapResult === null) {
        throw new Error(`Could not find a default scheme for target name "${target}"`);
      }
      this.callRefTimer = setInterval(() => {
      }, MAX_TIMEOUT_TIME);
      (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
      if (this.options["grpc.default_authority"]) {
        this.defaultAuthority = this.options["grpc.default_authority"];
      } else {
        this.defaultAuthority = resolver_12.getDefaultAuthority(defaultSchemeMapResult);
      }
      const proxyMapResult = http_proxy_12.mapProxyName(defaultSchemeMapResult, options2);
      this.target = proxyMapResult.target;
      this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);
      this.subchannelPool = subchannel_pool_1.getSubchannelPool(((_c = options2["grpc.use_local_subchannel_pool"]) !== null && _c !== void 0 ? _c : 0) === 0);
      const channelControlHelper = {
        createSubchannel: (subchannelAddress, subchannelArgs) => {
          return this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, Object.assign({}, this.options, subchannelArgs), this.credentials);
        },
        updateState: (connectivityState, picker2) => {
          this.currentPicker = picker2;
          const queueCopy = this.pickQueue.slice();
          this.pickQueue = [];
          this.callRefTimerUnref();
          for (const { callStream: callStream2, callMetadata, callConfig } of queueCopy) {
            this.tryPick(callStream2, callMetadata, callConfig);
          }
          this.updateState(connectivityState);
        },
        requestReresolution: () => {
          throw new Error("Resolving load balancer should never call requestReresolution");
        }
      };
      this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, options2, (configSelector) => {
        this.configSelector = configSelector;
        process.nextTick(() => {
          const localQueue = this.configSelectionQueue;
          this.configSelectionQueue = [];
          this.callRefTimerUnref();
          for (const { callStream: callStream2, callMetadata } of localQueue) {
            this.tryGetConfig(callStream2, callMetadata);
          }
          this.configSelectionQueue = [];
        });
      }, (status) => {
        if (this.configSelectionQueue.length > 0) {
          logging_12.trace(constants_12.LogVerbosity.DEBUG, "channel", "Name resolution failed for target " + uri_parser_12.uriToString(this.target) + " with calls queued for config selection");
        }
        const localQueue = this.configSelectionQueue;
        this.configSelectionQueue = [];
        this.callRefTimerUnref();
        for (const { callStream: callStream2, callMetadata } of localQueue) {
          if (callMetadata.getOptions().waitForReady) {
            this.callRefTimerRef();
            this.configSelectionQueue.push({ callStream: callStream2, callMetadata });
          } else {
            callStream2.cancelWithStatus(status.code, status.details);
          }
        }
      });
      this.filterStackFactory = new filter_stack_12.FilterStackFactory([
        new call_credentials_filter_1.CallCredentialsFilterFactory(this),
        new deadline_filter_1.DeadlineFilterFactory(this),
        new max_message_size_filter_1.MaxMessageSizeFilterFactory(this.options),
        new compression_filter_1.CompressionFilterFactory(this)
      ]);
    }
    callRefTimerRef() {
      var _a, _b, _c, _d;
      if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {
        logging_12.trace(constants_12.LogVerbosity.DEBUG, "channel", "callRefTimer.ref | configSelectionQueue.length=" + this.configSelectionQueue.length + " pickQueue.length=" + this.pickQueue.length);
        (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);
      }
    }
    callRefTimerUnref() {
      var _a, _b;
      if (!this.callRefTimer.hasRef || this.callRefTimer.hasRef()) {
        logging_12.trace(constants_12.LogVerbosity.DEBUG, "channel", "callRefTimer.unref | configSelectionQueue.length=" + this.configSelectionQueue.length + " pickQueue.length=" + this.pickQueue.length);
        (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);
      }
    }
    pushPick(callStream2, callMetadata, callConfig) {
      this.pickQueue.push({ callStream: callStream2, callMetadata, callConfig });
      this.callRefTimerRef();
    }
    tryPick(callStream2, callMetadata, callConfig) {
      var _a, _b, _c;
      const pickResult = this.currentPicker.pick({ metadata: callMetadata, extraPickInfo: callConfig.pickInformation });
      logging_12.trace(constants_12.LogVerbosity.DEBUG, "channel", "Pick result: " + picker_12.PickResultType[pickResult.pickResultType] + " subchannel: " + ((_a = pickResult.subchannel) === null || _a === void 0 ? void 0 : _a.getAddress()) + " status: " + ((_b = pickResult.status) === null || _b === void 0 ? void 0 : _b.code) + " " + ((_c = pickResult.status) === null || _c === void 0 ? void 0 : _c.details));
      switch (pickResult.pickResultType) {
        case picker_12.PickResultType.COMPLETE:
          if (pickResult.subchannel === null) {
            callStream2.cancelWithStatus(constants_12.Status.UNAVAILABLE, "Request dropped by load balancing policy");
          } else {
            if (pickResult.subchannel.getConnectivityState() !== ConnectivityState.READY) {
              logging_12.log(constants_12.LogVerbosity.ERROR, "Error: COMPLETE pick result subchannel " + pickResult.subchannel.getAddress() + " has state " + ConnectivityState[pickResult.subchannel.getConnectivityState()]);
              this.pushPick(callStream2, callMetadata, callConfig);
              break;
            }
            callStream2.filterStack.sendMetadata(Promise.resolve(callMetadata.clone())).then((finalMetadata) => {
              var _a2, _b2, _c2;
              const subchannelState = pickResult.subchannel.getConnectivityState();
              if (subchannelState === ConnectivityState.READY) {
                try {
                  pickResult.subchannel.startCallStream(finalMetadata, callStream2, (_a2 = pickResult.extraFilterFactory) !== null && _a2 !== void 0 ? _a2 : void 0);
                  (_b2 = callConfig.onCommitted) === null || _b2 === void 0 ? void 0 : _b2.call(callConfig);
                  (_c2 = pickResult.onCallStarted) === null || _c2 === void 0 ? void 0 : _c2.call(pickResult);
                } catch (error2) {
                  if (error2.code === "ERR_HTTP2_GOAWAY_SESSION") {
                    logging_12.trace(constants_12.LogVerbosity.INFO, "channel", "Failed to start call on picked subchannel " + pickResult.subchannel.getAddress() + " with error " + error2.message + ". Retrying pick");
                    this.tryPick(callStream2, callMetadata, callConfig);
                  } else {
                    logging_12.trace(constants_12.LogVerbosity.INFO, "channel", "Failed to start call on picked subchanel " + pickResult.subchannel.getAddress() + " with error " + error2.message + ". Ending call");
                    callStream2.cancelWithStatus(constants_12.Status.INTERNAL, `Failed to start HTTP/2 stream with error: ${error2.message}`);
                  }
                }
              } else {
                logging_12.trace(constants_12.LogVerbosity.INFO, "channel", "Picked subchannel " + pickResult.subchannel.getAddress() + " has state " + ConnectivityState[subchannelState] + " after metadata filters. Retrying pick");
                this.tryPick(callStream2, callMetadata, callConfig);
              }
            }, (error2) => {
              callStream2.cancelWithStatus(typeof error2.code === "number" ? error2.code : constants_12.Status.UNKNOWN, `Getting metadata from plugin failed with error: ${error2.message}`);
            });
          }
          break;
        case picker_12.PickResultType.QUEUE:
          this.pushPick(callStream2, callMetadata, callConfig);
          break;
        case picker_12.PickResultType.TRANSIENT_FAILURE:
          if (callMetadata.getOptions().waitForReady) {
            this.pushPick(callStream2, callMetadata, callConfig);
          } else {
            callStream2.cancelWithStatus(pickResult.status.code, pickResult.status.details);
          }
          break;
        case picker_12.PickResultType.DROP:
          callStream2.cancelWithStatus(pickResult.status.code, pickResult.status.details);
          break;
        default:
          throw new Error(`Invalid state: unknown pickResultType ${pickResult.pickResultType}`);
      }
    }
    removeConnectivityStateWatcher(watcherObject) {
      const watcherIndex = this.connectivityStateWatchers.findIndex((value) => value === watcherObject);
      if (watcherIndex >= 0) {
        this.connectivityStateWatchers.splice(watcherIndex, 1);
      }
    }
    updateState(newState) {
      logging_12.trace(constants_12.LogVerbosity.DEBUG, "connectivity_state", uri_parser_12.uriToString(this.target) + " " + ConnectivityState[this.connectivityState] + " -> " + ConnectivityState[newState]);
      this.connectivityState = newState;
      const watchersCopy = this.connectivityStateWatchers.slice();
      for (const watcherObject of watchersCopy) {
        if (newState !== watcherObject.currentState) {
          if (watcherObject.timer) {
            clearTimeout(watcherObject.timer);
          }
          this.removeConnectivityStateWatcher(watcherObject);
          watcherObject.callback();
        }
      }
    }
    tryGetConfig(stream, metadata2) {
      if (this.configSelector === null) {
        this.resolvingLoadBalancer.exitIdle();
        this.configSelectionQueue.push({
          callStream: stream,
          callMetadata: metadata2
        });
        this.callRefTimerRef();
      } else {
        const callConfig = this.configSelector(stream.getMethod(), metadata2);
        if (callConfig.status === constants_12.Status.OK) {
          this.tryPick(stream, metadata2, callConfig);
        } else {
          stream.cancelWithStatus(callConfig.status, "Failed to route call to method " + stream.getMethod());
        }
      }
    }
    _startCallStream(stream, metadata2) {
      this.tryGetConfig(stream, metadata2.clone());
    }
    close() {
      this.resolvingLoadBalancer.destroy();
      this.updateState(ConnectivityState.SHUTDOWN);
      clearInterval(this.callRefTimer);
      this.subchannelPool.unrefUnusedSubchannels();
    }
    getTarget() {
      return uri_parser_12.uriToString(this.target);
    }
    getConnectivityState(tryToConnect) {
      const connectivityState = this.connectivityState;
      if (tryToConnect) {
        this.resolvingLoadBalancer.exitIdle();
      }
      return connectivityState;
    }
    watchConnectivityState(currentState, deadline, callback) {
      if (this.connectivityState === ConnectivityState.SHUTDOWN) {
        throw new Error("Channel has been shut down");
      }
      let timer = null;
      if (deadline !== Infinity) {
        const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);
        const now = new Date();
        if (deadline === -Infinity || deadlineDate <= now) {
          process.nextTick(callback, new Error("Deadline passed without connectivity state change"));
          return;
        }
        timer = setTimeout(() => {
          this.removeConnectivityStateWatcher(watcherObject);
          callback(new Error("Deadline passed without connectivity state change"));
        }, deadlineDate.getTime() - now.getTime());
      }
      const watcherObject = {
        currentState,
        callback,
        timer
      };
      this.connectivityStateWatchers.push(watcherObject);
    }
    createCall(method2, deadline, host, parentCall, propagateFlags) {
      if (typeof method2 !== "string") {
        throw new TypeError("Channel#createCall: method must be a string");
      }
      if (!(typeof deadline === "number" || deadline instanceof Date)) {
        throw new TypeError("Channel#createCall: deadline must be a number or Date");
      }
      if (this.connectivityState === ConnectivityState.SHUTDOWN) {
        throw new Error("Channel has been shut down");
      }
      const callNumber = getNewCallNumber();
      logging_12.trace(constants_12.LogVerbosity.DEBUG, "channel", uri_parser_12.uriToString(this.target) + " createCall [" + callNumber + '] method="' + method2 + '", deadline=' + deadline);
      const finalOptions = {
        deadline,
        flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_12.Propagate.DEFAULTS,
        host: host !== null && host !== void 0 ? host : this.defaultAuthority,
        parentCall
      };
      const stream = new call_stream_12.Http2CallStream(method2, this, finalOptions, this.filterStackFactory, this.credentials._getCallCredentials(), callNumber);
      return stream;
    }
  }
  exports.ChannelImplementation = ChannelImplementation;
})(channel);
var client = {};
var call = {};
Object.defineProperty(call, "__esModule", { value: true });
call.ClientDuplexStreamImpl = call.ClientWritableStreamImpl = call.ClientReadableStreamImpl = call.ClientUnaryCallImpl = call.callErrorFromStatus = void 0;
var events_1$1 = import_events.default;
var stream_1$1 = import_stream2.default;
var constants_1$4 = constants;
function callErrorFromStatus(status) {
  const message2 = `${status.code} ${constants_1$4.Status[status.code]}: ${status.details}`;
  return Object.assign(new Error(message2), status);
}
call.callErrorFromStatus = callErrorFromStatus;
var ClientUnaryCallImpl = class extends events_1$1.EventEmitter {
  constructor() {
    super();
  }
  cancel() {
    var _a;
    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1$4.Status.CANCELLED, "Cancelled on client");
  }
  getPeer() {
    var _a, _b;
    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
  }
};
call.ClientUnaryCallImpl = ClientUnaryCallImpl;
var ClientReadableStreamImpl = class extends stream_1$1.Readable {
  constructor(deserialize) {
    super({ objectMode: true });
    this.deserialize = deserialize;
  }
  cancel() {
    var _a;
    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1$4.Status.CANCELLED, "Cancelled on client");
  }
  getPeer() {
    var _a, _b;
    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
  }
  _read(_size) {
    var _a;
    (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();
  }
};
call.ClientReadableStreamImpl = ClientReadableStreamImpl;
var ClientWritableStreamImpl = class extends stream_1$1.Writable {
  constructor(serialize) {
    super({ objectMode: true });
    this.serialize = serialize;
  }
  cancel() {
    var _a;
    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1$4.Status.CANCELLED, "Cancelled on client");
  }
  getPeer() {
    var _a, _b;
    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
  }
  _write(chunk, encoding, cb) {
    var _a;
    const context = {
      callback: cb
    };
    const flags = Number(encoding);
    if (!Number.isNaN(flags)) {
      context.flags = flags;
    }
    (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);
  }
  _final(cb) {
    var _a;
    (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();
    cb();
  }
};
call.ClientWritableStreamImpl = ClientWritableStreamImpl;
var ClientDuplexStreamImpl = class extends stream_1$1.Duplex {
  constructor(serialize, deserialize) {
    super({ objectMode: true });
    this.serialize = serialize;
    this.deserialize = deserialize;
  }
  cancel() {
    var _a;
    (_a = this.call) === null || _a === void 0 ? void 0 : _a.cancelWithStatus(constants_1$4.Status.CANCELLED, "Cancelled on client");
  }
  getPeer() {
    var _a, _b;
    return (_b = (_a = this.call) === null || _a === void 0 ? void 0 : _a.getPeer()) !== null && _b !== void 0 ? _b : "unknown";
  }
  _read(_size) {
    var _a;
    (_a = this.call) === null || _a === void 0 ? void 0 : _a.startRead();
  }
  _write(chunk, encoding, cb) {
    var _a;
    const context = {
      callback: cb
    };
    const flags = Number(encoding);
    if (!Number.isNaN(flags)) {
      context.flags = flags;
    }
    (_a = this.call) === null || _a === void 0 ? void 0 : _a.sendMessageWithContext(context, chunk);
  }
  _final(cb) {
    var _a;
    (_a = this.call) === null || _a === void 0 ? void 0 : _a.halfClose();
    cb();
  }
};
call.ClientDuplexStreamImpl = ClientDuplexStreamImpl;
var clientInterceptors = {};
Object.defineProperty(clientInterceptors, "__esModule", { value: true });
clientInterceptors.getInterceptingCall = clientInterceptors.InterceptingCall = clientInterceptors.RequesterBuilder = clientInterceptors.ListenerBuilder = clientInterceptors.InterceptorConfigurationError = void 0;
var metadata_1$3 = metadata;
var call_stream_1 = callStream;
var constants_1$3 = constants;
var InterceptorConfigurationError = class extends Error {
  constructor(message2) {
    super(message2);
    this.name = "InterceptorConfigurationError";
    Error.captureStackTrace(this, InterceptorConfigurationError);
  }
};
clientInterceptors.InterceptorConfigurationError = InterceptorConfigurationError;
var ListenerBuilder = class {
  constructor() {
    this.metadata = void 0;
    this.message = void 0;
    this.status = void 0;
  }
  withOnReceiveMetadata(onReceiveMetadata) {
    this.metadata = onReceiveMetadata;
    return this;
  }
  withOnReceiveMessage(onReceiveMessage) {
    this.message = onReceiveMessage;
    return this;
  }
  withOnReceiveStatus(onReceiveStatus) {
    this.status = onReceiveStatus;
    return this;
  }
  build() {
    return {
      onReceiveMetadata: this.metadata,
      onReceiveMessage: this.message,
      onReceiveStatus: this.status
    };
  }
};
clientInterceptors.ListenerBuilder = ListenerBuilder;
var RequesterBuilder = class {
  constructor() {
    this.start = void 0;
    this.message = void 0;
    this.halfClose = void 0;
    this.cancel = void 0;
  }
  withStart(start) {
    this.start = start;
    return this;
  }
  withSendMessage(sendMessage) {
    this.message = sendMessage;
    return this;
  }
  withHalfClose(halfClose) {
    this.halfClose = halfClose;
    return this;
  }
  withCancel(cancel) {
    this.cancel = cancel;
    return this;
  }
  build() {
    return {
      start: this.start,
      sendMessage: this.message,
      halfClose: this.halfClose,
      cancel: this.cancel
    };
  }
};
clientInterceptors.RequesterBuilder = RequesterBuilder;
var defaultListener = {
  onReceiveMetadata: (metadata2, next) => {
    next(metadata2);
  },
  onReceiveMessage: (message2, next) => {
    next(message2);
  },
  onReceiveStatus: (status, next) => {
    next(status);
  }
};
var defaultRequester = {
  start: (metadata2, listener, next) => {
    next(metadata2, listener);
  },
  sendMessage: (message2, next) => {
    next(message2);
  },
  halfClose: (next) => {
    next();
  },
  cancel: (next) => {
    next();
  }
};
var InterceptingCall = class {
  constructor(nextCall, requester) {
    var _a, _b, _c, _d;
    this.nextCall = nextCall;
    this.processingMessage = false;
    this.pendingHalfClose = false;
    if (requester) {
      this.requester = {
        start: (_a = requester.start) !== null && _a !== void 0 ? _a : defaultRequester.start,
        sendMessage: (_b = requester.sendMessage) !== null && _b !== void 0 ? _b : defaultRequester.sendMessage,
        halfClose: (_c = requester.halfClose) !== null && _c !== void 0 ? _c : defaultRequester.halfClose,
        cancel: (_d = requester.cancel) !== null && _d !== void 0 ? _d : defaultRequester.cancel
      };
    } else {
      this.requester = defaultRequester;
    }
  }
  cancelWithStatus(status, details) {
    this.requester.cancel(() => {
      this.nextCall.cancelWithStatus(status, details);
    });
  }
  getPeer() {
    return this.nextCall.getPeer();
  }
  start(metadata2, interceptingListener) {
    var _a, _b, _c, _d, _e, _f;
    const fullInterceptingListener = {
      onReceiveMetadata: (_b = (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(interceptingListener)) !== null && _b !== void 0 ? _b : (metadata3) => {
      },
      onReceiveMessage: (_d = (_c = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _c === void 0 ? void 0 : _c.bind(interceptingListener)) !== null && _d !== void 0 ? _d : (message2) => {
      },
      onReceiveStatus: (_f = (_e = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _e === void 0 ? void 0 : _e.bind(interceptingListener)) !== null && _f !== void 0 ? _f : (status) => {
      }
    };
    this.requester.start(metadata2, fullInterceptingListener, (md, listener) => {
      var _a2, _b2, _c2;
      let finalInterceptingListener;
      if (call_stream_1.isInterceptingListener(listener)) {
        finalInterceptingListener = listener;
      } else {
        const fullListener = {
          onReceiveMetadata: (_a2 = listener.onReceiveMetadata) !== null && _a2 !== void 0 ? _a2 : defaultListener.onReceiveMetadata,
          onReceiveMessage: (_b2 = listener.onReceiveMessage) !== null && _b2 !== void 0 ? _b2 : defaultListener.onReceiveMessage,
          onReceiveStatus: (_c2 = listener.onReceiveStatus) !== null && _c2 !== void 0 ? _c2 : defaultListener.onReceiveStatus
        };
        finalInterceptingListener = new call_stream_1.InterceptingListenerImpl(fullListener, fullInterceptingListener);
      }
      this.nextCall.start(md, finalInterceptingListener);
    });
  }
  sendMessageWithContext(context, message2) {
    this.processingMessage = true;
    this.requester.sendMessage(message2, (finalMessage) => {
      this.processingMessage = false;
      this.nextCall.sendMessageWithContext(context, finalMessage);
      if (this.pendingHalfClose) {
        this.nextCall.halfClose();
      }
    });
  }
  sendMessage(message2) {
    this.sendMessageWithContext({}, message2);
  }
  startRead() {
    this.nextCall.startRead();
  }
  halfClose() {
    this.requester.halfClose(() => {
      if (this.processingMessage) {
        this.pendingHalfClose = true;
      } else {
        this.nextCall.halfClose();
      }
    });
  }
  setCredentials(credentials) {
    this.nextCall.setCredentials(credentials);
  }
};
clientInterceptors.InterceptingCall = InterceptingCall;
function getCall(channel2, path2, options2) {
  var _a, _b;
  const deadline = (_a = options2.deadline) !== null && _a !== void 0 ? _a : Infinity;
  const host = options2.host;
  const parent = (_b = options2.parent) !== null && _b !== void 0 ? _b : null;
  const propagateFlags = options2.propagate_flags;
  const credentials = options2.credentials;
  const call2 = channel2.createCall(path2, deadline, host, parent, propagateFlags);
  if (credentials) {
    call2.setCredentials(credentials);
  }
  return call2;
}
var BaseInterceptingCall = class {
  constructor(call2, methodDefinition) {
    this.call = call2;
    this.methodDefinition = methodDefinition;
  }
  cancelWithStatus(status, details) {
    this.call.cancelWithStatus(status, details);
  }
  getPeer() {
    return this.call.getPeer();
  }
  setCredentials(credentials) {
    this.call.setCredentials(credentials);
  }
  sendMessageWithContext(context, message2) {
    let serialized;
    try {
      serialized = this.methodDefinition.requestSerialize(message2);
    } catch (e) {
      this.call.cancelWithStatus(constants_1$3.Status.INTERNAL, `Request message serialization failure: ${e.message}`);
      return;
    }
    this.call.sendMessageWithContext(context, serialized);
  }
  sendMessage(message2) {
    this.sendMessageWithContext({}, message2);
  }
  start(metadata2, interceptingListener) {
    let readError = null;
    this.call.start(metadata2, {
      onReceiveMetadata: (metadata3) => {
        var _a;
        (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, metadata3);
      },
      onReceiveMessage: (message2) => {
        var _a;
        let deserialized;
        try {
          deserialized = this.methodDefinition.responseDeserialize(message2);
        } catch (e) {
          readError = {
            code: constants_1$3.Status.INTERNAL,
            details: `Response message parsing error: ${e.message}`,
            metadata: new metadata_1$3.Metadata()
          };
          this.call.cancelWithStatus(readError.code, readError.details);
          return;
        }
        (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveMessage) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, deserialized);
      },
      onReceiveStatus: (status) => {
        var _a, _b;
        if (readError) {
          (_a = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _a === void 0 ? void 0 : _a.call(interceptingListener, readError);
        } else {
          (_b = interceptingListener === null || interceptingListener === void 0 ? void 0 : interceptingListener.onReceiveStatus) === null || _b === void 0 ? void 0 : _b.call(interceptingListener, status);
        }
      }
    });
  }
  startRead() {
    this.call.startRead();
  }
  halfClose() {
    this.call.halfClose();
  }
};
var BaseUnaryInterceptingCall = class extends BaseInterceptingCall {
  constructor(call2, methodDefinition) {
    super(call2, methodDefinition);
  }
  start(metadata2, listener) {
    var _a, _b;
    let receivedMessage = false;
    const wrapperListener = {
      onReceiveMetadata: (_b = (_a = listener === null || listener === void 0 ? void 0 : listener.onReceiveMetadata) === null || _a === void 0 ? void 0 : _a.bind(listener)) !== null && _b !== void 0 ? _b : (metadata3) => {
      },
      onReceiveMessage: (message2) => {
        var _a2;
        receivedMessage = true;
        (_a2 = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a2 === void 0 ? void 0 : _a2.call(listener, message2);
      },
      onReceiveStatus: (status) => {
        var _a2, _b2;
        if (!receivedMessage) {
          (_a2 = listener === null || listener === void 0 ? void 0 : listener.onReceiveMessage) === null || _a2 === void 0 ? void 0 : _a2.call(listener, null);
        }
        (_b2 = listener === null || listener === void 0 ? void 0 : listener.onReceiveStatus) === null || _b2 === void 0 ? void 0 : _b2.call(listener, status);
      }
    };
    super.start(metadata2, wrapperListener);
    this.call.startRead();
  }
};
var BaseStreamingInterceptingCall = class extends BaseInterceptingCall {
};
function getBottomInterceptingCall(channel2, options2, methodDefinition) {
  const call2 = getCall(channel2, methodDefinition.path, options2);
  if (methodDefinition.responseStream) {
    return new BaseStreamingInterceptingCall(call2, methodDefinition);
  } else {
    return new BaseUnaryInterceptingCall(call2, methodDefinition);
  }
}
function getInterceptingCall(interceptorArgs, methodDefinition, options2, channel2) {
  if (interceptorArgs.clientInterceptors.length > 0 && interceptorArgs.clientInterceptorProviders.length > 0) {
    throw new InterceptorConfigurationError("Both interceptors and interceptor_providers were passed as options to the client constructor. Only one of these is allowed.");
  }
  if (interceptorArgs.callInterceptors.length > 0 && interceptorArgs.callInterceptorProviders.length > 0) {
    throw new InterceptorConfigurationError("Both interceptors and interceptor_providers were passed as call options. Only one of these is allowed.");
  }
  let interceptors = [];
  if (interceptorArgs.callInterceptors.length > 0 || interceptorArgs.callInterceptorProviders.length > 0) {
    interceptors = [].concat(interceptorArgs.callInterceptors, interceptorArgs.callInterceptorProviders.map((provider) => provider(methodDefinition))).filter((interceptor) => interceptor);
  } else {
    interceptors = [].concat(interceptorArgs.clientInterceptors, interceptorArgs.clientInterceptorProviders.map((provider) => provider(methodDefinition))).filter((interceptor) => interceptor);
  }
  const interceptorOptions = Object.assign({}, options2, {
    method_definition: methodDefinition
  });
  const getCall2 = interceptors.reduceRight((nextCall, nextInterceptor) => {
    return (currentOptions) => nextInterceptor(currentOptions, nextCall);
  }, (finalOptions) => getBottomInterceptingCall(channel2, finalOptions, methodDefinition));
  return getCall2(interceptorOptions);
}
clientInterceptors.getInterceptingCall = getInterceptingCall;
Object.defineProperty(client, "__esModule", { value: true });
client.Client = void 0;
var call_1 = call;
var channel_1 = channel;
var constants_1$2 = constants;
var metadata_1$2 = metadata;
var client_interceptors_1 = clientInterceptors;
var CHANNEL_SYMBOL = Symbol();
var INTERCEPTOR_SYMBOL = Symbol();
var INTERCEPTOR_PROVIDER_SYMBOL = Symbol();
var CALL_INVOCATION_TRANSFORMER_SYMBOL = Symbol();
function isFunction(arg) {
  return typeof arg === "function";
}
var Client = class {
  constructor(address, credentials, options2 = {}) {
    var _a, _b;
    options2 = Object.assign({}, options2);
    this[INTERCEPTOR_SYMBOL] = (_a = options2.interceptors) !== null && _a !== void 0 ? _a : [];
    delete options2.interceptors;
    this[INTERCEPTOR_PROVIDER_SYMBOL] = (_b = options2.interceptor_providers) !== null && _b !== void 0 ? _b : [];
    delete options2.interceptor_providers;
    if (this[INTERCEPTOR_SYMBOL].length > 0 && this[INTERCEPTOR_PROVIDER_SYMBOL].length > 0) {
      throw new Error("Both interceptors and interceptor_providers were passed as options to the client constructor. Only one of these is allowed.");
    }
    this[CALL_INVOCATION_TRANSFORMER_SYMBOL] = options2.callInvocationTransformer;
    delete options2.callInvocationTransformer;
    if (options2.channelOverride) {
      this[CHANNEL_SYMBOL] = options2.channelOverride;
    } else if (options2.channelFactoryOverride) {
      const channelFactoryOverride = options2.channelFactoryOverride;
      delete options2.channelFactoryOverride;
      this[CHANNEL_SYMBOL] = channelFactoryOverride(address, credentials, options2);
    } else {
      this[CHANNEL_SYMBOL] = new channel_1.ChannelImplementation(address, credentials, options2);
    }
  }
  close() {
    this[CHANNEL_SYMBOL].close();
  }
  getChannel() {
    return this[CHANNEL_SYMBOL];
  }
  waitForReady(deadline, callback) {
    const checkState = (err) => {
      if (err) {
        callback(new Error("Failed to connect before the deadline"));
        return;
      }
      let newState;
      try {
        newState = this[CHANNEL_SYMBOL].getConnectivityState(true);
      } catch (e) {
        callback(new Error("The channel has been closed"));
        return;
      }
      if (newState === channel_1.ConnectivityState.READY) {
        callback();
      } else {
        try {
          this[CHANNEL_SYMBOL].watchConnectivityState(newState, deadline, checkState);
        } catch (e) {
          callback(new Error("The channel has been closed"));
        }
      }
    };
    setImmediate(checkState);
  }
  checkOptionalUnaryResponseArguments(arg1, arg2, arg3) {
    if (isFunction(arg1)) {
      return { metadata: new metadata_1$2.Metadata(), options: {}, callback: arg1 };
    } else if (isFunction(arg2)) {
      if (arg1 instanceof metadata_1$2.Metadata) {
        return { metadata: arg1, options: {}, callback: arg2 };
      } else {
        return { metadata: new metadata_1$2.Metadata(), options: arg1, callback: arg2 };
      }
    } else {
      if (!(arg1 instanceof metadata_1$2.Metadata && arg2 instanceof Object && isFunction(arg3))) {
        throw new Error("Incorrect arguments passed");
      }
      return { metadata: arg1, options: arg2, callback: arg3 };
    }
  }
  makeUnaryRequest(method2, serialize, deserialize, argument, metadata2, options2, callback) {
    var _a, _b;
    const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata2, options2, callback);
    const methodDefinition = {
      path: method2,
      requestStream: false,
      responseStream: false,
      requestSerialize: serialize,
      responseDeserialize: deserialize
    };
    let callProperties = {
      argument,
      metadata: checkedArguments.metadata,
      call: new call_1.ClientUnaryCallImpl(),
      channel: this[CHANNEL_SYMBOL],
      methodDefinition,
      callOptions: checkedArguments.options,
      callback: checkedArguments.callback
    };
    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
    }
    const emitter = callProperties.call;
    const interceptorArgs = {
      clientInterceptors: this[INTERCEPTOR_SYMBOL],
      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
    };
    const call2 = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
    emitter.call = call2;
    if (callProperties.callOptions.credentials) {
      call2.setCredentials(callProperties.callOptions.credentials);
    }
    let responseMessage = null;
    let receivedStatus = false;
    call2.start(callProperties.metadata, {
      onReceiveMetadata: (metadata3) => {
        emitter.emit("metadata", metadata3);
      },
      onReceiveMessage(message2) {
        if (responseMessage !== null) {
          call2.cancelWithStatus(constants_1$2.Status.INTERNAL, "Too many responses received");
        }
        responseMessage = message2;
      },
      onReceiveStatus(status) {
        if (receivedStatus) {
          return;
        }
        receivedStatus = true;
        if (status.code === constants_1$2.Status.OK) {
          callProperties.callback(null, responseMessage);
        } else {
          callProperties.callback(call_1.callErrorFromStatus(status));
        }
        emitter.emit("status", status);
      }
    });
    call2.sendMessage(argument);
    call2.halfClose();
    return emitter;
  }
  makeClientStreamRequest(method2, serialize, deserialize, metadata2, options2, callback) {
    var _a, _b;
    const checkedArguments = this.checkOptionalUnaryResponseArguments(metadata2, options2, callback);
    const methodDefinition = {
      path: method2,
      requestStream: true,
      responseStream: false,
      requestSerialize: serialize,
      responseDeserialize: deserialize
    };
    let callProperties = {
      metadata: checkedArguments.metadata,
      call: new call_1.ClientWritableStreamImpl(serialize),
      channel: this[CHANNEL_SYMBOL],
      methodDefinition,
      callOptions: checkedArguments.options,
      callback: checkedArguments.callback
    };
    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
    }
    const emitter = callProperties.call;
    const interceptorArgs = {
      clientInterceptors: this[INTERCEPTOR_SYMBOL],
      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
    };
    const call2 = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
    emitter.call = call2;
    if (callProperties.callOptions.credentials) {
      call2.setCredentials(callProperties.callOptions.credentials);
    }
    let responseMessage = null;
    let receivedStatus = false;
    call2.start(callProperties.metadata, {
      onReceiveMetadata: (metadata3) => {
        emitter.emit("metadata", metadata3);
      },
      onReceiveMessage(message2) {
        if (responseMessage !== null) {
          call2.cancelWithStatus(constants_1$2.Status.INTERNAL, "Too many responses received");
        }
        responseMessage = message2;
      },
      onReceiveStatus(status) {
        if (receivedStatus) {
          return;
        }
        receivedStatus = true;
        if (status.code === constants_1$2.Status.OK) {
          callProperties.callback(null, responseMessage);
        } else {
          callProperties.callback(call_1.callErrorFromStatus(status));
        }
        emitter.emit("status", status);
      }
    });
    return emitter;
  }
  checkMetadataAndOptions(arg1, arg2) {
    let metadata2;
    let options2;
    if (arg1 instanceof metadata_1$2.Metadata) {
      metadata2 = arg1;
      if (arg2) {
        options2 = arg2;
      } else {
        options2 = {};
      }
    } else {
      if (arg1) {
        options2 = arg1;
      } else {
        options2 = {};
      }
      metadata2 = new metadata_1$2.Metadata();
    }
    return { metadata: metadata2, options: options2 };
  }
  makeServerStreamRequest(method2, serialize, deserialize, argument, metadata2, options2) {
    var _a, _b;
    const checkedArguments = this.checkMetadataAndOptions(metadata2, options2);
    const methodDefinition = {
      path: method2,
      requestStream: false,
      responseStream: true,
      requestSerialize: serialize,
      responseDeserialize: deserialize
    };
    let callProperties = {
      argument,
      metadata: checkedArguments.metadata,
      call: new call_1.ClientReadableStreamImpl(deserialize),
      channel: this[CHANNEL_SYMBOL],
      methodDefinition,
      callOptions: checkedArguments.options
    };
    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
    }
    const stream = callProperties.call;
    const interceptorArgs = {
      clientInterceptors: this[INTERCEPTOR_SYMBOL],
      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
    };
    const call2 = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
    stream.call = call2;
    if (callProperties.callOptions.credentials) {
      call2.setCredentials(callProperties.callOptions.credentials);
    }
    let receivedStatus = false;
    call2.start(callProperties.metadata, {
      onReceiveMetadata(metadata3) {
        stream.emit("metadata", metadata3);
      },
      onReceiveMessage(message2) {
        stream.push(message2);
      },
      onReceiveStatus(status) {
        if (receivedStatus) {
          return;
        }
        receivedStatus = true;
        stream.push(null);
        if (status.code !== constants_1$2.Status.OK) {
          stream.emit("error", call_1.callErrorFromStatus(status));
        }
        stream.emit("status", status);
      }
    });
    call2.sendMessage(argument);
    call2.halfClose();
    return stream;
  }
  makeBidiStreamRequest(method2, serialize, deserialize, metadata2, options2) {
    var _a, _b;
    const checkedArguments = this.checkMetadataAndOptions(metadata2, options2);
    const methodDefinition = {
      path: method2,
      requestStream: true,
      responseStream: true,
      requestSerialize: serialize,
      responseDeserialize: deserialize
    };
    let callProperties = {
      metadata: checkedArguments.metadata,
      call: new call_1.ClientDuplexStreamImpl(serialize, deserialize),
      channel: this[CHANNEL_SYMBOL],
      methodDefinition,
      callOptions: checkedArguments.options
    };
    if (this[CALL_INVOCATION_TRANSFORMER_SYMBOL]) {
      callProperties = this[CALL_INVOCATION_TRANSFORMER_SYMBOL](callProperties);
    }
    const stream = callProperties.call;
    const interceptorArgs = {
      clientInterceptors: this[INTERCEPTOR_SYMBOL],
      clientInterceptorProviders: this[INTERCEPTOR_PROVIDER_SYMBOL],
      callInterceptors: (_a = callProperties.callOptions.interceptors) !== null && _a !== void 0 ? _a : [],
      callInterceptorProviders: (_b = callProperties.callOptions.interceptor_providers) !== null && _b !== void 0 ? _b : []
    };
    const call2 = client_interceptors_1.getInterceptingCall(interceptorArgs, callProperties.methodDefinition, callProperties.callOptions, callProperties.channel);
    stream.call = call2;
    if (callProperties.callOptions.credentials) {
      call2.setCredentials(callProperties.callOptions.credentials);
    }
    let receivedStatus = false;
    call2.start(callProperties.metadata, {
      onReceiveMetadata(metadata3) {
        stream.emit("metadata", metadata3);
      },
      onReceiveMessage(message2) {
        stream.push(message2);
      },
      onReceiveStatus(status) {
        if (receivedStatus) {
          return;
        }
        receivedStatus = true;
        stream.push(null);
        if (status.code !== constants_1$2.Status.OK) {
          stream.emit("error", call_1.callErrorFromStatus(status));
        }
        stream.emit("status", status);
      }
    });
    return stream;
  }
};
client.Client = Client;
var makeClient = {};
Object.defineProperty(makeClient, "__esModule", { value: true });
makeClient.loadPackageDefinition = makeClient.makeClientConstructor = void 0;
var client_1 = client;
var requesterFuncs = {
  unary: client_1.Client.prototype.makeUnaryRequest,
  server_stream: client_1.Client.prototype.makeServerStreamRequest,
  client_stream: client_1.Client.prototype.makeClientStreamRequest,
  bidi: client_1.Client.prototype.makeBidiStreamRequest
};
function isPrototypePolluted(key) {
  return ["__proto__", "prototype", "constructor"].includes(key);
}
function makeClientConstructor(methods, serviceName, classOptions) {
  class ServiceClientImpl extends client_1.Client {
  }
  Object.keys(methods).forEach((name2) => {
    if (isPrototypePolluted(name2)) {
      return;
    }
    const attrs = methods[name2];
    let methodType;
    if (typeof name2 === "string" && name2.charAt(0) === "$") {
      throw new Error("Method names cannot start with $");
    }
    if (attrs.requestStream) {
      if (attrs.responseStream) {
        methodType = "bidi";
      } else {
        methodType = "client_stream";
      }
    } else {
      if (attrs.responseStream) {
        methodType = "server_stream";
      } else {
        methodType = "unary";
      }
    }
    const serialize = attrs.requestSerialize;
    const deserialize = attrs.responseDeserialize;
    const methodFunc = partial(requesterFuncs[methodType], attrs.path, serialize, deserialize);
    ServiceClientImpl.prototype[name2] = methodFunc;
    Object.assign(ServiceClientImpl.prototype[name2], attrs);
    if (attrs.originalName && !isPrototypePolluted(attrs.originalName)) {
      ServiceClientImpl.prototype[attrs.originalName] = ServiceClientImpl.prototype[name2];
    }
  });
  ServiceClientImpl.service = methods;
  return ServiceClientImpl;
}
makeClient.makeClientConstructor = makeClientConstructor;
function partial(fn, path2, serialize, deserialize) {
  return function(...args) {
    return fn.call(this, path2, serialize, deserialize, ...args);
  };
}
function isProtobufTypeDefinition(obj) {
  return "format" in obj;
}
function loadPackageDefinition(packageDef) {
  const result = {};
  for (const serviceFqn in packageDef) {
    if (Object.prototype.hasOwnProperty.call(packageDef, serviceFqn)) {
      const service2 = packageDef[serviceFqn];
      const nameComponents = serviceFqn.split(".");
      if (nameComponents.some((comp) => isPrototypePolluted(comp))) {
        continue;
      }
      const serviceName = nameComponents[nameComponents.length - 1];
      let current = result;
      for (const packageName of nameComponents.slice(0, -1)) {
        if (!current[packageName]) {
          current[packageName] = {};
        }
        current = current[packageName];
      }
      if (isProtobufTypeDefinition(service2)) {
        current[serviceName] = service2;
      } else {
        current[serviceName] = makeClientConstructor(service2);
      }
    }
  }
  return result;
}
makeClient.loadPackageDefinition = loadPackageDefinition;
var server = {};
var serverCall = {};
Object.defineProperty(serverCall, "__esModule", { value: true });
serverCall.Http2ServerCallStream = serverCall.ServerDuplexStreamImpl = serverCall.ServerWritableStreamImpl = serverCall.ServerReadableStreamImpl = serverCall.ServerUnaryCallImpl = void 0;
var events_1 = import_events.default;
var http2$1 = import_http2.default;
var stream_1 = import_stream2.default;
var constants_1$1 = constants;
var metadata_1$1 = metadata;
var stream_decoder_1 = streamDecoder;
var logging$1 = logging$a;
var TRACER_NAME$1 = "server_call";
function trace$1(text) {
  logging$1.trace(constants_1$1.LogVerbosity.DEBUG, TRACER_NAME$1, text);
}
var GRPC_ACCEPT_ENCODING_HEADER = "grpc-accept-encoding";
var GRPC_ENCODING_HEADER = "grpc-encoding";
var GRPC_MESSAGE_HEADER = "grpc-message";
var GRPC_STATUS_HEADER = "grpc-status";
var GRPC_TIMEOUT_HEADER = "grpc-timeout";
var DEADLINE_REGEX = /(\d{1,8})\s*([HMSmun])/;
var deadlineUnitsToMs = {
  H: 36e5,
  M: 6e4,
  S: 1e3,
  m: 1,
  u: 1e-3,
  n: 1e-6
};
var defaultResponseHeaders = {
  [GRPC_ACCEPT_ENCODING_HEADER]: "identity",
  [GRPC_ENCODING_HEADER]: "identity",
  [http2$1.constants.HTTP2_HEADER_STATUS]: http2$1.constants.HTTP_STATUS_OK,
  [http2$1.constants.HTTP2_HEADER_CONTENT_TYPE]: "application/grpc+proto"
};
var defaultResponseOptions = {
  waitForTrailers: true
};
var ServerUnaryCallImpl = class extends events_1.EventEmitter {
  constructor(call2, metadata2, request) {
    super();
    this.call = call2;
    this.metadata = metadata2;
    this.request = request;
    this.cancelled = false;
    this.call.setupSurfaceCall(this);
  }
  getPeer() {
    return this.call.getPeer();
  }
  sendMetadata(responseMetadata) {
    this.call.sendMetadata(responseMetadata);
  }
  getDeadline() {
    return this.call.getDeadline();
  }
};
serverCall.ServerUnaryCallImpl = ServerUnaryCallImpl;
var ServerReadableStreamImpl = class extends stream_1.Readable {
  constructor(call2, metadata2, deserialize) {
    super({ objectMode: true });
    this.call = call2;
    this.metadata = metadata2;
    this.deserialize = deserialize;
    this.cancelled = false;
    this.call.setupSurfaceCall(this);
    this.call.setupReadable(this);
  }
  _read(size) {
    if (!this.call.consumeUnpushedMessages(this)) {
      return;
    }
    this.call.resume();
  }
  getPeer() {
    return this.call.getPeer();
  }
  sendMetadata(responseMetadata) {
    this.call.sendMetadata(responseMetadata);
  }
  getDeadline() {
    return this.call.getDeadline();
  }
};
serverCall.ServerReadableStreamImpl = ServerReadableStreamImpl;
var ServerWritableStreamImpl = class extends stream_1.Writable {
  constructor(call2, metadata2, serialize, request) {
    super({ objectMode: true });
    this.call = call2;
    this.metadata = metadata2;
    this.serialize = serialize;
    this.request = request;
    this.cancelled = false;
    this.trailingMetadata = new metadata_1$1.Metadata();
    this.call.setupSurfaceCall(this);
    this.on("error", (err) => {
      this.call.sendError(err);
      this.end();
    });
  }
  getPeer() {
    return this.call.getPeer();
  }
  sendMetadata(responseMetadata) {
    this.call.sendMetadata(responseMetadata);
  }
  getDeadline() {
    return this.call.getDeadline();
  }
  _write(chunk, encoding, callback) {
    try {
      const response = this.call.serializeMessage(chunk);
      if (!this.call.write(response)) {
        this.call.once("drain", callback);
        return;
      }
    } catch (err) {
      err.code = constants_1$1.Status.INTERNAL;
      this.emit("error", err);
    }
    callback();
  }
  _final(callback) {
    this.call.sendStatus({
      code: constants_1$1.Status.OK,
      details: "OK",
      metadata: this.trailingMetadata
    });
    callback(null);
  }
  end(metadata2) {
    if (metadata2) {
      this.trailingMetadata = metadata2;
    }
    super.end();
  }
};
serverCall.ServerWritableStreamImpl = ServerWritableStreamImpl;
var ServerDuplexStreamImpl = class extends stream_1.Duplex {
  constructor(call2, metadata2, serialize, deserialize) {
    super({ objectMode: true });
    this.call = call2;
    this.metadata = metadata2;
    this.serialize = serialize;
    this.deserialize = deserialize;
    this.cancelled = false;
    this.trailingMetadata = new metadata_1$1.Metadata();
    this.call.setupSurfaceCall(this);
    this.call.setupReadable(this);
    this.on("error", (err) => {
      this.call.sendError(err);
      this.end();
    });
  }
  getPeer() {
    return this.call.getPeer();
  }
  sendMetadata(responseMetadata) {
    this.call.sendMetadata(responseMetadata);
  }
  getDeadline() {
    return this.call.getDeadline();
  }
  end(metadata2) {
    if (metadata2) {
      this.trailingMetadata = metadata2;
    }
    super.end();
  }
};
serverCall.ServerDuplexStreamImpl = ServerDuplexStreamImpl;
ServerDuplexStreamImpl.prototype._read = ServerReadableStreamImpl.prototype._read;
ServerDuplexStreamImpl.prototype._write = ServerWritableStreamImpl.prototype._write;
ServerDuplexStreamImpl.prototype._final = ServerWritableStreamImpl.prototype._final;
ServerDuplexStreamImpl.prototype.end = ServerWritableStreamImpl.prototype.end;
var Http2ServerCallStream = class extends events_1.EventEmitter {
  constructor(stream, handler, options2) {
    super();
    this.stream = stream;
    this.handler = handler;
    this.options = options2;
    this.cancelled = false;
    this.deadlineTimer = setTimeout(() => {
    }, 0);
    this.deadline = Infinity;
    this.wantTrailers = false;
    this.metadataSent = false;
    this.canPush = false;
    this.isPushPending = false;
    this.bufferedMessages = [];
    this.messagesToPush = [];
    this.maxSendMessageSize = constants_1$1.DEFAULT_MAX_SEND_MESSAGE_LENGTH;
    this.maxReceiveMessageSize = constants_1$1.DEFAULT_MAX_RECEIVE_MESSAGE_LENGTH;
    this.stream.once("error", (err) => {
    });
    this.stream.once("close", () => {
      var _a;
      trace$1("Request to method " + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + " stream closed with rstCode " + this.stream.rstCode);
      this.cancelled = true;
      this.emit("cancelled", "cancelled");
    });
    this.stream.on("drain", () => {
      this.emit("drain");
    });
    if ("grpc.max_send_message_length" in options2) {
      this.maxSendMessageSize = options2["grpc.max_send_message_length"];
    }
    if ("grpc.max_receive_message_length" in options2) {
      this.maxReceiveMessageSize = options2["grpc.max_receive_message_length"];
    }
    clearTimeout(this.deadlineTimer);
  }
  checkCancelled() {
    if (this.stream.destroyed || this.stream.closed) {
      this.cancelled = true;
    }
    return this.cancelled;
  }
  sendMetadata(customMetadata) {
    if (this.checkCancelled()) {
      return;
    }
    if (this.metadataSent) {
      return;
    }
    this.metadataSent = true;
    const custom = customMetadata ? customMetadata.toHttp2Headers() : null;
    const headers = Object.assign({}, defaultResponseHeaders, custom);
    this.stream.respond(headers, defaultResponseOptions);
  }
  receiveMetadata(headers) {
    const metadata2 = metadata_1$1.Metadata.fromHttp2Headers(headers);
    const timeoutHeader = metadata2.get(GRPC_TIMEOUT_HEADER);
    if (timeoutHeader.length > 0) {
      const match = timeoutHeader[0].toString().match(DEADLINE_REGEX);
      if (match === null) {
        const err = new Error("Invalid deadline");
        err.code = constants_1$1.Status.OUT_OF_RANGE;
        this.sendError(err);
        return;
      }
      const timeout = +match[1] * deadlineUnitsToMs[match[2]] | 0;
      const now = new Date();
      this.deadline = now.setMilliseconds(now.getMilliseconds() + timeout);
      this.deadlineTimer = setTimeout(handleExpiredDeadline, timeout, this);
      metadata2.remove(GRPC_TIMEOUT_HEADER);
    }
    metadata2.remove(http2$1.constants.HTTP2_HEADER_ACCEPT_ENCODING);
    metadata2.remove(http2$1.constants.HTTP2_HEADER_TE);
    metadata2.remove(http2$1.constants.HTTP2_HEADER_CONTENT_TYPE);
    metadata2.remove("grpc-encoding");
    metadata2.remove("grpc-accept-encoding");
    return metadata2;
  }
  receiveUnaryMessage() {
    return new Promise((resolve6, reject) => {
      const stream = this.stream;
      const chunks = [];
      let totalLength = 0;
      stream.on("data", (data) => {
        chunks.push(data);
        totalLength += data.byteLength;
      });
      stream.once("end", async () => {
        try {
          const requestBytes = Buffer.concat(chunks, totalLength);
          if (this.maxReceiveMessageSize !== -1 && requestBytes.length > this.maxReceiveMessageSize) {
            this.sendError({
              code: constants_1$1.Status.RESOURCE_EXHAUSTED,
              details: `Received message larger than max (${requestBytes.length} vs. ${this.maxReceiveMessageSize})`
            });
            resolve6();
          }
          resolve6(this.deserializeMessage(requestBytes));
        } catch (err) {
          err.code = constants_1$1.Status.INTERNAL;
          this.sendError(err);
          resolve6();
        }
      });
    });
  }
  serializeMessage(value) {
    const messageBuffer = this.handler.serialize(value);
    const byteLength = messageBuffer.byteLength;
    const output = Buffer.allocUnsafe(byteLength + 5);
    output.writeUInt8(0, 0);
    output.writeUInt32BE(byteLength, 1);
    messageBuffer.copy(output, 5);
    return output;
  }
  deserializeMessage(bytes) {
    const receivedMessage = bytes.slice(5);
    return this.handler.deserialize(receivedMessage);
  }
  async sendUnaryMessage(err, value, metadata2, flags) {
    if (this.checkCancelled()) {
      return;
    }
    if (!metadata2) {
      metadata2 = new metadata_1$1.Metadata();
    }
    if (err) {
      if (!Object.prototype.hasOwnProperty.call(err, "metadata")) {
        err.metadata = metadata2;
      }
      this.sendError(err);
      return;
    }
    try {
      const response = this.serializeMessage(value);
      this.write(response);
      this.sendStatus({ code: constants_1$1.Status.OK, details: "OK", metadata: metadata2 });
    } catch (err2) {
      err2.code = constants_1$1.Status.INTERNAL;
      this.sendError(err2);
    }
  }
  sendStatus(statusObj) {
    var _a;
    if (this.checkCancelled()) {
      return;
    }
    trace$1("Request to method " + ((_a = this.handler) === null || _a === void 0 ? void 0 : _a.path) + " ended with status code: " + constants_1$1.Status[statusObj.code] + " details: " + statusObj.details);
    clearTimeout(this.deadlineTimer);
    if (!this.wantTrailers) {
      this.wantTrailers = true;
      this.stream.once("wantTrailers", () => {
        const trailersToSend = Object.assign({
          [GRPC_STATUS_HEADER]: statusObj.code,
          [GRPC_MESSAGE_HEADER]: encodeURI(statusObj.details)
        }, statusObj.metadata.toHttp2Headers());
        this.stream.sendTrailers(trailersToSend);
      });
      this.sendMetadata();
      this.stream.end();
    }
  }
  sendError(error2) {
    if (this.checkCancelled()) {
      return;
    }
    const status = {
      code: constants_1$1.Status.UNKNOWN,
      details: "message" in error2 ? error2.message : "Unknown Error",
      metadata: "metadata" in error2 && error2.metadata !== void 0 ? error2.metadata : new metadata_1$1.Metadata()
    };
    if ("code" in error2 && typeof error2.code === "number" && Number.isInteger(error2.code)) {
      status.code = error2.code;
      if ("details" in error2 && typeof error2.details === "string") {
        status.details = error2.details;
      }
    }
    this.sendStatus(status);
  }
  write(chunk) {
    if (this.checkCancelled()) {
      return;
    }
    if (this.maxSendMessageSize !== -1 && chunk.length > this.maxSendMessageSize) {
      this.sendError({
        code: constants_1$1.Status.RESOURCE_EXHAUSTED,
        details: `Sent message larger than max (${chunk.length} vs. ${this.maxSendMessageSize})`
      });
      return;
    }
    this.sendMetadata();
    return this.stream.write(chunk);
  }
  resume() {
    this.stream.resume();
  }
  setupSurfaceCall(call2) {
    this.once("cancelled", (reason) => {
      call2.cancelled = true;
      call2.emit("cancelled", reason);
    });
  }
  setupReadable(readable) {
    const decoder2 = new stream_decoder_1.StreamDecoder();
    this.stream.on("data", async (data) => {
      const messages = decoder2.write(data);
      for (const message2 of messages) {
        if (this.maxReceiveMessageSize !== -1 && message2.length > this.maxReceiveMessageSize) {
          this.sendError({
            code: constants_1$1.Status.RESOURCE_EXHAUSTED,
            details: `Received message larger than max (${message2.length} vs. ${this.maxReceiveMessageSize})`
          });
          return;
        }
        this.pushOrBufferMessage(readable, message2);
      }
    });
    this.stream.once("end", () => {
      this.pushOrBufferMessage(readable, null);
    });
  }
  consumeUnpushedMessages(readable) {
    this.canPush = true;
    while (this.messagesToPush.length > 0) {
      const nextMessage = this.messagesToPush.shift();
      const canPush = readable.push(nextMessage);
      if (nextMessage === null || canPush === false) {
        this.canPush = false;
        break;
      }
    }
    return this.canPush;
  }
  pushOrBufferMessage(readable, messageBytes) {
    if (this.isPushPending) {
      this.bufferedMessages.push(messageBytes);
    } else {
      this.pushMessage(readable, messageBytes);
    }
  }
  async pushMessage(readable, messageBytes) {
    if (messageBytes === null) {
      if (this.canPush) {
        readable.push(null);
      } else {
        this.messagesToPush.push(null);
      }
      return;
    }
    this.isPushPending = true;
    try {
      const deserialized = await this.deserializeMessage(messageBytes);
      if (this.canPush) {
        if (!readable.push(deserialized)) {
          this.canPush = false;
          this.stream.pause();
        }
      } else {
        this.messagesToPush.push(deserialized);
      }
    } catch (error2) {
      this.bufferedMessages.length = 0;
      if (!("code" in error2 && typeof error2.code === "number" && Number.isInteger(error2.code) && error2.code >= constants_1$1.Status.OK && error2.code <= constants_1$1.Status.UNAUTHENTICATED)) {
        error2.code = constants_1$1.Status.INTERNAL;
      }
      readable.emit("error", error2);
    }
    this.isPushPending = false;
    if (this.bufferedMessages.length > 0) {
      this.pushMessage(readable, this.bufferedMessages.shift());
    }
  }
  getPeer() {
    const socket = this.stream.session.socket;
    if (socket.remoteAddress) {
      if (socket.remotePort) {
        return `${socket.remoteAddress}:${socket.remotePort}`;
      } else {
        return socket.remoteAddress;
      }
    } else {
      return "unknown";
    }
  }
  getDeadline() {
    return this.deadline;
  }
};
serverCall.Http2ServerCallStream = Http2ServerCallStream;
function handleExpiredDeadline(call2) {
  const err = new Error("Deadline exceeded");
  err.code = constants_1$1.Status.DEADLINE_EXCEEDED;
  call2.sendError(err);
  call2.cancelled = true;
  call2.emit("cancelled", "deadline");
}
Object.defineProperty(server, "__esModule", { value: true });
server.Server = void 0;
var http22 = import_http2.default;
var constants_1 = constants;
var metadata_1 = metadata;
var server_call_1 = serverCall;
var resolver_1 = resolver;
var logging = logging$a;
var subchannel_1 = subchannel;
var uri_parser_1 = uriParser;
var TRACER_NAME = "server";
function trace(text) {
  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);
}
function noop$1() {
}
function getUnimplementedStatusResponse(methodName) {
  return {
    code: constants_1.Status.UNIMPLEMENTED,
    details: `The server does not implement the method ${methodName}`,
    metadata: new metadata_1.Metadata()
  };
}
function getDefaultHandler(handlerType, methodName) {
  const unimplementedStatusResponse = getUnimplementedStatusResponse(methodName);
  switch (handlerType) {
    case "unary":
      return (call2, callback) => {
        callback(unimplementedStatusResponse, null);
      };
    case "clientStream":
      return (call2, callback) => {
        callback(unimplementedStatusResponse, null);
      };
    case "serverStream":
      return (call2) => {
        call2.emit("error", unimplementedStatusResponse);
      };
    case "bidi":
      return (call2) => {
        call2.emit("error", unimplementedStatusResponse);
      };
    default:
      throw new Error(`Invalid handlerType ${handlerType}`);
  }
}
var Server = class {
  constructor(options2) {
    this.http2ServerList = [];
    this.handlers = new Map();
    this.sessions = new Set();
    this.started = false;
    this.options = options2 !== null && options2 !== void 0 ? options2 : {};
  }
  addProtoService() {
    throw new Error("Not implemented. Use addService() instead");
  }
  addService(service2, implementation) {
    if (service2 === null || typeof service2 !== "object" || implementation === null || typeof implementation !== "object") {
      throw new Error("addService() requires two objects as arguments");
    }
    const serviceKeys = Object.keys(service2);
    if (serviceKeys.length === 0) {
      throw new Error("Cannot add an empty service to a server");
    }
    serviceKeys.forEach((name2) => {
      const attrs = service2[name2];
      let methodType;
      if (attrs.requestStream) {
        if (attrs.responseStream) {
          methodType = "bidi";
        } else {
          methodType = "clientStream";
        }
      } else {
        if (attrs.responseStream) {
          methodType = "serverStream";
        } else {
          methodType = "unary";
        }
      }
      let implFn = implementation[name2];
      let impl;
      if (implFn === void 0 && typeof attrs.originalName === "string") {
        implFn = implementation[attrs.originalName];
      }
      if (implFn !== void 0) {
        impl = implFn.bind(implementation);
      } else {
        impl = getDefaultHandler(methodType, name2);
      }
      const success = this.register(attrs.path, impl, attrs.responseSerialize, attrs.requestDeserialize, methodType);
      if (success === false) {
        throw new Error(`Method handler for ${attrs.path} already provided.`);
      }
    });
  }
  removeService(service2) {
    if (service2 === null || typeof service2 !== "object") {
      throw new Error("removeService() requires object as argument");
    }
    const serviceKeys = Object.keys(service2);
    serviceKeys.forEach((name2) => {
      const attrs = service2[name2];
      this.unregister(attrs.path);
    });
  }
  bind(port, creds) {
    throw new Error("Not implemented. Use bindAsync() instead");
  }
  bindAsync(port, creds, callback) {
    if (this.started === true) {
      throw new Error("server is already started");
    }
    if (typeof port !== "string") {
      throw new TypeError("port must be a string");
    }
    if (creds === null || typeof creds !== "object") {
      throw new TypeError("creds must be an object");
    }
    if (typeof callback !== "function") {
      throw new TypeError("callback must be a function");
    }
    const initialPortUri = uri_parser_1.parseUri(port);
    if (initialPortUri === null) {
      throw new Error(`Could not parse port "${port}"`);
    }
    const portUri = resolver_1.mapUriDefaultScheme(initialPortUri);
    if (portUri === null) {
      throw new Error(`Could not get a default scheme for port "${port}"`);
    }
    const serverOptions = {
      maxSendHeaderBlockLength: Number.MAX_SAFE_INTEGER
    };
    if ("grpc-node.max_session_memory" in this.options) {
      serverOptions.maxSessionMemory = this.options["grpc-node.max_session_memory"];
    }
    if ("grpc.max_concurrent_streams" in this.options) {
      serverOptions.settings = {
        maxConcurrentStreams: this.options["grpc.max_concurrent_streams"]
      };
    }
    const setupServer = () => {
      let http2Server;
      if (creds._isSecure()) {
        const secureServerOptions = Object.assign(serverOptions, creds._getSettings());
        http2Server = http22.createSecureServer(secureServerOptions);
      } else {
        http2Server = http22.createServer(serverOptions);
      }
      http2Server.setTimeout(0, noop$1);
      this._setupHandlers(http2Server);
      return http2Server;
    };
    const bindSpecificPort = (addressList, portNum, previousCount) => {
      if (addressList.length === 0) {
        return Promise.resolve({ port: portNum, count: previousCount });
      }
      return Promise.all(addressList.map((address) => {
        trace("Attempting to bind " + subchannel_1.subchannelAddressToString(address));
        let addr;
        if (subchannel_1.isTcpSubchannelAddress(address)) {
          addr = {
            host: address.host,
            port: portNum
          };
        } else {
          addr = address;
        }
        const http2Server = setupServer();
        return new Promise((resolve6, reject) => {
          function onError(err) {
            resolve6(err);
          }
          http2Server.once("error", onError);
          http2Server.listen(addr, () => {
            trace("Successfully bound " + subchannel_1.subchannelAddressToString(address));
            this.http2ServerList.push(http2Server);
            const boundAddress = http2Server.address();
            if (typeof boundAddress === "string") {
              resolve6(portNum);
            } else {
              resolve6(boundAddress.port);
            }
            http2Server.removeListener("error", onError);
          });
        });
      })).then((results) => {
        let count = 0;
        for (const result of results) {
          if (typeof result === "number") {
            count += 1;
            if (result !== portNum) {
              throw new Error("Invalid state: multiple port numbers added from single address");
            }
          }
        }
        return {
          port: portNum,
          count: count + previousCount
        };
      });
    };
    const bindWildcardPort = (addressList) => {
      if (addressList.length === 0) {
        return Promise.resolve({ port: 0, count: 0 });
      }
      const address = addressList[0];
      const http2Server = setupServer();
      return new Promise((resolve6, reject) => {
        function onError(err) {
          resolve6(bindWildcardPort(addressList.slice(1)));
        }
        http2Server.once("error", onError);
        http2Server.listen(address, () => {
          this.http2ServerList.push(http2Server);
          resolve6(bindSpecificPort(addressList.slice(1), http2Server.address().port, 1));
          http2Server.removeListener("error", onError);
        });
      });
    };
    const resolverListener = {
      onSuccessfulResolution: (addressList, serviceConfig2, serviceConfigError) => {
        resolverListener.onSuccessfulResolution = () => {
        };
        if (addressList.length === 0) {
          callback(new Error(`No addresses resolved for port ${port}`), 0);
          return;
        }
        let bindResultPromise;
        if (subchannel_1.isTcpSubchannelAddress(addressList[0])) {
          if (addressList[0].port === 0) {
            bindResultPromise = bindWildcardPort(addressList);
          } else {
            bindResultPromise = bindSpecificPort(addressList, addressList[0].port, 0);
          }
        } else {
          bindResultPromise = bindSpecificPort(addressList, 1, 0);
        }
        bindResultPromise.then((bindResult) => {
          if (bindResult.count === 0) {
            const errorString = `No address added out of total ${addressList.length} resolved`;
            logging.log(constants_1.LogVerbosity.ERROR, errorString);
            callback(new Error(errorString), 0);
          } else {
            if (bindResult.count < addressList.length) {
              logging.log(constants_1.LogVerbosity.INFO, `WARNING Only ${bindResult.count} addresses added out of total ${addressList.length} resolved`);
            }
            callback(null, bindResult.port);
          }
        }, (error2) => {
          const errorString = `No address added out of total ${addressList.length} resolved`;
          logging.log(constants_1.LogVerbosity.ERROR, errorString);
          callback(new Error(errorString), 0);
        });
      },
      onError: (error2) => {
        callback(new Error(error2.details), 0);
      }
    };
    const resolver2 = resolver_1.createResolver(portUri, resolverListener, this.options);
    resolver2.updateResolution();
  }
  forceShutdown() {
    for (const http2Server of this.http2ServerList) {
      if (http2Server.listening) {
        http2Server.close();
      }
    }
    this.started = false;
    this.sessions.forEach((session) => {
      session.destroy(http22.constants.NGHTTP2_CANCEL);
    });
    this.sessions.clear();
  }
  register(name2, handler, serialize, deserialize, type2) {
    if (this.handlers.has(name2)) {
      return false;
    }
    this.handlers.set(name2, {
      func: handler,
      serialize,
      deserialize,
      type: type2,
      path: name2
    });
    return true;
  }
  unregister(name2) {
    return this.handlers.delete(name2);
  }
  start() {
    if (this.http2ServerList.length === 0 || this.http2ServerList.every((http2Server) => http2Server.listening !== true)) {
      throw new Error("server must be bound in order to start");
    }
    if (this.started === true) {
      throw new Error("server is already started");
    }
    this.started = true;
  }
  tryShutdown(callback) {
    let pendingChecks = 0;
    function maybeCallback() {
      pendingChecks--;
      if (pendingChecks === 0) {
        callback();
      }
    }
    this.started = false;
    for (const http2Server of this.http2ServerList) {
      if (http2Server.listening) {
        pendingChecks++;
        http2Server.close(maybeCallback);
      }
    }
    this.sessions.forEach((session) => {
      if (!session.closed) {
        pendingChecks += 1;
        session.close(maybeCallback);
      }
    });
    if (pendingChecks === 0) {
      callback();
    }
  }
  addHttp2Port() {
    throw new Error("Not yet implemented");
  }
  _setupHandlers(http2Server) {
    if (http2Server === null) {
      return;
    }
    http2Server.on("stream", (stream, headers) => {
      const contentType = headers[http22.constants.HTTP2_HEADER_CONTENT_TYPE];
      if (typeof contentType !== "string" || !contentType.startsWith("application/grpc")) {
        stream.respond({
          [http22.constants.HTTP2_HEADER_STATUS]: http22.constants.HTTP_STATUS_UNSUPPORTED_MEDIA_TYPE
        }, { endStream: true });
        return;
      }
      try {
        const path2 = headers[http22.constants.HTTP2_HEADER_PATH];
        const serverAddress = http2Server.address();
        let serverAddressString = "null";
        if (serverAddress) {
          if (typeof serverAddress === "string") {
            serverAddressString = serverAddress;
          } else {
            serverAddressString = serverAddress.address + ":" + serverAddress.port;
          }
        }
        trace("Received call to method " + path2 + " at address " + serverAddressString);
        const handler = this.handlers.get(path2);
        if (handler === void 0) {
          trace("No handler registered for method " + path2 + ". Sending UNIMPLEMENTED status.");
          throw getUnimplementedStatusResponse(path2);
        }
        const call2 = new server_call_1.Http2ServerCallStream(stream, handler, this.options);
        const metadata2 = call2.receiveMetadata(headers);
        switch (handler.type) {
          case "unary":
            handleUnary(call2, handler, metadata2);
            break;
          case "clientStream":
            handleClientStreaming(call2, handler, metadata2);
            break;
          case "serverStream":
            handleServerStreaming(call2, handler, metadata2);
            break;
          case "bidi":
            handleBidiStreaming(call2, handler, metadata2);
            break;
          default:
            throw new Error(`Unknown handler type: ${handler.type}`);
        }
      } catch (err) {
        const call2 = new server_call_1.Http2ServerCallStream(stream, null, this.options);
        if (err.code === void 0) {
          err.code = constants_1.Status.INTERNAL;
        }
        call2.sendError(err);
      }
    });
    http2Server.on("session", (session) => {
      if (!this.started) {
        session.destroy();
        return;
      }
      this.sessions.add(session);
      session.on("close", () => {
        this.sessions.delete(session);
      });
    });
  }
};
server.Server = Server;
async function handleUnary(call2, handler, metadata2) {
  const request = await call2.receiveUnaryMessage();
  if (request === void 0 || call2.cancelled) {
    return;
  }
  const emitter = new server_call_1.ServerUnaryCallImpl(call2, metadata2, request);
  handler.func(emitter, (err, value, trailer, flags) => {
    call2.sendUnaryMessage(err, value, trailer, flags);
  });
}
function handleClientStreaming(call2, handler, metadata2) {
  const stream = new server_call_1.ServerReadableStreamImpl(call2, metadata2, handler.deserialize);
  function respond2(err, value, trailer, flags) {
    stream.destroy();
    call2.sendUnaryMessage(err, value, trailer, flags);
  }
  if (call2.cancelled) {
    return;
  }
  stream.on("error", respond2);
  handler.func(stream, respond2);
}
async function handleServerStreaming(call2, handler, metadata2) {
  const request = await call2.receiveUnaryMessage();
  if (request === void 0 || call2.cancelled) {
    return;
  }
  const stream = new server_call_1.ServerWritableStreamImpl(call2, metadata2, handler.serialize, request);
  handler.func(stream);
}
function handleBidiStreaming(call2, handler, metadata2) {
  const stream = new server_call_1.ServerDuplexStreamImpl(call2, metadata2, handler.serialize, handler.deserialize);
  if (call2.cancelled) {
    return;
  }
  handler.func(stream);
}
var serverCredentials = {};
Object.defineProperty(serverCredentials, "__esModule", { value: true });
serverCredentials.ServerCredentials = void 0;
var tls_helpers_1 = tlsHelpers;
var ServerCredentials = class {
  static createInsecure() {
    return new InsecureServerCredentials();
  }
  static createSsl(rootCerts, keyCertPairs, checkClientCertificate = false) {
    if (rootCerts !== null && !Buffer.isBuffer(rootCerts)) {
      throw new TypeError("rootCerts must be null or a Buffer");
    }
    if (!Array.isArray(keyCertPairs)) {
      throw new TypeError("keyCertPairs must be an array");
    }
    if (typeof checkClientCertificate !== "boolean") {
      throw new TypeError("checkClientCertificate must be a boolean");
    }
    const cert = [];
    const key = [];
    for (let i = 0; i < keyCertPairs.length; i++) {
      const pair = keyCertPairs[i];
      if (pair === null || typeof pair !== "object") {
        throw new TypeError(`keyCertPair[${i}] must be an object`);
      }
      if (!Buffer.isBuffer(pair.private_key)) {
        throw new TypeError(`keyCertPair[${i}].private_key must be a Buffer`);
      }
      if (!Buffer.isBuffer(pair.cert_chain)) {
        throw new TypeError(`keyCertPair[${i}].cert_chain must be a Buffer`);
      }
      cert.push(pair.cert_chain);
      key.push(pair.private_key);
    }
    return new SecureServerCredentials({
      ca: rootCerts || tls_helpers_1.getDefaultRootsData() || void 0,
      cert,
      key,
      requestCert: checkClientCertificate,
      ciphers: tls_helpers_1.CIPHER_SUITES
    });
  }
};
serverCredentials.ServerCredentials = ServerCredentials;
var InsecureServerCredentials = class extends ServerCredentials {
  _isSecure() {
    return false;
  }
  _getSettings() {
    return null;
  }
};
var SecureServerCredentials = class extends ServerCredentials {
  constructor(options2) {
    super();
    this.options = options2;
  }
  _isSecure() {
    return true;
  }
  _getSettings() {
    return this.options;
  }
};
var statusBuilder = {};
Object.defineProperty(statusBuilder, "__esModule", { value: true });
statusBuilder.StatusBuilder = void 0;
var StatusBuilder = class {
  constructor() {
    this.code = null;
    this.details = null;
    this.metadata = null;
  }
  withCode(code) {
    this.code = code;
    return this;
  }
  withDetails(details) {
    this.details = details;
    return this;
  }
  withMetadata(metadata2) {
    this.metadata = metadata2;
    return this;
  }
  build() {
    const status = {};
    if (this.code !== null) {
      status.code = this.code;
    }
    if (this.details !== null) {
      status.details = this.details;
    }
    if (this.metadata !== null) {
      status.metadata = this.metadata;
    }
    return status;
  }
};
statusBuilder.StatusBuilder = StatusBuilder;
var experimental = {};
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  var logging_12 = logging$a;
  Object.defineProperty(exports, "trace", { enumerable: true, get: function() {
    return logging_12.trace;
  } });
  var resolver_12 = resolver;
  Object.defineProperty(exports, "registerResolver", { enumerable: true, get: function() {
    return resolver_12.registerResolver;
  } });
  var uri_parser_12 = uriParser;
  Object.defineProperty(exports, "uriToString", { enumerable: true, get: function() {
    return uri_parser_12.uriToString;
  } });
  var backoff_timeout_12 = backoffTimeout;
  Object.defineProperty(exports, "BackoffTimeout", { enumerable: true, get: function() {
    return backoff_timeout_12.BackoffTimeout;
  } });
  var load_balancer_12 = loadBalancer;
  Object.defineProperty(exports, "registerLoadBalancerType", { enumerable: true, get: function() {
    return load_balancer_12.registerLoadBalancerType;
  } });
  Object.defineProperty(exports, "getFirstUsableConfig", { enumerable: true, get: function() {
    return load_balancer_12.getFirstUsableConfig;
  } });
  Object.defineProperty(exports, "validateLoadBalancingConfig", { enumerable: true, get: function() {
    return load_balancer_12.validateLoadBalancingConfig;
  } });
  var subchannel_12 = subchannel;
  Object.defineProperty(exports, "subchannelAddressToString", { enumerable: true, get: function() {
    return subchannel_12.subchannelAddressToString;
  } });
  var load_balancer_child_handler_12 = loadBalancerChildHandler;
  Object.defineProperty(exports, "ChildLoadBalancerHandler", { enumerable: true, get: function() {
    return load_balancer_child_handler_12.ChildLoadBalancerHandler;
  } });
  var picker_12 = picker;
  Object.defineProperty(exports, "UnavailablePicker", { enumerable: true, get: function() {
    return picker_12.UnavailablePicker;
  } });
  Object.defineProperty(exports, "QueuePicker", { enumerable: true, get: function() {
    return picker_12.QueuePicker;
  } });
  Object.defineProperty(exports, "PickResultType", { enumerable: true, get: function() {
    return picker_12.PickResultType;
  } });
  var filter_12 = filter;
  Object.defineProperty(exports, "BaseFilter", { enumerable: true, get: function() {
    return filter_12.BaseFilter;
  } });
  var filter_stack_12 = filterStack;
  Object.defineProperty(exports, "FilterStackFactory", { enumerable: true, get: function() {
    return filter_stack_12.FilterStackFactory;
  } });
})(experimental);
(function(exports) {
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.experimental = exports.StatusBuilder = exports.getClientChannel = exports.ServerCredentials = exports.Server = exports.setLogVerbosity = exports.setLogger = exports.load = exports.loadObject = exports.CallCredentials = exports.ChannelCredentials = exports.waitForClientReady = exports.closeClient = exports.Channel = exports.makeGenericClientConstructor = exports.makeClientConstructor = exports.loadPackageDefinition = exports.Client = exports.propagate = exports.connectivityState = exports.status = exports.logVerbosity = exports.Metadata = exports.credentials = void 0;
  const call_credentials_12 = callCredentials;
  Object.defineProperty(exports, "CallCredentials", { enumerable: true, get: function() {
    return call_credentials_12.CallCredentials;
  } });
  const channel_12 = channel;
  Object.defineProperty(exports, "connectivityState", { enumerable: true, get: function() {
    return channel_12.ConnectivityState;
  } });
  Object.defineProperty(exports, "Channel", { enumerable: true, get: function() {
    return channel_12.ChannelImplementation;
  } });
  const channel_credentials_1 = channelCredentials;
  Object.defineProperty(exports, "ChannelCredentials", { enumerable: true, get: function() {
    return channel_credentials_1.ChannelCredentials;
  } });
  const client_12 = client;
  Object.defineProperty(exports, "Client", { enumerable: true, get: function() {
    return client_12.Client;
  } });
  const constants_12 = constants;
  Object.defineProperty(exports, "logVerbosity", { enumerable: true, get: function() {
    return constants_12.LogVerbosity;
  } });
  Object.defineProperty(exports, "status", { enumerable: true, get: function() {
    return constants_12.Status;
  } });
  Object.defineProperty(exports, "propagate", { enumerable: true, get: function() {
    return constants_12.Propagate;
  } });
  const logging2 = logging$a;
  const make_client_1 = makeClient;
  Object.defineProperty(exports, "loadPackageDefinition", { enumerable: true, get: function() {
    return make_client_1.loadPackageDefinition;
  } });
  Object.defineProperty(exports, "makeClientConstructor", { enumerable: true, get: function() {
    return make_client_1.makeClientConstructor;
  } });
  Object.defineProperty(exports, "makeGenericClientConstructor", { enumerable: true, get: function() {
    return make_client_1.makeClientConstructor;
  } });
  const metadata_12 = metadata;
  Object.defineProperty(exports, "Metadata", { enumerable: true, get: function() {
    return metadata_12.Metadata;
  } });
  const server_1 = server;
  Object.defineProperty(exports, "Server", { enumerable: true, get: function() {
    return server_1.Server;
  } });
  const server_credentials_1 = serverCredentials;
  Object.defineProperty(exports, "ServerCredentials", { enumerable: true, get: function() {
    return server_credentials_1.ServerCredentials;
  } });
  const status_builder_1 = statusBuilder;
  Object.defineProperty(exports, "StatusBuilder", { enumerable: true, get: function() {
    return status_builder_1.StatusBuilder;
  } });
  exports.credentials = {
    combineChannelCredentials: (channelCredentials2, ...callCredentials2) => {
      return callCredentials2.reduce((acc, other) => acc.compose(other), channelCredentials2);
    },
    combineCallCredentials: (first, ...additional) => {
      return additional.reduce((acc, other) => acc.compose(other), first);
    },
    createInsecure: channel_credentials_1.ChannelCredentials.createInsecure,
    createSsl: channel_credentials_1.ChannelCredentials.createSsl,
    createFromMetadataGenerator: call_credentials_12.CallCredentials.createFromMetadataGenerator,
    createFromGoogleCredential: call_credentials_12.CallCredentials.createFromGoogleCredential,
    createEmpty: call_credentials_12.CallCredentials.createEmpty
  };
  exports.closeClient = (client2) => client2.close();
  exports.waitForClientReady = (client2, deadline, callback) => client2.waitForReady(deadline, callback);
  exports.loadObject = (value, options2) => {
    throw new Error("Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead");
  };
  exports.load = (filename, format2, options2) => {
    throw new Error("Not available in this library. Use @grpc/proto-loader and loadPackageDefinition instead");
  };
  exports.setLogger = (logger2) => {
    logging2.setLogger(logger2);
  };
  exports.setLogVerbosity = (verbosity) => {
    logging2.setLoggerVerbosity(verbosity);
  };
  exports.getClientChannel = (client2) => {
    return client_12.Client.prototype.getChannel.call(client2);
  };
  var client_interceptors_12 = clientInterceptors;
  Object.defineProperty(exports, "ListenerBuilder", { enumerable: true, get: function() {
    return client_interceptors_12.ListenerBuilder;
  } });
  Object.defineProperty(exports, "RequesterBuilder", { enumerable: true, get: function() {
    return client_interceptors_12.RequesterBuilder;
  } });
  Object.defineProperty(exports, "InterceptingCall", { enumerable: true, get: function() {
    return client_interceptors_12.InterceptingCall;
  } });
  Object.defineProperty(exports, "InterceptorConfigurationError", { enumerable: true, get: function() {
    return client_interceptors_12.InterceptorConfigurationError;
  } });
  const experimental$1 = experimental;
  exports.experimental = experimental$1;
  const resolver$1 = resolver;
  const load_balancer = loadBalancer;
  const clientVersion2 = require$$8.version;
  (() => {
    logging2.trace(constants_12.LogVerbosity.DEBUG, "index", "Loading @grpc/grpc-js version " + clientVersion2);
    resolver$1.registerAll();
    load_balancer.registerAll();
  })();
})(src$2);
var src$1 = {};
var INFINITY = 1 / 0;
var symbolTag = "[object Symbol]";
var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
var rsAstralRange = "\\ud800-\\udfff";
var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23";
var rsComboSymbolsRange = "\\u20d0-\\u20f0";
var rsDingbatRange = "\\u2700-\\u27bf";
var rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff";
var rsMathOpRange = "\\xac\\xb1\\xd7\\xf7";
var rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf";
var rsPunctuationRange = "\\u2000-\\u206f";
var rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000";
var rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde";
var rsVarRange = "\\ufe0e\\ufe0f";
var rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
var rsApos = "['\u2019]";
var rsAstral = "[" + rsAstralRange + "]";
var rsBreak = "[" + rsBreakRange + "]";
var rsCombo = "[" + rsComboMarksRange + rsComboSymbolsRange + "]";
var rsDigits = "\\d+";
var rsDingbat = "[" + rsDingbatRange + "]";
var rsLower = "[" + rsLowerRange + "]";
var rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]";
var rsFitz = "\\ud83c[\\udffb-\\udfff]";
var rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")";
var rsNonAstral = "[^" + rsAstralRange + "]";
var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
var rsUpper = "[" + rsUpperRange + "]";
var rsZWJ = "\\u200d";
var rsLowerMisc = "(?:" + rsLower + "|" + rsMisc + ")";
var rsUpperMisc = "(?:" + rsUpper + "|" + rsMisc + ")";
var rsOptLowerContr = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?";
var rsOptUpperContr = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?";
var reOptMod = rsModifier + "?";
var rsOptVar = "[" + rsVarRange + "]?";
var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
var rsSeq = rsOptVar + reOptMod + rsOptJoin;
var rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq;
var rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
var reApos = RegExp(rsApos, "g");
var reComboMark = RegExp(rsCombo, "g");
var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
var reUnicodeWord = RegExp([
  rsUpper + "?" + rsLower + "+" + rsOptLowerContr + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
  rsUpperMisc + "+" + rsOptUpperContr + "(?=" + [rsBreak, rsUpper + rsLowerMisc, "$"].join("|") + ")",
  rsUpper + "?" + rsLowerMisc + "+" + rsOptLowerContr,
  rsUpper + "+" + rsOptUpperContr,
  rsDigits,
  rsEmoji
].join("|"), "g");
var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboMarksRange + rsComboSymbolsRange + rsVarRange + "]");
var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
var deburredLetters = {
  "\xC0": "A",
  "\xC1": "A",
  "\xC2": "A",
  "\xC3": "A",
  "\xC4": "A",
  "\xC5": "A",
  "\xE0": "a",
  "\xE1": "a",
  "\xE2": "a",
  "\xE3": "a",
  "\xE4": "a",
  "\xE5": "a",
  "\xC7": "C",
  "\xE7": "c",
  "\xD0": "D",
  "\xF0": "d",
  "\xC8": "E",
  "\xC9": "E",
  "\xCA": "E",
  "\xCB": "E",
  "\xE8": "e",
  "\xE9": "e",
  "\xEA": "e",
  "\xEB": "e",
  "\xCC": "I",
  "\xCD": "I",
  "\xCE": "I",
  "\xCF": "I",
  "\xEC": "i",
  "\xED": "i",
  "\xEE": "i",
  "\xEF": "i",
  "\xD1": "N",
  "\xF1": "n",
  "\xD2": "O",
  "\xD3": "O",
  "\xD4": "O",
  "\xD5": "O",
  "\xD6": "O",
  "\xD8": "O",
  "\xF2": "o",
  "\xF3": "o",
  "\xF4": "o",
  "\xF5": "o",
  "\xF6": "o",
  "\xF8": "o",
  "\xD9": "U",
  "\xDA": "U",
  "\xDB": "U",
  "\xDC": "U",
  "\xF9": "u",
  "\xFA": "u",
  "\xFB": "u",
  "\xFC": "u",
  "\xDD": "Y",
  "\xFD": "y",
  "\xFF": "y",
  "\xC6": "Ae",
  "\xE6": "ae",
  "\xDE": "Th",
  "\xFE": "th",
  "\xDF": "ss",
  "\u0100": "A",
  "\u0102": "A",
  "\u0104": "A",
  "\u0101": "a",
  "\u0103": "a",
  "\u0105": "a",
  "\u0106": "C",
  "\u0108": "C",
  "\u010A": "C",
  "\u010C": "C",
  "\u0107": "c",
  "\u0109": "c",
  "\u010B": "c",
  "\u010D": "c",
  "\u010E": "D",
  "\u0110": "D",
  "\u010F": "d",
  "\u0111": "d",
  "\u0112": "E",
  "\u0114": "E",
  "\u0116": "E",
  "\u0118": "E",
  "\u011A": "E",
  "\u0113": "e",
  "\u0115": "e",
  "\u0117": "e",
  "\u0119": "e",
  "\u011B": "e",
  "\u011C": "G",
  "\u011E": "G",
  "\u0120": "G",
  "\u0122": "G",
  "\u011D": "g",
  "\u011F": "g",
  "\u0121": "g",
  "\u0123": "g",
  "\u0124": "H",
  "\u0126": "H",
  "\u0125": "h",
  "\u0127": "h",
  "\u0128": "I",
  "\u012A": "I",
  "\u012C": "I",
  "\u012E": "I",
  "\u0130": "I",
  "\u0129": "i",
  "\u012B": "i",
  "\u012D": "i",
  "\u012F": "i",
  "\u0131": "i",
  "\u0134": "J",
  "\u0135": "j",
  "\u0136": "K",
  "\u0137": "k",
  "\u0138": "k",
  "\u0139": "L",
  "\u013B": "L",
  "\u013D": "L",
  "\u013F": "L",
  "\u0141": "L",
  "\u013A": "l",
  "\u013C": "l",
  "\u013E": "l",
  "\u0140": "l",
  "\u0142": "l",
  "\u0143": "N",
  "\u0145": "N",
  "\u0147": "N",
  "\u014A": "N",
  "\u0144": "n",
  "\u0146": "n",
  "\u0148": "n",
  "\u014B": "n",
  "\u014C": "O",
  "\u014E": "O",
  "\u0150": "O",
  "\u014D": "o",
  "\u014F": "o",
  "\u0151": "o",
  "\u0154": "R",
  "\u0156": "R",
  "\u0158": "R",
  "\u0155": "r",
  "\u0157": "r",
  "\u0159": "r",
  "\u015A": "S",
  "\u015C": "S",
  "\u015E": "S",
  "\u0160": "S",
  "\u015B": "s",
  "\u015D": "s",
  "\u015F": "s",
  "\u0161": "s",
  "\u0162": "T",
  "\u0164": "T",
  "\u0166": "T",
  "\u0163": "t",
  "\u0165": "t",
  "\u0167": "t",
  "\u0168": "U",
  "\u016A": "U",
  "\u016C": "U",
  "\u016E": "U",
  "\u0170": "U",
  "\u0172": "U",
  "\u0169": "u",
  "\u016B": "u",
  "\u016D": "u",
  "\u016F": "u",
  "\u0171": "u",
  "\u0173": "u",
  "\u0174": "W",
  "\u0175": "w",
  "\u0176": "Y",
  "\u0177": "y",
  "\u0178": "Y",
  "\u0179": "Z",
  "\u017B": "Z",
  "\u017D": "Z",
  "\u017A": "z",
  "\u017C": "z",
  "\u017E": "z",
  "\u0132": "IJ",
  "\u0133": "ij",
  "\u0152": "Oe",
  "\u0153": "oe",
  "\u0149": "'n",
  "\u017F": "ss"
};
var freeGlobal = typeof commonjsGlobal == "object" && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;
var freeSelf = typeof self == "object" && self && self.Object === Object && self;
var root$1 = freeGlobal || freeSelf || Function("return this")();
function arrayReduce(array, iteratee, accumulator, initAccum) {
  var index2 = -1, length2 = array ? array.length : 0;
  if (initAccum && length2) {
    accumulator = array[++index2];
  }
  while (++index2 < length2) {
    accumulator = iteratee(accumulator, array[index2], index2, array);
  }
  return accumulator;
}
function asciiToArray(string) {
  return string.split("");
}
function asciiWords(string) {
  return string.match(reAsciiWord) || [];
}
function basePropertyOf(object2) {
  return function(key) {
    return object2 == null ? void 0 : object2[key];
  };
}
var deburrLetter = basePropertyOf(deburredLetters);
function hasUnicode(string) {
  return reHasUnicode.test(string);
}
function hasUnicodeWord(string) {
  return reHasUnicodeWord.test(string);
}
function stringToArray(string) {
  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}
function unicodeWords(string) {
  return string.match(reUnicodeWord) || [];
}
var objectProto = Object.prototype;
var objectToString = objectProto.toString;
var Symbol$1 = root$1.Symbol;
var symbolProto = Symbol$1 ? Symbol$1.prototype : void 0;
var symbolToString = symbolProto ? symbolProto.toString : void 0;
function baseSlice(array, start, end2) {
  var index2 = -1, length2 = array.length;
  if (start < 0) {
    start = -start > length2 ? 0 : length2 + start;
  }
  end2 = end2 > length2 ? length2 : end2;
  if (end2 < 0) {
    end2 += length2;
  }
  length2 = start > end2 ? 0 : end2 - start >>> 0;
  start >>>= 0;
  var result = Array(length2);
  while (++index2 < length2) {
    result[index2] = array[index2 + start];
  }
  return result;
}
function baseToString(value) {
  if (typeof value == "string") {
    return value;
  }
  if (isSymbol(value)) {
    return symbolToString ? symbolToString.call(value) : "";
  }
  var result = value + "";
  return result == "0" && 1 / value == -INFINITY ? "-0" : result;
}
function castSlice(array, start, end2) {
  var length2 = array.length;
  end2 = end2 === void 0 ? length2 : end2;
  return !start && end2 >= length2 ? array : baseSlice(array, start, end2);
}
function createCaseFirst(methodName) {
  return function(string) {
    string = toString(string);
    var strSymbols = hasUnicode(string) ? stringToArray(string) : void 0;
    var chr = strSymbols ? strSymbols[0] : string.charAt(0);
    var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
    return chr[methodName]() + trailing;
  };
}
function createCompounder(callback) {
  return function(string) {
    return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
  };
}
function isObjectLike(value) {
  return !!value && typeof value == "object";
}
function isSymbol(value) {
  return typeof value == "symbol" || isObjectLike(value) && objectToString.call(value) == symbolTag;
}
function toString(value) {
  return value == null ? "" : baseToString(value);
}
var camelCase$1 = createCompounder(function(result, word, index2) {
  word = word.toLowerCase();
  return result + (index2 ? capitalize(word) : word);
});
function capitalize(string) {
  return upperFirst(toString(string).toLowerCase());
}
function deburr(string) {
  string = toString(string);
  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
}
var upperFirst = createCaseFirst("toUpperCase");
function words(string, pattern, guard) {
  string = toString(string);
  pattern = guard ? void 0 : pattern;
  if (pattern === void 0) {
    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
  }
  return string.match(pattern) || [];
}
var lodash_camelcase = camelCase$1;
var src2 = { exports: {} };
var indexLight = { exports: {} };
var indexMinimal = {};
var minimal = {};
var aspromise = asPromise$1;
function asPromise$1(fn, ctx) {
  var params = new Array(arguments.length - 1), offset = 0, index2 = 2, pending = true;
  while (index2 < arguments.length)
    params[offset++] = arguments[index2++];
  return new Promise(function executor(resolve6, reject) {
    params[offset] = function callback(err) {
      if (pending) {
        pending = false;
        if (err)
          reject(err);
        else {
          var params2 = new Array(arguments.length - 1), offset2 = 0;
          while (offset2 < params2.length)
            params2[offset2++] = arguments[offset2];
          resolve6.apply(null, params2);
        }
      }
    };
    try {
      fn.apply(ctx || null, params);
    } catch (err) {
      if (pending) {
        pending = false;
        reject(err);
      }
    }
  });
}
var base64$1 = {};
(function(exports) {
  var base642 = exports;
  base642.length = function length2(string) {
    var p = string.length;
    if (!p)
      return 0;
    var n = 0;
    while (--p % 4 > 1 && string.charAt(p) === "=")
      ++n;
    return Math.ceil(string.length * 3) / 4 - n;
  };
  var b64 = new Array(64);
  var s64 = new Array(123);
  for (var i = 0; i < 64; )
    s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;
  base642.encode = function encode2(buffer, start, end2) {
    var parts = null, chunk = [];
    var i2 = 0, j = 0, t;
    while (start < end2) {
      var b = buffer[start++];
      switch (j) {
        case 0:
          chunk[i2++] = b64[b >> 2];
          t = (b & 3) << 4;
          j = 1;
          break;
        case 1:
          chunk[i2++] = b64[t | b >> 4];
          t = (b & 15) << 2;
          j = 2;
          break;
        case 2:
          chunk[i2++] = b64[t | b >> 6];
          chunk[i2++] = b64[b & 63];
          j = 0;
          break;
      }
      if (i2 > 8191) {
        (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
        i2 = 0;
      }
    }
    if (j) {
      chunk[i2++] = b64[t];
      chunk[i2++] = 61;
      if (j === 1)
        chunk[i2++] = 61;
    }
    if (parts) {
      if (i2)
        parts.push(String.fromCharCode.apply(String, chunk.slice(0, i2)));
      return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i2));
  };
  var invalidEncoding = "invalid encoding";
  base642.decode = function decode3(string, buffer, offset) {
    var start = offset;
    var j = 0, t;
    for (var i2 = 0; i2 < string.length; ) {
      var c = string.charCodeAt(i2++);
      if (c === 61 && j > 1)
        break;
      if ((c = s64[c]) === void 0)
        throw Error(invalidEncoding);
      switch (j) {
        case 0:
          t = c;
          j = 1;
          break;
        case 1:
          buffer[offset++] = t << 2 | (c & 48) >> 4;
          t = c;
          j = 2;
          break;
        case 2:
          buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;
          t = c;
          j = 3;
          break;
        case 3:
          buffer[offset++] = (t & 3) << 6 | c;
          j = 0;
          break;
      }
    }
    if (j === 1)
      throw Error(invalidEncoding);
    return offset - start;
  };
  base642.test = function test(string) {
    return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);
  };
})(base64$1);
var eventemitter = EventEmitter;
function EventEmitter() {
  this._listeners = {};
}
EventEmitter.prototype.on = function on(evt, fn, ctx) {
  (this._listeners[evt] || (this._listeners[evt] = [])).push({
    fn,
    ctx: ctx || this
  });
  return this;
};
EventEmitter.prototype.off = function off(evt, fn) {
  if (evt === void 0)
    this._listeners = {};
  else {
    if (fn === void 0)
      this._listeners[evt] = [];
    else {
      var listeners = this._listeners[evt];
      for (var i = 0; i < listeners.length; )
        if (listeners[i].fn === fn)
          listeners.splice(i, 1);
        else
          ++i;
    }
  }
  return this;
};
EventEmitter.prototype.emit = function emit(evt) {
  var listeners = this._listeners[evt];
  if (listeners) {
    var args = [], i = 1;
    for (; i < arguments.length; )
      args.push(arguments[i++]);
    for (i = 0; i < listeners.length; )
      listeners[i].fn.apply(listeners[i++].ctx, args);
  }
  return this;
};
var float = factory(factory);
function factory(exports) {
  if (typeof Float32Array !== "undefined")
    (function() {
      var f32 = new Float32Array([-0]), f8b = new Uint8Array(f32.buffer), le = f8b[3] === 128;
      function writeFloat_f32_cpy(val, buf, pos) {
        f32[0] = val;
        buf[pos] = f8b[0];
        buf[pos + 1] = f8b[1];
        buf[pos + 2] = f8b[2];
        buf[pos + 3] = f8b[3];
      }
      function writeFloat_f32_rev(val, buf, pos) {
        f32[0] = val;
        buf[pos] = f8b[3];
        buf[pos + 1] = f8b[2];
        buf[pos + 2] = f8b[1];
        buf[pos + 3] = f8b[0];
      }
      exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;
      exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;
      function readFloat_f32_cpy(buf, pos) {
        f8b[0] = buf[pos];
        f8b[1] = buf[pos + 1];
        f8b[2] = buf[pos + 2];
        f8b[3] = buf[pos + 3];
        return f32[0];
      }
      function readFloat_f32_rev(buf, pos) {
        f8b[3] = buf[pos];
        f8b[2] = buf[pos + 1];
        f8b[1] = buf[pos + 2];
        f8b[0] = buf[pos + 3];
        return f32[0];
      }
      exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;
      exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;
    })();
  else
    (function() {
      function writeFloat_ieee754(writeUint, val, buf, pos) {
        var sign = val < 0 ? 1 : 0;
        if (sign)
          val = -val;
        if (val === 0)
          writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos);
        else if (isNaN(val))
          writeUint(2143289344, buf, pos);
        else if (val > 34028234663852886e22)
          writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);
        else if (val < 11754943508222875e-54)
          writeUint((sign << 31 | Math.round(val / 1401298464324817e-60)) >>> 0, buf, pos);
        else {
          var exponent = Math.floor(Math.log(val) / Math.LN2), mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;
          writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);
        }
      }
      exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);
      exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);
      function readFloat_ieee754(readUint, buf, pos) {
        var uint = readUint(buf, pos), sign = (uint >> 31) * 2 + 1, exponent = uint >>> 23 & 255, mantissa = uint & 8388607;
        return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 1401298464324817e-60 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);
      }
      exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);
      exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);
    })();
  if (typeof Float64Array !== "undefined")
    (function() {
      var f64 = new Float64Array([-0]), f8b = new Uint8Array(f64.buffer), le = f8b[7] === 128;
      function writeDouble_f64_cpy(val, buf, pos) {
        f64[0] = val;
        buf[pos] = f8b[0];
        buf[pos + 1] = f8b[1];
        buf[pos + 2] = f8b[2];
        buf[pos + 3] = f8b[3];
        buf[pos + 4] = f8b[4];
        buf[pos + 5] = f8b[5];
        buf[pos + 6] = f8b[6];
        buf[pos + 7] = f8b[7];
      }
      function writeDouble_f64_rev(val, buf, pos) {
        f64[0] = val;
        buf[pos] = f8b[7];
        buf[pos + 1] = f8b[6];
        buf[pos + 2] = f8b[5];
        buf[pos + 3] = f8b[4];
        buf[pos + 4] = f8b[3];
        buf[pos + 5] = f8b[2];
        buf[pos + 6] = f8b[1];
        buf[pos + 7] = f8b[0];
      }
      exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;
      exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;
      function readDouble_f64_cpy(buf, pos) {
        f8b[0] = buf[pos];
        f8b[1] = buf[pos + 1];
        f8b[2] = buf[pos + 2];
        f8b[3] = buf[pos + 3];
        f8b[4] = buf[pos + 4];
        f8b[5] = buf[pos + 5];
        f8b[6] = buf[pos + 6];
        f8b[7] = buf[pos + 7];
        return f64[0];
      }
      function readDouble_f64_rev(buf, pos) {
        f8b[7] = buf[pos];
        f8b[6] = buf[pos + 1];
        f8b[5] = buf[pos + 2];
        f8b[4] = buf[pos + 3];
        f8b[3] = buf[pos + 4];
        f8b[2] = buf[pos + 5];
        f8b[1] = buf[pos + 6];
        f8b[0] = buf[pos + 7];
        return f64[0];
      }
      exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;
      exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;
    })();
  else
    (function() {
      function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {
        var sign = val < 0 ? 1 : 0;
        if (sign)
          val = -val;
        if (val === 0) {
          writeUint(0, buf, pos + off0);
          writeUint(1 / val > 0 ? 0 : 2147483648, buf, pos + off1);
        } else if (isNaN(val)) {
          writeUint(0, buf, pos + off0);
          writeUint(2146959360, buf, pos + off1);
        } else if (val > 17976931348623157e292) {
          writeUint(0, buf, pos + off0);
          writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);
        } else {
          var mantissa;
          if (val < 22250738585072014e-324) {
            mantissa = val / 5e-324;
            writeUint(mantissa >>> 0, buf, pos + off0);
            writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);
          } else {
            var exponent = Math.floor(Math.log(val) / Math.LN2);
            if (exponent === 1024)
              exponent = 1023;
            mantissa = val * Math.pow(2, -exponent);
            writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);
            writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);
          }
        }
      }
      exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);
      exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);
      function readDouble_ieee754(readUint, off0, off1, buf, pos) {
        var lo = readUint(buf, pos + off0), hi = readUint(buf, pos + off1);
        var sign = (hi >> 31) * 2 + 1, exponent = hi >>> 20 & 2047, mantissa = 4294967296 * (hi & 1048575) + lo;
        return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);
      }
      exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);
      exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);
    })();
  return exports;
}
function writeUintLE(val, buf, pos) {
  buf[pos] = val & 255;
  buf[pos + 1] = val >>> 8 & 255;
  buf[pos + 2] = val >>> 16 & 255;
  buf[pos + 3] = val >>> 24;
}
function writeUintBE(val, buf, pos) {
  buf[pos] = val >>> 24;
  buf[pos + 1] = val >>> 16 & 255;
  buf[pos + 2] = val >>> 8 & 255;
  buf[pos + 3] = val & 255;
}
function readUintLE(buf, pos) {
  return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;
}
function readUintBE(buf, pos) {
  return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;
}
var inquire_1 = inquire$1;
function inquire$1(moduleName) {
  try {
    var mod = eval("quire".replace(/^/, "re"))(moduleName);
    if (mod && (mod.length || Object.keys(mod).length))
      return mod;
  } catch (e) {
  }
  return null;
}
var utf8$2 = {};
(function(exports) {
  var utf82 = exports;
  utf82.length = function utf8_length(string) {
    var len = 0, c = 0;
    for (var i = 0; i < string.length; ++i) {
      c = string.charCodeAt(i);
      if (c < 128)
        len += 1;
      else if (c < 2048)
        len += 2;
      else if ((c & 64512) === 55296 && (string.charCodeAt(i + 1) & 64512) === 56320) {
        ++i;
        len += 4;
      } else
        len += 3;
    }
    return len;
  };
  utf82.read = function utf8_read(buffer, start, end2) {
    var len = end2 - start;
    if (len < 1)
      return "";
    var parts = null, chunk = [], i = 0, t;
    while (start < end2) {
      t = buffer[start++];
      if (t < 128)
        chunk[i++] = t;
      else if (t > 191 && t < 224)
        chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;
      else if (t > 239 && t < 365) {
        t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 65536;
        chunk[i++] = 55296 + (t >> 10);
        chunk[i++] = 56320 + (t & 1023);
      } else
        chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;
      if (i > 8191) {
        (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));
        i = 0;
      }
    }
    if (parts) {
      if (i)
        parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));
      return parts.join("");
    }
    return String.fromCharCode.apply(String, chunk.slice(0, i));
  };
  utf82.write = function utf8_write(string, buffer, offset) {
    var start = offset, c1, c2;
    for (var i = 0; i < string.length; ++i) {
      c1 = string.charCodeAt(i);
      if (c1 < 128) {
        buffer[offset++] = c1;
      } else if (c1 < 2048) {
        buffer[offset++] = c1 >> 6 | 192;
        buffer[offset++] = c1 & 63 | 128;
      } else if ((c1 & 64512) === 55296 && ((c2 = string.charCodeAt(i + 1)) & 64512) === 56320) {
        c1 = 65536 + ((c1 & 1023) << 10) + (c2 & 1023);
        ++i;
        buffer[offset++] = c1 >> 18 | 240;
        buffer[offset++] = c1 >> 12 & 63 | 128;
        buffer[offset++] = c1 >> 6 & 63 | 128;
        buffer[offset++] = c1 & 63 | 128;
      } else {
        buffer[offset++] = c1 >> 12 | 224;
        buffer[offset++] = c1 >> 6 & 63 | 128;
        buffer[offset++] = c1 & 63 | 128;
      }
    }
    return offset - start;
  };
})(utf8$2);
var pool_1 = pool;
function pool(alloc2, slice, size) {
  var SIZE = size || 8192;
  var MAX = SIZE >>> 1;
  var slab = null;
  var offset = SIZE;
  return function pool_alloc(size2) {
    if (size2 < 1 || size2 > MAX)
      return alloc2(size2);
    if (offset + size2 > SIZE) {
      slab = alloc2(SIZE);
      offset = 0;
    }
    var buf = slice.call(slab, offset, offset += size2);
    if (offset & 7)
      offset = (offset | 7) + 1;
    return buf;
  };
}
var longbits = LongBits$2;
var util$p = minimal;
function LongBits$2(lo, hi) {
  this.lo = lo >>> 0;
  this.hi = hi >>> 0;
}
var zero = LongBits$2.zero = new LongBits$2(0, 0);
zero.toNumber = function() {
  return 0;
};
zero.zzEncode = zero.zzDecode = function() {
  return this;
};
zero.length = function() {
  return 1;
};
var zeroHash = LongBits$2.zeroHash = "\0\0\0\0\0\0\0\0";
LongBits$2.fromNumber = function fromNumber(value) {
  if (value === 0)
    return zero;
  var sign = value < 0;
  if (sign)
    value = -value;
  var lo = value >>> 0, hi = (value - lo) / 4294967296 >>> 0;
  if (sign) {
    hi = ~hi >>> 0;
    lo = ~lo >>> 0;
    if (++lo > 4294967295) {
      lo = 0;
      if (++hi > 4294967295)
        hi = 0;
    }
  }
  return new LongBits$2(lo, hi);
};
LongBits$2.from = function from(value) {
  if (typeof value === "number")
    return LongBits$2.fromNumber(value);
  if (util$p.isString(value)) {
    if (util$p.Long)
      value = util$p.Long.fromString(value);
    else
      return LongBits$2.fromNumber(parseInt(value, 10));
  }
  return value.low || value.high ? new LongBits$2(value.low >>> 0, value.high >>> 0) : zero;
};
LongBits$2.prototype.toNumber = function toNumber2(unsigned) {
  if (!unsigned && this.hi >>> 31) {
    var lo = ~this.lo + 1 >>> 0, hi = ~this.hi >>> 0;
    if (!lo)
      hi = hi + 1 >>> 0;
    return -(lo + hi * 4294967296);
  }
  return this.lo + this.hi * 4294967296;
};
LongBits$2.prototype.toLong = function toLong(unsigned) {
  return util$p.Long ? new util$p.Long(this.lo | 0, this.hi | 0, Boolean(unsigned)) : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };
};
var charCodeAt = String.prototype.charCodeAt;
LongBits$2.fromHash = function fromHash(hash2) {
  if (hash2 === zeroHash)
    return zero;
  return new LongBits$2((charCodeAt.call(hash2, 0) | charCodeAt.call(hash2, 1) << 8 | charCodeAt.call(hash2, 2) << 16 | charCodeAt.call(hash2, 3) << 24) >>> 0, (charCodeAt.call(hash2, 4) | charCodeAt.call(hash2, 5) << 8 | charCodeAt.call(hash2, 6) << 16 | charCodeAt.call(hash2, 7) << 24) >>> 0);
};
LongBits$2.prototype.toHash = function toHash() {
  return String.fromCharCode(this.lo & 255, this.lo >>> 8 & 255, this.lo >>> 16 & 255, this.lo >>> 24, this.hi & 255, this.hi >>> 8 & 255, this.hi >>> 16 & 255, this.hi >>> 24);
};
LongBits$2.prototype.zzEncode = function zzEncode() {
  var mask = this.hi >> 31;
  this.hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;
  this.lo = (this.lo << 1 ^ mask) >>> 0;
  return this;
};
LongBits$2.prototype.zzDecode = function zzDecode() {
  var mask = -(this.lo & 1);
  this.lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;
  this.hi = (this.hi >>> 1 ^ mask) >>> 0;
  return this;
};
LongBits$2.prototype.length = function length() {
  var part0 = this.lo, part1 = (this.lo >>> 28 | this.hi << 4) >>> 0, part2 = this.hi >>> 24;
  return part2 === 0 ? part1 === 0 ? part0 < 16384 ? part0 < 128 ? 1 : 2 : part0 < 2097152 ? 3 : 4 : part1 < 16384 ? part1 < 128 ? 5 : 6 : part1 < 2097152 ? 7 : 8 : part2 < 128 ? 9 : 10;
};
(function(exports) {
  var util2 = exports;
  util2.asPromise = aspromise;
  util2.base64 = base64$1;
  util2.EventEmitter = eventemitter;
  util2.float = float;
  util2.inquire = inquire_1;
  util2.utf8 = utf8$2;
  util2.pool = pool_1;
  util2.LongBits = longbits;
  util2.isNode = Boolean(typeof commonjsGlobal !== "undefined" && commonjsGlobal && commonjsGlobal.process && commonjsGlobal.process.versions && commonjsGlobal.process.versions.node);
  util2.global = util2.isNode && commonjsGlobal || typeof window !== "undefined" && window || typeof self !== "undefined" && self || commonjsGlobal;
  util2.emptyArray = Object.freeze ? Object.freeze([]) : [];
  util2.emptyObject = Object.freeze ? Object.freeze({}) : {};
  util2.isInteger = Number.isInteger || function isInteger2(value) {
    return typeof value === "number" && isFinite(value) && Math.floor(value) === value;
  };
  util2.isString = function isString(value) {
    return typeof value === "string" || value instanceof String;
  };
  util2.isObject = function isObject2(value) {
    return value && typeof value === "object";
  };
  util2.isset = util2.isSet = function isSet(obj, prop) {
    var value = obj[prop];
    if (value != null && obj.hasOwnProperty(prop))
      return typeof value !== "object" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;
    return false;
  };
  util2.Buffer = function() {
    try {
      var Buffer2 = util2.inquire("buffer").Buffer;
      return Buffer2.prototype.utf8Write ? Buffer2 : null;
    } catch (e) {
      return null;
    }
  }();
  util2._Buffer_from = null;
  util2._Buffer_allocUnsafe = null;
  util2.newBuffer = function newBuffer(sizeOrArray) {
    return typeof sizeOrArray === "number" ? util2.Buffer ? util2._Buffer_allocUnsafe(sizeOrArray) : new util2.Array(sizeOrArray) : util2.Buffer ? util2._Buffer_from(sizeOrArray) : typeof Uint8Array === "undefined" ? sizeOrArray : new Uint8Array(sizeOrArray);
  };
  util2.Array = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
  util2.Long = util2.global.dcodeIO && util2.global.dcodeIO.Long || util2.global.Long || util2.inquire("long");
  util2.key2Re = /^true|false|0|1$/;
  util2.key32Re = /^-?(?:0|[1-9][0-9]*)$/;
  util2.key64Re = /^(?:[\\x00-\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;
  util2.longToHash = function longToHash(value) {
    return value ? util2.LongBits.from(value).toHash() : util2.LongBits.zeroHash;
  };
  util2.longFromHash = function longFromHash(hash2, unsigned) {
    var bits = util2.LongBits.fromHash(hash2);
    if (util2.Long)
      return util2.Long.fromBits(bits.lo, bits.hi, unsigned);
    return bits.toNumber(Boolean(unsigned));
  };
  function merge(dst, src22, ifNotSet) {
    for (var keys = Object.keys(src22), i = 0; i < keys.length; ++i)
      if (dst[keys[i]] === void 0 || !ifNotSet)
        dst[keys[i]] = src22[keys[i]];
    return dst;
  }
  util2.merge = merge;
  util2.lcFirst = function lcFirst(str) {
    return str.charAt(0).toLowerCase() + str.substring(1);
  };
  function newError(name2) {
    function CustomError(message2, properties) {
      if (!(this instanceof CustomError))
        return new CustomError(message2, properties);
      Object.defineProperty(this, "message", { get: function() {
        return message2;
      } });
      if (Error.captureStackTrace)
        Error.captureStackTrace(this, CustomError);
      else
        Object.defineProperty(this, "stack", { value: new Error().stack || "" });
      if (properties)
        merge(this, properties);
    }
    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;
    Object.defineProperty(CustomError.prototype, "name", { get: function() {
      return name2;
    } });
    CustomError.prototype.toString = function toString3() {
      return this.name + ": " + this.message;
    };
    return CustomError;
  }
  util2.newError = newError;
  util2.ProtocolError = newError("ProtocolError");
  util2.oneOfGetter = function getOneOf(fieldNames) {
    var fieldMap = {};
    for (var i = 0; i < fieldNames.length; ++i)
      fieldMap[fieldNames[i]] = 1;
    return function() {
      for (var keys = Object.keys(this), i2 = keys.length - 1; i2 > -1; --i2)
        if (fieldMap[keys[i2]] === 1 && this[keys[i2]] !== void 0 && this[keys[i2]] !== null)
          return keys[i2];
    };
  };
  util2.oneOfSetter = function setOneOf(fieldNames) {
    return function(name2) {
      for (var i = 0; i < fieldNames.length; ++i)
        if (fieldNames[i] !== name2)
          delete this[fieldNames[i]];
    };
  };
  util2.toJSONOptions = {
    longs: String,
    enums: String,
    bytes: String,
    json: true
  };
  util2._configure = function() {
    var Buffer2 = util2.Buffer;
    if (!Buffer2) {
      util2._Buffer_from = util2._Buffer_allocUnsafe = null;
      return;
    }
    util2._Buffer_from = Buffer2.from !== Uint8Array.from && Buffer2.from || function Buffer_from(value, encoding) {
      return new Buffer2(value, encoding);
    };
    util2._Buffer_allocUnsafe = Buffer2.allocUnsafe || function Buffer_allocUnsafe(size) {
      return new Buffer2(size);
    };
  };
})(minimal);
var writer = Writer$2;
var util$o = minimal;
var BufferWriter$1;
var LongBits$1 = util$o.LongBits;
var base64 = util$o.base64;
var utf8$1 = util$o.utf8;
function Op(fn, len, val) {
  this.fn = fn;
  this.len = len;
  this.next = void 0;
  this.val = val;
}
function noop() {
}
function State(writer2) {
  this.head = writer2.head;
  this.tail = writer2.tail;
  this.len = writer2.len;
  this.next = writer2.states;
}
function Writer$2() {
  this.len = 0;
  this.head = new Op(noop, 0, 0);
  this.tail = this.head;
  this.states = null;
}
var create$1 = function create2() {
  return util$o.Buffer ? function create_buffer_setup() {
    return (Writer$2.create = function create_buffer() {
      return new BufferWriter$1();
    })();
  } : function create_array3() {
    return new Writer$2();
  };
};
Writer$2.create = create$1();
Writer$2.alloc = function alloc(size) {
  return new util$o.Array(size);
};
if (util$o.Array !== Array)
  Writer$2.alloc = util$o.pool(Writer$2.alloc, util$o.Array.prototype.subarray);
Writer$2.prototype._push = function push(fn, len, val) {
  this.tail = this.tail.next = new Op(fn, len, val);
  this.len += len;
  return this;
};
function writeByte(val, buf, pos) {
  buf[pos] = val & 255;
}
function writeVarint32(val, buf, pos) {
  while (val > 127) {
    buf[pos++] = val & 127 | 128;
    val >>>= 7;
  }
  buf[pos] = val;
}
function VarintOp(len, val) {
  this.len = len;
  this.next = void 0;
  this.val = val;
}
VarintOp.prototype = Object.create(Op.prototype);
VarintOp.prototype.fn = writeVarint32;
Writer$2.prototype.uint32 = function write_uint32(value) {
  this.len += (this.tail = this.tail.next = new VarintOp((value = value >>> 0) < 128 ? 1 : value < 16384 ? 2 : value < 2097152 ? 3 : value < 268435456 ? 4 : 5, value)).len;
  return this;
};
Writer$2.prototype.int32 = function write_int32(value) {
  return value < 0 ? this._push(writeVarint64, 10, LongBits$1.fromNumber(value)) : this.uint32(value);
};
Writer$2.prototype.sint32 = function write_sint32(value) {
  return this.uint32((value << 1 ^ value >> 31) >>> 0);
};
function writeVarint64(val, buf, pos) {
  while (val.hi) {
    buf[pos++] = val.lo & 127 | 128;
    val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;
    val.hi >>>= 7;
  }
  while (val.lo > 127) {
    buf[pos++] = val.lo & 127 | 128;
    val.lo = val.lo >>> 7;
  }
  buf[pos++] = val.lo;
}
Writer$2.prototype.uint64 = function write_uint64(value) {
  var bits = LongBits$1.from(value);
  return this._push(writeVarint64, bits.length(), bits);
};
Writer$2.prototype.int64 = Writer$2.prototype.uint64;
Writer$2.prototype.sint64 = function write_sint64(value) {
  var bits = LongBits$1.from(value).zzEncode();
  return this._push(writeVarint64, bits.length(), bits);
};
Writer$2.prototype.bool = function write_bool(value) {
  return this._push(writeByte, 1, value ? 1 : 0);
};
function writeFixed32(val, buf, pos) {
  buf[pos] = val & 255;
  buf[pos + 1] = val >>> 8 & 255;
  buf[pos + 2] = val >>> 16 & 255;
  buf[pos + 3] = val >>> 24;
}
Writer$2.prototype.fixed32 = function write_fixed32(value) {
  return this._push(writeFixed32, 4, value >>> 0);
};
Writer$2.prototype.sfixed32 = Writer$2.prototype.fixed32;
Writer$2.prototype.fixed64 = function write_fixed64(value) {
  var bits = LongBits$1.from(value);
  return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);
};
Writer$2.prototype.sfixed64 = Writer$2.prototype.fixed64;
Writer$2.prototype.float = function write_float(value) {
  return this._push(util$o.float.writeFloatLE, 4, value);
};
Writer$2.prototype.double = function write_double(value) {
  return this._push(util$o.float.writeDoubleLE, 8, value);
};
var writeBytes = util$o.Array.prototype.set ? function writeBytes_set(val, buf, pos) {
  buf.set(val, pos);
} : function writeBytes_for(val, buf, pos) {
  for (var i = 0; i < val.length; ++i)
    buf[pos + i] = val[i];
};
Writer$2.prototype.bytes = function write_bytes(value) {
  var len = value.length >>> 0;
  if (!len)
    return this._push(writeByte, 1, 0);
  if (util$o.isString(value)) {
    var buf = Writer$2.alloc(len = base64.length(value));
    base64.decode(value, buf, 0);
    value = buf;
  }
  return this.uint32(len)._push(writeBytes, len, value);
};
Writer$2.prototype.string = function write_string(value) {
  var len = utf8$1.length(value);
  return len ? this.uint32(len)._push(utf8$1.write, len, value) : this._push(writeByte, 1, 0);
};
Writer$2.prototype.fork = function fork() {
  this.states = new State(this);
  this.head = this.tail = new Op(noop, 0, 0);
  this.len = 0;
  return this;
};
Writer$2.prototype.reset = function reset() {
  if (this.states) {
    this.head = this.states.head;
    this.tail = this.states.tail;
    this.len = this.states.len;
    this.states = this.states.next;
  } else {
    this.head = this.tail = new Op(noop, 0, 0);
    this.len = 0;
  }
  return this;
};
Writer$2.prototype.ldelim = function ldelim() {
  var head = this.head, tail = this.tail, len = this.len;
  this.reset().uint32(len);
  if (len) {
    this.tail.next = head.next;
    this.tail = tail;
    this.len += len;
  }
  return this;
};
Writer$2.prototype.finish = function finish() {
  var head = this.head.next, buf = this.constructor.alloc(this.len), pos = 0;
  while (head) {
    head.fn(head.val, buf, pos);
    pos += head.len;
    head = head.next;
  }
  return buf;
};
Writer$2._configure = function(BufferWriter_) {
  BufferWriter$1 = BufferWriter_;
  Writer$2.create = create$1();
  BufferWriter$1._configure();
};
var writer_buffer = BufferWriter;
var Writer$1 = writer;
(BufferWriter.prototype = Object.create(Writer$1.prototype)).constructor = BufferWriter;
var util$n = minimal;
function BufferWriter() {
  Writer$1.call(this);
}
BufferWriter._configure = function() {
  BufferWriter.alloc = util$n._Buffer_allocUnsafe;
  BufferWriter.writeBytesBuffer = util$n.Buffer && util$n.Buffer.prototype instanceof Uint8Array && util$n.Buffer.prototype.set.name === "set" ? function writeBytesBuffer_set(val, buf, pos) {
    buf.set(val, pos);
  } : function writeBytesBuffer_copy(val, buf, pos) {
    if (val.copy)
      val.copy(buf, pos, 0, val.length);
    else
      for (var i = 0; i < val.length; )
        buf[pos++] = val[i++];
  };
};
BufferWriter.prototype.bytes = function write_bytes_buffer(value) {
  if (util$n.isString(value))
    value = util$n._Buffer_from(value, "base64");
  var len = value.length >>> 0;
  this.uint32(len);
  if (len)
    this._push(BufferWriter.writeBytesBuffer, len, value);
  return this;
};
function writeStringBuffer(val, buf, pos) {
  if (val.length < 40)
    util$n.utf8.write(val, buf, pos);
  else if (buf.utf8Write)
    buf.utf8Write(val, pos);
  else
    buf.write(val, pos);
}
BufferWriter.prototype.string = function write_string_buffer(value) {
  var len = util$n.Buffer.byteLength(value);
  this.uint32(len);
  if (len)
    this._push(writeStringBuffer, len, value);
  return this;
};
BufferWriter._configure();
var reader = Reader$2;
var util$m = minimal;
var BufferReader$1;
var LongBits = util$m.LongBits;
var utf8 = util$m.utf8;
function indexOutOfRange(reader2, writeLength) {
  return RangeError("index out of range: " + reader2.pos + " + " + (writeLength || 1) + " > " + reader2.len);
}
function Reader$2(buffer) {
  this.buf = buffer;
  this.pos = 0;
  this.len = buffer.length;
}
var create_array = typeof Uint8Array !== "undefined" ? function create_typed_array(buffer) {
  if (buffer instanceof Uint8Array || Array.isArray(buffer))
    return new Reader$2(buffer);
  throw Error("illegal buffer");
} : function create_array2(buffer) {
  if (Array.isArray(buffer))
    return new Reader$2(buffer);
  throw Error("illegal buffer");
};
var create = function create3() {
  return util$m.Buffer ? function create_buffer_setup(buffer) {
    return (Reader$2.create = function create_buffer(buffer2) {
      return util$m.Buffer.isBuffer(buffer2) ? new BufferReader$1(buffer2) : create_array(buffer2);
    })(buffer);
  } : create_array;
};
Reader$2.create = create();
Reader$2.prototype._slice = util$m.Array.prototype.subarray || util$m.Array.prototype.slice;
Reader$2.prototype.uint32 = function read_uint32_setup() {
  var value = 4294967295;
  return function read_uint32() {
    value = (this.buf[this.pos] & 127) >>> 0;
    if (this.buf[this.pos++] < 128)
      return value;
    value = (value | (this.buf[this.pos] & 127) << 7) >>> 0;
    if (this.buf[this.pos++] < 128)
      return value;
    value = (value | (this.buf[this.pos] & 127) << 14) >>> 0;
    if (this.buf[this.pos++] < 128)
      return value;
    value = (value | (this.buf[this.pos] & 127) << 21) >>> 0;
    if (this.buf[this.pos++] < 128)
      return value;
    value = (value | (this.buf[this.pos] & 15) << 28) >>> 0;
    if (this.buf[this.pos++] < 128)
      return value;
    if ((this.pos += 5) > this.len) {
      this.pos = this.len;
      throw indexOutOfRange(this, 10);
    }
    return value;
  };
}();
Reader$2.prototype.int32 = function read_int32() {
  return this.uint32() | 0;
};
Reader$2.prototype.sint32 = function read_sint32() {
  var value = this.uint32();
  return value >>> 1 ^ -(value & 1) | 0;
};
function readLongVarint() {
  var bits = new LongBits(0, 0);
  var i = 0;
  if (this.len - this.pos > 4) {
    for (; i < 4; ++i) {
      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
      if (this.buf[this.pos++] < 128)
        return bits;
    }
    bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;
    bits.hi = (bits.hi | (this.buf[this.pos] & 127) >> 4) >>> 0;
    if (this.buf[this.pos++] < 128)
      return bits;
    i = 0;
  } else {
    for (; i < 3; ++i) {
      if (this.pos >= this.len)
        throw indexOutOfRange(this);
      bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;
      if (this.buf[this.pos++] < 128)
        return bits;
    }
    bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;
    return bits;
  }
  if (this.len - this.pos > 4) {
    for (; i < 5; ++i) {
      bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
      if (this.buf[this.pos++] < 128)
        return bits;
    }
  } else {
    for (; i < 5; ++i) {
      if (this.pos >= this.len)
        throw indexOutOfRange(this);
      bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;
      if (this.buf[this.pos++] < 128)
        return bits;
    }
  }
  throw Error("invalid varint encoding");
}
Reader$2.prototype.bool = function read_bool() {
  return this.uint32() !== 0;
};
function readFixed32_end(buf, end2) {
  return (buf[end2 - 4] | buf[end2 - 3] << 8 | buf[end2 - 2] << 16 | buf[end2 - 1] << 24) >>> 0;
}
Reader$2.prototype.fixed32 = function read_fixed32() {
  if (this.pos + 4 > this.len)
    throw indexOutOfRange(this, 4);
  return readFixed32_end(this.buf, this.pos += 4);
};
Reader$2.prototype.sfixed32 = function read_sfixed32() {
  if (this.pos + 4 > this.len)
    throw indexOutOfRange(this, 4);
  return readFixed32_end(this.buf, this.pos += 4) | 0;
};
function readFixed64() {
  if (this.pos + 8 > this.len)
    throw indexOutOfRange(this, 8);
  return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));
}
Reader$2.prototype.float = function read_float() {
  if (this.pos + 4 > this.len)
    throw indexOutOfRange(this, 4);
  var value = util$m.float.readFloatLE(this.buf, this.pos);
  this.pos += 4;
  return value;
};
Reader$2.prototype.double = function read_double() {
  if (this.pos + 8 > this.len)
    throw indexOutOfRange(this, 4);
  var value = util$m.float.readDoubleLE(this.buf, this.pos);
  this.pos += 8;
  return value;
};
Reader$2.prototype.bytes = function read_bytes() {
  var length2 = this.uint32(), start = this.pos, end2 = this.pos + length2;
  if (end2 > this.len)
    throw indexOutOfRange(this, length2);
  this.pos += length2;
  if (Array.isArray(this.buf))
    return this.buf.slice(start, end2);
  return start === end2 ? new this.buf.constructor(0) : this._slice.call(this.buf, start, end2);
};
Reader$2.prototype.string = function read_string() {
  var bytes = this.bytes();
  return utf8.read(bytes, 0, bytes.length);
};
Reader$2.prototype.skip = function skip(length2) {
  if (typeof length2 === "number") {
    if (this.pos + length2 > this.len)
      throw indexOutOfRange(this, length2);
    this.pos += length2;
  } else {
    do {
      if (this.pos >= this.len)
        throw indexOutOfRange(this);
    } while (this.buf[this.pos++] & 128);
  }
  return this;
};
Reader$2.prototype.skipType = function(wireType) {
  switch (wireType) {
    case 0:
      this.skip();
      break;
    case 1:
      this.skip(8);
      break;
    case 2:
      this.skip(this.uint32());
      break;
    case 3:
      while ((wireType = this.uint32() & 7) !== 4) {
        this.skipType(wireType);
      }
      break;
    case 5:
      this.skip(4);
      break;
    default:
      throw Error("invalid wire type " + wireType + " at offset " + this.pos);
  }
  return this;
};
Reader$2._configure = function(BufferReader_) {
  BufferReader$1 = BufferReader_;
  Reader$2.create = create();
  BufferReader$1._configure();
  var fn = util$m.Long ? "toLong" : "toNumber";
  util$m.merge(Reader$2.prototype, {
    int64: function read_int64() {
      return readLongVarint.call(this)[fn](false);
    },
    uint64: function read_uint64() {
      return readLongVarint.call(this)[fn](true);
    },
    sint64: function read_sint64() {
      return readLongVarint.call(this).zzDecode()[fn](false);
    },
    fixed64: function read_fixed64() {
      return readFixed64.call(this)[fn](true);
    },
    sfixed64: function read_sfixed64() {
      return readFixed64.call(this)[fn](false);
    }
  });
};
var reader_buffer = BufferReader;
var Reader$1 = reader;
(BufferReader.prototype = Object.create(Reader$1.prototype)).constructor = BufferReader;
var util$l = minimal;
function BufferReader(buffer) {
  Reader$1.call(this, buffer);
}
BufferReader._configure = function() {
  if (util$l.Buffer)
    BufferReader.prototype._slice = util$l.Buffer.prototype.slice;
};
BufferReader.prototype.string = function read_string_buffer() {
  var len = this.uint32();
  return this.buf.utf8Slice ? this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len)) : this.buf.toString("utf-8", this.pos, this.pos = Math.min(this.pos + len, this.len));
};
BufferReader._configure();
var rpc$1 = {};
var service$1 = Service$4;
var util$k = minimal;
(Service$4.prototype = Object.create(util$k.EventEmitter.prototype)).constructor = Service$4;
function Service$4(rpcImpl, requestDelimited, responseDelimited) {
  if (typeof rpcImpl !== "function")
    throw TypeError("rpcImpl must be a function");
  util$k.EventEmitter.call(this);
  this.rpcImpl = rpcImpl;
  this.requestDelimited = Boolean(requestDelimited);
  this.responseDelimited = Boolean(responseDelimited);
}
Service$4.prototype.rpcCall = function rpcCall(method2, requestCtor, responseCtor, request, callback) {
  if (!request)
    throw TypeError("request must be specified");
  var self2 = this;
  if (!callback)
    return util$k.asPromise(rpcCall, self2, method2, requestCtor, responseCtor, request);
  if (!self2.rpcImpl) {
    setTimeout(function() {
      callback(Error("already ended"));
    }, 0);
    return void 0;
  }
  try {
    return self2.rpcImpl(method2, requestCtor[self2.requestDelimited ? "encodeDelimited" : "encode"](request).finish(), function rpcCallback(err, response) {
      if (err) {
        self2.emit("error", err, method2);
        return callback(err);
      }
      if (response === null) {
        self2.end(true);
        return void 0;
      }
      if (!(response instanceof responseCtor)) {
        try {
          response = responseCtor[self2.responseDelimited ? "decodeDelimited" : "decode"](response);
        } catch (err2) {
          self2.emit("error", err2, method2);
          return callback(err2);
        }
      }
      self2.emit("data", response, method2);
      return callback(null, response);
    });
  } catch (err) {
    self2.emit("error", err, method2);
    setTimeout(function() {
      callback(err);
    }, 0);
    return void 0;
  }
};
Service$4.prototype.end = function end(endedByRPC) {
  if (this.rpcImpl) {
    if (!endedByRPC)
      this.rpcImpl(null, null, null);
    this.rpcImpl = null;
    this.emit("end").off();
  }
  return this;
};
(function(exports) {
  var rpc2 = exports;
  rpc2.Service = service$1;
})(rpc$1);
var roots$1 = {};
(function(exports) {
  var protobuf2 = exports;
  protobuf2.build = "minimal";
  protobuf2.Writer = writer;
  protobuf2.BufferWriter = writer_buffer;
  protobuf2.Reader = reader;
  protobuf2.BufferReader = reader_buffer;
  protobuf2.util = minimal;
  protobuf2.rpc = rpc$1;
  protobuf2.roots = roots$1;
  protobuf2.configure = configure2;
  function configure2() {
    protobuf2.util._configure();
    protobuf2.Writer._configure(protobuf2.BufferWriter);
    protobuf2.Reader._configure(protobuf2.BufferReader);
  }
  configure2();
})(indexMinimal);
var util$j = { exports: {} };
var codegen_1 = codegen;
function codegen(functionParams, functionName) {
  if (typeof functionParams === "string") {
    functionName = functionParams;
    functionParams = void 0;
  }
  var body = [];
  function Codegen(formatStringOrScope) {
    if (typeof formatStringOrScope !== "string") {
      var source = toString3();
      if (codegen.verbose)
        console.log("codegen: " + source);
      source = "return " + source;
      if (formatStringOrScope) {
        var scopeKeys = Object.keys(formatStringOrScope), scopeParams = new Array(scopeKeys.length + 1), scopeValues = new Array(scopeKeys.length), scopeOffset = 0;
        while (scopeOffset < scopeKeys.length) {
          scopeParams[scopeOffset] = scopeKeys[scopeOffset];
          scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];
        }
        scopeParams[scopeOffset] = source;
        return Function.apply(null, scopeParams).apply(null, scopeValues);
      }
      return Function(source)();
    }
    var formatParams = new Array(arguments.length - 1), formatOffset = 0;
    while (formatOffset < formatParams.length)
      formatParams[formatOffset] = arguments[++formatOffset];
    formatOffset = 0;
    formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {
      var value = formatParams[formatOffset++];
      switch ($1) {
        case "d":
        case "f":
          return String(Number(value));
        case "i":
          return String(Math.floor(value));
        case "j":
          return JSON.stringify(value);
        case "s":
          return String(value);
      }
      return "%";
    });
    if (formatOffset !== formatParams.length)
      throw Error("parameter count mismatch");
    body.push(formatStringOrScope);
    return Codegen;
  }
  function toString3(functionNameOverride) {
    return "function " + (functionNameOverride || functionName || "") + "(" + (functionParams && functionParams.join(",") || "") + "){\n  " + body.join("\n  ") + "\n}";
  }
  Codegen.toString = toString3;
  return Codegen;
}
codegen.verbose = false;
var fetch_1 = fetch$1;
var asPromise = aspromise;
var inquire = inquire_1;
var fs$1 = inquire("fs");
function fetch$1(filename, options2, callback) {
  if (typeof options2 === "function") {
    callback = options2;
    options2 = {};
  } else if (!options2)
    options2 = {};
  if (!callback)
    return asPromise(fetch$1, this, filename, options2);
  if (!options2.xhr && fs$1 && fs$1.readFile)
    return fs$1.readFile(filename, function fetchReadFileCallback(err, contents) {
      return err && typeof XMLHttpRequest !== "undefined" ? fetch$1.xhr(filename, options2, callback) : err ? callback(err) : callback(null, options2.binary ? contents : contents.toString("utf8"));
    });
  return fetch$1.xhr(filename, options2, callback);
}
fetch$1.xhr = function fetch_xhr(filename, options2, callback) {
  var xhr = new XMLHttpRequest();
  xhr.onreadystatechange = function fetchOnReadyStateChange() {
    if (xhr.readyState !== 4)
      return void 0;
    if (xhr.status !== 0 && xhr.status !== 200)
      return callback(Error("status " + xhr.status));
    if (options2.binary) {
      var buffer = xhr.response;
      if (!buffer) {
        buffer = [];
        for (var i = 0; i < xhr.responseText.length; ++i)
          buffer.push(xhr.responseText.charCodeAt(i) & 255);
      }
      return callback(null, typeof Uint8Array !== "undefined" ? new Uint8Array(buffer) : buffer);
    }
    return callback(null, xhr.responseText);
  };
  if (options2.binary) {
    if ("overrideMimeType" in xhr)
      xhr.overrideMimeType("text/plain; charset=x-user-defined");
    xhr.responseType = "arraybuffer";
  }
  xhr.open("GET", filename);
  xhr.send();
};
var path$2 = {};
(function(exports) {
  var path2 = exports;
  var isAbsolute = path2.isAbsolute = function isAbsolute2(path3) {
    return /^(?:\/|\w+:)/.test(path3);
  };
  var normalize2 = path2.normalize = function normalize3(path3) {
    path3 = path3.replace(/\\/g, "/").replace(/\/{2,}/g, "/");
    var parts = path3.split("/"), absolute2 = isAbsolute(path3), prefix = "";
    if (absolute2)
      prefix = parts.shift() + "/";
    for (var i = 0; i < parts.length; ) {
      if (parts[i] === "..") {
        if (i > 0 && parts[i - 1] !== "..")
          parts.splice(--i, 2);
        else if (absolute2)
          parts.splice(i, 1);
        else
          ++i;
      } else if (parts[i] === ".")
        parts.splice(i, 1);
      else
        ++i;
    }
    return prefix + parts.join("/");
  };
  path2.resolve = function resolve6(originPath, includePath, alreadyNormalized) {
    if (!alreadyNormalized)
      includePath = normalize2(includePath);
    if (isAbsolute(includePath))
      return includePath;
    if (!alreadyNormalized)
      originPath = normalize2(originPath);
    return (originPath = originPath.replace(/(?:\/|^)[^/]+$/, "")).length ? normalize2(originPath + "/" + includePath) : includePath;
  };
})(path$2);
var types$5 = {};
(function(exports) {
  var types22 = exports;
  var util2 = util$j.exports;
  var s2 = [
    "double",
    "float",
    "int32",
    "uint32",
    "sint32",
    "fixed32",
    "sfixed32",
    "int64",
    "uint64",
    "sint64",
    "fixed64",
    "sfixed64",
    "bool",
    "string",
    "bytes"
  ];
  function bake(values, offset) {
    var i = 0, o = {};
    offset |= 0;
    while (i < values.length)
      o[s2[i + offset]] = values[i++];
    return o;
  }
  types22.basic = bake([
    1,
    5,
    0,
    0,
    0,
    5,
    5,
    0,
    0,
    0,
    1,
    1,
    0,
    2,
    2
  ]);
  types22.defaults = bake([
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    false,
    "",
    util2.emptyArray,
    null
  ]);
  types22.long = bake([
    0,
    0,
    0,
    1,
    1
  ], 7);
  types22.mapKey = bake([
    0,
    0,
    0,
    5,
    5,
    0,
    0,
    0,
    1,
    1,
    0,
    2
  ], 2);
  types22.packed = bake([
    1,
    5,
    0,
    0,
    0,
    5,
    5,
    0,
    0,
    0,
    1,
    1,
    0
  ]);
})(types$5);
var field = Field$6;
var ReflectionObject$5 = object;
((Field$6.prototype = Object.create(ReflectionObject$5.prototype)).constructor = Field$6).className = "Field";
var Enum$9 = _enum;
var types$4 = types$5;
var util$i = util$j.exports;
var Type$5;
var ruleRe = /^required|optional|repeated$/;
Field$6.fromJSON = function fromJSON2(name2, json) {
  return new Field$6(name2, json.id, json.type, json.rule, json.extend, json.options, json.comment);
};
function Field$6(name2, id, type2, rule, extend, options2, comment) {
  if (util$i.isObject(rule)) {
    comment = extend;
    options2 = rule;
    rule = extend = void 0;
  } else if (util$i.isObject(extend)) {
    comment = options2;
    options2 = extend;
    extend = void 0;
  }
  ReflectionObject$5.call(this, name2, options2);
  if (!util$i.isInteger(id) || id < 0)
    throw TypeError("id must be a non-negative integer");
  if (!util$i.isString(type2))
    throw TypeError("type must be a string");
  if (rule !== void 0 && !ruleRe.test(rule = rule.toString().toLowerCase()))
    throw TypeError("rule must be a string rule");
  if (extend !== void 0 && !util$i.isString(extend))
    throw TypeError("extend must be a string");
  if (rule === "proto3_optional") {
    rule = "optional";
  }
  this.rule = rule && rule !== "optional" ? rule : void 0;
  this.type = type2;
  this.id = id;
  this.extend = extend || void 0;
  this.required = rule === "required";
  this.optional = !this.required;
  this.repeated = rule === "repeated";
  this.map = false;
  this.message = null;
  this.partOf = null;
  this.typeDefault = null;
  this.defaultValue = null;
  this.long = util$i.Long ? types$4.long[type2] !== void 0 : false;
  this.bytes = type2 === "bytes";
  this.resolvedType = null;
  this.extensionField = null;
  this.declaringField = null;
  this._packed = null;
  this.comment = comment;
}
Object.defineProperty(Field$6.prototype, "packed", {
  get: function() {
    if (this._packed === null)
      this._packed = this.getOption("packed") !== false;
    return this._packed;
  }
});
Field$6.prototype.setOption = function setOption(name2, value, ifNotSet) {
  if (name2 === "packed")
    this._packed = null;
  return ReflectionObject$5.prototype.setOption.call(this, name2, value, ifNotSet);
};
Field$6.prototype.toJSON = function toJSON(toJSONOptions) {
  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
  return util$i.toObject([
    "rule",
    this.rule !== "optional" && this.rule || void 0,
    "type",
    this.type,
    "id",
    this.id,
    "extend",
    this.extend,
    "options",
    this.options,
    "comment",
    keepComments ? this.comment : void 0
  ]);
};
Field$6.prototype.resolve = function resolve2() {
  if (this.resolved)
    return this;
  if ((this.typeDefault = types$4.defaults[this.type]) === void 0) {
    this.resolvedType = (this.declaringField ? this.declaringField.parent : this.parent).lookupTypeOrEnum(this.type);
    if (this.resolvedType instanceof Type$5)
      this.typeDefault = null;
    else
      this.typeDefault = this.resolvedType.values[Object.keys(this.resolvedType.values)[0]];
  }
  if (this.options && this.options["default"] != null) {
    this.typeDefault = this.options["default"];
    if (this.resolvedType instanceof Enum$9 && typeof this.typeDefault === "string")
      this.typeDefault = this.resolvedType.values[this.typeDefault];
  }
  if (this.options) {
    if (this.options.packed === true || this.options.packed !== void 0 && this.resolvedType && !(this.resolvedType instanceof Enum$9))
      delete this.options.packed;
    if (!Object.keys(this.options).length)
      this.options = void 0;
  }
  if (this.long) {
    this.typeDefault = util$i.Long.fromNumber(this.typeDefault, this.type.charAt(0) === "u");
    if (Object.freeze)
      Object.freeze(this.typeDefault);
  } else if (this.bytes && typeof this.typeDefault === "string") {
    var buf;
    if (util$i.base64.test(this.typeDefault))
      util$i.base64.decode(this.typeDefault, buf = util$i.newBuffer(util$i.base64.length(this.typeDefault)), 0);
    else
      util$i.utf8.write(this.typeDefault, buf = util$i.newBuffer(util$i.utf8.length(this.typeDefault)), 0);
    this.typeDefault = buf;
  }
  if (this.map)
    this.defaultValue = util$i.emptyObject;
  else if (this.repeated)
    this.defaultValue = util$i.emptyArray;
  else
    this.defaultValue = this.typeDefault;
  if (this.parent instanceof Type$5)
    this.parent.ctor.prototype[this.name] = this.defaultValue;
  return ReflectionObject$5.prototype.resolve.call(this);
};
Field$6.d = function decorateField(fieldId, fieldType, fieldRule, defaultValue) {
  if (typeof fieldType === "function")
    fieldType = util$i.decorateType(fieldType).name;
  else if (fieldType && typeof fieldType === "object")
    fieldType = util$i.decorateEnum(fieldType).name;
  return function fieldDecorator(prototype, fieldName) {
    util$i.decorateType(prototype.constructor).add(new Field$6(fieldName, fieldId, fieldType, fieldRule, { "default": defaultValue }));
  };
};
Field$6._configure = function configure(Type_) {
  Type$5 = Type_;
};
var oneof = OneOf$4;
var ReflectionObject$4 = object;
((OneOf$4.prototype = Object.create(ReflectionObject$4.prototype)).constructor = OneOf$4).className = "OneOf";
var Field$5 = field;
var util$h = util$j.exports;
function OneOf$4(name2, fieldNames, options2, comment) {
  if (!Array.isArray(fieldNames)) {
    options2 = fieldNames;
    fieldNames = void 0;
  }
  ReflectionObject$4.call(this, name2, options2);
  if (!(fieldNames === void 0 || Array.isArray(fieldNames)))
    throw TypeError("fieldNames must be an Array");
  this.oneof = fieldNames || [];
  this.fieldsArray = [];
  this.comment = comment;
}
OneOf$4.fromJSON = function fromJSON3(name2, json) {
  return new OneOf$4(name2, json.oneof, json.options, json.comment);
};
OneOf$4.prototype.toJSON = function toJSON2(toJSONOptions) {
  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
  return util$h.toObject([
    "options",
    this.options,
    "oneof",
    this.oneof,
    "comment",
    keepComments ? this.comment : void 0
  ]);
};
function addFieldsToParent(oneof2) {
  if (oneof2.parent) {
    for (var i = 0; i < oneof2.fieldsArray.length; ++i)
      if (!oneof2.fieldsArray[i].parent)
        oneof2.parent.add(oneof2.fieldsArray[i]);
  }
}
OneOf$4.prototype.add = function add(field2) {
  if (!(field2 instanceof Field$5))
    throw TypeError("field must be a Field");
  if (field2.parent && field2.parent !== this.parent)
    field2.parent.remove(field2);
  this.oneof.push(field2.name);
  this.fieldsArray.push(field2);
  field2.partOf = this;
  addFieldsToParent(this);
  return this;
};
OneOf$4.prototype.remove = function remove(field2) {
  if (!(field2 instanceof Field$5))
    throw TypeError("field must be a Field");
  var index2 = this.fieldsArray.indexOf(field2);
  if (index2 < 0)
    throw Error(field2 + " is not a member of " + this);
  this.fieldsArray.splice(index2, 1);
  index2 = this.oneof.indexOf(field2.name);
  if (index2 > -1)
    this.oneof.splice(index2, 1);
  field2.partOf = null;
  return this;
};
OneOf$4.prototype.onAdd = function onAdd(parent) {
  ReflectionObject$4.prototype.onAdd.call(this, parent);
  var self2 = this;
  for (var i = 0; i < this.oneof.length; ++i) {
    var field2 = parent.get(this.oneof[i]);
    if (field2 && !field2.partOf) {
      field2.partOf = self2;
      self2.fieldsArray.push(field2);
    }
  }
  addFieldsToParent(this);
};
OneOf$4.prototype.onRemove = function onRemove(parent) {
  for (var i = 0, field2; i < this.fieldsArray.length; ++i)
    if ((field2 = this.fieldsArray[i]).parent)
      field2.parent.remove(field2);
  ReflectionObject$4.prototype.onRemove.call(this, parent);
};
OneOf$4.d = function decorateOneOf() {
  var fieldNames = new Array(arguments.length), index2 = 0;
  while (index2 < arguments.length)
    fieldNames[index2] = arguments[index2++];
  return function oneOfDecorator(prototype, oneofName) {
    util$h.decorateType(prototype.constructor).add(new OneOf$4(oneofName, fieldNames));
    Object.defineProperty(prototype, oneofName, {
      get: util$h.oneOfGetter(fieldNames),
      set: util$h.oneOfSetter(fieldNames)
    });
  };
};
var namespace = Namespace$4;
var ReflectionObject$3 = object;
((Namespace$4.prototype = Object.create(ReflectionObject$3.prototype)).constructor = Namespace$4).className = "Namespace";
var Field$4 = field;
var OneOf$3 = oneof;
var util$g = util$j.exports;
var Type$4;
var Service$3;
var Enum$8;
Namespace$4.fromJSON = function fromJSON4(name2, json) {
  return new Namespace$4(name2, json.options).addJSON(json.nested);
};
function arrayToJSON(array, toJSONOptions) {
  if (!(array && array.length))
    return void 0;
  var obj = {};
  for (var i = 0; i < array.length; ++i)
    obj[array[i].name] = array[i].toJSON(toJSONOptions);
  return obj;
}
Namespace$4.arrayToJSON = arrayToJSON;
Namespace$4.isReservedId = function isReservedId(reserved2, id) {
  if (reserved2) {
    for (var i = 0; i < reserved2.length; ++i)
      if (typeof reserved2[i] !== "string" && reserved2[i][0] <= id && reserved2[i][1] > id)
        return true;
  }
  return false;
};
Namespace$4.isReservedName = function isReservedName(reserved2, name2) {
  if (reserved2) {
    for (var i = 0; i < reserved2.length; ++i)
      if (reserved2[i] === name2)
        return true;
  }
  return false;
};
function Namespace$4(name2, options2) {
  ReflectionObject$3.call(this, name2, options2);
  this.nested = void 0;
  this._nestedArray = null;
}
function clearCache$2(namespace2) {
  namespace2._nestedArray = null;
  return namespace2;
}
Object.defineProperty(Namespace$4.prototype, "nestedArray", {
  get: function() {
    return this._nestedArray || (this._nestedArray = util$g.toArray(this.nested));
  }
});
Namespace$4.prototype.toJSON = function toJSON3(toJSONOptions) {
  return util$g.toObject([
    "options",
    this.options,
    "nested",
    arrayToJSON(this.nestedArray, toJSONOptions)
  ]);
};
Namespace$4.prototype.addJSON = function addJSON(nestedJson) {
  var ns = this;
  if (nestedJson) {
    for (var names = Object.keys(nestedJson), i = 0, nested2; i < names.length; ++i) {
      nested2 = nestedJson[names[i]];
      ns.add((nested2.fields !== void 0 ? Type$4.fromJSON : nested2.values !== void 0 ? Enum$8.fromJSON : nested2.methods !== void 0 ? Service$3.fromJSON : nested2.id !== void 0 ? Field$4.fromJSON : Namespace$4.fromJSON)(names[i], nested2));
    }
  }
  return this;
};
Namespace$4.prototype.get = function get(name2) {
  return this.nested && this.nested[name2] || null;
};
Namespace$4.prototype.getEnum = function getEnum(name2) {
  if (this.nested && this.nested[name2] instanceof Enum$8)
    return this.nested[name2].values;
  throw Error("no such enum: " + name2);
};
Namespace$4.prototype.add = function add2(object2) {
  if (!(object2 instanceof Field$4 && object2.extend !== void 0 || object2 instanceof Type$4 || object2 instanceof Enum$8 || object2 instanceof Service$3 || object2 instanceof Namespace$4 || object2 instanceof OneOf$3))
    throw TypeError("object must be a valid nested object");
  if (!this.nested)
    this.nested = {};
  else {
    var prev = this.get(object2.name);
    if (prev) {
      if (prev instanceof Namespace$4 && object2 instanceof Namespace$4 && !(prev instanceof Type$4 || prev instanceof Service$3)) {
        var nested2 = prev.nestedArray;
        for (var i = 0; i < nested2.length; ++i)
          object2.add(nested2[i]);
        this.remove(prev);
        if (!this.nested)
          this.nested = {};
        object2.setOptions(prev.options, true);
      } else
        throw Error("duplicate name '" + object2.name + "' in " + this);
    }
  }
  this.nested[object2.name] = object2;
  object2.onAdd(this);
  return clearCache$2(this);
};
Namespace$4.prototype.remove = function remove2(object2) {
  if (!(object2 instanceof ReflectionObject$3))
    throw TypeError("object must be a ReflectionObject");
  if (object2.parent !== this)
    throw Error(object2 + " is not a member of " + this);
  delete this.nested[object2.name];
  if (!Object.keys(this.nested).length)
    this.nested = void 0;
  object2.onRemove(this);
  return clearCache$2(this);
};
Namespace$4.prototype.define = function define2(path2, json) {
  if (util$g.isString(path2))
    path2 = path2.split(".");
  else if (!Array.isArray(path2))
    throw TypeError("illegal path");
  if (path2 && path2.length && path2[0] === "")
    throw Error("path must be relative");
  var ptr = this;
  while (path2.length > 0) {
    var part = path2.shift();
    if (ptr.nested && ptr.nested[part]) {
      ptr = ptr.nested[part];
      if (!(ptr instanceof Namespace$4))
        throw Error("path conflicts with non-namespace objects");
    } else
      ptr.add(ptr = new Namespace$4(part));
  }
  if (json)
    ptr.addJSON(json);
  return ptr;
};
Namespace$4.prototype.resolveAll = function resolveAll() {
  var nested2 = this.nestedArray, i = 0;
  while (i < nested2.length)
    if (nested2[i] instanceof Namespace$4)
      nested2[i++].resolveAll();
    else
      nested2[i++].resolve();
  return this.resolve();
};
Namespace$4.prototype.lookup = function lookup(path2, filterTypes, parentAlreadyChecked) {
  if (typeof filterTypes === "boolean") {
    parentAlreadyChecked = filterTypes;
    filterTypes = void 0;
  } else if (filterTypes && !Array.isArray(filterTypes))
    filterTypes = [filterTypes];
  if (util$g.isString(path2) && path2.length) {
    if (path2 === ".")
      return this.root;
    path2 = path2.split(".");
  } else if (!path2.length)
    return this;
  if (path2[0] === "")
    return this.root.lookup(path2.slice(1), filterTypes);
  var found = this.get(path2[0]);
  if (found) {
    if (path2.length === 1) {
      if (!filterTypes || filterTypes.indexOf(found.constructor) > -1)
        return found;
    } else if (found instanceof Namespace$4 && (found = found.lookup(path2.slice(1), filterTypes, true)))
      return found;
  } else
    for (var i = 0; i < this.nestedArray.length; ++i)
      if (this._nestedArray[i] instanceof Namespace$4 && (found = this._nestedArray[i].lookup(path2, filterTypes, true)))
        return found;
  if (this.parent === null || parentAlreadyChecked)
    return null;
  return this.parent.lookup(path2, filterTypes);
};
Namespace$4.prototype.lookupType = function lookupType(path2) {
  var found = this.lookup(path2, [Type$4]);
  if (!found)
    throw Error("no such type: " + path2);
  return found;
};
Namespace$4.prototype.lookupEnum = function lookupEnum(path2) {
  var found = this.lookup(path2, [Enum$8]);
  if (!found)
    throw Error("no such Enum '" + path2 + "' in " + this);
  return found;
};
Namespace$4.prototype.lookupTypeOrEnum = function lookupTypeOrEnum(path2) {
  var found = this.lookup(path2, [Type$4, Enum$8]);
  if (!found)
    throw Error("no such Type or Enum '" + path2 + "' in " + this);
  return found;
};
Namespace$4.prototype.lookupService = function lookupService(path2) {
  var found = this.lookup(path2, [Service$3]);
  if (!found)
    throw Error("no such Service '" + path2 + "' in " + this);
  return found;
};
Namespace$4._configure = function(Type_, Service_, Enum_) {
  Type$4 = Type_;
  Service$3 = Service_;
  Enum$8 = Enum_;
};
var mapfield = MapField$2;
var Field$3 = field;
((MapField$2.prototype = Object.create(Field$3.prototype)).constructor = MapField$2).className = "MapField";
var types$3 = types$5;
var util$f = util$j.exports;
function MapField$2(name2, id, keyType, type2, options2, comment) {
  Field$3.call(this, name2, id, type2, void 0, void 0, options2, comment);
  if (!util$f.isString(keyType))
    throw TypeError("keyType must be a string");
  this.keyType = keyType;
  this.resolvedKeyType = null;
  this.map = true;
}
MapField$2.fromJSON = function fromJSON5(name2, json) {
  return new MapField$2(name2, json.id, json.keyType, json.type, json.options, json.comment);
};
MapField$2.prototype.toJSON = function toJSON4(toJSONOptions) {
  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
  return util$f.toObject([
    "keyType",
    this.keyType,
    "type",
    this.type,
    "id",
    this.id,
    "extend",
    this.extend,
    "options",
    this.options,
    "comment",
    keepComments ? this.comment : void 0
  ]);
};
MapField$2.prototype.resolve = function resolve3() {
  if (this.resolved)
    return this;
  if (types$3.mapKey[this.keyType] === void 0)
    throw Error("invalid key type: " + this.keyType);
  return Field$3.prototype.resolve.call(this);
};
MapField$2.d = function decorateMapField(fieldId, fieldKeyType, fieldValueType) {
  if (typeof fieldValueType === "function")
    fieldValueType = util$f.decorateType(fieldValueType).name;
  else if (fieldValueType && typeof fieldValueType === "object")
    fieldValueType = util$f.decorateEnum(fieldValueType).name;
  return function mapFieldDecorator(prototype, fieldName) {
    util$f.decorateType(prototype.constructor).add(new MapField$2(fieldName, fieldId, fieldKeyType, fieldValueType));
  };
};
var method = Method$2;
var ReflectionObject$2 = object;
((Method$2.prototype = Object.create(ReflectionObject$2.prototype)).constructor = Method$2).className = "Method";
var util$e = util$j.exports;
function Method$2(name2, type2, requestType, responseType, requestStream, responseStream, options2, comment, parsedOptions) {
  if (util$e.isObject(requestStream)) {
    options2 = requestStream;
    requestStream = responseStream = void 0;
  } else if (util$e.isObject(responseStream)) {
    options2 = responseStream;
    responseStream = void 0;
  }
  if (!(type2 === void 0 || util$e.isString(type2)))
    throw TypeError("type must be a string");
  if (!util$e.isString(requestType))
    throw TypeError("requestType must be a string");
  if (!util$e.isString(responseType))
    throw TypeError("responseType must be a string");
  ReflectionObject$2.call(this, name2, options2);
  this.type = type2 || "rpc";
  this.requestType = requestType;
  this.requestStream = requestStream ? true : void 0;
  this.responseType = responseType;
  this.responseStream = responseStream ? true : void 0;
  this.resolvedRequestType = null;
  this.resolvedResponseType = null;
  this.comment = comment;
  this.parsedOptions = parsedOptions;
}
Method$2.fromJSON = function fromJSON6(name2, json) {
  return new Method$2(name2, json.type, json.requestType, json.responseType, json.requestStream, json.responseStream, json.options, json.comment, json.parsedOptions);
};
Method$2.prototype.toJSON = function toJSON5(toJSONOptions) {
  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
  return util$e.toObject([
    "type",
    this.type !== "rpc" && this.type || void 0,
    "requestType",
    this.requestType,
    "requestStream",
    this.requestStream,
    "responseType",
    this.responseType,
    "responseStream",
    this.responseStream,
    "options",
    this.options,
    "comment",
    keepComments ? this.comment : void 0,
    "parsedOptions",
    this.parsedOptions
  ]);
};
Method$2.prototype.resolve = function resolve4() {
  if (this.resolved)
    return this;
  this.resolvedRequestType = this.parent.lookupType(this.requestType);
  this.resolvedResponseType = this.parent.lookupType(this.responseType);
  return ReflectionObject$2.prototype.resolve.call(this);
};
var service = Service$2;
var Namespace$3 = namespace;
((Service$2.prototype = Object.create(Namespace$3.prototype)).constructor = Service$2).className = "Service";
var Method$1 = method;
var util$d = util$j.exports;
var rpc = rpc$1;
function Service$2(name2, options2) {
  Namespace$3.call(this, name2, options2);
  this.methods = {};
  this._methodsArray = null;
}
Service$2.fromJSON = function fromJSON7(name2, json) {
  var service2 = new Service$2(name2, json.options);
  if (json.methods)
    for (var names = Object.keys(json.methods), i = 0; i < names.length; ++i)
      service2.add(Method$1.fromJSON(names[i], json.methods[names[i]]));
  if (json.nested)
    service2.addJSON(json.nested);
  service2.comment = json.comment;
  return service2;
};
Service$2.prototype.toJSON = function toJSON6(toJSONOptions) {
  var inherited = Namespace$3.prototype.toJSON.call(this, toJSONOptions);
  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
  return util$d.toObject([
    "options",
    inherited && inherited.options || void 0,
    "methods",
    Namespace$3.arrayToJSON(this.methodsArray, toJSONOptions) || {},
    "nested",
    inherited && inherited.nested || void 0,
    "comment",
    keepComments ? this.comment : void 0
  ]);
};
Object.defineProperty(Service$2.prototype, "methodsArray", {
  get: function() {
    return this._methodsArray || (this._methodsArray = util$d.toArray(this.methods));
  }
});
function clearCache$1(service2) {
  service2._methodsArray = null;
  return service2;
}
Service$2.prototype.get = function get2(name2) {
  return this.methods[name2] || Namespace$3.prototype.get.call(this, name2);
};
Service$2.prototype.resolveAll = function resolveAll2() {
  var methods = this.methodsArray;
  for (var i = 0; i < methods.length; ++i)
    methods[i].resolve();
  return Namespace$3.prototype.resolve.call(this);
};
Service$2.prototype.add = function add3(object2) {
  if (this.get(object2.name))
    throw Error("duplicate name '" + object2.name + "' in " + this);
  if (object2 instanceof Method$1) {
    this.methods[object2.name] = object2;
    object2.parent = this;
    return clearCache$1(this);
  }
  return Namespace$3.prototype.add.call(this, object2);
};
Service$2.prototype.remove = function remove3(object2) {
  if (object2 instanceof Method$1) {
    if (this.methods[object2.name] !== object2)
      throw Error(object2 + " is not a member of " + this);
    delete this.methods[object2.name];
    object2.parent = null;
    return clearCache$1(this);
  }
  return Namespace$3.prototype.remove.call(this, object2);
};
Service$2.prototype.create = function create4(rpcImpl, requestDelimited, responseDelimited) {
  var rpcService = new rpc.Service(rpcImpl, requestDelimited, responseDelimited);
  for (var i = 0, method2; i < this.methodsArray.length; ++i) {
    var methodName = util$d.lcFirst((method2 = this._methodsArray[i]).resolve().name).replace(/[^$\w_]/g, "");
    rpcService[methodName] = util$d.codegen(["r", "c"], util$d.isReserved(methodName) ? methodName + "_" : methodName)("return this.rpcCall(m,q,s,r,c)")({
      m: method2,
      q: method2.resolvedRequestType.ctor,
      s: method2.resolvedResponseType.ctor
    });
  }
  return rpcService;
};
var message = Message$1;
var util$c = minimal;
function Message$1(properties) {
  if (properties)
    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
      this[keys[i]] = properties[keys[i]];
}
Message$1.create = function create5(properties) {
  return this.$type.create(properties);
};
Message$1.encode = function encode(message2, writer2) {
  return this.$type.encode(message2, writer2);
};
Message$1.encodeDelimited = function encodeDelimited(message2, writer2) {
  return this.$type.encodeDelimited(message2, writer2);
};
Message$1.decode = function decode2(reader2) {
  return this.$type.decode(reader2);
};
Message$1.decodeDelimited = function decodeDelimited(reader2) {
  return this.$type.decodeDelimited(reader2);
};
Message$1.verify = function verify2(message2) {
  return this.$type.verify(message2);
};
Message$1.fromObject = function fromObject(object2) {
  return this.$type.fromObject(object2);
};
Message$1.toObject = function toObject(message2, options2) {
  return this.$type.toObject(message2, options2);
};
Message$1.prototype.toJSON = function toJSON7() {
  return this.$type.toObject(this, util$c.toJSONOptions);
};
var decoder_1 = decoder$1;
var Enum$7 = _enum;
var types$2 = types$5;
var util$b = util$j.exports;
function missing(field2) {
  return "missing required '" + field2.name + "'";
}
function decoder$1(mtype) {
  var gen = util$b.codegen(["r", "l"], mtype.name + "$decode")("if(!(r instanceof Reader))")("r=Reader.create(r)")("var c=l===undefined?r.len:r.pos+l,m=new this.ctor" + (mtype.fieldsArray.filter(function(field3) {
    return field3.map;
  }).length ? ",k,value" : ""))("while(r.pos<c){")("var t=r.uint32()");
  if (mtype.group)
    gen("if((t&7)===4)")("break");
  gen("switch(t>>>3){");
  var i = 0;
  for (; i < mtype.fieldsArray.length; ++i) {
    var field2 = mtype._fieldsArray[i].resolve(), type2 = field2.resolvedType instanceof Enum$7 ? "int32" : field2.type, ref = "m" + util$b.safeProp(field2.name);
    gen("case %i:", field2.id);
    if (field2.map) {
      gen("if(%s===util.emptyObject)", ref)("%s={}", ref)("var c2 = r.uint32()+r.pos");
      if (types$2.defaults[field2.keyType] !== void 0)
        gen("k=%j", types$2.defaults[field2.keyType]);
      else
        gen("k=null");
      if (types$2.defaults[type2] !== void 0)
        gen("value=%j", types$2.defaults[type2]);
      else
        gen("value=null");
      gen("while(r.pos<c2){")("var tag2=r.uint32()")("switch(tag2>>>3){")("case 1: k=r.%s(); break", field2.keyType)("case 2:");
      if (types$2.basic[type2] === void 0)
        gen("value=types[%i].decode(r,r.uint32())", i);
      else
        gen("value=r.%s()", type2);
      gen("break")("default:")("r.skipType(tag2&7)")("break")("}")("}");
      if (types$2.long[field2.keyType] !== void 0)
        gen('%s[typeof k==="object"?util.longToHash(k):k]=value', ref);
      else
        gen("%s[k]=value", ref);
    } else if (field2.repeated) {
      gen("if(!(%s&&%s.length))", ref, ref)("%s=[]", ref);
      if (types$2.packed[type2] !== void 0)
        gen("if((t&7)===2){")("var c2=r.uint32()+r.pos")("while(r.pos<c2)")("%s.push(r.%s())", ref, type2)("}else");
      if (types$2.basic[type2] === void 0)
        gen(field2.resolvedType.group ? "%s.push(types[%i].decode(r))" : "%s.push(types[%i].decode(r,r.uint32()))", ref, i);
      else
        gen("%s.push(r.%s())", ref, type2);
    } else if (types$2.basic[type2] === void 0)
      gen(field2.resolvedType.group ? "%s=types[%i].decode(r)" : "%s=types[%i].decode(r,r.uint32())", ref, i);
    else
      gen("%s=r.%s()", ref, type2);
    gen("break");
  }
  gen("default:")("r.skipType(t&7)")("break")("}")("}");
  for (i = 0; i < mtype._fieldsArray.length; ++i) {
    var rfield = mtype._fieldsArray[i];
    if (rfield.required)
      gen("if(!m.hasOwnProperty(%j))", rfield.name)("throw util.ProtocolError(%j,{instance:m})", missing(rfield));
  }
  return gen("return m");
}
var verifier_1 = verifier$1;
var Enum$6 = _enum;
var util$a = util$j.exports;
function invalid(field2, expected) {
  return field2.name + ": " + expected + (field2.repeated && expected !== "array" ? "[]" : field2.map && expected !== "object" ? "{k:" + field2.keyType + "}" : "") + " expected";
}
function genVerifyValue(gen, field2, fieldIndex, ref) {
  if (field2.resolvedType) {
    if (field2.resolvedType instanceof Enum$6) {
      gen("switch(%s){", ref)("default:")("return%j", invalid(field2, "enum value"));
      for (var keys = Object.keys(field2.resolvedType.values), j = 0; j < keys.length; ++j)
        gen("case %i:", field2.resolvedType.values[keys[j]]);
      gen("break")("}");
    } else {
      gen("{")("var e=types[%i].verify(%s);", fieldIndex, ref)("if(e)")("return%j+e", field2.name + ".")("}");
    }
  } else {
    switch (field2.type) {
      case "int32":
      case "uint32":
      case "sint32":
      case "fixed32":
      case "sfixed32":
        gen("if(!util.isInteger(%s))", ref)("return%j", invalid(field2, "integer"));
        break;
      case "int64":
      case "uint64":
      case "sint64":
      case "fixed64":
      case "sfixed64":
        gen("if(!util.isInteger(%s)&&!(%s&&util.isInteger(%s.low)&&util.isInteger(%s.high)))", ref, ref, ref, ref)("return%j", invalid(field2, "integer|Long"));
        break;
      case "float":
      case "double":
        gen('if(typeof %s!=="number")', ref)("return%j", invalid(field2, "number"));
        break;
      case "bool":
        gen('if(typeof %s!=="boolean")', ref)("return%j", invalid(field2, "boolean"));
        break;
      case "string":
        gen("if(!util.isString(%s))", ref)("return%j", invalid(field2, "string"));
        break;
      case "bytes":
        gen('if(!(%s&&typeof %s.length==="number"||util.isString(%s)))', ref, ref, ref)("return%j", invalid(field2, "buffer"));
        break;
    }
  }
  return gen;
}
function genVerifyKey(gen, field2, ref) {
  switch (field2.keyType) {
    case "int32":
    case "uint32":
    case "sint32":
    case "fixed32":
    case "sfixed32":
      gen("if(!util.key32Re.test(%s))", ref)("return%j", invalid(field2, "integer key"));
      break;
    case "int64":
    case "uint64":
    case "sint64":
    case "fixed64":
    case "sfixed64":
      gen("if(!util.key64Re.test(%s))", ref)("return%j", invalid(field2, "integer|Long key"));
      break;
    case "bool":
      gen("if(!util.key2Re.test(%s))", ref)("return%j", invalid(field2, "boolean key"));
      break;
  }
  return gen;
}
function verifier$1(mtype) {
  var gen = util$a.codegen(["m"], mtype.name + "$verify")('if(typeof m!=="object"||m===null)')("return%j", "object expected");
  var oneofs = mtype.oneofsArray, seenFirstField = {};
  if (oneofs.length)
    gen("var p={}");
  for (var i = 0; i < mtype.fieldsArray.length; ++i) {
    var field2 = mtype._fieldsArray[i].resolve(), ref = "m" + util$a.safeProp(field2.name);
    if (field2.optional)
      gen("if(%s!=null&&m.hasOwnProperty(%j)){", ref, field2.name);
    if (field2.map) {
      gen("if(!util.isObject(%s))", ref)("return%j", invalid(field2, "object"))("var k=Object.keys(%s)", ref)("for(var i=0;i<k.length;++i){");
      genVerifyKey(gen, field2, "k[i]");
      genVerifyValue(gen, field2, i, ref + "[k[i]]")("}");
    } else if (field2.repeated) {
      gen("if(!Array.isArray(%s))", ref)("return%j", invalid(field2, "array"))("for(var i=0;i<%s.length;++i){", ref);
      genVerifyValue(gen, field2, i, ref + "[i]")("}");
    } else {
      if (field2.partOf) {
        var oneofProp = util$a.safeProp(field2.partOf.name);
        if (seenFirstField[field2.partOf.name] === 1)
          gen("if(p%s===1)", oneofProp)("return%j", field2.partOf.name + ": multiple values");
        seenFirstField[field2.partOf.name] = 1;
        gen("p%s=1", oneofProp);
      }
      genVerifyValue(gen, field2, i, ref);
    }
    if (field2.optional)
      gen("}");
  }
  return gen("return null");
}
var converter$1 = {};
(function(exports) {
  var converter2 = exports;
  var Enum2 = _enum, util2 = util$j.exports;
  function genValuePartial_fromObject(gen, field2, fieldIndex, prop) {
    if (field2.resolvedType) {
      if (field2.resolvedType instanceof Enum2) {
        gen("switch(d%s){", prop);
        for (var values = field2.resolvedType.values, keys = Object.keys(values), i = 0; i < keys.length; ++i) {
          if (field2.repeated && values[keys[i]] === field2.typeDefault)
            gen("default:");
          gen("case%j:", keys[i])("case %i:", values[keys[i]])("m%s=%j", prop, values[keys[i]])("break");
        }
        gen("}");
      } else
        gen('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field2.fullName + ": object expected")("m%s=types[%i].fromObject(d%s)", prop, fieldIndex, prop);
    } else {
      var isUnsigned = false;
      switch (field2.type) {
        case "double":
        case "float":
          gen("m%s=Number(d%s)", prop, prop);
          break;
        case "uint32":
        case "fixed32":
          gen("m%s=d%s>>>0", prop, prop);
          break;
        case "int32":
        case "sint32":
        case "sfixed32":
          gen("m%s=d%s|0", prop, prop);
          break;
        case "uint64":
          isUnsigned = true;
        case "int64":
        case "sint64":
        case "fixed64":
        case "sfixed64":
          gen("if(util.Long)")("(m%s=util.Long.fromValue(d%s)).unsigned=%j", prop, prop, isUnsigned)('else if(typeof d%s==="string")', prop)("m%s=parseInt(d%s,10)", prop, prop)('else if(typeof d%s==="number")', prop)("m%s=d%s", prop, prop)('else if(typeof d%s==="object")', prop)("m%s=new util.LongBits(d%s.low>>>0,d%s.high>>>0).toNumber(%s)", prop, prop, prop, isUnsigned ? "true" : "");
          break;
        case "bytes":
          gen('if(typeof d%s==="string")', prop)("util.base64.decode(d%s,m%s=util.newBuffer(util.base64.length(d%s)),0)", prop, prop, prop)("else if(d%s.length)", prop)("m%s=d%s", prop, prop);
          break;
        case "string":
          gen("m%s=String(d%s)", prop, prop);
          break;
        case "bool":
          gen("m%s=Boolean(d%s)", prop, prop);
          break;
      }
    }
    return gen;
  }
  converter2.fromObject = function fromObject3(mtype) {
    var fields = mtype.fieldsArray;
    var gen = util2.codegen(["d"], mtype.name + "$fromObject")("if(d instanceof this.ctor)")("return d");
    if (!fields.length)
      return gen("return new this.ctor");
    gen("var m=new this.ctor");
    for (var i = 0; i < fields.length; ++i) {
      var field2 = fields[i].resolve(), prop = util2.safeProp(field2.name);
      if (field2.map) {
        gen("if(d%s){", prop)('if(typeof d%s!=="object")', prop)("throw TypeError(%j)", field2.fullName + ": object expected")("m%s={}", prop)("for(var ks=Object.keys(d%s),i=0;i<ks.length;++i){", prop);
        genValuePartial_fromObject(gen, field2, i, prop + "[ks[i]]")("}")("}");
      } else if (field2.repeated) {
        gen("if(d%s){", prop)("if(!Array.isArray(d%s))", prop)("throw TypeError(%j)", field2.fullName + ": array expected")("m%s=[]", prop)("for(var i=0;i<d%s.length;++i){", prop);
        genValuePartial_fromObject(gen, field2, i, prop + "[i]")("}")("}");
      } else {
        if (!(field2.resolvedType instanceof Enum2))
          gen("if(d%s!=null){", prop);
        genValuePartial_fromObject(gen, field2, i, prop);
        if (!(field2.resolvedType instanceof Enum2))
          gen("}");
      }
    }
    return gen("return m");
  };
  function genValuePartial_toObject(gen, field2, fieldIndex, prop) {
    if (field2.resolvedType) {
      if (field2.resolvedType instanceof Enum2)
        gen("d%s=o.enums===String?types[%i].values[m%s]:m%s", prop, fieldIndex, prop, prop);
      else
        gen("d%s=types[%i].toObject(m%s,o)", prop, fieldIndex, prop);
    } else {
      var isUnsigned = false;
      switch (field2.type) {
        case "double":
        case "float":
          gen("d%s=o.json&&!isFinite(m%s)?String(m%s):m%s", prop, prop, prop, prop);
          break;
        case "uint64":
          isUnsigned = true;
        case "int64":
        case "sint64":
        case "fixed64":
        case "sfixed64":
          gen('if(typeof m%s==="number")', prop)("d%s=o.longs===String?String(m%s):m%s", prop, prop, prop)("else")("d%s=o.longs===String?util.Long.prototype.toString.call(m%s):o.longs===Number?new util.LongBits(m%s.low>>>0,m%s.high>>>0).toNumber(%s):m%s", prop, prop, prop, prop, isUnsigned ? "true" : "", prop);
          break;
        case "bytes":
          gen("d%s=o.bytes===String?util.base64.encode(m%s,0,m%s.length):o.bytes===Array?Array.prototype.slice.call(m%s):m%s", prop, prop, prop, prop, prop);
          break;
        default:
          gen("d%s=m%s", prop, prop);
          break;
      }
    }
    return gen;
  }
  converter2.toObject = function toObject4(mtype) {
    var fields = mtype.fieldsArray.slice().sort(util2.compareFieldsById);
    if (!fields.length)
      return util2.codegen()("return {}");
    var gen = util2.codegen(["m", "o"], mtype.name + "$toObject")("if(!o)")("o={}")("var d={}");
    var repeatedFields = [], mapFields = [], normalFields = [], i = 0;
    for (; i < fields.length; ++i)
      if (!fields[i].partOf)
        (fields[i].resolve().repeated ? repeatedFields : fields[i].map ? mapFields : normalFields).push(fields[i]);
    if (repeatedFields.length) {
      gen("if(o.arrays||o.defaults){");
      for (i = 0; i < repeatedFields.length; ++i)
        gen("d%s=[]", util2.safeProp(repeatedFields[i].name));
      gen("}");
    }
    if (mapFields.length) {
      gen("if(o.objects||o.defaults){");
      for (i = 0; i < mapFields.length; ++i)
        gen("d%s={}", util2.safeProp(mapFields[i].name));
      gen("}");
    }
    if (normalFields.length) {
      gen("if(o.defaults){");
      for (i = 0; i < normalFields.length; ++i) {
        var field2 = normalFields[i], prop = util2.safeProp(field2.name);
        if (field2.resolvedType instanceof Enum2)
          gen("d%s=o.enums===String?%j:%j", prop, field2.resolvedType.valuesById[field2.typeDefault], field2.typeDefault);
        else if (field2.long)
          gen("if(util.Long){")("var n=new util.Long(%i,%i,%j)", field2.typeDefault.low, field2.typeDefault.high, field2.typeDefault.unsigned)("d%s=o.longs===String?n.toString():o.longs===Number?n.toNumber():n", prop)("}else")("d%s=o.longs===String?%j:%i", prop, field2.typeDefault.toString(), field2.typeDefault.toNumber());
        else if (field2.bytes) {
          var arrayDefault = "[" + Array.prototype.slice.call(field2.typeDefault).join(",") + "]";
          gen("if(o.bytes===String)d%s=%j", prop, String.fromCharCode.apply(String, field2.typeDefault))("else{")("d%s=%s", prop, arrayDefault)("if(o.bytes!==Array)d%s=util.newBuffer(d%s)", prop, prop)("}");
        } else
          gen("d%s=%j", prop, field2.typeDefault);
      }
      gen("}");
    }
    var hasKs2 = false;
    for (i = 0; i < fields.length; ++i) {
      var field2 = fields[i], index2 = mtype._fieldsArray.indexOf(field2), prop = util2.safeProp(field2.name);
      if (field2.map) {
        if (!hasKs2) {
          hasKs2 = true;
          gen("var ks2");
        }
        gen("if(m%s&&(ks2=Object.keys(m%s)).length){", prop, prop)("d%s={}", prop)("for(var j=0;j<ks2.length;++j){");
        genValuePartial_toObject(gen, field2, index2, prop + "[ks2[j]]")("}");
      } else if (field2.repeated) {
        gen("if(m%s&&m%s.length){", prop, prop)("d%s=[]", prop)("for(var j=0;j<m%s.length;++j){", prop);
        genValuePartial_toObject(gen, field2, index2, prop + "[j]")("}");
      } else {
        gen("if(m%s!=null&&m.hasOwnProperty(%j)){", prop, field2.name);
        genValuePartial_toObject(gen, field2, index2, prop);
        if (field2.partOf)
          gen("if(o.oneofs)")("d%s=%j", util2.safeProp(field2.partOf.name), field2.name);
      }
      gen("}");
    }
    return gen("return d");
  };
})(converter$1);
var wrappers$1 = {};
(function(exports) {
  var wrappers2 = exports;
  var Message2 = message;
  wrappers2[".google.protobuf.Any"] = {
    fromObject: function(object2) {
      if (object2 && object2["@type"]) {
        var name2 = object2["@type"].substring(object2["@type"].lastIndexOf("/") + 1);
        var type2 = this.lookup(name2);
        if (type2) {
          var type_url = object2["@type"].charAt(0) === "." ? object2["@type"].substr(1) : object2["@type"];
          if (type_url.indexOf("/") === -1) {
            type_url = "/" + type_url;
          }
          return this.create({
            type_url,
            value: type2.encode(type2.fromObject(object2)).finish()
          });
        }
      }
      return this.fromObject(object2);
    },
    toObject: function(message2, options2) {
      var googleApi = "type.googleapis.com/";
      var prefix = "";
      var name2 = "";
      if (options2 && options2.json && message2.type_url && message2.value) {
        name2 = message2.type_url.substring(message2.type_url.lastIndexOf("/") + 1);
        prefix = message2.type_url.substring(0, message2.type_url.lastIndexOf("/") + 1);
        var type2 = this.lookup(name2);
        if (type2)
          message2 = type2.decode(message2.value);
      }
      if (!(message2 instanceof this.ctor) && message2 instanceof Message2) {
        var object2 = message2.$type.toObject(message2, options2);
        var messageName = message2.$type.fullName[0] === "." ? message2.$type.fullName.substr(1) : message2.$type.fullName;
        if (prefix === "") {
          prefix = googleApi;
        }
        name2 = prefix + messageName;
        object2["@type"] = name2;
        return object2;
      }
      return this.toObject(message2, options2);
    }
  };
})(wrappers$1);
var type = Type$3;
var Namespace$2 = namespace;
((Type$3.prototype = Object.create(Namespace$2.prototype)).constructor = Type$3).className = "Type";
var Enum$5 = _enum;
var OneOf$2 = oneof;
var Field$2 = field;
var MapField$1 = mapfield;
var Service$1 = service;
var Message = message;
var Reader = reader;
var Writer = writer;
var util$9 = util$j.exports;
var encoder$1 = encoder_1;
var decoder = decoder_1;
var verifier = verifier_1;
var converter = converter$1;
var wrappers = wrappers$1;
function Type$3(name2, options2) {
  Namespace$2.call(this, name2, options2);
  this.fields = {};
  this.oneofs = void 0;
  this.extensions = void 0;
  this.reserved = void 0;
  this.group = void 0;
  this._fieldsById = null;
  this._fieldsArray = null;
  this._oneofsArray = null;
  this._ctor = null;
}
Object.defineProperties(Type$3.prototype, {
  fieldsById: {
    get: function() {
      if (this._fieldsById)
        return this._fieldsById;
      this._fieldsById = {};
      for (var names = Object.keys(this.fields), i = 0; i < names.length; ++i) {
        var field2 = this.fields[names[i]], id = field2.id;
        if (this._fieldsById[id])
          throw Error("duplicate id " + id + " in " + this);
        this._fieldsById[id] = field2;
      }
      return this._fieldsById;
    }
  },
  fieldsArray: {
    get: function() {
      return this._fieldsArray || (this._fieldsArray = util$9.toArray(this.fields));
    }
  },
  oneofsArray: {
    get: function() {
      return this._oneofsArray || (this._oneofsArray = util$9.toArray(this.oneofs));
    }
  },
  ctor: {
    get: function() {
      return this._ctor || (this.ctor = Type$3.generateConstructor(this)());
    },
    set: function(ctor) {
      var prototype = ctor.prototype;
      if (!(prototype instanceof Message)) {
        (ctor.prototype = new Message()).constructor = ctor;
        util$9.merge(ctor.prototype, prototype);
      }
      ctor.$type = ctor.prototype.$type = this;
      util$9.merge(ctor, Message, true);
      this._ctor = ctor;
      var i = 0;
      for (; i < this.fieldsArray.length; ++i)
        this._fieldsArray[i].resolve();
      var ctorProperties = {};
      for (i = 0; i < this.oneofsArray.length; ++i)
        ctorProperties[this._oneofsArray[i].resolve().name] = {
          get: util$9.oneOfGetter(this._oneofsArray[i].oneof),
          set: util$9.oneOfSetter(this._oneofsArray[i].oneof)
        };
      if (i)
        Object.defineProperties(ctor.prototype, ctorProperties);
    }
  }
});
Type$3.generateConstructor = function generateConstructor(mtype) {
  var gen = util$9.codegen(["p"], mtype.name);
  for (var i = 0, field2; i < mtype.fieldsArray.length; ++i)
    if ((field2 = mtype._fieldsArray[i]).map)
      gen("this%s={}", util$9.safeProp(field2.name));
    else if (field2.repeated)
      gen("this%s=[]", util$9.safeProp(field2.name));
  return gen("if(p)for(var ks=Object.keys(p),i=0;i<ks.length;++i)if(p[ks[i]]!=null)")("this[ks[i]]=p[ks[i]]");
};
function clearCache(type2) {
  type2._fieldsById = type2._fieldsArray = type2._oneofsArray = null;
  delete type2.encode;
  delete type2.decode;
  delete type2.verify;
  return type2;
}
Type$3.fromJSON = function fromJSON8(name2, json) {
  var type2 = new Type$3(name2, json.options);
  type2.extensions = json.extensions;
  type2.reserved = json.reserved;
  var names = Object.keys(json.fields), i = 0;
  for (; i < names.length; ++i)
    type2.add((typeof json.fields[names[i]].keyType !== "undefined" ? MapField$1.fromJSON : Field$2.fromJSON)(names[i], json.fields[names[i]]));
  if (json.oneofs)
    for (names = Object.keys(json.oneofs), i = 0; i < names.length; ++i)
      type2.add(OneOf$2.fromJSON(names[i], json.oneofs[names[i]]));
  if (json.nested)
    for (names = Object.keys(json.nested), i = 0; i < names.length; ++i) {
      var nested2 = json.nested[names[i]];
      type2.add((nested2.id !== void 0 ? Field$2.fromJSON : nested2.fields !== void 0 ? Type$3.fromJSON : nested2.values !== void 0 ? Enum$5.fromJSON : nested2.methods !== void 0 ? Service$1.fromJSON : Namespace$2.fromJSON)(names[i], nested2));
    }
  if (json.extensions && json.extensions.length)
    type2.extensions = json.extensions;
  if (json.reserved && json.reserved.length)
    type2.reserved = json.reserved;
  if (json.group)
    type2.group = true;
  if (json.comment)
    type2.comment = json.comment;
  return type2;
};
Type$3.prototype.toJSON = function toJSON8(toJSONOptions) {
  var inherited = Namespace$2.prototype.toJSON.call(this, toJSONOptions);
  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
  return util$9.toObject([
    "options",
    inherited && inherited.options || void 0,
    "oneofs",
    Namespace$2.arrayToJSON(this.oneofsArray, toJSONOptions),
    "fields",
    Namespace$2.arrayToJSON(this.fieldsArray.filter(function(obj) {
      return !obj.declaringField;
    }), toJSONOptions) || {},
    "extensions",
    this.extensions && this.extensions.length ? this.extensions : void 0,
    "reserved",
    this.reserved && this.reserved.length ? this.reserved : void 0,
    "group",
    this.group || void 0,
    "nested",
    inherited && inherited.nested || void 0,
    "comment",
    keepComments ? this.comment : void 0
  ]);
};
Type$3.prototype.resolveAll = function resolveAll3() {
  var fields = this.fieldsArray, i = 0;
  while (i < fields.length)
    fields[i++].resolve();
  var oneofs = this.oneofsArray;
  i = 0;
  while (i < oneofs.length)
    oneofs[i++].resolve();
  return Namespace$2.prototype.resolveAll.call(this);
};
Type$3.prototype.get = function get3(name2) {
  return this.fields[name2] || this.oneofs && this.oneofs[name2] || this.nested && this.nested[name2] || null;
};
Type$3.prototype.add = function add4(object2) {
  if (this.get(object2.name))
    throw Error("duplicate name '" + object2.name + "' in " + this);
  if (object2 instanceof Field$2 && object2.extend === void 0) {
    if (this._fieldsById ? this._fieldsById[object2.id] : this.fieldsById[object2.id])
      throw Error("duplicate id " + object2.id + " in " + this);
    if (this.isReservedId(object2.id))
      throw Error("id " + object2.id + " is reserved in " + this);
    if (this.isReservedName(object2.name))
      throw Error("name '" + object2.name + "' is reserved in " + this);
    if (object2.parent)
      object2.parent.remove(object2);
    this.fields[object2.name] = object2;
    object2.message = this;
    object2.onAdd(this);
    return clearCache(this);
  }
  if (object2 instanceof OneOf$2) {
    if (!this.oneofs)
      this.oneofs = {};
    this.oneofs[object2.name] = object2;
    object2.onAdd(this);
    return clearCache(this);
  }
  return Namespace$2.prototype.add.call(this, object2);
};
Type$3.prototype.remove = function remove4(object2) {
  if (object2 instanceof Field$2 && object2.extend === void 0) {
    if (!this.fields || this.fields[object2.name] !== object2)
      throw Error(object2 + " is not a member of " + this);
    delete this.fields[object2.name];
    object2.parent = null;
    object2.onRemove(this);
    return clearCache(this);
  }
  if (object2 instanceof OneOf$2) {
    if (!this.oneofs || this.oneofs[object2.name] !== object2)
      throw Error(object2 + " is not a member of " + this);
    delete this.oneofs[object2.name];
    object2.parent = null;
    object2.onRemove(this);
    return clearCache(this);
  }
  return Namespace$2.prototype.remove.call(this, object2);
};
Type$3.prototype.isReservedId = function isReservedId2(id) {
  return Namespace$2.isReservedId(this.reserved, id);
};
Type$3.prototype.isReservedName = function isReservedName2(name2) {
  return Namespace$2.isReservedName(this.reserved, name2);
};
Type$3.prototype.create = function create6(properties) {
  return new this.ctor(properties);
};
Type$3.prototype.setup = function setup2() {
  var fullName = this.fullName, types22 = [];
  for (var i = 0; i < this.fieldsArray.length; ++i)
    types22.push(this._fieldsArray[i].resolve().resolvedType);
  this.encode = encoder$1(this)({
    Writer,
    types: types22,
    util: util$9
  });
  this.decode = decoder(this)({
    Reader,
    types: types22,
    util: util$9
  });
  this.verify = verifier(this)({
    types: types22,
    util: util$9
  });
  this.fromObject = converter.fromObject(this)({
    types: types22,
    util: util$9
  });
  this.toObject = converter.toObject(this)({
    types: types22,
    util: util$9
  });
  var wrapper = wrappers[fullName];
  if (wrapper) {
    var originalThis = Object.create(this);
    originalThis.fromObject = this.fromObject;
    this.fromObject = wrapper.fromObject.bind(originalThis);
    originalThis.toObject = this.toObject;
    this.toObject = wrapper.toObject.bind(originalThis);
  }
  return this;
};
Type$3.prototype.encode = function encode_setup(message2, writer2) {
  return this.setup().encode(message2, writer2);
};
Type$3.prototype.encodeDelimited = function encodeDelimited2(message2, writer2) {
  return this.encode(message2, writer2 && writer2.len ? writer2.fork() : writer2).ldelim();
};
Type$3.prototype.decode = function decode_setup(reader2, length2) {
  return this.setup().decode(reader2, length2);
};
Type$3.prototype.decodeDelimited = function decodeDelimited2(reader2) {
  if (!(reader2 instanceof Reader))
    reader2 = Reader.create(reader2);
  return this.decode(reader2, reader2.uint32());
};
Type$3.prototype.verify = function verify_setup(message2) {
  return this.setup().verify(message2);
};
Type$3.prototype.fromObject = function fromObject2(object2) {
  return this.setup().fromObject(object2);
};
Type$3.prototype.toObject = function toObject2(message2, options2) {
  return this.setup().toObject(message2, options2);
};
Type$3.d = function decorateType(typeName) {
  return function typeDecorator(target) {
    util$9.decorateType(target, typeName);
  };
};
var root = Root$2;
var Namespace$1 = namespace;
((Root$2.prototype = Object.create(Namespace$1.prototype)).constructor = Root$2).className = "Root";
var Field$1 = field;
var Enum$4 = _enum;
var OneOf$1 = oneof;
var util$8 = util$j.exports;
var Type$2;
var parse$1;
var common$1;
function Root$2(options2) {
  Namespace$1.call(this, "", options2);
  this.deferred = [];
  this.files = [];
}
Root$2.fromJSON = function fromJSON9(json, root2) {
  if (!root2)
    root2 = new Root$2();
  if (json.options)
    root2.setOptions(json.options);
  return root2.addJSON(json.nested);
};
Root$2.prototype.resolvePath = util$8.path.resolve;
Root$2.prototype.fetch = util$8.fetch;
function SYNC() {
}
Root$2.prototype.load = function load2(filename, options2, callback) {
  if (typeof options2 === "function") {
    callback = options2;
    options2 = void 0;
  }
  var self2 = this;
  if (!callback)
    return util$8.asPromise(load2, self2, filename, options2);
  var sync = callback === SYNC;
  function finish2(err, root2) {
    if (!callback)
      return;
    var cb = callback;
    callback = null;
    if (sync)
      throw err;
    cb(err, root2);
  }
  function getBundledFileName(filename2) {
    var idx = filename2.lastIndexOf("google/protobuf/");
    if (idx > -1) {
      var altname = filename2.substring(idx);
      if (altname in common$1)
        return altname;
    }
    return null;
  }
  function process2(filename2, source) {
    try {
      if (util$8.isString(source) && source.charAt(0) === "{")
        source = JSON.parse(source);
      if (!util$8.isString(source))
        self2.setOptions(source.options).addJSON(source.nested);
      else {
        parse$1.filename = filename2;
        var parsed = parse$1(source, self2, options2), resolved2, i2 = 0;
        if (parsed.imports) {
          for (; i2 < parsed.imports.length; ++i2)
            if (resolved2 = getBundledFileName(parsed.imports[i2]) || self2.resolvePath(filename2, parsed.imports[i2]))
              fetch2(resolved2);
        }
        if (parsed.weakImports) {
          for (i2 = 0; i2 < parsed.weakImports.length; ++i2)
            if (resolved2 = getBundledFileName(parsed.weakImports[i2]) || self2.resolvePath(filename2, parsed.weakImports[i2]))
              fetch2(resolved2, true);
        }
      }
    } catch (err) {
      finish2(err);
    }
    if (!sync && !queued)
      finish2(null, self2);
  }
  function fetch2(filename2, weak) {
    if (self2.files.indexOf(filename2) > -1)
      return;
    self2.files.push(filename2);
    if (filename2 in common$1) {
      if (sync)
        process2(filename2, common$1[filename2]);
      else {
        ++queued;
        setTimeout(function() {
          --queued;
          process2(filename2, common$1[filename2]);
        });
      }
      return;
    }
    if (sync) {
      var source;
      try {
        source = util$8.fs.readFileSync(filename2).toString("utf8");
      } catch (err) {
        if (!weak)
          finish2(err);
        return;
      }
      process2(filename2, source);
    } else {
      ++queued;
      self2.fetch(filename2, function(err, source2) {
        --queued;
        if (!callback)
          return;
        if (err) {
          if (!weak)
            finish2(err);
          else if (!queued)
            finish2(null, self2);
          return;
        }
        process2(filename2, source2);
      });
    }
  }
  var queued = 0;
  if (util$8.isString(filename))
    filename = [filename];
  for (var i = 0, resolved; i < filename.length; ++i)
    if (resolved = self2.resolvePath("", filename[i]))
      fetch2(resolved);
  if (sync)
    return self2;
  if (!queued)
    finish2(null, self2);
  return void 0;
};
Root$2.prototype.loadSync = function loadSync2(filename, options2) {
  if (!util$8.isNode)
    throw Error("not supported");
  return this.load(filename, options2, SYNC);
};
Root$2.prototype.resolveAll = function resolveAll4() {
  if (this.deferred.length)
    throw Error("unresolvable extensions: " + this.deferred.map(function(field2) {
      return "'extend " + field2.extend + "' in " + field2.parent.fullName;
    }).join(", "));
  return Namespace$1.prototype.resolveAll.call(this);
};
var exposeRe = /^[A-Z]/;
function tryHandleExtension(root2, field2) {
  var extendedType = field2.parent.lookup(field2.extend);
  if (extendedType) {
    var sisterField = new Field$1(field2.fullName, field2.id, field2.type, field2.rule, void 0, field2.options);
    sisterField.declaringField = field2;
    field2.extensionField = sisterField;
    extendedType.add(sisterField);
    return true;
  }
  return false;
}
Root$2.prototype._handleAdd = function _handleAdd(object2) {
  if (object2 instanceof Field$1) {
    if (object2.extend !== void 0 && !object2.extensionField) {
      if (!tryHandleExtension(this, object2))
        this.deferred.push(object2);
    }
  } else if (object2 instanceof Enum$4) {
    if (exposeRe.test(object2.name))
      object2.parent[object2.name] = object2.values;
  } else if (!(object2 instanceof OneOf$1)) {
    if (object2 instanceof Type$2)
      for (var i = 0; i < this.deferred.length; )
        if (tryHandleExtension(this, this.deferred[i]))
          this.deferred.splice(i, 1);
        else
          ++i;
    for (var j = 0; j < object2.nestedArray.length; ++j)
      this._handleAdd(object2._nestedArray[j]);
    if (exposeRe.test(object2.name))
      object2.parent[object2.name] = object2;
  }
};
Root$2.prototype._handleRemove = function _handleRemove(object2) {
  if (object2 instanceof Field$1) {
    if (object2.extend !== void 0) {
      if (object2.extensionField) {
        object2.extensionField.parent.remove(object2.extensionField);
        object2.extensionField = null;
      } else {
        var index2 = this.deferred.indexOf(object2);
        if (index2 > -1)
          this.deferred.splice(index2, 1);
      }
    }
  } else if (object2 instanceof Enum$4) {
    if (exposeRe.test(object2.name))
      delete object2.parent[object2.name];
  } else if (object2 instanceof Namespace$1) {
    for (var i = 0; i < object2.nestedArray.length; ++i)
      this._handleRemove(object2._nestedArray[i]);
    if (exposeRe.test(object2.name))
      delete object2.parent[object2.name];
  }
};
Root$2._configure = function(Type_, parse_, common_) {
  Type$2 = Type_;
  parse$1 = parse_;
  common$1 = common_;
};
var util$7 = util$j.exports = minimal;
var roots = roots$1;
var Type$1;
var Enum$3;
util$7.codegen = codegen_1;
util$7.fetch = fetch_1;
util$7.path = path$2;
util$7.fs = util$7.inquire("fs");
util$7.toArray = function toArray(object2) {
  if (object2) {
    var keys = Object.keys(object2), array = new Array(keys.length), index2 = 0;
    while (index2 < keys.length)
      array[index2] = object2[keys[index2++]];
    return array;
  }
  return [];
};
util$7.toObject = function toObject3(array) {
  var object2 = {}, index2 = 0;
  while (index2 < array.length) {
    var key = array[index2++], val = array[index2++];
    if (val !== void 0)
      object2[key] = val;
  }
  return object2;
};
var safePropBackslashRe = /\\/g;
var safePropQuoteRe = /"/g;
util$7.isReserved = function isReserved(name2) {
  return /^(?:do|if|in|for|let|new|try|var|case|else|enum|eval|false|null|this|true|void|with|break|catch|class|const|super|throw|while|yield|delete|export|import|public|return|static|switch|typeof|default|extends|finally|package|private|continue|debugger|function|arguments|interface|protected|implements|instanceof)$/.test(name2);
};
util$7.safeProp = function safeProp2(prop) {
  if (!/^[$\w_]+$/.test(prop) || util$7.isReserved(prop))
    return '["' + prop.replace(safePropBackslashRe, "\\\\").replace(safePropQuoteRe, '\\"') + '"]';
  return "." + prop;
};
util$7.ucFirst = function ucFirst(str) {
  return str.charAt(0).toUpperCase() + str.substring(1);
};
var camelCaseRe = /_([a-z])/g;
util$7.camelCase = function camelCase2(str) {
  return str.substring(0, 1) + str.substring(1).replace(camelCaseRe, function($0, $1) {
    return $1.toUpperCase();
  });
};
util$7.compareFieldsById = function compareFieldsById(a, b) {
  return a.id - b.id;
};
util$7.decorateType = function decorateType2(ctor, typeName) {
  if (ctor.$type) {
    if (typeName && ctor.$type.name !== typeName) {
      util$7.decorateRoot.remove(ctor.$type);
      ctor.$type.name = typeName;
      util$7.decorateRoot.add(ctor.$type);
    }
    return ctor.$type;
  }
  if (!Type$1)
    Type$1 = type;
  var type$1 = new Type$1(typeName || ctor.name);
  util$7.decorateRoot.add(type$1);
  type$1.ctor = ctor;
  Object.defineProperty(ctor, "$type", { value: type$1, enumerable: false });
  Object.defineProperty(ctor.prototype, "$type", { value: type$1, enumerable: false });
  return type$1;
};
var decorateEnumIndex = 0;
util$7.decorateEnum = function decorateEnum(object2) {
  if (object2.$type)
    return object2.$type;
  if (!Enum$3)
    Enum$3 = _enum;
  var enm = new Enum$3("Enum" + decorateEnumIndex++, object2);
  util$7.decorateRoot.add(enm);
  Object.defineProperty(object2, "$type", { value: enm, enumerable: false });
  return enm;
};
util$7.setProperty = function setProperty(dst, path2, value) {
  function setProp(dst2, path3, value2) {
    var part = path3.shift();
    if (path3.length > 0) {
      dst2[part] = setProp(dst2[part] || {}, path3, value2);
    } else {
      var prevValue = dst2[part];
      if (prevValue)
        value2 = [].concat(prevValue).concat(value2);
      dst2[part] = value2;
    }
    return dst2;
  }
  if (typeof dst !== "object")
    throw TypeError("dst must be an object");
  if (!path2)
    throw TypeError("path must be specified");
  path2 = path2.split(".");
  return setProp(dst, path2, value);
};
Object.defineProperty(util$7, "decorateRoot", {
  get: function() {
    return roots["decorated"] || (roots["decorated"] = new root());
  }
});
var object = ReflectionObject$1;
ReflectionObject$1.className = "ReflectionObject";
var util$6 = util$j.exports;
var Root$1;
function ReflectionObject$1(name2, options2) {
  if (!util$6.isString(name2))
    throw TypeError("name must be a string");
  if (options2 && !util$6.isObject(options2))
    throw TypeError("options must be an object");
  this.options = options2;
  this.parsedOptions = null;
  this.name = name2;
  this.parent = null;
  this.resolved = false;
  this.comment = null;
  this.filename = null;
}
Object.defineProperties(ReflectionObject$1.prototype, {
  root: {
    get: function() {
      var ptr = this;
      while (ptr.parent !== null)
        ptr = ptr.parent;
      return ptr;
    }
  },
  fullName: {
    get: function() {
      var path2 = [this.name], ptr = this.parent;
      while (ptr) {
        path2.unshift(ptr.name);
        ptr = ptr.parent;
      }
      return path2.join(".");
    }
  }
});
ReflectionObject$1.prototype.toJSON = function toJSON9() {
  throw Error();
};
ReflectionObject$1.prototype.onAdd = function onAdd2(parent) {
  if (this.parent && this.parent !== parent)
    this.parent.remove(this);
  this.parent = parent;
  this.resolved = false;
  var root2 = parent.root;
  if (root2 instanceof Root$1)
    root2._handleAdd(this);
};
ReflectionObject$1.prototype.onRemove = function onRemove2(parent) {
  var root2 = parent.root;
  if (root2 instanceof Root$1)
    root2._handleRemove(this);
  this.parent = null;
  this.resolved = false;
};
ReflectionObject$1.prototype.resolve = function resolve5() {
  if (this.resolved)
    return this;
  if (this.root instanceof Root$1)
    this.resolved = true;
  return this;
};
ReflectionObject$1.prototype.getOption = function getOption(name2) {
  if (this.options)
    return this.options[name2];
  return void 0;
};
ReflectionObject$1.prototype.setOption = function setOption2(name2, value, ifNotSet) {
  if (!ifNotSet || !this.options || this.options[name2] === void 0)
    (this.options || (this.options = {}))[name2] = value;
  return this;
};
ReflectionObject$1.prototype.setParsedOption = function setParsedOption(name2, value, propName) {
  if (!this.parsedOptions) {
    this.parsedOptions = [];
  }
  var parsedOptions = this.parsedOptions;
  if (propName) {
    var opt = parsedOptions.find(function(opt2) {
      return Object.prototype.hasOwnProperty.call(opt2, name2);
    });
    if (opt) {
      var newValue = opt[name2];
      util$6.setProperty(newValue, propName, value);
    } else {
      opt = {};
      opt[name2] = util$6.setProperty({}, propName, value);
      parsedOptions.push(opt);
    }
  } else {
    var newOpt = {};
    newOpt[name2] = value;
    parsedOptions.push(newOpt);
  }
  return this;
};
ReflectionObject$1.prototype.setOptions = function setOptions(options2, ifNotSet) {
  if (options2)
    for (var keys = Object.keys(options2), i = 0; i < keys.length; ++i)
      this.setOption(keys[i], options2[keys[i]], ifNotSet);
  return this;
};
ReflectionObject$1.prototype.toString = function toString2() {
  var className = this.constructor.className, fullName = this.fullName;
  if (fullName.length)
    return className + " " + fullName;
  return className;
};
ReflectionObject$1._configure = function(Root_) {
  Root$1 = Root_;
};
var _enum = Enum$2;
var ReflectionObject = object;
((Enum$2.prototype = Object.create(ReflectionObject.prototype)).constructor = Enum$2).className = "Enum";
var Namespace = namespace;
var util$5 = util$j.exports;
function Enum$2(name2, values, options2, comment, comments) {
  ReflectionObject.call(this, name2, options2);
  if (values && typeof values !== "object")
    throw TypeError("values must be an object");
  this.valuesById = {};
  this.values = Object.create(this.valuesById);
  this.comment = comment;
  this.comments = comments || {};
  this.reserved = void 0;
  if (values) {
    for (var keys = Object.keys(values), i = 0; i < keys.length; ++i)
      if (typeof values[keys[i]] === "number")
        this.valuesById[this.values[keys[i]] = values[keys[i]]] = keys[i];
  }
}
Enum$2.fromJSON = function fromJSON10(name2, json) {
  var enm = new Enum$2(name2, json.values, json.options, json.comment, json.comments);
  enm.reserved = json.reserved;
  return enm;
};
Enum$2.prototype.toJSON = function toJSON10(toJSONOptions) {
  var keepComments = toJSONOptions ? Boolean(toJSONOptions.keepComments) : false;
  return util$5.toObject([
    "options",
    this.options,
    "values",
    this.values,
    "reserved",
    this.reserved && this.reserved.length ? this.reserved : void 0,
    "comment",
    keepComments ? this.comment : void 0,
    "comments",
    keepComments ? this.comments : void 0
  ]);
};
Enum$2.prototype.add = function add5(name2, id, comment) {
  if (!util$5.isString(name2))
    throw TypeError("name must be a string");
  if (!util$5.isInteger(id))
    throw TypeError("id must be an integer");
  if (this.values[name2] !== void 0)
    throw Error("duplicate name '" + name2 + "' in " + this);
  if (this.isReservedId(id))
    throw Error("id " + id + " is reserved in " + this);
  if (this.isReservedName(name2))
    throw Error("name '" + name2 + "' is reserved in " + this);
  if (this.valuesById[id] !== void 0) {
    if (!(this.options && this.options.allow_alias))
      throw Error("duplicate id " + id + " in " + this);
    this.values[name2] = id;
  } else
    this.valuesById[this.values[name2] = id] = name2;
  this.comments[name2] = comment || null;
  return this;
};
Enum$2.prototype.remove = function remove5(name2) {
  if (!util$5.isString(name2))
    throw TypeError("name must be a string");
  var val = this.values[name2];
  if (val == null)
    throw Error("name '" + name2 + "' does not exist in " + this);
  delete this.valuesById[val];
  delete this.values[name2];
  delete this.comments[name2];
  return this;
};
Enum$2.prototype.isReservedId = function isReservedId3(id) {
  return Namespace.isReservedId(this.reserved, id);
};
Enum$2.prototype.isReservedName = function isReservedName3(name2) {
  return Namespace.isReservedName(this.reserved, name2);
};
var encoder_1 = encoder;
var Enum$1 = _enum;
var types$1 = types$5;
var util$4 = util$j.exports;
function genTypePartial(gen, field2, fieldIndex, ref) {
  return field2.resolvedType.group ? gen("types[%i].encode(%s,w.uint32(%i)).uint32(%i)", fieldIndex, ref, (field2.id << 3 | 3) >>> 0, (field2.id << 3 | 4) >>> 0) : gen("types[%i].encode(%s,w.uint32(%i).fork()).ldelim()", fieldIndex, ref, (field2.id << 3 | 2) >>> 0);
}
function encoder(mtype) {
  var gen = util$4.codegen(["m", "w"], mtype.name + "$encode")("if(!w)")("w=Writer.create()");
  var i, ref;
  var fields = mtype.fieldsArray.slice().sort(util$4.compareFieldsById);
  for (var i = 0; i < fields.length; ++i) {
    var field2 = fields[i].resolve(), index2 = mtype._fieldsArray.indexOf(field2), type2 = field2.resolvedType instanceof Enum$1 ? "int32" : field2.type, wireType = types$1.basic[type2];
    ref = "m" + util$4.safeProp(field2.name);
    if (field2.map) {
      gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j)){", ref, field2.name)("for(var ks=Object.keys(%s),i=0;i<ks.length;++i){", ref)("w.uint32(%i).fork().uint32(%i).%s(ks[i])", (field2.id << 3 | 2) >>> 0, 8 | types$1.mapKey[field2.keyType], field2.keyType);
      if (wireType === void 0)
        gen("types[%i].encode(%s[ks[i]],w.uint32(18).fork()).ldelim().ldelim()", index2, ref);
      else
        gen(".uint32(%i).%s(%s[ks[i]]).ldelim()", 16 | wireType, type2, ref);
      gen("}")("}");
    } else if (field2.repeated) {
      gen("if(%s!=null&&%s.length){", ref, ref);
      if (field2.packed && types$1.packed[type2] !== void 0) {
        gen("w.uint32(%i).fork()", (field2.id << 3 | 2) >>> 0)("for(var i=0;i<%s.length;++i)", ref)("w.%s(%s[i])", type2, ref)("w.ldelim()");
      } else {
        gen("for(var i=0;i<%s.length;++i)", ref);
        if (wireType === void 0)
          genTypePartial(gen, field2, index2, ref + "[i]");
        else
          gen("w.uint32(%i).%s(%s[i])", (field2.id << 3 | wireType) >>> 0, type2, ref);
      }
      gen("}");
    } else {
      if (field2.optional)
        gen("if(%s!=null&&Object.hasOwnProperty.call(m,%j))", ref, field2.name);
      if (wireType === void 0)
        genTypePartial(gen, field2, index2, ref);
      else
        gen("w.uint32(%i).%s(%s)", (field2.id << 3 | wireType) >>> 0, type2, ref);
    }
  }
  return gen("return w");
}
var protobuf$1 = indexLight.exports = indexMinimal;
protobuf$1.build = "light";
function load$1(filename, root2, callback) {
  if (typeof root2 === "function") {
    callback = root2;
    root2 = new protobuf$1.Root();
  } else if (!root2)
    root2 = new protobuf$1.Root();
  return root2.load(filename, callback);
}
protobuf$1.load = load$1;
function loadSync$1(filename, root2) {
  if (!root2)
    root2 = new protobuf$1.Root();
  return root2.loadSync(filename);
}
protobuf$1.loadSync = loadSync$1;
protobuf$1.encoder = encoder_1;
protobuf$1.decoder = decoder_1;
protobuf$1.verifier = verifier_1;
protobuf$1.converter = converter$1;
protobuf$1.ReflectionObject = object;
protobuf$1.Namespace = namespace;
protobuf$1.Root = root;
protobuf$1.Enum = _enum;
protobuf$1.Type = type;
protobuf$1.Field = field;
protobuf$1.OneOf = oneof;
protobuf$1.MapField = mapfield;
protobuf$1.Service = service;
protobuf$1.Method = method;
protobuf$1.Message = message;
protobuf$1.wrappers = wrappers$1;
protobuf$1.types = types$5;
protobuf$1.util = util$j.exports;
protobuf$1.ReflectionObject._configure(protobuf$1.Root);
protobuf$1.Namespace._configure(protobuf$1.Type, protobuf$1.Service, protobuf$1.Enum);
protobuf$1.Root._configure(protobuf$1.Type);
protobuf$1.Field._configure(protobuf$1.Type);
var tokenize_1 = tokenize$1;
var delimRe = /[\s{}=;:[\],'"()<>]/g;
var stringDoubleRe = /(?:"([^"\\]*(?:\\.[^"\\]*)*)")/g;
var stringSingleRe = /(?:'([^'\\]*(?:\\.[^'\\]*)*)')/g;
var setCommentRe = /^ *[*/]+ */;
var setCommentAltRe = /^\s*\*?\/*/;
var setCommentSplitRe = /\n/g;
var whitespaceRe = /\s/;
var unescapeRe = /\\(.?)/g;
var unescapeMap = {
  "0": "\0",
  "r": "\r",
  "n": "\n",
  "t": "	"
};
function unescape2(str) {
  return str.replace(unescapeRe, function($0, $1) {
    switch ($1) {
      case "\\":
      case "":
        return $1;
      default:
        return unescapeMap[$1] || "";
    }
  });
}
tokenize$1.unescape = unescape2;
function tokenize$1(source, alternateCommentMode) {
  source = source.toString();
  var offset = 0, length2 = source.length, line = 1, commentType = null, commentText = null, commentLine = 0, commentLineEmpty = false, commentIsLeading = false;
  var stack = [];
  var stringDelim = null;
  function illegal(subject) {
    return Error("illegal " + subject + " (line " + line + ")");
  }
  function readString() {
    var re = stringDelim === "'" ? stringSingleRe : stringDoubleRe;
    re.lastIndex = offset - 1;
    var match = re.exec(source);
    if (!match)
      throw illegal("string");
    offset = re.lastIndex;
    push2(stringDelim);
    stringDelim = null;
    return unescape2(match[1]);
  }
  function charAt(pos) {
    return source.charAt(pos);
  }
  function setComment(start, end2, isLeading) {
    commentType = source.charAt(start++);
    commentLine = line;
    commentLineEmpty = false;
    commentIsLeading = isLeading;
    var lookback;
    if (alternateCommentMode) {
      lookback = 2;
    } else {
      lookback = 3;
    }
    var commentOffset = start - lookback, c;
    do {
      if (--commentOffset < 0 || (c = source.charAt(commentOffset)) === "\n") {
        commentLineEmpty = true;
        break;
      }
    } while (c === " " || c === "	");
    var lines = source.substring(start, end2).split(setCommentSplitRe);
    for (var i = 0; i < lines.length; ++i)
      lines[i] = lines[i].replace(alternateCommentMode ? setCommentAltRe : setCommentRe, "").trim();
    commentText = lines.join("\n").trim();
  }
  function isDoubleSlashCommentLine(startOffset) {
    var endOffset = findEndOfLine(startOffset);
    var lineText = source.substring(startOffset, endOffset);
    var isComment = /^\s*\/{1,2}/.test(lineText);
    return isComment;
  }
  function findEndOfLine(cursor) {
    var endOffset = cursor;
    while (endOffset < length2 && charAt(endOffset) !== "\n") {
      endOffset++;
    }
    return endOffset;
  }
  function next() {
    if (stack.length > 0)
      return stack.shift();
    if (stringDelim)
      return readString();
    var repeat, prev, curr, start, isDoc, isLeadingComment = offset === 0;
    do {
      if (offset === length2)
        return null;
      repeat = false;
      while (whitespaceRe.test(curr = charAt(offset))) {
        if (curr === "\n") {
          isLeadingComment = true;
          ++line;
        }
        if (++offset === length2)
          return null;
      }
      if (charAt(offset) === "/") {
        if (++offset === length2) {
          throw illegal("comment");
        }
        if (charAt(offset) === "/") {
          if (!alternateCommentMode) {
            isDoc = charAt(start = offset + 1) === "/";
            while (charAt(++offset) !== "\n") {
              if (offset === length2) {
                return null;
              }
            }
            ++offset;
            if (isDoc) {
              setComment(start, offset - 1, isLeadingComment);
            }
            ++line;
            repeat = true;
          } else {
            start = offset;
            isDoc = false;
            if (isDoubleSlashCommentLine(offset)) {
              isDoc = true;
              do {
                offset = findEndOfLine(offset);
                if (offset === length2) {
                  break;
                }
                offset++;
              } while (isDoubleSlashCommentLine(offset));
            } else {
              offset = Math.min(length2, findEndOfLine(offset) + 1);
            }
            if (isDoc) {
              setComment(start, offset, isLeadingComment);
            }
            line++;
            repeat = true;
          }
        } else if ((curr = charAt(offset)) === "*") {
          start = offset + 1;
          isDoc = alternateCommentMode || charAt(start) === "*";
          do {
            if (curr === "\n") {
              ++line;
            }
            if (++offset === length2) {
              throw illegal("comment");
            }
            prev = curr;
            curr = charAt(offset);
          } while (prev !== "*" || curr !== "/");
          ++offset;
          if (isDoc) {
            setComment(start, offset - 2, isLeadingComment);
          }
          repeat = true;
        } else {
          return "/";
        }
      }
    } while (repeat);
    var end2 = offset;
    delimRe.lastIndex = 0;
    var delim = delimRe.test(charAt(end2++));
    if (!delim)
      while (end2 < length2 && !delimRe.test(charAt(end2)))
        ++end2;
    var token = source.substring(offset, offset = end2);
    if (token === '"' || token === "'")
      stringDelim = token;
    return token;
  }
  function push2(token) {
    stack.push(token);
  }
  function peek() {
    if (!stack.length) {
      var token = next();
      if (token === null)
        return null;
      push2(token);
    }
    return stack[0];
  }
  function skip2(expected, optional) {
    var actual = peek(), equals = actual === expected;
    if (equals) {
      next();
      return true;
    }
    if (!optional)
      throw illegal("token '" + actual + "', '" + expected + "' expected");
    return false;
  }
  function cmnt(trailingLine) {
    var ret = null;
    if (trailingLine === void 0) {
      if (commentLine === line - 1 && (alternateCommentMode || commentType === "*" || commentLineEmpty)) {
        ret = commentIsLeading ? commentText : null;
      }
    } else {
      if (commentLine < trailingLine) {
        peek();
      }
      if (commentLine === trailingLine && !commentLineEmpty && (alternateCommentMode || commentType === "/")) {
        ret = commentIsLeading ? null : commentText;
      }
    }
    return ret;
  }
  return Object.defineProperty({
    next,
    peek,
    push: push2,
    skip: skip2,
    cmnt
  }, "line", {
    get: function() {
      return line;
    }
  });
}
var parse_1 = parse;
parse.filename = null;
parse.defaults = { keepCase: false };
var tokenize = tokenize_1;
var Root = root;
var Type = type;
var Field = field;
var MapField = mapfield;
var OneOf = oneof;
var Enum = _enum;
var Service = service;
var Method = method;
var types2 = types$5;
var util$3 = util$j.exports;
var base10Re = /^[1-9][0-9]*$/;
var base10NegRe = /^-?[1-9][0-9]*$/;
var base16Re = /^0[x][0-9a-fA-F]+$/;
var base16NegRe = /^-?0[x][0-9a-fA-F]+$/;
var base8Re = /^0[0-7]+$/;
var base8NegRe = /^-?0[0-7]+$/;
var numberRe = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;
var nameRe = /^[a-zA-Z_][a-zA-Z_0-9]*$/;
var typeRefRe = /^(?:\.?[a-zA-Z_][a-zA-Z_0-9]*)(?:\.[a-zA-Z_][a-zA-Z_0-9]*)*$/;
var fqTypeRefRe = /^(?:\.[a-zA-Z_][a-zA-Z_0-9]*)+$/;
function parse(source, root2, options2) {
  if (!(root2 instanceof Root)) {
    options2 = root2;
    root2 = new Root();
  }
  if (!options2)
    options2 = parse.defaults;
  var preferTrailingComment = options2.preferTrailingComment || false;
  var tn = tokenize(source, options2.alternateCommentMode || false), next = tn.next, push2 = tn.push, peek = tn.peek, skip2 = tn.skip, cmnt = tn.cmnt;
  var head = true, pkg, imports, weakImports, syntax, isProto3 = false;
  var ptr = root2;
  var applyCase = options2.keepCase ? function(name2) {
    return name2;
  } : util$3.camelCase;
  function illegal(token2, name2, insideTryCatch) {
    var filename = parse.filename;
    if (!insideTryCatch)
      parse.filename = null;
    return Error("illegal " + (name2 || "token") + " '" + token2 + "' (" + (filename ? filename + ", " : "") + "line " + tn.line + ")");
  }
  function readString() {
    var values = [], token2;
    do {
      if ((token2 = next()) !== '"' && token2 !== "'")
        throw illegal(token2);
      values.push(next());
      skip2(token2);
      token2 = peek();
    } while (token2 === '"' || token2 === "'");
    return values.join("");
  }
  function readValue(acceptTypeRef) {
    var token2 = next();
    switch (token2) {
      case "'":
      case '"':
        push2(token2);
        return readString();
      case "true":
      case "TRUE":
        return true;
      case "false":
      case "FALSE":
        return false;
    }
    try {
      return parseNumber(token2, true);
    } catch (e) {
      if (acceptTypeRef && typeRefRe.test(token2))
        return token2;
      throw illegal(token2, "value");
    }
  }
  function readRanges(target, acceptStrings) {
    var token2, start;
    do {
      if (acceptStrings && ((token2 = peek()) === '"' || token2 === "'"))
        target.push(readString());
      else
        target.push([start = parseId(next()), skip2("to", true) ? parseId(next()) : start]);
    } while (skip2(",", true));
    skip2(";");
  }
  function parseNumber(token2, insideTryCatch) {
    var sign = 1;
    if (token2.charAt(0) === "-") {
      sign = -1;
      token2 = token2.substring(1);
    }
    switch (token2) {
      case "inf":
      case "INF":
      case "Inf":
        return sign * Infinity;
      case "nan":
      case "NAN":
      case "Nan":
      case "NaN":
        return NaN;
      case "0":
        return 0;
    }
    if (base10Re.test(token2))
      return sign * parseInt(token2, 10);
    if (base16Re.test(token2))
      return sign * parseInt(token2, 16);
    if (base8Re.test(token2))
      return sign * parseInt(token2, 8);
    if (numberRe.test(token2))
      return sign * parseFloat(token2);
    throw illegal(token2, "number", insideTryCatch);
  }
  function parseId(token2, acceptNegative) {
    switch (token2) {
      case "max":
      case "MAX":
      case "Max":
        return 536870911;
      case "0":
        return 0;
    }
    if (!acceptNegative && token2.charAt(0) === "-")
      throw illegal(token2, "id");
    if (base10NegRe.test(token2))
      return parseInt(token2, 10);
    if (base16NegRe.test(token2))
      return parseInt(token2, 16);
    if (base8NegRe.test(token2))
      return parseInt(token2, 8);
    throw illegal(token2, "id");
  }
  function parsePackage() {
    if (pkg !== void 0)
      throw illegal("package");
    pkg = next();
    if (!typeRefRe.test(pkg))
      throw illegal(pkg, "name");
    ptr = ptr.define(pkg);
    skip2(";");
  }
  function parseImport() {
    var token2 = peek();
    var whichImports;
    switch (token2) {
      case "weak":
        whichImports = weakImports || (weakImports = []);
        next();
        break;
      case "public":
        next();
      default:
        whichImports = imports || (imports = []);
        break;
    }
    token2 = readString();
    skip2(";");
    whichImports.push(token2);
  }
  function parseSyntax() {
    skip2("=");
    syntax = readString();
    isProto3 = syntax === "proto3";
    if (!isProto3 && syntax !== "proto2")
      throw illegal(syntax, "syntax");
    skip2(";");
  }
  function parseCommon(parent, token2) {
    switch (token2) {
      case "option":
        parseOption(parent, token2);
        skip2(";");
        return true;
      case "message":
        parseType(parent, token2);
        return true;
      case "enum":
        parseEnum(parent, token2);
        return true;
      case "service":
        parseService(parent, token2);
        return true;
      case "extend":
        parseExtension(parent, token2);
        return true;
    }
    return false;
  }
  function ifBlock(obj, fnIf, fnElse) {
    var trailingLine = tn.line;
    if (obj) {
      if (typeof obj.comment !== "string") {
        obj.comment = cmnt();
      }
      obj.filename = parse.filename;
    }
    if (skip2("{", true)) {
      var token2;
      while ((token2 = next()) !== "}")
        fnIf(token2);
      skip2(";", true);
    } else {
      if (fnElse)
        fnElse();
      skip2(";");
      if (obj && (typeof obj.comment !== "string" || preferTrailingComment))
        obj.comment = cmnt(trailingLine) || obj.comment;
    }
  }
  function parseType(parent, token2) {
    if (!nameRe.test(token2 = next()))
      throw illegal(token2, "type name");
    var type2 = new Type(token2);
    ifBlock(type2, function parseType_block(token3) {
      if (parseCommon(type2, token3))
        return;
      switch (token3) {
        case "map":
          parseMapField(type2);
          break;
        case "required":
        case "repeated":
          parseField(type2, token3);
          break;
        case "optional":
          if (isProto3) {
            parseField(type2, "proto3_optional");
          } else {
            parseField(type2, "optional");
          }
          break;
        case "oneof":
          parseOneOf(type2, token3);
          break;
        case "extensions":
          readRanges(type2.extensions || (type2.extensions = []));
          break;
        case "reserved":
          readRanges(type2.reserved || (type2.reserved = []), true);
          break;
        default:
          if (!isProto3 || !typeRefRe.test(token3))
            throw illegal(token3);
          push2(token3);
          parseField(type2, "optional");
          break;
      }
    });
    parent.add(type2);
  }
  function parseField(parent, rule, extend) {
    var type2 = next();
    if (type2 === "group") {
      parseGroup(parent, rule);
      return;
    }
    if (!typeRefRe.test(type2))
      throw illegal(type2, "type");
    var name2 = next();
    if (!nameRe.test(name2))
      throw illegal(name2, "name");
    name2 = applyCase(name2);
    skip2("=");
    var field2 = new Field(name2, parseId(next()), type2, rule, extend);
    ifBlock(field2, function parseField_block(token2) {
      if (token2 === "option") {
        parseOption(field2, token2);
        skip2(";");
      } else
        throw illegal(token2);
    }, function parseField_line() {
      parseInlineOptions(field2);
    });
    if (rule === "proto3_optional") {
      var oneof2 = new OneOf("_" + name2);
      field2.setOption("proto3_optional", true);
      oneof2.add(field2);
      parent.add(oneof2);
    } else {
      parent.add(field2);
    }
    if (!isProto3 && field2.repeated && (types2.packed[type2] !== void 0 || types2.basic[type2] === void 0))
      field2.setOption("packed", false, true);
  }
  function parseGroup(parent, rule) {
    var name2 = next();
    if (!nameRe.test(name2))
      throw illegal(name2, "name");
    var fieldName = util$3.lcFirst(name2);
    if (name2 === fieldName)
      name2 = util$3.ucFirst(name2);
    skip2("=");
    var id = parseId(next());
    var type2 = new Type(name2);
    type2.group = true;
    var field2 = new Field(fieldName, id, name2, rule);
    field2.filename = parse.filename;
    ifBlock(type2, function parseGroup_block(token2) {
      switch (token2) {
        case "option":
          parseOption(type2, token2);
          skip2(";");
          break;
        case "required":
        case "repeated":
          parseField(type2, token2);
          break;
        case "optional":
          if (isProto3) {
            parseField(type2, "proto3_optional");
          } else {
            parseField(type2, "optional");
          }
          break;
        default:
          throw illegal(token2);
      }
    });
    parent.add(type2).add(field2);
  }
  function parseMapField(parent) {
    skip2("<");
    var keyType = next();
    if (types2.mapKey[keyType] === void 0)
      throw illegal(keyType, "type");
    skip2(",");
    var valueType = next();
    if (!typeRefRe.test(valueType))
      throw illegal(valueType, "type");
    skip2(">");
    var name2 = next();
    if (!nameRe.test(name2))
      throw illegal(name2, "name");
    skip2("=");
    var field2 = new MapField(applyCase(name2), parseId(next()), keyType, valueType);
    ifBlock(field2, function parseMapField_block(token2) {
      if (token2 === "option") {
        parseOption(field2, token2);
        skip2(";");
      } else
        throw illegal(token2);
    }, function parseMapField_line() {
      parseInlineOptions(field2);
    });
    parent.add(field2);
  }
  function parseOneOf(parent, token2) {
    if (!nameRe.test(token2 = next()))
      throw illegal(token2, "name");
    var oneof2 = new OneOf(applyCase(token2));
    ifBlock(oneof2, function parseOneOf_block(token3) {
      if (token3 === "option") {
        parseOption(oneof2, token3);
        skip2(";");
      } else {
        push2(token3);
        parseField(oneof2, "optional");
      }
    });
    parent.add(oneof2);
  }
  function parseEnum(parent, token2) {
    if (!nameRe.test(token2 = next()))
      throw illegal(token2, "name");
    var enm = new Enum(token2);
    ifBlock(enm, function parseEnum_block(token3) {
      switch (token3) {
        case "option":
          parseOption(enm, token3);
          skip2(";");
          break;
        case "reserved":
          readRanges(enm.reserved || (enm.reserved = []), true);
          break;
        default:
          parseEnumValue(enm, token3);
      }
    });
    parent.add(enm);
  }
  function parseEnumValue(parent, token2) {
    if (!nameRe.test(token2))
      throw illegal(token2, "name");
    skip2("=");
    var value = parseId(next(), true), dummy = {};
    ifBlock(dummy, function parseEnumValue_block(token3) {
      if (token3 === "option") {
        parseOption(dummy, token3);
        skip2(";");
      } else
        throw illegal(token3);
    }, function parseEnumValue_line() {
      parseInlineOptions(dummy);
    });
    parent.add(token2, value, dummy.comment);
  }
  function parseOption(parent, token2) {
    var isCustom = skip2("(", true);
    if (!typeRefRe.test(token2 = next()))
      throw illegal(token2, "name");
    var name2 = token2;
    var option = name2;
    var propName;
    if (isCustom) {
      skip2(")");
      name2 = "(" + name2 + ")";
      option = name2;
      token2 = peek();
      if (fqTypeRefRe.test(token2)) {
        propName = token2.substr(1);
        name2 += token2;
        next();
      }
    }
    skip2("=");
    var optionValue = parseOptionValue(parent, name2);
    setParsedOption2(parent, option, optionValue, propName);
  }
  function parseOptionValue(parent, name2) {
    if (skip2("{", true)) {
      var result = {};
      while (!skip2("}", true)) {
        if (!nameRe.test(token = next()))
          throw illegal(token, "name");
        var value;
        var propName = token;
        if (peek() === "{")
          value = parseOptionValue(parent, name2 + "." + token);
        else {
          skip2(":");
          if (peek() === "{")
            value = parseOptionValue(parent, name2 + "." + token);
          else {
            value = readValue(true);
            setOption3(parent, name2 + "." + token, value);
          }
        }
        var prevValue = result[propName];
        if (prevValue)
          value = [].concat(prevValue).concat(value);
        result[propName] = value;
        skip2(",", true);
      }
      return result;
    }
    var simpleValue = readValue(true);
    setOption3(parent, name2, simpleValue);
    return simpleValue;
  }
  function setOption3(parent, name2, value) {
    if (parent.setOption)
      parent.setOption(name2, value);
  }
  function setParsedOption2(parent, name2, value, propName) {
    if (parent.setParsedOption)
      parent.setParsedOption(name2, value, propName);
  }
  function parseInlineOptions(parent) {
    if (skip2("[", true)) {
      do {
        parseOption(parent, "option");
      } while (skip2(",", true));
      skip2("]");
    }
    return parent;
  }
  function parseService(parent, token2) {
    if (!nameRe.test(token2 = next()))
      throw illegal(token2, "service name");
    var service2 = new Service(token2);
    ifBlock(service2, function parseService_block(token3) {
      if (parseCommon(service2, token3))
        return;
      if (token3 === "rpc")
        parseMethod(service2, token3);
      else
        throw illegal(token3);
    });
    parent.add(service2);
  }
  function parseMethod(parent, token2) {
    var commentText = cmnt();
    var type2 = token2;
    if (!nameRe.test(token2 = next()))
      throw illegal(token2, "name");
    var name2 = token2, requestType, requestStream, responseType, responseStream;
    skip2("(");
    if (skip2("stream", true))
      requestStream = true;
    if (!typeRefRe.test(token2 = next()))
      throw illegal(token2);
    requestType = token2;
    skip2(")");
    skip2("returns");
    skip2("(");
    if (skip2("stream", true))
      responseStream = true;
    if (!typeRefRe.test(token2 = next()))
      throw illegal(token2);
    responseType = token2;
    skip2(")");
    var method2 = new Method(name2, type2, requestType, responseType, requestStream, responseStream);
    method2.comment = commentText;
    ifBlock(method2, function parseMethod_block(token3) {
      if (token3 === "option") {
        parseOption(method2, token3);
        skip2(";");
      } else
        throw illegal(token3);
    });
    parent.add(method2);
  }
  function parseExtension(parent, token2) {
    if (!typeRefRe.test(token2 = next()))
      throw illegal(token2, "reference");
    var reference = token2;
    ifBlock(null, function parseExtension_block(token3) {
      switch (token3) {
        case "required":
        case "repeated":
          parseField(parent, token3, reference);
          break;
        case "optional":
          if (isProto3) {
            parseField(parent, "proto3_optional", reference);
          } else {
            parseField(parent, "optional", reference);
          }
          break;
        default:
          if (!isProto3 || !typeRefRe.test(token3))
            throw illegal(token3);
          push2(token3);
          parseField(parent, "optional", reference);
          break;
      }
    });
  }
  var token;
  while ((token = next()) !== null) {
    switch (token) {
      case "package":
        if (!head)
          throw illegal(token);
        parsePackage();
        break;
      case "import":
        if (!head)
          throw illegal(token);
        parseImport();
        break;
      case "syntax":
        if (!head)
          throw illegal(token);
        parseSyntax();
        break;
      case "option":
        parseOption(ptr, token);
        skip2(";");
        break;
      default:
        if (parseCommon(ptr, token)) {
          head = false;
          continue;
        }
        throw illegal(token);
    }
  }
  parse.filename = null;
  return {
    "package": pkg,
    "imports": imports,
    weakImports,
    syntax,
    root: root2
  };
}
var common_1 = common;
var commonRe = /\/|\./;
function common(name2, json) {
  if (!commonRe.test(name2)) {
    name2 = "google/protobuf/" + name2 + ".proto";
    json = { nested: { google: { nested: { protobuf: { nested: json } } } } };
  }
  common[name2] = json;
}
common("any", {
  Any: {
    fields: {
      type_url: {
        type: "string",
        id: 1
      },
      value: {
        type: "bytes",
        id: 2
      }
    }
  }
});
var timeType;
common("duration", {
  Duration: timeType = {
    fields: {
      seconds: {
        type: "int64",
        id: 1
      },
      nanos: {
        type: "int32",
        id: 2
      }
    }
  }
});
common("timestamp", {
  Timestamp: timeType
});
common("empty", {
  Empty: {
    fields: {}
  }
});
common("struct", {
  Struct: {
    fields: {
      fields: {
        keyType: "string",
        type: "Value",
        id: 1
      }
    }
  },
  Value: {
    oneofs: {
      kind: {
        oneof: [
          "nullValue",
          "numberValue",
          "stringValue",
          "boolValue",
          "structValue",
          "listValue"
        ]
      }
    },
    fields: {
      nullValue: {
        type: "NullValue",
        id: 1
      },
      numberValue: {
        type: "double",
        id: 2
      },
      stringValue: {
        type: "string",
        id: 3
      },
      boolValue: {
        type: "bool",
        id: 4
      },
      structValue: {
        type: "Struct",
        id: 5
      },
      listValue: {
        type: "ListValue",
        id: 6
      }
    }
  },
  NullValue: {
    values: {
      NULL_VALUE: 0
    }
  },
  ListValue: {
    fields: {
      values: {
        rule: "repeated",
        type: "Value",
        id: 1
      }
    }
  }
});
common("wrappers", {
  DoubleValue: {
    fields: {
      value: {
        type: "double",
        id: 1
      }
    }
  },
  FloatValue: {
    fields: {
      value: {
        type: "float",
        id: 1
      }
    }
  },
  Int64Value: {
    fields: {
      value: {
        type: "int64",
        id: 1
      }
    }
  },
  UInt64Value: {
    fields: {
      value: {
        type: "uint64",
        id: 1
      }
    }
  },
  Int32Value: {
    fields: {
      value: {
        type: "int32",
        id: 1
      }
    }
  },
  UInt32Value: {
    fields: {
      value: {
        type: "uint32",
        id: 1
      }
    }
  },
  BoolValue: {
    fields: {
      value: {
        type: "bool",
        id: 1
      }
    }
  },
  StringValue: {
    fields: {
      value: {
        type: "string",
        id: 1
      }
    }
  },
  BytesValue: {
    fields: {
      value: {
        type: "bytes",
        id: 1
      }
    }
  }
});
common("field_mask", {
  FieldMask: {
    fields: {
      paths: {
        rule: "repeated",
        type: "string",
        id: 1
      }
    }
  }
});
common.get = function get4(file) {
  return common[file] || null;
};
var protobuf = src2.exports = indexLight.exports;
protobuf.build = "full";
protobuf.tokenize = tokenize_1;
protobuf.parse = parse_1;
protobuf.common = common_1;
protobuf.Root._configure(protobuf.Type, protobuf.parse, protobuf.common);
var protobufjs = src2.exports;
var descriptor$1 = { exports: {} };
var nested$3 = {
  google: {
    nested: {
      protobuf: {
        nested: {
          FileDescriptorSet: {
            fields: {
              file: {
                rule: "repeated",
                type: "FileDescriptorProto",
                id: 1
              }
            }
          },
          FileDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              "package": {
                type: "string",
                id: 2
              },
              dependency: {
                rule: "repeated",
                type: "string",
                id: 3
              },
              publicDependency: {
                rule: "repeated",
                type: "int32",
                id: 10,
                options: {
                  packed: false
                }
              },
              weakDependency: {
                rule: "repeated",
                type: "int32",
                id: 11,
                options: {
                  packed: false
                }
              },
              messageType: {
                rule: "repeated",
                type: "DescriptorProto",
                id: 4
              },
              enumType: {
                rule: "repeated",
                type: "EnumDescriptorProto",
                id: 5
              },
              service: {
                rule: "repeated",
                type: "ServiceDescriptorProto",
                id: 6
              },
              extension: {
                rule: "repeated",
                type: "FieldDescriptorProto",
                id: 7
              },
              options: {
                type: "FileOptions",
                id: 8
              },
              sourceCodeInfo: {
                type: "SourceCodeInfo",
                id: 9
              },
              syntax: {
                type: "string",
                id: 12
              }
            }
          },
          DescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              field: {
                rule: "repeated",
                type: "FieldDescriptorProto",
                id: 2
              },
              extension: {
                rule: "repeated",
                type: "FieldDescriptorProto",
                id: 6
              },
              nestedType: {
                rule: "repeated",
                type: "DescriptorProto",
                id: 3
              },
              enumType: {
                rule: "repeated",
                type: "EnumDescriptorProto",
                id: 4
              },
              extensionRange: {
                rule: "repeated",
                type: "ExtensionRange",
                id: 5
              },
              oneofDecl: {
                rule: "repeated",
                type: "OneofDescriptorProto",
                id: 8
              },
              options: {
                type: "MessageOptions",
                id: 7
              },
              reservedRange: {
                rule: "repeated",
                type: "ReservedRange",
                id: 9
              },
              reservedName: {
                rule: "repeated",
                type: "string",
                id: 10
              }
            },
            nested: {
              ExtensionRange: {
                fields: {
                  start: {
                    type: "int32",
                    id: 1
                  },
                  end: {
                    type: "int32",
                    id: 2
                  }
                }
              },
              ReservedRange: {
                fields: {
                  start: {
                    type: "int32",
                    id: 1
                  },
                  end: {
                    type: "int32",
                    id: 2
                  }
                }
              }
            }
          },
          FieldDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              number: {
                type: "int32",
                id: 3
              },
              label: {
                type: "Label",
                id: 4
              },
              type: {
                type: "Type",
                id: 5
              },
              typeName: {
                type: "string",
                id: 6
              },
              extendee: {
                type: "string",
                id: 2
              },
              defaultValue: {
                type: "string",
                id: 7
              },
              oneofIndex: {
                type: "int32",
                id: 9
              },
              jsonName: {
                type: "string",
                id: 10
              },
              options: {
                type: "FieldOptions",
                id: 8
              }
            },
            nested: {
              Type: {
                values: {
                  TYPE_DOUBLE: 1,
                  TYPE_FLOAT: 2,
                  TYPE_INT64: 3,
                  TYPE_UINT64: 4,
                  TYPE_INT32: 5,
                  TYPE_FIXED64: 6,
                  TYPE_FIXED32: 7,
                  TYPE_BOOL: 8,
                  TYPE_STRING: 9,
                  TYPE_GROUP: 10,
                  TYPE_MESSAGE: 11,
                  TYPE_BYTES: 12,
                  TYPE_UINT32: 13,
                  TYPE_ENUM: 14,
                  TYPE_SFIXED32: 15,
                  TYPE_SFIXED64: 16,
                  TYPE_SINT32: 17,
                  TYPE_SINT64: 18
                }
              },
              Label: {
                values: {
                  LABEL_OPTIONAL: 1,
                  LABEL_REQUIRED: 2,
                  LABEL_REPEATED: 3
                }
              }
            }
          },
          OneofDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              options: {
                type: "OneofOptions",
                id: 2
              }
            }
          },
          EnumDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              value: {
                rule: "repeated",
                type: "EnumValueDescriptorProto",
                id: 2
              },
              options: {
                type: "EnumOptions",
                id: 3
              }
            }
          },
          EnumValueDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              number: {
                type: "int32",
                id: 2
              },
              options: {
                type: "EnumValueOptions",
                id: 3
              }
            }
          },
          ServiceDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              method: {
                rule: "repeated",
                type: "MethodDescriptorProto",
                id: 2
              },
              options: {
                type: "ServiceOptions",
                id: 3
              }
            }
          },
          MethodDescriptorProto: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              inputType: {
                type: "string",
                id: 2
              },
              outputType: {
                type: "string",
                id: 3
              },
              options: {
                type: "MethodOptions",
                id: 4
              },
              clientStreaming: {
                type: "bool",
                id: 5
              },
              serverStreaming: {
                type: "bool",
                id: 6
              }
            }
          },
          FileOptions: {
            fields: {
              javaPackage: {
                type: "string",
                id: 1
              },
              javaOuterClassname: {
                type: "string",
                id: 8
              },
              javaMultipleFiles: {
                type: "bool",
                id: 10
              },
              javaGenerateEqualsAndHash: {
                type: "bool",
                id: 20,
                options: {
                  deprecated: true
                }
              },
              javaStringCheckUtf8: {
                type: "bool",
                id: 27
              },
              optimizeFor: {
                type: "OptimizeMode",
                id: 9,
                options: {
                  "default": "SPEED"
                }
              },
              goPackage: {
                type: "string",
                id: 11
              },
              ccGenericServices: {
                type: "bool",
                id: 16
              },
              javaGenericServices: {
                type: "bool",
                id: 17
              },
              pyGenericServices: {
                type: "bool",
                id: 18
              },
              deprecated: {
                type: "bool",
                id: 23
              },
              ccEnableArenas: {
                type: "bool",
                id: 31
              },
              objcClassPrefix: {
                type: "string",
                id: 36
              },
              csharpNamespace: {
                type: "string",
                id: 37
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1e3,
                536870911
              ]
            ],
            reserved: [
              [
                38,
                38
              ]
            ],
            nested: {
              OptimizeMode: {
                values: {
                  SPEED: 1,
                  CODE_SIZE: 2,
                  LITE_RUNTIME: 3
                }
              }
            }
          },
          MessageOptions: {
            fields: {
              messageSetWireFormat: {
                type: "bool",
                id: 1
              },
              noStandardDescriptorAccessor: {
                type: "bool",
                id: 2
              },
              deprecated: {
                type: "bool",
                id: 3
              },
              mapEntry: {
                type: "bool",
                id: 7
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1e3,
                536870911
              ]
            ],
            reserved: [
              [
                8,
                8
              ]
            ]
          },
          FieldOptions: {
            fields: {
              ctype: {
                type: "CType",
                id: 1,
                options: {
                  "default": "STRING"
                }
              },
              packed: {
                type: "bool",
                id: 2
              },
              jstype: {
                type: "JSType",
                id: 6,
                options: {
                  "default": "JS_NORMAL"
                }
              },
              lazy: {
                type: "bool",
                id: 5
              },
              deprecated: {
                type: "bool",
                id: 3
              },
              weak: {
                type: "bool",
                id: 10
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1e3,
                536870911
              ]
            ],
            reserved: [
              [
                4,
                4
              ]
            ],
            nested: {
              CType: {
                values: {
                  STRING: 0,
                  CORD: 1,
                  STRING_PIECE: 2
                }
              },
              JSType: {
                values: {
                  JS_NORMAL: 0,
                  JS_STRING: 1,
                  JS_NUMBER: 2
                }
              }
            }
          },
          OneofOptions: {
            fields: {
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1e3,
                536870911
              ]
            ]
          },
          EnumOptions: {
            fields: {
              allowAlias: {
                type: "bool",
                id: 2
              },
              deprecated: {
                type: "bool",
                id: 3
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1e3,
                536870911
              ]
            ]
          },
          EnumValueOptions: {
            fields: {
              deprecated: {
                type: "bool",
                id: 1
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1e3,
                536870911
              ]
            ]
          },
          ServiceOptions: {
            fields: {
              deprecated: {
                type: "bool",
                id: 33
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1e3,
                536870911
              ]
            ]
          },
          MethodOptions: {
            fields: {
              deprecated: {
                type: "bool",
                id: 33
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1e3,
                536870911
              ]
            ]
          },
          UninterpretedOption: {
            fields: {
              name: {
                rule: "repeated",
                type: "NamePart",
                id: 2
              },
              identifierValue: {
                type: "string",
                id: 3
              },
              positiveIntValue: {
                type: "uint64",
                id: 4
              },
              negativeIntValue: {
                type: "int64",
                id: 5
              },
              doubleValue: {
                type: "double",
                id: 6
              },
              stringValue: {
                type: "bytes",
                id: 7
              },
              aggregateValue: {
                type: "string",
                id: 8
              }
            },
            nested: {
              NamePart: {
                fields: {
                  namePart: {
                    rule: "required",
                    type: "string",
                    id: 1
                  },
                  isExtension: {
                    rule: "required",
                    type: "bool",
                    id: 2
                  }
                }
              }
            }
          },
          SourceCodeInfo: {
            fields: {
              location: {
                rule: "repeated",
                type: "Location",
                id: 1
              }
            },
            nested: {
              Location: {
                fields: {
                  path: {
                    rule: "repeated",
                    type: "int32",
                    id: 1
                  },
                  span: {
                    rule: "repeated",
                    type: "int32",
                    id: 2
                  },
                  leadingComments: {
                    type: "string",
                    id: 3
                  },
                  trailingComments: {
                    type: "string",
                    id: 4
                  },
                  leadingDetachedComments: {
                    rule: "repeated",
                    type: "string",
                    id: 6
                  }
                }
              }
            }
          },
          GeneratedCodeInfo: {
            fields: {
              annotation: {
                rule: "repeated",
                type: "Annotation",
                id: 1
              }
            },
            nested: {
              Annotation: {
                fields: {
                  path: {
                    rule: "repeated",
                    type: "int32",
                    id: 1
                  },
                  sourceFile: {
                    type: "string",
                    id: 2
                  },
                  begin: {
                    type: "int32",
                    id: 3
                  },
                  end: {
                    type: "int32",
                    id: 4
                  }
                }
              }
            }
          }
        }
      }
    }
  }
};
var require$$4 = {
  nested: nested$3
};
(function(module2, exports) {
  var $protobuf = protobufjs;
  module2.exports = exports = $protobuf.descriptor = $protobuf.Root.fromJSON(require$$4).lookup(".google.protobuf");
  var Namespace2 = $protobuf.Namespace, Root2 = $protobuf.Root, Enum2 = $protobuf.Enum, Type2 = $protobuf.Type, Field2 = $protobuf.Field, MapField2 = $protobuf.MapField, OneOf2 = $protobuf.OneOf, Service2 = $protobuf.Service, Method2 = $protobuf.Method;
  Root2.fromDescriptor = function fromDescriptor(descriptor2) {
    if (typeof descriptor2.length === "number")
      descriptor2 = exports.FileDescriptorSet.decode(descriptor2);
    var root2 = new Root2();
    if (descriptor2.file) {
      var fileDescriptor, filePackage;
      for (var j = 0, i; j < descriptor2.file.length; ++j) {
        filePackage = root2;
        if ((fileDescriptor = descriptor2.file[j])["package"] && fileDescriptor["package"].length)
          filePackage = root2.define(fileDescriptor["package"]);
        if (fileDescriptor.name && fileDescriptor.name.length)
          root2.files.push(filePackage.filename = fileDescriptor.name);
        if (fileDescriptor.messageType)
          for (i = 0; i < fileDescriptor.messageType.length; ++i)
            filePackage.add(Type2.fromDescriptor(fileDescriptor.messageType[i], fileDescriptor.syntax));
        if (fileDescriptor.enumType)
          for (i = 0; i < fileDescriptor.enumType.length; ++i)
            filePackage.add(Enum2.fromDescriptor(fileDescriptor.enumType[i]));
        if (fileDescriptor.extension)
          for (i = 0; i < fileDescriptor.extension.length; ++i)
            filePackage.add(Field2.fromDescriptor(fileDescriptor.extension[i]));
        if (fileDescriptor.service)
          for (i = 0; i < fileDescriptor.service.length; ++i)
            filePackage.add(Service2.fromDescriptor(fileDescriptor.service[i]));
        var opts = fromDescriptorOptions(fileDescriptor.options, exports.FileOptions);
        if (opts) {
          var ks = Object.keys(opts);
          for (i = 0; i < ks.length; ++i)
            filePackage.setOption(ks[i], opts[ks[i]]);
        }
      }
    }
    return root2;
  };
  Root2.prototype.toDescriptor = function toDescriptor(syntax) {
    var set = exports.FileDescriptorSet.create();
    Root_toDescriptorRecursive(this, set.file, syntax);
    return set;
  };
  function Root_toDescriptorRecursive(ns, files2, syntax) {
    var file = exports.FileDescriptorProto.create({ name: ns.filename || (ns.fullName.substring(1).replace(/\./g, "_") || "root") + ".proto" });
    if (syntax)
      file.syntax = syntax;
    if (!(ns instanceof Root2))
      file["package"] = ns.fullName.substring(1);
    for (var i = 0, nested2; i < ns.nestedArray.length; ++i)
      if ((nested2 = ns._nestedArray[i]) instanceof Type2)
        file.messageType.push(nested2.toDescriptor(syntax));
      else if (nested2 instanceof Enum2)
        file.enumType.push(nested2.toDescriptor());
      else if (nested2 instanceof Field2)
        file.extension.push(nested2.toDescriptor(syntax));
      else if (nested2 instanceof Service2)
        file.service.push(nested2.toDescriptor());
      else if (nested2 instanceof Namespace2)
        Root_toDescriptorRecursive(nested2, files2, syntax);
    file.options = toDescriptorOptions(ns.options, exports.FileOptions);
    if (file.messageType.length + file.enumType.length + file.extension.length + file.service.length)
      files2.push(file);
  }
  var unnamedMessageIndex = 0;
  Type2.fromDescriptor = function fromDescriptor(descriptor2, syntax) {
    if (typeof descriptor2.length === "number")
      descriptor2 = exports.DescriptorProto.decode(descriptor2);
    var type2 = new Type2(descriptor2.name.length ? descriptor2.name : "Type" + unnamedMessageIndex++, fromDescriptorOptions(descriptor2.options, exports.MessageOptions)), i;
    if (descriptor2.oneofDecl)
      for (i = 0; i < descriptor2.oneofDecl.length; ++i)
        type2.add(OneOf2.fromDescriptor(descriptor2.oneofDecl[i]));
    if (descriptor2.field)
      for (i = 0; i < descriptor2.field.length; ++i) {
        var field2 = Field2.fromDescriptor(descriptor2.field[i], syntax);
        type2.add(field2);
        if (descriptor2.field[i].hasOwnProperty("oneofIndex"))
          type2.oneofsArray[descriptor2.field[i].oneofIndex].add(field2);
      }
    if (descriptor2.extension)
      for (i = 0; i < descriptor2.extension.length; ++i)
        type2.add(Field2.fromDescriptor(descriptor2.extension[i], syntax));
    if (descriptor2.nestedType)
      for (i = 0; i < descriptor2.nestedType.length; ++i) {
        type2.add(Type2.fromDescriptor(descriptor2.nestedType[i], syntax));
        if (descriptor2.nestedType[i].options && descriptor2.nestedType[i].options.mapEntry)
          type2.setOption("map_entry", true);
      }
    if (descriptor2.enumType)
      for (i = 0; i < descriptor2.enumType.length; ++i)
        type2.add(Enum2.fromDescriptor(descriptor2.enumType[i]));
    if (descriptor2.extensionRange && descriptor2.extensionRange.length) {
      type2.extensions = [];
      for (i = 0; i < descriptor2.extensionRange.length; ++i)
        type2.extensions.push([descriptor2.extensionRange[i].start, descriptor2.extensionRange[i].end]);
    }
    if (descriptor2.reservedRange && descriptor2.reservedRange.length || descriptor2.reservedName && descriptor2.reservedName.length) {
      type2.reserved = [];
      if (descriptor2.reservedRange)
        for (i = 0; i < descriptor2.reservedRange.length; ++i)
          type2.reserved.push([descriptor2.reservedRange[i].start, descriptor2.reservedRange[i].end]);
      if (descriptor2.reservedName)
        for (i = 0; i < descriptor2.reservedName.length; ++i)
          type2.reserved.push(descriptor2.reservedName[i]);
    }
    return type2;
  };
  Type2.prototype.toDescriptor = function toDescriptor(syntax) {
    var descriptor2 = exports.DescriptorProto.create({ name: this.name }), i;
    for (i = 0; i < this.fieldsArray.length; ++i) {
      var fieldDescriptor;
      descriptor2.field.push(fieldDescriptor = this._fieldsArray[i].toDescriptor(syntax));
      if (this._fieldsArray[i] instanceof MapField2) {
        var keyType = toDescriptorType(this._fieldsArray[i].keyType, this._fieldsArray[i].resolvedKeyType), valueType = toDescriptorType(this._fieldsArray[i].type, this._fieldsArray[i].resolvedType), valueTypeName = valueType === 11 || valueType === 14 ? this._fieldsArray[i].resolvedType && shortname(this.parent, this._fieldsArray[i].resolvedType) || this._fieldsArray[i].type : void 0;
        descriptor2.nestedType.push(exports.DescriptorProto.create({
          name: fieldDescriptor.typeName,
          field: [
            exports.FieldDescriptorProto.create({ name: "key", number: 1, label: 1, type: keyType }),
            exports.FieldDescriptorProto.create({ name: "value", number: 2, label: 1, type: valueType, typeName: valueTypeName })
          ],
          options: exports.MessageOptions.create({ mapEntry: true })
        }));
      }
    }
    for (i = 0; i < this.oneofsArray.length; ++i)
      descriptor2.oneofDecl.push(this._oneofsArray[i].toDescriptor());
    for (i = 0; i < this.nestedArray.length; ++i) {
      if (this._nestedArray[i] instanceof Field2)
        descriptor2.field.push(this._nestedArray[i].toDescriptor(syntax));
      else if (this._nestedArray[i] instanceof Type2)
        descriptor2.nestedType.push(this._nestedArray[i].toDescriptor(syntax));
      else if (this._nestedArray[i] instanceof Enum2)
        descriptor2.enumType.push(this._nestedArray[i].toDescriptor());
    }
    if (this.extensions)
      for (i = 0; i < this.extensions.length; ++i)
        descriptor2.extensionRange.push(exports.DescriptorProto.ExtensionRange.create({ start: this.extensions[i][0], end: this.extensions[i][1] }));
    if (this.reserved)
      for (i = 0; i < this.reserved.length; ++i)
        if (typeof this.reserved[i] === "string")
          descriptor2.reservedName.push(this.reserved[i]);
        else
          descriptor2.reservedRange.push(exports.DescriptorProto.ReservedRange.create({ start: this.reserved[i][0], end: this.reserved[i][1] }));
    descriptor2.options = toDescriptorOptions(this.options, exports.MessageOptions);
    return descriptor2;
  };
  var numberRe2 = /^(?![eE])[0-9]*(?:\.[0-9]*)?(?:[eE][+-]?[0-9]+)?$/;
  Field2.fromDescriptor = function fromDescriptor(descriptor2, syntax) {
    if (typeof descriptor2.length === "number")
      descriptor2 = exports.DescriptorProto.decode(descriptor2);
    if (typeof descriptor2.number !== "number")
      throw Error("missing field id");
    var fieldType;
    if (descriptor2.typeName && descriptor2.typeName.length)
      fieldType = descriptor2.typeName;
    else
      fieldType = fromDescriptorType(descriptor2.type);
    var fieldRule;
    switch (descriptor2.label) {
      case 1:
        fieldRule = void 0;
        break;
      case 2:
        fieldRule = "required";
        break;
      case 3:
        fieldRule = "repeated";
        break;
      default:
        throw Error("illegal label: " + descriptor2.label);
    }
    var extendee = descriptor2.extendee;
    if (descriptor2.extendee !== void 0) {
      extendee = extendee.length ? extendee : void 0;
    }
    var field2 = new Field2(descriptor2.name.length ? descriptor2.name : "field" + descriptor2.number, descriptor2.number, fieldType, fieldRule, extendee);
    field2.options = fromDescriptorOptions(descriptor2.options, exports.FieldOptions);
    if (descriptor2.defaultValue && descriptor2.defaultValue.length) {
      var defaultValue = descriptor2.defaultValue;
      switch (defaultValue) {
        case "true":
        case "TRUE":
          defaultValue = true;
          break;
        case "false":
        case "FALSE":
          defaultValue = false;
          break;
        default:
          var match = numberRe2.exec(defaultValue);
          if (match)
            defaultValue = parseInt(defaultValue);
          break;
      }
      field2.setOption("default", defaultValue);
    }
    if (packableDescriptorType(descriptor2.type)) {
      if (syntax === "proto3") {
        if (descriptor2.options && !descriptor2.options.packed)
          field2.setOption("packed", false);
      } else if (!(descriptor2.options && descriptor2.options.packed))
        field2.setOption("packed", false);
    }
    return field2;
  };
  Field2.prototype.toDescriptor = function toDescriptor(syntax) {
    var descriptor2 = exports.FieldDescriptorProto.create({ name: this.name, number: this.id });
    if (this.map) {
      descriptor2.type = 11;
      descriptor2.typeName = $protobuf.util.ucFirst(this.name);
      descriptor2.label = 3;
    } else {
      switch (descriptor2.type = toDescriptorType(this.type, this.resolve().resolvedType)) {
        case 10:
        case 11:
        case 14:
          descriptor2.typeName = this.resolvedType ? shortname(this.parent, this.resolvedType) : this.type;
          break;
      }
      switch (this.rule) {
        case "repeated":
          descriptor2.label = 3;
          break;
        case "required":
          descriptor2.label = 2;
          break;
        default:
          descriptor2.label = 1;
          break;
      }
    }
    descriptor2.extendee = this.extensionField ? this.extensionField.parent.fullName : this.extend;
    if (this.partOf) {
      if ((descriptor2.oneofIndex = this.parent.oneofsArray.indexOf(this.partOf)) < 0)
        throw Error("missing oneof");
    }
    if (this.options) {
      descriptor2.options = toDescriptorOptions(this.options, exports.FieldOptions);
      if (this.options["default"] != null)
        descriptor2.defaultValue = String(this.options["default"]);
    }
    if (syntax === "proto3") {
      if (!this.packed)
        (descriptor2.options || (descriptor2.options = exports.FieldOptions.create())).packed = false;
    } else if (this.packed)
      (descriptor2.options || (descriptor2.options = exports.FieldOptions.create())).packed = true;
    return descriptor2;
  };
  var unnamedEnumIndex = 0;
  Enum2.fromDescriptor = function fromDescriptor(descriptor2) {
    if (typeof descriptor2.length === "number")
      descriptor2 = exports.EnumDescriptorProto.decode(descriptor2);
    var values = {};
    if (descriptor2.value)
      for (var i = 0; i < descriptor2.value.length; ++i) {
        var name2 = descriptor2.value[i].name, value = descriptor2.value[i].number || 0;
        values[name2 && name2.length ? name2 : "NAME" + value] = value;
      }
    return new Enum2(descriptor2.name && descriptor2.name.length ? descriptor2.name : "Enum" + unnamedEnumIndex++, values, fromDescriptorOptions(descriptor2.options, exports.EnumOptions));
  };
  Enum2.prototype.toDescriptor = function toDescriptor() {
    var values = [];
    for (var i = 0, ks = Object.keys(this.values); i < ks.length; ++i)
      values.push(exports.EnumValueDescriptorProto.create({ name: ks[i], number: this.values[ks[i]] }));
    return exports.EnumDescriptorProto.create({
      name: this.name,
      value: values,
      options: toDescriptorOptions(this.options, exports.EnumOptions)
    });
  };
  var unnamedOneofIndex = 0;
  OneOf2.fromDescriptor = function fromDescriptor(descriptor2) {
    if (typeof descriptor2.length === "number")
      descriptor2 = exports.OneofDescriptorProto.decode(descriptor2);
    return new OneOf2(descriptor2.name && descriptor2.name.length ? descriptor2.name : "oneof" + unnamedOneofIndex++);
  };
  OneOf2.prototype.toDescriptor = function toDescriptor() {
    return exports.OneofDescriptorProto.create({
      name: this.name
    });
  };
  var unnamedServiceIndex = 0;
  Service2.fromDescriptor = function fromDescriptor(descriptor2) {
    if (typeof descriptor2.length === "number")
      descriptor2 = exports.ServiceDescriptorProto.decode(descriptor2);
    var service2 = new Service2(descriptor2.name && descriptor2.name.length ? descriptor2.name : "Service" + unnamedServiceIndex++, fromDescriptorOptions(descriptor2.options, exports.ServiceOptions));
    if (descriptor2.method)
      for (var i = 0; i < descriptor2.method.length; ++i)
        service2.add(Method2.fromDescriptor(descriptor2.method[i]));
    return service2;
  };
  Service2.prototype.toDescriptor = function toDescriptor() {
    var methods = [];
    for (var i = 0; i < this.methodsArray.length; ++i)
      methods.push(this._methodsArray[i].toDescriptor());
    return exports.ServiceDescriptorProto.create({
      name: this.name,
      method: methods,
      options: toDescriptorOptions(this.options, exports.ServiceOptions)
    });
  };
  var unnamedMethodIndex = 0;
  Method2.fromDescriptor = function fromDescriptor(descriptor2) {
    if (typeof descriptor2.length === "number")
      descriptor2 = exports.MethodDescriptorProto.decode(descriptor2);
    return new Method2(descriptor2.name && descriptor2.name.length ? descriptor2.name : "Method" + unnamedMethodIndex++, "rpc", descriptor2.inputType, descriptor2.outputType, Boolean(descriptor2.clientStreaming), Boolean(descriptor2.serverStreaming), fromDescriptorOptions(descriptor2.options, exports.MethodOptions));
  };
  Method2.prototype.toDescriptor = function toDescriptor() {
    return exports.MethodDescriptorProto.create({
      name: this.name,
      inputType: this.resolvedRequestType ? this.resolvedRequestType.fullName : this.requestType,
      outputType: this.resolvedResponseType ? this.resolvedResponseType.fullName : this.responseType,
      clientStreaming: this.requestStream,
      serverStreaming: this.responseStream,
      options: toDescriptorOptions(this.options, exports.MethodOptions)
    });
  };
  function fromDescriptorType(type2) {
    switch (type2) {
      case 1:
        return "double";
      case 2:
        return "float";
      case 3:
        return "int64";
      case 4:
        return "uint64";
      case 5:
        return "int32";
      case 6:
        return "fixed64";
      case 7:
        return "fixed32";
      case 8:
        return "bool";
      case 9:
        return "string";
      case 12:
        return "bytes";
      case 13:
        return "uint32";
      case 15:
        return "sfixed32";
      case 16:
        return "sfixed64";
      case 17:
        return "sint32";
      case 18:
        return "sint64";
    }
    throw Error("illegal type: " + type2);
  }
  function packableDescriptorType(type2) {
    switch (type2) {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
        return true;
    }
    return false;
  }
  function toDescriptorType(type2, resolvedType) {
    switch (type2) {
      case "double":
        return 1;
      case "float":
        return 2;
      case "int64":
        return 3;
      case "uint64":
        return 4;
      case "int32":
        return 5;
      case "fixed64":
        return 6;
      case "fixed32":
        return 7;
      case "bool":
        return 8;
      case "string":
        return 9;
      case "bytes":
        return 12;
      case "uint32":
        return 13;
      case "sfixed32":
        return 15;
      case "sfixed64":
        return 16;
      case "sint32":
        return 17;
      case "sint64":
        return 18;
    }
    if (resolvedType instanceof Enum2)
      return 14;
    if (resolvedType instanceof Type2)
      return resolvedType.group ? 10 : 11;
    throw Error("illegal type: " + type2);
  }
  function fromDescriptorOptions(options2, type2) {
    if (!options2)
      return void 0;
    var out = [];
    for (var i = 0, field2, key, val; i < type2.fieldsArray.length; ++i)
      if ((key = (field2 = type2._fieldsArray[i]).name) !== "uninterpretedOption") {
        if (options2.hasOwnProperty(key)) {
          val = options2[key];
          if (field2.resolvedType instanceof Enum2 && typeof val === "number" && field2.resolvedType.valuesById[val] !== void 0)
            val = field2.resolvedType.valuesById[val];
          out.push(underScore(key), val);
        }
      }
    return out.length ? $protobuf.util.toObject(out) : void 0;
  }
  function toDescriptorOptions(options2, type2) {
    if (!options2)
      return void 0;
    var out = [];
    for (var i = 0, ks = Object.keys(options2), key, val; i < ks.length; ++i) {
      val = options2[key = ks[i]];
      if (key === "default")
        continue;
      var field2 = type2.fields[key];
      if (!field2 && !(field2 = type2.fields[key = $protobuf.util.camelCase(key)]))
        continue;
      out.push(key, val);
    }
    return out.length ? type2.fromObject($protobuf.util.toObject(out)) : void 0;
  }
  function shortname(from2, to) {
    var fromPath = from2.fullName.split("."), toPath = to.fullName.split("."), i = 0, j = 0, k = toPath.length - 1;
    if (!(from2 instanceof Root2) && to instanceof Namespace2)
      while (i < fromPath.length && j < k && fromPath[i] === toPath[j]) {
        var other = to.lookup(fromPath[i++], true);
        if (other !== null && other !== to)
          break;
        ++j;
      }
    else
      for (; i < fromPath.length && j < k && fromPath[i] === toPath[j]; ++i, ++j)
        ;
    return toPath.slice(j).join(".");
  }
  function underScore(str) {
    return str.substring(0, 1) + str.substring(1).replace(/([A-Z])(?=[a-z]|$)/g, function($0, $1) {
      return "_" + $1.toLowerCase();
    });
  }
})(descriptor$1, descriptor$1.exports);
var util$2 = {};
var nested$2 = {
  google: {
    nested: {
      protobuf: {
        nested: {
          Api: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              methods: {
                rule: "repeated",
                type: "Method",
                id: 2
              },
              options: {
                rule: "repeated",
                type: "Option",
                id: 3
              },
              version: {
                type: "string",
                id: 4
              },
              sourceContext: {
                type: "SourceContext",
                id: 5
              },
              mixins: {
                rule: "repeated",
                type: "Mixin",
                id: 6
              },
              syntax: {
                type: "Syntax",
                id: 7
              }
            }
          },
          Method: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              requestTypeUrl: {
                type: "string",
                id: 2
              },
              requestStreaming: {
                type: "bool",
                id: 3
              },
              responseTypeUrl: {
                type: "string",
                id: 4
              },
              responseStreaming: {
                type: "bool",
                id: 5
              },
              options: {
                rule: "repeated",
                type: "Option",
                id: 6
              },
              syntax: {
                type: "Syntax",
                id: 7
              }
            }
          },
          Mixin: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              root: {
                type: "string",
                id: 2
              }
            }
          },
          SourceContext: {
            fields: {
              fileName: {
                type: "string",
                id: 1
              }
            }
          },
          Option: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              value: {
                type: "Any",
                id: 2
              }
            }
          },
          Syntax: {
            values: {
              SYNTAX_PROTO2: 0,
              SYNTAX_PROTO3: 1
            }
          }
        }
      }
    }
  }
};
var require$$3 = {
  nested: nested$2
};
var nested$1 = {
  google: {
    nested: {
      protobuf: {
        nested: {
          SourceContext: {
            fields: {
              fileName: {
                type: "string",
                id: 1
              }
            }
          }
        }
      }
    }
  }
};
var require$$5 = {
  nested: nested$1
};
var nested = {
  google: {
    nested: {
      protobuf: {
        nested: {
          Type: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              fields: {
                rule: "repeated",
                type: "Field",
                id: 2
              },
              oneofs: {
                rule: "repeated",
                type: "string",
                id: 3
              },
              options: {
                rule: "repeated",
                type: "Option",
                id: 4
              },
              sourceContext: {
                type: "SourceContext",
                id: 5
              },
              syntax: {
                type: "Syntax",
                id: 6
              }
            }
          },
          Field: {
            fields: {
              kind: {
                type: "Kind",
                id: 1
              },
              cardinality: {
                type: "Cardinality",
                id: 2
              },
              number: {
                type: "int32",
                id: 3
              },
              name: {
                type: "string",
                id: 4
              },
              typeUrl: {
                type: "string",
                id: 6
              },
              oneofIndex: {
                type: "int32",
                id: 7
              },
              packed: {
                type: "bool",
                id: 8
              },
              options: {
                rule: "repeated",
                type: "Option",
                id: 9
              },
              jsonName: {
                type: "string",
                id: 10
              },
              defaultValue: {
                type: "string",
                id: 11
              }
            },
            nested: {
              Kind: {
                values: {
                  TYPE_UNKNOWN: 0,
                  TYPE_DOUBLE: 1,
                  TYPE_FLOAT: 2,
                  TYPE_INT64: 3,
                  TYPE_UINT64: 4,
                  TYPE_INT32: 5,
                  TYPE_FIXED64: 6,
                  TYPE_FIXED32: 7,
                  TYPE_BOOL: 8,
                  TYPE_STRING: 9,
                  TYPE_GROUP: 10,
                  TYPE_MESSAGE: 11,
                  TYPE_BYTES: 12,
                  TYPE_UINT32: 13,
                  TYPE_ENUM: 14,
                  TYPE_SFIXED32: 15,
                  TYPE_SFIXED64: 16,
                  TYPE_SINT32: 17,
                  TYPE_SINT64: 18
                }
              },
              Cardinality: {
                values: {
                  CARDINALITY_UNKNOWN: 0,
                  CARDINALITY_OPTIONAL: 1,
                  CARDINALITY_REQUIRED: 2,
                  CARDINALITY_REPEATED: 3
                }
              }
            }
          },
          Enum: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              enumvalue: {
                rule: "repeated",
                type: "EnumValue",
                id: 2
              },
              options: {
                rule: "repeated",
                type: "Option",
                id: 3
              },
              sourceContext: {
                type: "SourceContext",
                id: 4
              },
              syntax: {
                type: "Syntax",
                id: 5
              }
            }
          },
          EnumValue: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              number: {
                type: "int32",
                id: 2
              },
              options: {
                rule: "repeated",
                type: "Option",
                id: 3
              }
            }
          },
          Option: {
            fields: {
              name: {
                type: "string",
                id: 1
              },
              value: {
                type: "Any",
                id: 2
              }
            }
          },
          Syntax: {
            values: {
              SYNTAX_PROTO2: 0,
              SYNTAX_PROTO3: 1
            }
          },
          Any: {
            fields: {
              type_url: {
                type: "string",
                id: 1
              },
              value: {
                type: "bytes",
                id: 2
              }
            }
          },
          SourceContext: {
            fields: {
              fileName: {
                type: "string",
                id: 1
              }
            }
          }
        }
      }
    }
  }
};
var require$$6 = {
  nested
};
Object.defineProperty(util$2, "__esModule", { value: true });
var fs = import_fs.default;
var path$1 = import_path.default;
var Protobuf$1 = protobufjs;
function addIncludePathResolver(root2, includePaths) {
  const originalResolvePath = root2.resolvePath;
  root2.resolvePath = (origin, target) => {
    if (path$1.isAbsolute(target)) {
      return target;
    }
    for (const directory of includePaths) {
      const fullPath = path$1.join(directory, target);
      try {
        fs.accessSync(fullPath, fs.constants.R_OK);
        return fullPath;
      } catch (err) {
        continue;
      }
    }
    process.emitWarning(`${target} not found in any of the include paths ${includePaths}`);
    return originalResolvePath(origin, target);
  };
}
async function loadProtosWithOptions(filename, options2) {
  const root2 = new Protobuf$1.Root();
  options2 = options2 || {};
  if (!!options2.includeDirs) {
    if (!Array.isArray(options2.includeDirs)) {
      return Promise.reject(new Error("The includeDirs option must be an array"));
    }
    addIncludePathResolver(root2, options2.includeDirs);
  }
  const loadedRoot = await root2.load(filename, options2);
  loadedRoot.resolveAll();
  return loadedRoot;
}
util$2.loadProtosWithOptions = loadProtosWithOptions;
function loadProtosWithOptionsSync(filename, options2) {
  const root2 = new Protobuf$1.Root();
  options2 = options2 || {};
  if (!!options2.includeDirs) {
    if (!Array.isArray(options2.includeDirs)) {
      throw new Error("The includeDirs option must be an array");
    }
    addIncludePathResolver(root2, options2.includeDirs);
  }
  const loadedRoot = root2.loadSync(filename, options2);
  loadedRoot.resolveAll();
  return loadedRoot;
}
util$2.loadProtosWithOptionsSync = loadProtosWithOptionsSync;
function addCommonProtos() {
  const apiDescriptor = require$$3;
  const descriptorDescriptor = require$$4;
  const sourceContextDescriptor = require$$5;
  const typeDescriptor = require$$6;
  Protobuf$1.common("api", apiDescriptor.nested.google.nested.protobuf.nested);
  Protobuf$1.common("descriptor", descriptorDescriptor.nested.google.nested.protobuf.nested);
  Protobuf$1.common("source_context", sourceContextDescriptor.nested.google.nested.protobuf.nested);
  Protobuf$1.common("type", typeDescriptor.nested.google.nested.protobuf.nested);
}
util$2.addCommonProtos = addCommonProtos;
Object.defineProperty(src$1, "__esModule", { value: true });
var camelCase = lodash_camelcase;
var Protobuf = protobufjs;
var descriptor = descriptor$1.exports;
var util_1 = util$2;
function isAnyExtension(obj) {
  return "@type" in obj && typeof obj["@type"] === "string";
}
src$1.isAnyExtension = isAnyExtension;
var descriptorOptions = {
  longs: String,
  enums: String,
  bytes: String,
  defaults: true,
  oneofs: true,
  json: true
};
function joinName(baseName, name2) {
  if (baseName === "") {
    return name2;
  } else {
    return baseName + "." + name2;
  }
}
function isHandledReflectionObject(obj) {
  return obj instanceof Protobuf.Service || obj instanceof Protobuf.Type || obj instanceof Protobuf.Enum;
}
function isNamespaceBase(obj) {
  return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;
}
function getAllHandledReflectionObjects(obj, parentName) {
  const objName = joinName(parentName, obj.name);
  if (isHandledReflectionObject(obj)) {
    return [[objName, obj]];
  } else {
    if (isNamespaceBase(obj) && typeof obj.nested !== "undefined") {
      return Object.keys(obj.nested).map((name2) => {
        return getAllHandledReflectionObjects(obj.nested[name2], objName);
      }).reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);
    }
  }
  return [];
}
function createDeserializer(cls, options2) {
  return function deserialize(argBuf) {
    return cls.toObject(cls.decode(argBuf), options2);
  };
}
function createSerializer(cls) {
  return function serialize(arg) {
    const message2 = cls.fromObject(arg);
    return cls.encode(message2).finish();
  };
}
function createMethodDefinition(method2, serviceName, options2, fileDescriptors) {
  const requestType = method2.resolvedRequestType;
  const responseType = method2.resolvedResponseType;
  return {
    path: "/" + serviceName + "/" + method2.name,
    requestStream: !!method2.requestStream,
    responseStream: !!method2.responseStream,
    requestSerialize: createSerializer(requestType),
    requestDeserialize: createDeserializer(requestType, options2),
    responseSerialize: createSerializer(responseType),
    responseDeserialize: createDeserializer(responseType, options2),
    originalName: camelCase(method2.name),
    requestType: createMessageDefinition(requestType, fileDescriptors),
    responseType: createMessageDefinition(responseType, fileDescriptors)
  };
}
function createServiceDefinition(service2, name2, options2, fileDescriptors) {
  const def = {};
  for (const method2 of service2.methodsArray) {
    def[method2.name] = createMethodDefinition(method2, name2, options2, fileDescriptors);
  }
  return def;
}
function createMessageDefinition(message2, fileDescriptors) {
  const messageDescriptor = message2.toDescriptor("proto3");
  return {
    format: "Protocol Buffer 3 DescriptorProto",
    type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),
    fileDescriptorProtos: fileDescriptors
  };
}
function createEnumDefinition(enumType, fileDescriptors) {
  const enumDescriptor = enumType.toDescriptor("proto3");
  return {
    format: "Protocol Buffer 3 EnumDescriptorProto",
    type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),
    fileDescriptorProtos: fileDescriptors
  };
}
function createDefinition(obj, name2, options2, fileDescriptors) {
  if (obj instanceof Protobuf.Service) {
    return createServiceDefinition(obj, name2, options2, fileDescriptors);
  } else if (obj instanceof Protobuf.Type) {
    return createMessageDefinition(obj, fileDescriptors);
  } else if (obj instanceof Protobuf.Enum) {
    return createEnumDefinition(obj, fileDescriptors);
  } else {
    throw new Error("Type mismatch in reflection object handling");
  }
}
function createPackageDefinition(root2, options2) {
  const def = {};
  root2.resolveAll();
  const descriptorList = root2.toDescriptor("proto3").file;
  const bufferList = descriptorList.map((value) => Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));
  for (const [name2, obj] of getAllHandledReflectionObjects(root2, "")) {
    def[name2] = createDefinition(obj, name2, options2, bufferList);
  }
  return def;
}
function createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options2) {
  options2 = options2 || {};
  const root2 = Protobuf.Root.fromDescriptor(decodedDescriptorSet);
  root2.resolveAll();
  return createPackageDefinition(root2, options2);
}
function load(filename, options2) {
  return util_1.loadProtosWithOptions(filename, options2).then((loadedRoot) => {
    return createPackageDefinition(loadedRoot, options2);
  });
}
src$1.load = load;
function loadSync(filename, options2) {
  const loadedRoot = util_1.loadProtosWithOptionsSync(filename, options2);
  return createPackageDefinition(loadedRoot, options2);
}
src$1.loadSync = loadSync;
function fromJSON(json, options2) {
  options2 = options2 || {};
  const loadedRoot = Protobuf.Root.fromJSON(json);
  loadedRoot.resolveAll();
  return createPackageDefinition(loadedRoot, options2);
}
src$1.fromJSON = fromJSON;
function loadFileDescriptorSetFromBuffer(descriptorSet, options2) {
  const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);
  return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options2);
}
src$1.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;
function loadFileDescriptorSetFromObject(descriptorSet, options2) {
  const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);
  return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options2);
}
src$1.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;
util_1.addCommonProtos();
Object.defineProperty(index_node_cjs, "__esModule", { value: true });
var tslib = tslib$1.exports;
var app = import_app.default;
var component = require$$2;
var logger = require$$3$1;
var util$1 = import_util2.default;
var util = require$$5$1;
var crypto = import_crypto2.default;
var grpcJs = src$2;
var package_json = require$$8;
var path = import_path.default;
var protoLoader = src$1;
var name = "@firebase/firestore";
var version$1 = "3.1.0";
var User = function() {
  function User2(uid) {
    this.uid = uid;
  }
  User2.prototype.isAuthenticated = function() {
    return this.uid != null;
  };
  User2.prototype.toKey = function() {
    if (this.isAuthenticated()) {
      return "uid:" + this.uid;
    } else {
      return "anonymous-user";
    }
  };
  User2.prototype.isEqual = function(otherUser) {
    return otherUser.uid === this.uid;
  };
  return User2;
}();
User.UNAUTHENTICATED = new User(null);
User.GOOGLE_CREDENTIALS = new User("google-credentials-uid");
User.FIRST_PARTY = new User("first-party-uid");
User.MOCK_USER = new User("mock-user");
var version = "9.1.0";
var SDK_VERSION = version;
function setSDKVersion(version2) {
  SDK_VERSION = version2;
}
function formatJSON(value) {
  return util$1.inspect(value, { depth: 100 });
}
var logClient = new logger.Logger("@firebase/firestore");
function getLogLevel() {
  return logClient.logLevel;
}
function setLogLevel(logLevel) {
  logClient.setLogLevel(logLevel);
}
function logDebug(msg) {
  var obj = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    obj[_i - 1] = arguments[_i];
  }
  if (logClient.logLevel <= logger.LogLevel.DEBUG) {
    var args = obj.map(argToString);
    logClient.debug.apply(logClient, tslib.__spreadArray(["Firestore (" + SDK_VERSION + "): " + msg], args));
  }
}
function logError(msg) {
  var obj = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    obj[_i - 1] = arguments[_i];
  }
  if (logClient.logLevel <= logger.LogLevel.ERROR) {
    var args = obj.map(argToString);
    logClient.error.apply(logClient, tslib.__spreadArray(["Firestore (" + SDK_VERSION + "): " + msg], args));
  }
}
function logWarn(msg) {
  var obj = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    obj[_i - 1] = arguments[_i];
  }
  if (logClient.logLevel <= logger.LogLevel.WARN) {
    var args = obj.map(argToString);
    logClient.warn.apply(logClient, tslib.__spreadArray(["Firestore (" + SDK_VERSION + "): " + msg], args));
  }
}
function argToString(obj) {
  if (typeof obj === "string") {
    return obj;
  } else {
    try {
      return formatJSON(obj);
    } catch (e) {
      return obj;
    }
  }
}
function fail(failure) {
  if (failure === void 0) {
    failure = "Unexpected state";
  }
  var message2 = "FIRESTORE (" + SDK_VERSION + ") INTERNAL ASSERTION FAILED: " + failure;
  logError(message2);
  throw new Error(message2);
}
function hardAssert(assertion, message2) {
  if (!assertion) {
    fail();
  }
}
function debugAssert(assertion, message2) {
  if (!assertion) {
    fail();
  }
}
function debugCast(obj, constructor) {
  return obj;
}
var Code = {
  OK: "ok",
  CANCELLED: "cancelled",
  UNKNOWN: "unknown",
  INVALID_ARGUMENT: "invalid-argument",
  DEADLINE_EXCEEDED: "deadline-exceeded",
  NOT_FOUND: "not-found",
  ALREADY_EXISTS: "already-exists",
  PERMISSION_DENIED: "permission-denied",
  UNAUTHENTICATED: "unauthenticated",
  RESOURCE_EXHAUSTED: "resource-exhausted",
  FAILED_PRECONDITION: "failed-precondition",
  ABORTED: "aborted",
  OUT_OF_RANGE: "out-of-range",
  UNIMPLEMENTED: "unimplemented",
  INTERNAL: "internal",
  UNAVAILABLE: "unavailable",
  DATA_LOSS: "data-loss"
};
var FirestoreError = function(_super) {
  tslib.__extends(FirestoreError2, _super);
  function FirestoreError2(code, message2) {
    var _this = _super.call(this, message2) || this;
    _this.code = code;
    _this.message = message2;
    _this.name = "FirebaseError";
    _this.toString = function() {
      return _this.name + ": [code=" + _this.code + "]: " + _this.message;
    };
    return _this;
  }
  return FirestoreError2;
}(Error);
var Deferred = function() {
  function Deferred2() {
    var _this = this;
    this.promise = new Promise(function(resolve6, reject) {
      _this.resolve = resolve6;
      _this.reject = reject;
    });
  }
  return Deferred2;
}();
var OAuthToken = function() {
  function OAuthToken2(value, user2) {
    this.user = user2;
    this.type = "OAuth";
    this.authHeaders = {};
    this.authHeaders["Authorization"] = "Bearer " + value;
  }
  return OAuthToken2;
}();
var EmptyCredentialsProvider = function() {
  function EmptyCredentialsProvider2() {
  }
  EmptyCredentialsProvider2.prototype.getToken = function() {
    return Promise.resolve(null);
  };
  EmptyCredentialsProvider2.prototype.invalidateToken = function() {
  };
  EmptyCredentialsProvider2.prototype.start = function(asyncQueue, changeListener) {
    asyncQueue.enqueueRetryable(function() {
      return changeListener(User.UNAUTHENTICATED);
    });
  };
  EmptyCredentialsProvider2.prototype.shutdown = function() {
  };
  return EmptyCredentialsProvider2;
}();
var EmulatorCredentialsProvider = function() {
  function EmulatorCredentialsProvider2(token) {
    this.token = token;
    this.changeListener = null;
  }
  EmulatorCredentialsProvider2.prototype.getToken = function() {
    return Promise.resolve(this.token);
  };
  EmulatorCredentialsProvider2.prototype.invalidateToken = function() {
  };
  EmulatorCredentialsProvider2.prototype.start = function(asyncQueue, changeListener) {
    var _this = this;
    this.changeListener = changeListener;
    asyncQueue.enqueueRetryable(function() {
      return changeListener(_this.token.user);
    });
  };
  EmulatorCredentialsProvider2.prototype.shutdown = function() {
    this.changeListener = null;
  };
  return EmulatorCredentialsProvider2;
}();
var FirebaseCredentialsProvider = function() {
  function FirebaseCredentialsProvider2(authProvider) {
    this.authProvider = authProvider;
    this.currentUser = User.UNAUTHENTICATED;
    this.tokenCounter = 0;
    this.forceRefresh = false;
    this.auth = null;
  }
  FirebaseCredentialsProvider2.prototype.start = function(asyncQueue, changeListener) {
    var _this = this;
    var lastTokenId = this.tokenCounter;
    var guardedChangeListener = function(user2) {
      if (_this.tokenCounter !== lastTokenId) {
        lastTokenId = _this.tokenCounter;
        return changeListener(user2);
      } else {
        return Promise.resolve();
      }
    };
    var nextToken = new Deferred();
    this.tokenListener = function() {
      _this.tokenCounter++;
      _this.currentUser = _this.getUser();
      nextToken.resolve();
      nextToken = new Deferred();
      asyncQueue.enqueueRetryable(function() {
        return guardedChangeListener(_this.currentUser);
      });
    };
    var awaitNextToken = function() {
      var currentTokenAttempt = nextToken;
      asyncQueue.enqueueRetryable(function() {
        return tslib.__awaiter(_this, void 0, void 0, function() {
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                return [4, currentTokenAttempt.promise];
              case 1:
                _d.sent();
                return [4, guardedChangeListener(this.currentUser)];
              case 2:
                _d.sent();
                return [2];
            }
          });
        });
      });
    };
    var registerAuth2 = function(auth) {
      logDebug("FirebaseCredentialsProvider", "Auth detected");
      _this.auth = auth;
      _this.auth.addAuthTokenListener(_this.tokenListener);
      awaitNextToken();
    };
    this.authProvider.onInit(function(auth) {
      return registerAuth2(auth);
    });
    setTimeout(function() {
      if (!_this.auth) {
        var auth = _this.authProvider.getImmediate({ optional: true });
        if (auth) {
          registerAuth2(auth);
        } else {
          logDebug("FirebaseCredentialsProvider", "Auth not yet detected");
          nextToken.resolve();
          nextToken = new Deferred();
        }
      }
    }, 0);
    awaitNextToken();
  };
  FirebaseCredentialsProvider2.prototype.getToken = function() {
    var _this = this;
    var initialTokenCounter = this.tokenCounter;
    var forceRefresh = this.forceRefresh;
    this.forceRefresh = false;
    if (!this.auth) {
      return Promise.resolve(null);
    }
    return this.auth.getToken(forceRefresh).then(function(tokenData) {
      if (_this.tokenCounter !== initialTokenCounter) {
        logDebug("FirebaseCredentialsProvider", "getToken aborted due to token change.");
        return _this.getToken();
      } else {
        if (tokenData) {
          hardAssert(typeof tokenData.accessToken === "string");
          return new OAuthToken(tokenData.accessToken, _this.currentUser);
        } else {
          return null;
        }
      }
    });
  };
  FirebaseCredentialsProvider2.prototype.invalidateToken = function() {
    this.forceRefresh = true;
  };
  FirebaseCredentialsProvider2.prototype.shutdown = function() {
    if (this.auth) {
      this.auth.removeAuthTokenListener(this.tokenListener);
    }
  };
  FirebaseCredentialsProvider2.prototype.getUser = function() {
    var currentUid = this.auth && this.auth.getUid();
    hardAssert(currentUid === null || typeof currentUid === "string");
    return new User(currentUid);
  };
  return FirebaseCredentialsProvider2;
}();
var FirstPartyToken = function() {
  function FirstPartyToken2(gapi, sessionIndex, iamToken) {
    this.gapi = gapi;
    this.sessionIndex = sessionIndex;
    this.iamToken = iamToken;
    this.type = "FirstParty";
    this.user = User.FIRST_PARTY;
  }
  Object.defineProperty(FirstPartyToken2.prototype, "authHeaders", {
    get: function() {
      var headers = {
        "X-Goog-AuthUser": this.sessionIndex
      };
      var authHeader = this.gapi["auth"]["getAuthHeaderValueForFirstParty"]([]);
      if (authHeader) {
        headers["Authorization"] = authHeader;
      }
      if (this.iamToken) {
        headers["X-Goog-Iam-Authorization-Token"] = this.iamToken;
      }
      return headers;
    },
    enumerable: false,
    configurable: true
  });
  return FirstPartyToken2;
}();
var FirstPartyCredentialsProvider = function() {
  function FirstPartyCredentialsProvider2(gapi, sessionIndex, iamToken) {
    this.gapi = gapi;
    this.sessionIndex = sessionIndex;
    this.iamToken = iamToken;
  }
  FirstPartyCredentialsProvider2.prototype.getToken = function() {
    return Promise.resolve(new FirstPartyToken(this.gapi, this.sessionIndex, this.iamToken));
  };
  FirstPartyCredentialsProvider2.prototype.start = function(asyncQueue, changeListener) {
    asyncQueue.enqueueRetryable(function() {
      return changeListener(User.FIRST_PARTY);
    });
  };
  FirstPartyCredentialsProvider2.prototype.shutdown = function() {
  };
  FirstPartyCredentialsProvider2.prototype.invalidateToken = function() {
  };
  return FirstPartyCredentialsProvider2;
}();
function makeCredentialsProvider(credentials) {
  if (!credentials) {
    return new EmptyCredentialsProvider();
  }
  switch (credentials["type"]) {
    case "gapi":
      var client2 = credentials["client"];
      hardAssert(!!(typeof client2 === "object" && client2 !== null && client2["auth"] && client2["auth"]["getAuthHeaderValueForFirstParty"]));
      return new FirstPartyCredentialsProvider(client2, credentials["sessionIndex"] || "0", credentials["iamToken"] || null);
    case "provider":
      return credentials["client"];
    default:
      throw new FirestoreError(Code.INVALID_ARGUMENT, "makeCredentialsProvider failed due to invalid credential type");
  }
}
var ListenSequence = function() {
  function ListenSequence2(previousValue, sequenceNumberSyncer) {
    var _this = this;
    this.previousValue = previousValue;
    if (sequenceNumberSyncer) {
      sequenceNumberSyncer.sequenceNumberHandler = function(sequenceNumber) {
        return _this.setPreviousValue(sequenceNumber);
      };
      this.writeNewSequenceNumber = function(sequenceNumber) {
        return sequenceNumberSyncer.writeSequenceNumber(sequenceNumber);
      };
    }
  }
  ListenSequence2.prototype.setPreviousValue = function(externalPreviousValue) {
    this.previousValue = Math.max(externalPreviousValue, this.previousValue);
    return this.previousValue;
  };
  ListenSequence2.prototype.next = function() {
    var nextValue = ++this.previousValue;
    if (this.writeNewSequenceNumber) {
      this.writeNewSequenceNumber(nextValue);
    }
    return nextValue;
  };
  return ListenSequence2;
}();
ListenSequence.INVALID = -1;
var DOCUMENT_KEY_NAME = "__name__";
var BasePath = function() {
  function BasePath2(segments, offset, length2) {
    if (offset === void 0) {
      offset = 0;
    } else if (offset > segments.length) {
      fail();
    }
    if (length2 === void 0) {
      length2 = segments.length - offset;
    } else if (length2 > segments.length - offset) {
      fail();
    }
    this.segments = segments;
    this.offset = offset;
    this.len = length2;
  }
  Object.defineProperty(BasePath2.prototype, "length", {
    get: function() {
      return this.len;
    },
    enumerable: false,
    configurable: true
  });
  BasePath2.prototype.isEqual = function(other) {
    return BasePath2.comparator(this, other) === 0;
  };
  BasePath2.prototype.child = function(nameOrPath) {
    var segments = this.segments.slice(this.offset, this.limit());
    if (nameOrPath instanceof BasePath2) {
      nameOrPath.forEach(function(segment) {
        segments.push(segment);
      });
    } else {
      segments.push(nameOrPath);
    }
    return this.construct(segments);
  };
  BasePath2.prototype.limit = function() {
    return this.offset + this.length;
  };
  BasePath2.prototype.popFirst = function(size) {
    size = size === void 0 ? 1 : size;
    return this.construct(this.segments, this.offset + size, this.length - size);
  };
  BasePath2.prototype.popLast = function() {
    return this.construct(this.segments, this.offset, this.length - 1);
  };
  BasePath2.prototype.firstSegment = function() {
    return this.segments[this.offset];
  };
  BasePath2.prototype.lastSegment = function() {
    return this.get(this.length - 1);
  };
  BasePath2.prototype.get = function(index2) {
    return this.segments[this.offset + index2];
  };
  BasePath2.prototype.isEmpty = function() {
    return this.length === 0;
  };
  BasePath2.prototype.isPrefixOf = function(other) {
    if (other.length < this.length) {
      return false;
    }
    for (var i = 0; i < this.length; i++) {
      if (this.get(i) !== other.get(i)) {
        return false;
      }
    }
    return true;
  };
  BasePath2.prototype.isImmediateParentOf = function(potentialChild) {
    if (this.length + 1 !== potentialChild.length) {
      return false;
    }
    for (var i = 0; i < this.length; i++) {
      if (this.get(i) !== potentialChild.get(i)) {
        return false;
      }
    }
    return true;
  };
  BasePath2.prototype.forEach = function(fn) {
    for (var i = this.offset, end2 = this.limit(); i < end2; i++) {
      fn(this.segments[i]);
    }
  };
  BasePath2.prototype.toArray = function() {
    return this.segments.slice(this.offset, this.limit());
  };
  BasePath2.comparator = function(p1, p2) {
    var len = Math.min(p1.length, p2.length);
    for (var i = 0; i < len; i++) {
      var left = p1.get(i);
      var right = p2.get(i);
      if (left < right) {
        return -1;
      }
      if (left > right) {
        return 1;
      }
    }
    if (p1.length < p2.length) {
      return -1;
    }
    if (p1.length > p2.length) {
      return 1;
    }
    return 0;
  };
  return BasePath2;
}();
var ResourcePath = function(_super) {
  tslib.__extends(ResourcePath2, _super);
  function ResourcePath2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ResourcePath2.prototype.construct = function(segments, offset, length2) {
    return new ResourcePath2(segments, offset, length2);
  };
  ResourcePath2.prototype.canonicalString = function() {
    return this.toArray().join("/");
  };
  ResourcePath2.prototype.toString = function() {
    return this.canonicalString();
  };
  ResourcePath2.fromString = function() {
    var pathComponents = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      pathComponents[_i] = arguments[_i];
    }
    var segments = [];
    for (var _d = 0, pathComponents_1 = pathComponents; _d < pathComponents_1.length; _d++) {
      var path2 = pathComponents_1[_d];
      if (path2.indexOf("//") >= 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid segment (" + path2 + "). Paths must not contain // in them.");
      }
      segments.push.apply(segments, path2.split("/").filter(function(segment) {
        return segment.length > 0;
      }));
    }
    return new ResourcePath2(segments);
  };
  ResourcePath2.emptyPath = function() {
    return new ResourcePath2([]);
  };
  return ResourcePath2;
}(BasePath);
var identifierRegExp = /^[_a-zA-Z][_a-zA-Z0-9]*$/;
var FieldPath$1 = function(_super) {
  tslib.__extends(FieldPath$12, _super);
  function FieldPath$12() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  FieldPath$12.prototype.construct = function(segments, offset, length2) {
    return new FieldPath$12(segments, offset, length2);
  };
  FieldPath$12.isValidIdentifier = function(segment) {
    return identifierRegExp.test(segment);
  };
  FieldPath$12.prototype.canonicalString = function() {
    return this.toArray().map(function(str) {
      str = str.replace(/\\/g, "\\\\").replace(/`/g, "\\`");
      if (!FieldPath$12.isValidIdentifier(str)) {
        str = "`" + str + "`";
      }
      return str;
    }).join(".");
  };
  FieldPath$12.prototype.toString = function() {
    return this.canonicalString();
  };
  FieldPath$12.prototype.isKeyField = function() {
    return this.length === 1 && this.get(0) === DOCUMENT_KEY_NAME;
  };
  FieldPath$12.keyField = function() {
    return new FieldPath$12([DOCUMENT_KEY_NAME]);
  };
  FieldPath$12.fromServerFormat = function(path2) {
    var segments = [];
    var current = "";
    var i = 0;
    var addCurrentSegment = function() {
      if (current.length === 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field path (" + path2 + "). Paths must not be empty, begin with '.', end with '.', or contain '..'");
      }
      segments.push(current);
      current = "";
    };
    var inBackticks = false;
    while (i < path2.length) {
      var c = path2[i];
      if (c === "\\") {
        if (i + 1 === path2.length) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Path has trailing escape character: " + path2);
        }
        var next = path2[i + 1];
        if (!(next === "\\" || next === "." || next === "`")) {
          throw new FirestoreError(Code.INVALID_ARGUMENT, "Path has invalid escape sequence: " + path2);
        }
        current += next;
        i += 2;
      } else if (c === "`") {
        inBackticks = !inBackticks;
        i++;
      } else if (c === "." && !inBackticks) {
        addCurrentSegment();
        i++;
      } else {
        current += c;
        i++;
      }
    }
    addCurrentSegment();
    if (inBackticks) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Unterminated ` in path: " + path2);
    }
    return new FieldPath$12(segments);
  };
  FieldPath$12.emptyPath = function() {
    return new FieldPath$12([]);
  };
  return FieldPath$12;
}(BasePath);
var escapeChar = "";
var encodedSeparatorChar = "";
var encodedNul = "";
var encodedEscape = "";
function encodeResourcePath(path2) {
  var result = "";
  for (var i = 0; i < path2.length; i++) {
    if (result.length > 0) {
      result = encodeSeparator(result);
    }
    result = encodeSegment(path2.get(i), result);
  }
  return encodeSeparator(result);
}
function encodeSegment(segment, resultBuf) {
  var result = resultBuf;
  var length2 = segment.length;
  for (var i = 0; i < length2; i++) {
    var c = segment.charAt(i);
    switch (c) {
      case "\0":
        result += escapeChar + encodedNul;
        break;
      case escapeChar:
        result += escapeChar + encodedEscape;
        break;
      default:
        result += c;
    }
  }
  return result;
}
function encodeSeparator(result) {
  return result + escapeChar + encodedSeparatorChar;
}
function decodeResourcePath(path2) {
  var length2 = path2.length;
  hardAssert(length2 >= 2);
  if (length2 === 2) {
    hardAssert(path2.charAt(0) === escapeChar && path2.charAt(1) === encodedSeparatorChar);
    return ResourcePath.emptyPath();
  }
  var lastReasonableEscapeIndex = length2 - 2;
  var segments = [];
  var segmentBuilder = "";
  for (var start = 0; start < length2; ) {
    var end2 = path2.indexOf(escapeChar, start);
    if (end2 < 0 || end2 > lastReasonableEscapeIndex) {
      fail();
    }
    var next = path2.charAt(end2 + 1);
    switch (next) {
      case encodedSeparatorChar:
        var currentPiece = path2.substring(start, end2);
        var segment = void 0;
        if (segmentBuilder.length === 0) {
          segment = currentPiece;
        } else {
          segmentBuilder += currentPiece;
          segment = segmentBuilder;
          segmentBuilder = "";
        }
        segments.push(segment);
        break;
      case encodedNul:
        segmentBuilder += path2.substring(start, end2);
        segmentBuilder += "\0";
        break;
      case encodedEscape:
        segmentBuilder += path2.substring(start, end2 + 1);
        break;
      default:
        fail();
    }
    start = end2 + 2;
  }
  return new ResourcePath(segments);
}
var SCHEMA_VERSION = 11;
var DbTimestamp = function() {
  function DbTimestamp2(seconds, nanoseconds) {
    this.seconds = seconds;
    this.nanoseconds = nanoseconds;
  }
  return DbTimestamp2;
}();
var DbPrimaryClient = function() {
  function DbPrimaryClient2(ownerId, allowTabSynchronization, leaseTimestampMs) {
    this.ownerId = ownerId;
    this.allowTabSynchronization = allowTabSynchronization;
    this.leaseTimestampMs = leaseTimestampMs;
  }
  return DbPrimaryClient2;
}();
DbPrimaryClient.store = "owner";
DbPrimaryClient.key = "owner";
var DbMutationQueue = function() {
  function DbMutationQueue2(userId, lastAcknowledgedBatchId, lastStreamToken) {
    this.userId = userId;
    this.lastAcknowledgedBatchId = lastAcknowledgedBatchId;
    this.lastStreamToken = lastStreamToken;
  }
  return DbMutationQueue2;
}();
DbMutationQueue.store = "mutationQueues";
DbMutationQueue.keyPath = "userId";
var DbMutationBatch = function() {
  function DbMutationBatch2(userId, batchId, localWriteTimeMs, baseMutations, mutations) {
    this.userId = userId;
    this.batchId = batchId;
    this.localWriteTimeMs = localWriteTimeMs;
    this.baseMutations = baseMutations;
    this.mutations = mutations;
  }
  return DbMutationBatch2;
}();
DbMutationBatch.store = "mutations";
DbMutationBatch.keyPath = "batchId";
DbMutationBatch.userMutationsIndex = "userMutationsIndex";
DbMutationBatch.userMutationsKeyPath = ["userId", "batchId"];
var DbDocumentMutation = function() {
  function DbDocumentMutation2() {
  }
  DbDocumentMutation2.prefixForUser = function(userId) {
    return [userId];
  };
  DbDocumentMutation2.prefixForPath = function(userId, path2) {
    return [userId, encodeResourcePath(path2)];
  };
  DbDocumentMutation2.key = function(userId, path2, batchId) {
    return [userId, encodeResourcePath(path2), batchId];
  };
  return DbDocumentMutation2;
}();
DbDocumentMutation.store = "documentMutations";
DbDocumentMutation.PLACEHOLDER = new DbDocumentMutation();
var DbNoDocument = function() {
  function DbNoDocument2(path2, readTime) {
    this.path = path2;
    this.readTime = readTime;
  }
  return DbNoDocument2;
}();
var DbUnknownDocument = function() {
  function DbUnknownDocument2(path2, version2) {
    this.path = path2;
    this.version = version2;
  }
  return DbUnknownDocument2;
}();
var DbRemoteDocument = function() {
  function DbRemoteDocument2(unknownDocument, noDocument, document2, hasCommittedMutations, readTime, parentPath) {
    this.unknownDocument = unknownDocument;
    this.noDocument = noDocument;
    this.document = document2;
    this.hasCommittedMutations = hasCommittedMutations;
    this.readTime = readTime;
    this.parentPath = parentPath;
  }
  return DbRemoteDocument2;
}();
DbRemoteDocument.store = "remoteDocuments";
DbRemoteDocument.readTimeIndex = "readTimeIndex";
DbRemoteDocument.readTimeIndexPath = "readTime";
DbRemoteDocument.collectionReadTimeIndex = "collectionReadTimeIndex";
DbRemoteDocument.collectionReadTimeIndexPath = ["parentPath", "readTime"];
var DbRemoteDocumentGlobal = function() {
  function DbRemoteDocumentGlobal2(byteSize) {
    this.byteSize = byteSize;
  }
  return DbRemoteDocumentGlobal2;
}();
DbRemoteDocumentGlobal.store = "remoteDocumentGlobal";
DbRemoteDocumentGlobal.key = "remoteDocumentGlobalKey";
var DbTarget = function() {
  function DbTarget2(targetId, canonicalId2, readTime, resumeToken, lastListenSequenceNumber, lastLimboFreeSnapshotVersion, query2) {
    this.targetId = targetId;
    this.canonicalId = canonicalId2;
    this.readTime = readTime;
    this.resumeToken = resumeToken;
    this.lastListenSequenceNumber = lastListenSequenceNumber;
    this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;
    this.query = query2;
  }
  return DbTarget2;
}();
DbTarget.store = "targets";
DbTarget.keyPath = "targetId";
DbTarget.queryTargetsIndexName = "queryTargetsIndex";
DbTarget.queryTargetsKeyPath = ["canonicalId", "targetId"];
var DbTargetDocument = function() {
  function DbTargetDocument2(targetId, path2, sequenceNumber) {
    this.targetId = targetId;
    this.path = path2;
    this.sequenceNumber = sequenceNumber;
  }
  return DbTargetDocument2;
}();
DbTargetDocument.store = "targetDocuments";
DbTargetDocument.keyPath = ["targetId", "path"];
DbTargetDocument.documentTargetsIndex = "documentTargetsIndex";
DbTargetDocument.documentTargetsKeyPath = ["path", "targetId"];
var DbTargetGlobal = function() {
  function DbTargetGlobal2(highestTargetId, highestListenSequenceNumber, lastRemoteSnapshotVersion, targetCount) {
    this.highestTargetId = highestTargetId;
    this.highestListenSequenceNumber = highestListenSequenceNumber;
    this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;
    this.targetCount = targetCount;
  }
  return DbTargetGlobal2;
}();
DbTargetGlobal.key = "targetGlobalKey";
DbTargetGlobal.store = "targetGlobal";
var DbCollectionParent = function() {
  function DbCollectionParent2(collectionId, parent) {
    this.collectionId = collectionId;
    this.parent = parent;
  }
  return DbCollectionParent2;
}();
DbCollectionParent.store = "collectionParents";
DbCollectionParent.keyPath = ["collectionId", "parent"];
var DbClientMetadata = function() {
  function DbClientMetadata2(clientId, updateTimeMs, networkEnabled, inForeground) {
    this.clientId = clientId;
    this.updateTimeMs = updateTimeMs;
    this.networkEnabled = networkEnabled;
    this.inForeground = inForeground;
  }
  return DbClientMetadata2;
}();
DbClientMetadata.store = "clientMetadata";
DbClientMetadata.keyPath = "clientId";
var DbBundle = function() {
  function DbBundle2(bundleId, createTime, version2) {
    this.bundleId = bundleId;
    this.createTime = createTime;
    this.version = version2;
  }
  return DbBundle2;
}();
DbBundle.store = "bundles";
DbBundle.keyPath = "bundleId";
var DbNamedQuery = function() {
  function DbNamedQuery2(name2, readTime, bundledQuery) {
    this.name = name2;
    this.readTime = readTime;
    this.bundledQuery = bundledQuery;
  }
  return DbNamedQuery2;
}();
DbNamedQuery.store = "namedQueries";
DbNamedQuery.keyPath = "name";
var V1_STORES = [
  DbMutationQueue.store,
  DbMutationBatch.store,
  DbDocumentMutation.store,
  DbRemoteDocument.store,
  DbTarget.store,
  DbPrimaryClient.store,
  DbTargetGlobal.store,
  DbTargetDocument.store
];
var V3_STORES = V1_STORES;
var V4_STORES = tslib.__spreadArray(tslib.__spreadArray([], V3_STORES), [DbClientMetadata.store]);
var V6_STORES = tslib.__spreadArray(tslib.__spreadArray([], V4_STORES), [DbRemoteDocumentGlobal.store]);
var V8_STORES = tslib.__spreadArray(tslib.__spreadArray([], V6_STORES), [DbCollectionParent.store]);
var V11_STORES = tslib.__spreadArray(tslib.__spreadArray([], V8_STORES), [DbBundle.store, DbNamedQuery.store]);
var ALL_STORES = V11_STORES;
var PRIMARY_LEASE_LOST_ERROR_MSG = "The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";
var PersistenceTransaction = function() {
  function PersistenceTransaction2() {
    this.onCommittedListeners = [];
  }
  PersistenceTransaction2.prototype.addOnCommittedListener = function(listener) {
    this.onCommittedListeners.push(listener);
  };
  PersistenceTransaction2.prototype.raiseOnCommittedEvent = function() {
    this.onCommittedListeners.forEach(function(listener) {
      return listener();
    });
  };
  return PersistenceTransaction2;
}();
var PersistencePromise = function() {
  function PersistencePromise2(callback) {
    var _this = this;
    this.nextCallback = null;
    this.catchCallback = null;
    this.result = void 0;
    this.error = void 0;
    this.isDone = false;
    this.callbackAttached = false;
    callback(function(value) {
      _this.isDone = true;
      _this.result = value;
      if (_this.nextCallback) {
        _this.nextCallback(value);
      }
    }, function(error2) {
      _this.isDone = true;
      _this.error = error2;
      if (_this.catchCallback) {
        _this.catchCallback(error2);
      }
    });
  }
  PersistencePromise2.prototype.catch = function(fn) {
    return this.next(void 0, fn);
  };
  PersistencePromise2.prototype.next = function(nextFn, catchFn) {
    var _this = this;
    if (this.callbackAttached) {
      fail();
    }
    this.callbackAttached = true;
    if (this.isDone) {
      if (!this.error) {
        return this.wrapSuccess(nextFn, this.result);
      } else {
        return this.wrapFailure(catchFn, this.error);
      }
    } else {
      return new PersistencePromise2(function(resolve6, reject) {
        _this.nextCallback = function(value) {
          _this.wrapSuccess(nextFn, value).next(resolve6, reject);
        };
        _this.catchCallback = function(error2) {
          _this.wrapFailure(catchFn, error2).next(resolve6, reject);
        };
      });
    }
  };
  PersistencePromise2.prototype.toPromise = function() {
    var _this = this;
    return new Promise(function(resolve6, reject) {
      _this.next(resolve6, reject);
    });
  };
  PersistencePromise2.prototype.wrapUserFunction = function(fn) {
    try {
      var result = fn();
      if (result instanceof PersistencePromise2) {
        return result;
      } else {
        return PersistencePromise2.resolve(result);
      }
    } catch (e) {
      return PersistencePromise2.reject(e);
    }
  };
  PersistencePromise2.prototype.wrapSuccess = function(nextFn, value) {
    if (nextFn) {
      return this.wrapUserFunction(function() {
        return nextFn(value);
      });
    } else {
      return PersistencePromise2.resolve(value);
    }
  };
  PersistencePromise2.prototype.wrapFailure = function(catchFn, error2) {
    if (catchFn) {
      return this.wrapUserFunction(function() {
        return catchFn(error2);
      });
    } else {
      return PersistencePromise2.reject(error2);
    }
  };
  PersistencePromise2.resolve = function(result) {
    return new PersistencePromise2(function(resolve6, reject) {
      resolve6(result);
    });
  };
  PersistencePromise2.reject = function(error2) {
    return new PersistencePromise2(function(resolve6, reject) {
      reject(error2);
    });
  };
  PersistencePromise2.waitFor = function(all) {
    return new PersistencePromise2(function(resolve6, reject) {
      var expectedCount = 0;
      var resolvedCount = 0;
      var done = false;
      all.forEach(function(element) {
        ++expectedCount;
        element.next(function() {
          ++resolvedCount;
          if (done && resolvedCount === expectedCount) {
            resolve6();
          }
        }, function(err) {
          return reject(err);
        });
      });
      done = true;
      if (resolvedCount === expectedCount) {
        resolve6();
      }
    });
  };
  PersistencePromise2.or = function(predicates) {
    var p = PersistencePromise2.resolve(false);
    var _loop_1 = function(predicate2) {
      p = p.next(function(isTrue) {
        if (isTrue) {
          return PersistencePromise2.resolve(isTrue);
        } else {
          return predicate2();
        }
      });
    };
    for (var _i = 0, predicates_1 = predicates; _i < predicates_1.length; _i++) {
      var predicate = predicates_1[_i];
      _loop_1(predicate);
    }
    return p;
  };
  PersistencePromise2.forEach = function(collection2, f) {
    var _this = this;
    var promises = [];
    collection2.forEach(function(r, s2) {
      promises.push(f.call(_this, r, s2));
    });
    return this.waitFor(promises);
  };
  return PersistencePromise2;
}();
var LOG_TAG$g = "SimpleDb";
var TRANSACTION_RETRY_COUNT = 3;
var SimpleDbTransaction = function() {
  function SimpleDbTransaction2(action, transaction) {
    var _this = this;
    this.action = action;
    this.transaction = transaction;
    this.aborted = false;
    this.completionDeferred = new Deferred();
    this.transaction.oncomplete = function() {
      _this.completionDeferred.resolve();
    };
    this.transaction.onabort = function() {
      if (transaction.error) {
        _this.completionDeferred.reject(new IndexedDbTransactionError(action, transaction.error));
      } else {
        _this.completionDeferred.resolve();
      }
    };
    this.transaction.onerror = function(event) {
      var error2 = checkForAndReportiOSError(event.target.error);
      _this.completionDeferred.reject(new IndexedDbTransactionError(action, error2));
    };
  }
  SimpleDbTransaction2.open = function(db, action, mode, objectStoreNames) {
    try {
      return new SimpleDbTransaction2(action, db.transaction(objectStoreNames, mode));
    } catch (e) {
      throw new IndexedDbTransactionError(action, e);
    }
  };
  Object.defineProperty(SimpleDbTransaction2.prototype, "completionPromise", {
    get: function() {
      return this.completionDeferred.promise;
    },
    enumerable: false,
    configurable: true
  });
  SimpleDbTransaction2.prototype.abort = function(error2) {
    if (error2) {
      this.completionDeferred.reject(error2);
    }
    if (!this.aborted) {
      logDebug(LOG_TAG$g, "Aborting transaction:", error2 ? error2.message : "Client-initiated abort");
      this.aborted = true;
      this.transaction.abort();
    }
  };
  SimpleDbTransaction2.prototype.store = function(storeName) {
    var store = this.transaction.objectStore(storeName);
    return new SimpleDbStore(store);
  };
  return SimpleDbTransaction2;
}();
var SimpleDb = function() {
  function SimpleDb2(name2, version2, schemaConverter) {
    this.name = name2;
    this.version = version2;
    this.schemaConverter = schemaConverter;
    var iOSVersion = SimpleDb2.getIOSVersion(util.getUA());
    if (iOSVersion === 12.2) {
      logError("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
    }
  }
  SimpleDb2.delete = function(name2) {
    logDebug(LOG_TAG$g, "Removing database:", name2);
    return wrapRequest(window.indexedDB.deleteDatabase(name2)).toPromise();
  };
  SimpleDb2.isAvailable = function() {
    if (!util.isIndexedDBAvailable()) {
      return false;
    }
    if (SimpleDb2.isMockPersistence()) {
      return true;
    }
    var ua = util.getUA();
    var iOSVersion = SimpleDb2.getIOSVersion(ua);
    var isUnsupportedIOS = 0 < iOSVersion && iOSVersion < 10;
    var androidVersion = SimpleDb2.getAndroidVersion(ua);
    var isUnsupportedAndroid = 0 < androidVersion && androidVersion < 4.5;
    if (ua.indexOf("MSIE ") > 0 || ua.indexOf("Trident/") > 0 || ua.indexOf("Edge/") > 0 || isUnsupportedIOS || isUnsupportedAndroid) {
      return false;
    } else {
      return true;
    }
  };
  SimpleDb2.isMockPersistence = function() {
    var _a;
    return typeof process !== "undefined" && ((_a = process.env) === null || _a === void 0 ? void 0 : _a.USE_MOCK_PERSISTENCE) === "YES";
  };
  SimpleDb2.getStore = function(txn, store) {
    return txn.store(store);
  };
  SimpleDb2.getIOSVersion = function(ua) {
    var iOSVersionRegex = ua.match(/i(?:phone|pad|pod) os ([\d_]+)/i);
    var version2 = iOSVersionRegex ? iOSVersionRegex[1].split("_").slice(0, 2).join(".") : "-1";
    return Number(version2);
  };
  SimpleDb2.getAndroidVersion = function(ua) {
    var androidVersionRegex = ua.match(/Android ([\d.]+)/i);
    var version2 = androidVersionRegex ? androidVersionRegex[1].split(".").slice(0, 2).join(".") : "-1";
    return Number(version2);
  };
  SimpleDb2.prototype.ensureDb = function(action) {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var _d;
      var _this = this;
      return tslib.__generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            if (!!this.db)
              return [3, 2];
            logDebug(LOG_TAG$g, "Opening database:", this.name);
            _d = this;
            return [4, new Promise(function(resolve6, reject) {
              var request = indexedDB.open(_this.name, _this.version);
              request.onsuccess = function(event) {
                var db = event.target.result;
                resolve6(db);
              };
              request.onblocked = function() {
                reject(new IndexedDbTransactionError(action, "Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."));
              };
              request.onerror = function(event) {
                var error2 = event.target.error;
                if (error2.name === "VersionError") {
                  reject(new FirestoreError(Code.FAILED_PRECONDITION, "A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh."));
                } else if (error2.name === "InvalidStateError") {
                  reject(new FirestoreError(Code.FAILED_PRECONDITION, "Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: " + error2));
                } else {
                  reject(new IndexedDbTransactionError(action, error2));
                }
              };
              request.onupgradeneeded = function(event) {
                logDebug(LOG_TAG$g, 'Database "' + _this.name + '" requires upgrade from version:', event.oldVersion);
                var db = event.target.result;
                _this.schemaConverter.createOrUpgrade(db, request.transaction, event.oldVersion, _this.version).next(function() {
                  logDebug(LOG_TAG$g, "Database upgrade to version " + _this.version + " complete");
                });
              };
            })];
          case 1:
            _d.db = _e.sent();
            _e.label = 2;
          case 2:
            if (this.versionchangelistener) {
              this.db.onversionchange = function(event) {
                return _this.versionchangelistener(event);
              };
            }
            return [2, this.db];
        }
      });
    });
  };
  SimpleDb2.prototype.setVersionChangeListener = function(versionChangeListener) {
    this.versionchangelistener = versionChangeListener;
    if (this.db) {
      this.db.onversionchange = function(event) {
        return versionChangeListener(event);
      };
    }
  };
  SimpleDb2.prototype.runTransaction = function(action, mode, objectStores, transactionFn) {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var readonly, attemptNumber, _loop_2, this_1, state_1;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            readonly = mode === "readonly";
            attemptNumber = 0;
            _loop_2 = function() {
              var transaction_1, transactionFnResult, error_1, retryable;
              return tslib.__generator(this, function(_e) {
                switch (_e.label) {
                  case 0:
                    ++attemptNumber;
                    _e.label = 1;
                  case 1:
                    _e.trys.push([1, 4, , 5]);
                    return [4, this_1.ensureDb(action)];
                  case 2:
                    this_1.db = _e.sent();
                    transaction_1 = SimpleDbTransaction.open(this_1.db, action, readonly ? "readonly" : "readwrite", objectStores);
                    transactionFnResult = transactionFn(transaction_1).catch(function(error2) {
                      transaction_1.abort(error2);
                      return PersistencePromise.reject(error2);
                    }).toPromise();
                    transactionFnResult.catch(function() {
                    });
                    return [4, transaction_1.completionPromise];
                  case 3:
                    _e.sent();
                    return [2, { value: transactionFnResult }];
                  case 4:
                    error_1 = _e.sent();
                    retryable = error_1.name !== "FirebaseError" && attemptNumber < TRANSACTION_RETRY_COUNT;
                    logDebug(LOG_TAG$g, "Transaction failed with error:", error_1.message, "Retrying:", retryable);
                    this_1.close();
                    if (!retryable) {
                      return [2, { value: Promise.reject(error_1) }];
                    }
                    return [3, 5];
                  case 5:
                    return [2];
                }
              });
            };
            this_1 = this;
            _d.label = 1;
          case 1:
            return [5, _loop_2()];
          case 2:
            state_1 = _d.sent();
            if (typeof state_1 === "object")
              return [2, state_1.value];
            return [3, 1];
          case 3:
            return [2];
        }
      });
    });
  };
  SimpleDb2.prototype.close = function() {
    if (this.db) {
      this.db.close();
    }
    this.db = void 0;
  };
  return SimpleDb2;
}();
var IterationController = function() {
  function IterationController2(dbCursor) {
    this.dbCursor = dbCursor;
    this.shouldStop = false;
    this.nextKey = null;
  }
  Object.defineProperty(IterationController2.prototype, "isDone", {
    get: function() {
      return this.shouldStop;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(IterationController2.prototype, "skipToKey", {
    get: function() {
      return this.nextKey;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(IterationController2.prototype, "cursor", {
    set: function(value) {
      this.dbCursor = value;
    },
    enumerable: false,
    configurable: true
  });
  IterationController2.prototype.done = function() {
    this.shouldStop = true;
  };
  IterationController2.prototype.skip = function(key) {
    this.nextKey = key;
  };
  IterationController2.prototype.delete = function() {
    return wrapRequest(this.dbCursor.delete());
  };
  return IterationController2;
}();
var IndexedDbTransactionError = function(_super) {
  tslib.__extends(IndexedDbTransactionError2, _super);
  function IndexedDbTransactionError2(actionName, cause) {
    var _this = _super.call(this, Code.UNAVAILABLE, "IndexedDB transaction '" + actionName + "' failed: " + cause) || this;
    _this.name = "IndexedDbTransactionError";
    return _this;
  }
  return IndexedDbTransactionError2;
}(FirestoreError);
function isIndexedDbTransactionError(e) {
  return e.name === "IndexedDbTransactionError";
}
var SimpleDbStore = function() {
  function SimpleDbStore2(store) {
    this.store = store;
  }
  SimpleDbStore2.prototype.put = function(keyOrValue, value) {
    var request;
    if (value !== void 0) {
      logDebug(LOG_TAG$g, "PUT", this.store.name, keyOrValue, value);
      request = this.store.put(value, keyOrValue);
    } else {
      logDebug(LOG_TAG$g, "PUT", this.store.name, "<auto-key>", keyOrValue);
      request = this.store.put(keyOrValue);
    }
    return wrapRequest(request);
  };
  SimpleDbStore2.prototype.add = function(value) {
    logDebug(LOG_TAG$g, "ADD", this.store.name, value, value);
    var request = this.store.add(value);
    return wrapRequest(request);
  };
  SimpleDbStore2.prototype.get = function(key) {
    var _this = this;
    var request = this.store.get(key);
    return wrapRequest(request).next(function(result) {
      if (result === void 0) {
        result = null;
      }
      logDebug(LOG_TAG$g, "GET", _this.store.name, key, result);
      return result;
    });
  };
  SimpleDbStore2.prototype.delete = function(key) {
    logDebug(LOG_TAG$g, "DELETE", this.store.name, key);
    var request = this.store.delete(key);
    return wrapRequest(request);
  };
  SimpleDbStore2.prototype.count = function() {
    logDebug(LOG_TAG$g, "COUNT", this.store.name);
    var request = this.store.count();
    return wrapRequest(request);
  };
  SimpleDbStore2.prototype.loadAll = function(indexOrRange, range) {
    var cursor = this.cursor(this.options(indexOrRange, range));
    var results = [];
    return this.iterateCursor(cursor, function(key, value) {
      results.push(value);
    }).next(function() {
      return results;
    });
  };
  SimpleDbStore2.prototype.deleteAll = function(indexOrRange, range) {
    logDebug(LOG_TAG$g, "DELETE ALL", this.store.name);
    var options2 = this.options(indexOrRange, range);
    options2.keysOnly = false;
    var cursor = this.cursor(options2);
    return this.iterateCursor(cursor, function(key, value, control) {
      return control.delete();
    });
  };
  SimpleDbStore2.prototype.iterate = function(optionsOrCallback, callback) {
    var options2;
    if (!callback) {
      options2 = {};
      callback = optionsOrCallback;
    } else {
      options2 = optionsOrCallback;
    }
    var cursor = this.cursor(options2);
    return this.iterateCursor(cursor, callback);
  };
  SimpleDbStore2.prototype.iterateSerial = function(callback) {
    var cursorRequest = this.cursor({});
    return new PersistencePromise(function(resolve6, reject) {
      cursorRequest.onerror = function(event) {
        var error2 = checkForAndReportiOSError(event.target.error);
        reject(error2);
      };
      cursorRequest.onsuccess = function(event) {
        var cursor = event.target.result;
        if (!cursor) {
          resolve6();
          return;
        }
        callback(cursor.primaryKey, cursor.value).next(function(shouldContinue) {
          if (shouldContinue) {
            cursor.continue();
          } else {
            resolve6();
          }
        });
      };
    });
  };
  SimpleDbStore2.prototype.iterateCursor = function(cursorRequest, fn) {
    var results = [];
    return new PersistencePromise(function(resolve6, reject) {
      cursorRequest.onerror = function(event) {
        reject(event.target.error);
      };
      cursorRequest.onsuccess = function(event) {
        var cursor = event.target.result;
        if (!cursor) {
          resolve6();
          return;
        }
        var controller = new IterationController(cursor);
        var userResult = fn(cursor.primaryKey, cursor.value, controller);
        if (userResult instanceof PersistencePromise) {
          var userPromise = userResult.catch(function(err) {
            controller.done();
            return PersistencePromise.reject(err);
          });
          results.push(userPromise);
        }
        if (controller.isDone) {
          resolve6();
        } else if (controller.skipToKey === null) {
          cursor.continue();
        } else {
          cursor.continue(controller.skipToKey);
        }
      };
    }).next(function() {
      return PersistencePromise.waitFor(results);
    });
  };
  SimpleDbStore2.prototype.options = function(indexOrRange, range) {
    var indexName = void 0;
    if (indexOrRange !== void 0) {
      if (typeof indexOrRange === "string") {
        indexName = indexOrRange;
      } else {
        range = indexOrRange;
      }
    }
    return { index: indexName, range };
  };
  SimpleDbStore2.prototype.cursor = function(options2) {
    var direction = "next";
    if (options2.reverse) {
      direction = "prev";
    }
    if (options2.index) {
      var index2 = this.store.index(options2.index);
      if (options2.keysOnly) {
        return index2.openKeyCursor(options2.range, direction);
      } else {
        return index2.openCursor(options2.range, direction);
      }
    } else {
      return this.store.openCursor(options2.range, direction);
    }
  };
  return SimpleDbStore2;
}();
function wrapRequest(request) {
  return new PersistencePromise(function(resolve6, reject) {
    request.onsuccess = function(event) {
      var result = event.target.result;
      resolve6(result);
    };
    request.onerror = function(event) {
      var error2 = checkForAndReportiOSError(event.target.error);
      reject(error2);
    };
  });
}
var reportedIOSError = false;
function checkForAndReportiOSError(error2) {
  var iOSVersion = SimpleDb.getIOSVersion(util.getUA());
  if (iOSVersion >= 12.2 && iOSVersion < 13) {
    var IOS_ERROR = "An internal error was encountered in the Indexed Database server";
    if (error2.message.indexOf(IOS_ERROR) >= 0) {
      var newError_1 = new FirestoreError("internal", "IOS_INDEXEDDB_BUG1: IndexedDb has thrown '" + IOS_ERROR + "'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.");
      if (!reportedIOSError) {
        reportedIOSError = true;
        setTimeout(function() {
          throw newError_1;
        }, 0);
      }
      return newError_1;
    }
  }
  return error2;
}
var IndexedDbTransaction = function(_super) {
  tslib.__extends(IndexedDbTransaction2, _super);
  function IndexedDbTransaction2(simpleDbTransaction, currentSequenceNumber) {
    var _this = _super.call(this) || this;
    _this.simpleDbTransaction = simpleDbTransaction;
    _this.currentSequenceNumber = currentSequenceNumber;
    return _this;
  }
  return IndexedDbTransaction2;
}(PersistenceTransaction);
function getStore(txn, store) {
  var indexedDbTransaction = debugCast(txn);
  return SimpleDb.getStore(indexedDbTransaction.simpleDbTransaction, store);
}
function randomBytes2(nBytes) {
  return crypto.randomBytes(nBytes);
}
var AutoId = function() {
  function AutoId2() {
  }
  AutoId2.newId = function() {
    var chars2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    var maxMultiple = Math.floor(256 / chars2.length) * chars2.length;
    var autoId = "";
    var targetLength = 20;
    while (autoId.length < targetLength) {
      var bytes = randomBytes2(40);
      for (var i = 0; i < bytes.length; ++i) {
        if (autoId.length < targetLength && bytes[i] < maxMultiple) {
          autoId += chars2.charAt(bytes[i] % chars2.length);
        }
      }
    }
    return autoId;
  };
  return AutoId2;
}();
function primitiveComparator(left, right) {
  if (left < right) {
    return -1;
  }
  if (left > right) {
    return 1;
  }
  return 0;
}
function arrayEquals(left, right, comparator) {
  if (left.length !== right.length) {
    return false;
  }
  return left.every(function(value, index2) {
    return comparator(value, right[index2]);
  });
}
function immediateSuccessor(s2) {
  return s2 + "\0";
}
var MIN_SECONDS = -62135596800;
var MS_TO_NANOS = 1e6;
var Timestamp = function() {
  function Timestamp2(seconds, nanoseconds) {
    this.seconds = seconds;
    this.nanoseconds = nanoseconds;
    if (nanoseconds < 0) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + nanoseconds);
    }
    if (nanoseconds >= 1e9) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp nanoseconds out of range: " + nanoseconds);
    }
    if (seconds < MIN_SECONDS) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp seconds out of range: " + seconds);
    }
    if (seconds >= 253402300800) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Timestamp seconds out of range: " + seconds);
    }
  }
  Timestamp2.now = function() {
    return Timestamp2.fromMillis(Date.now());
  };
  Timestamp2.fromDate = function(date) {
    return Timestamp2.fromMillis(date.getTime());
  };
  Timestamp2.fromMillis = function(milliseconds) {
    var seconds = Math.floor(milliseconds / 1e3);
    var nanos = Math.floor((milliseconds - seconds * 1e3) * MS_TO_NANOS);
    return new Timestamp2(seconds, nanos);
  };
  Timestamp2.prototype.toDate = function() {
    return new Date(this.toMillis());
  };
  Timestamp2.prototype.toMillis = function() {
    return this.seconds * 1e3 + this.nanoseconds / MS_TO_NANOS;
  };
  Timestamp2.prototype._compareTo = function(other) {
    if (this.seconds === other.seconds) {
      return primitiveComparator(this.nanoseconds, other.nanoseconds);
    }
    return primitiveComparator(this.seconds, other.seconds);
  };
  Timestamp2.prototype.isEqual = function(other) {
    return other.seconds === this.seconds && other.nanoseconds === this.nanoseconds;
  };
  Timestamp2.prototype.toString = function() {
    return "Timestamp(seconds=" + this.seconds + ", nanoseconds=" + this.nanoseconds + ")";
  };
  Timestamp2.prototype.toJSON = function() {
    return { seconds: this.seconds, nanoseconds: this.nanoseconds };
  };
  Timestamp2.prototype.valueOf = function() {
    var adjustedSeconds = this.seconds - MIN_SECONDS;
    var formattedSeconds = String(adjustedSeconds).padStart(12, "0");
    var formattedNanoseconds = String(this.nanoseconds).padStart(9, "0");
    return formattedSeconds + "." + formattedNanoseconds;
  };
  return Timestamp2;
}();
var SnapshotVersion = function() {
  function SnapshotVersion2(timestamp) {
    this.timestamp = timestamp;
  }
  SnapshotVersion2.fromTimestamp = function(value) {
    return new SnapshotVersion2(value);
  };
  SnapshotVersion2.min = function() {
    return new SnapshotVersion2(new Timestamp(0, 0));
  };
  SnapshotVersion2.prototype.compareTo = function(other) {
    return this.timestamp._compareTo(other.timestamp);
  };
  SnapshotVersion2.prototype.isEqual = function(other) {
    return this.timestamp.isEqual(other.timestamp);
  };
  SnapshotVersion2.prototype.toMicroseconds = function() {
    return this.timestamp.seconds * 1e6 + this.timestamp.nanoseconds / 1e3;
  };
  SnapshotVersion2.prototype.toString = function() {
    return "SnapshotVersion(" + this.timestamp.toString() + ")";
  };
  SnapshotVersion2.prototype.toTimestamp = function() {
    return this.timestamp;
  };
  return SnapshotVersion2;
}();
function objectSize(obj) {
  var count = 0;
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      count++;
    }
  }
  return count;
}
function forEach(obj, fn) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      fn(key, obj[key]);
    }
  }
}
function isEmpty(obj) {
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) {
      return false;
    }
  }
  return true;
}
var FieldMask = function() {
  function FieldMask2(fields) {
    this.fields = fields;
    fields.sort(FieldPath$1.comparator);
  }
  FieldMask2.prototype.covers = function(fieldPath) {
    for (var _i = 0, _d = this.fields; _i < _d.length; _i++) {
      var fieldMaskPath = _d[_i];
      if (fieldMaskPath.isPrefixOf(fieldPath)) {
        return true;
      }
    }
    return false;
  };
  FieldMask2.prototype.isEqual = function(other) {
    return arrayEquals(this.fields, other.fields, function(l, r) {
      return l.isEqual(r);
    });
  };
  return FieldMask2;
}();
function decodeBase64(encoded) {
  if (/[^-A-Za-z0-9+/=]/.test(encoded)) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Not a valid Base64 string: " + encoded);
  }
  return new Buffer(encoded, "base64").toString("binary");
}
function encodeBase64(raw) {
  return new Buffer(raw, "binary").toString("base64");
}
function isBase64Available() {
  return true;
}
var ByteString = function() {
  function ByteString2(binaryString) {
    this.binaryString = binaryString;
  }
  ByteString2.fromBase64String = function(base642) {
    var binaryString = decodeBase64(base642);
    return new ByteString2(binaryString);
  };
  ByteString2.fromUint8Array = function(array) {
    var binaryString = binaryStringFromUint8Array(array);
    return new ByteString2(binaryString);
  };
  ByteString2.prototype.toBase64 = function() {
    return encodeBase64(this.binaryString);
  };
  ByteString2.prototype.toUint8Array = function() {
    return uint8ArrayFromBinaryString(this.binaryString);
  };
  ByteString2.prototype.approximateByteSize = function() {
    return this.binaryString.length * 2;
  };
  ByteString2.prototype.compareTo = function(other) {
    return primitiveComparator(this.binaryString, other.binaryString);
  };
  ByteString2.prototype.isEqual = function(other) {
    return this.binaryString === other.binaryString;
  };
  return ByteString2;
}();
ByteString.EMPTY_BYTE_STRING = new ByteString("");
function binaryStringFromUint8Array(array) {
  var binaryString = "";
  for (var i = 0; i < array.length; ++i) {
    binaryString += String.fromCharCode(array[i]);
  }
  return binaryString;
}
function uint8ArrayFromBinaryString(binaryString) {
  var buffer = new Uint8Array(binaryString.length);
  for (var i = 0; i < binaryString.length; i++) {
    buffer[i] = binaryString.charCodeAt(i);
  }
  return buffer;
}
var ISO_TIMESTAMP_REG_EXP = new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);
function normalizeTimestamp(date) {
  hardAssert(!!date);
  if (typeof date === "string") {
    var nanos = 0;
    var fraction = ISO_TIMESTAMP_REG_EXP.exec(date);
    hardAssert(!!fraction);
    if (fraction[1]) {
      var nanoStr = fraction[1];
      nanoStr = (nanoStr + "000000000").substr(0, 9);
      nanos = Number(nanoStr);
    }
    var parsedDate = new Date(date);
    var seconds = Math.floor(parsedDate.getTime() / 1e3);
    return { seconds, nanos };
  } else {
    var seconds = normalizeNumber(date.seconds);
    var nanos = normalizeNumber(date.nanos);
    return { seconds, nanos };
  }
}
function normalizeNumber(value) {
  if (typeof value === "number") {
    return value;
  } else if (typeof value === "string") {
    return Number(value);
  } else {
    return 0;
  }
}
function normalizeByteString(blob) {
  if (typeof blob === "string") {
    return ByteString.fromBase64String(blob);
  } else {
    return ByteString.fromUint8Array(blob);
  }
}
var SERVER_TIMESTAMP_SENTINEL = "server_timestamp";
var TYPE_KEY = "__type__";
var PREVIOUS_VALUE_KEY = "__previous_value__";
var LOCAL_WRITE_TIME_KEY = "__local_write_time__";
function isServerTimestamp(value) {
  var _a, _b;
  var type2 = (_b = (((_a = value === null || value === void 0 ? void 0 : value.mapValue) === null || _a === void 0 ? void 0 : _a.fields) || {})[TYPE_KEY]) === null || _b === void 0 ? void 0 : _b.stringValue;
  return type2 === SERVER_TIMESTAMP_SENTINEL;
}
function serverTimestamp$1(localWriteTime, previousValue) {
  var _d;
  var mapValue = {
    fields: (_d = {}, _d[TYPE_KEY] = {
      stringValue: SERVER_TIMESTAMP_SENTINEL
    }, _d[LOCAL_WRITE_TIME_KEY] = {
      timestampValue: {
        seconds: localWriteTime.seconds,
        nanos: localWriteTime.nanoseconds
      }
    }, _d)
  };
  if (previousValue) {
    mapValue.fields[PREVIOUS_VALUE_KEY] = previousValue;
  }
  return { mapValue };
}
function getPreviousValue(value) {
  var previousValue = value.mapValue.fields[PREVIOUS_VALUE_KEY];
  if (isServerTimestamp(previousValue)) {
    return getPreviousValue(previousValue);
  }
  return previousValue;
}
function getLocalWriteTime(value) {
  var localWriteTime = normalizeTimestamp(value.mapValue.fields[LOCAL_WRITE_TIME_KEY].timestampValue);
  return new Timestamp(localWriteTime.seconds, localWriteTime.nanos);
}
var BATCHID_UNKNOWN = -1;
function isNullOrUndefined(value) {
  return value === null || value === void 0;
}
function isNegativeZero(value) {
  return value === 0 && 1 / value === 1 / -0;
}
function isSafeInteger(value) {
  return typeof value === "number" && Number.isInteger(value) && !isNegativeZero(value) && value <= Number.MAX_SAFE_INTEGER && value >= Number.MIN_SAFE_INTEGER;
}
var DocumentKey = function() {
  function DocumentKey2(path2) {
    this.path = path2;
  }
  DocumentKey2.fromPath = function(path2) {
    return new DocumentKey2(ResourcePath.fromString(path2));
  };
  DocumentKey2.fromName = function(name2) {
    return new DocumentKey2(ResourcePath.fromString(name2).popFirst(5));
  };
  DocumentKey2.prototype.hasCollectionId = function(collectionId) {
    return this.path.length >= 2 && this.path.get(this.path.length - 2) === collectionId;
  };
  DocumentKey2.prototype.isEqual = function(other) {
    return other !== null && ResourcePath.comparator(this.path, other.path) === 0;
  };
  DocumentKey2.prototype.toString = function() {
    return this.path.toString();
  };
  DocumentKey2.comparator = function(k1, k2) {
    return ResourcePath.comparator(k1.path, k2.path);
  };
  DocumentKey2.isDocumentKey = function(path2) {
    return path2.length % 2 === 0;
  };
  DocumentKey2.fromSegments = function(segments) {
    return new DocumentKey2(new ResourcePath(segments.slice()));
  };
  return DocumentKey2;
}();
function typeOrder(value) {
  if ("nullValue" in value) {
    return 0;
  } else if ("booleanValue" in value) {
    return 1;
  } else if ("integerValue" in value || "doubleValue" in value) {
    return 2;
  } else if ("timestampValue" in value) {
    return 3;
  } else if ("stringValue" in value) {
    return 5;
  } else if ("bytesValue" in value) {
    return 6;
  } else if ("referenceValue" in value) {
    return 7;
  } else if ("geoPointValue" in value) {
    return 8;
  } else if ("arrayValue" in value) {
    return 9;
  } else if ("mapValue" in value) {
    if (isServerTimestamp(value)) {
      return 4;
    }
    return 10;
  } else {
    return fail();
  }
}
function valueEquals(left, right) {
  var leftType = typeOrder(left);
  var rightType = typeOrder(right);
  if (leftType !== rightType) {
    return false;
  }
  switch (leftType) {
    case 0:
      return true;
    case 1:
      return left.booleanValue === right.booleanValue;
    case 4:
      return getLocalWriteTime(left).isEqual(getLocalWriteTime(right));
    case 3:
      return timestampEquals(left, right);
    case 5:
      return left.stringValue === right.stringValue;
    case 6:
      return blobEquals(left, right);
    case 7:
      return left.referenceValue === right.referenceValue;
    case 8:
      return geoPointEquals(left, right);
    case 2:
      return numberEquals(left, right);
    case 9:
      return arrayEquals(left.arrayValue.values || [], right.arrayValue.values || [], valueEquals);
    case 10:
      return objectEquals(left, right);
    default:
      return fail();
  }
}
function timestampEquals(left, right) {
  if (typeof left.timestampValue === "string" && typeof right.timestampValue === "string" && left.timestampValue.length === right.timestampValue.length) {
    return left.timestampValue === right.timestampValue;
  }
  var leftTimestamp = normalizeTimestamp(left.timestampValue);
  var rightTimestamp = normalizeTimestamp(right.timestampValue);
  return leftTimestamp.seconds === rightTimestamp.seconds && leftTimestamp.nanos === rightTimestamp.nanos;
}
function geoPointEquals(left, right) {
  return normalizeNumber(left.geoPointValue.latitude) === normalizeNumber(right.geoPointValue.latitude) && normalizeNumber(left.geoPointValue.longitude) === normalizeNumber(right.geoPointValue.longitude);
}
function blobEquals(left, right) {
  return normalizeByteString(left.bytesValue).isEqual(normalizeByteString(right.bytesValue));
}
function numberEquals(left, right) {
  if ("integerValue" in left && "integerValue" in right) {
    return normalizeNumber(left.integerValue) === normalizeNumber(right.integerValue);
  } else if ("doubleValue" in left && "doubleValue" in right) {
    var n1 = normalizeNumber(left.doubleValue);
    var n2 = normalizeNumber(right.doubleValue);
    if (n1 === n2) {
      return isNegativeZero(n1) === isNegativeZero(n2);
    } else {
      return isNaN(n1) && isNaN(n2);
    }
  }
  return false;
}
function objectEquals(left, right) {
  var leftMap = left.mapValue.fields || {};
  var rightMap = right.mapValue.fields || {};
  if (objectSize(leftMap) !== objectSize(rightMap)) {
    return false;
  }
  for (var key in leftMap) {
    if (leftMap.hasOwnProperty(key)) {
      if (rightMap[key] === void 0 || !valueEquals(leftMap[key], rightMap[key])) {
        return false;
      }
    }
  }
  return true;
}
function arrayValueContains(haystack, needle) {
  return (haystack.values || []).find(function(v) {
    return valueEquals(v, needle);
  }) !== void 0;
}
function valueCompare(left, right) {
  var leftType = typeOrder(left);
  var rightType = typeOrder(right);
  if (leftType !== rightType) {
    return primitiveComparator(leftType, rightType);
  }
  switch (leftType) {
    case 0:
      return 0;
    case 1:
      return primitiveComparator(left.booleanValue, right.booleanValue);
    case 2:
      return compareNumbers(left, right);
    case 3:
      return compareTimestamps(left.timestampValue, right.timestampValue);
    case 4:
      return compareTimestamps(getLocalWriteTime(left), getLocalWriteTime(right));
    case 5:
      return primitiveComparator(left.stringValue, right.stringValue);
    case 6:
      return compareBlobs(left.bytesValue, right.bytesValue);
    case 7:
      return compareReferences(left.referenceValue, right.referenceValue);
    case 8:
      return compareGeoPoints(left.geoPointValue, right.geoPointValue);
    case 9:
      return compareArrays(left.arrayValue, right.arrayValue);
    case 10:
      return compareMaps(left.mapValue, right.mapValue);
    default:
      throw fail();
  }
}
function compareNumbers(left, right) {
  var leftNumber = normalizeNumber(left.integerValue || left.doubleValue);
  var rightNumber = normalizeNumber(right.integerValue || right.doubleValue);
  if (leftNumber < rightNumber) {
    return -1;
  } else if (leftNumber > rightNumber) {
    return 1;
  } else if (leftNumber === rightNumber) {
    return 0;
  } else {
    if (isNaN(leftNumber)) {
      return isNaN(rightNumber) ? 0 : -1;
    } else {
      return 1;
    }
  }
}
function compareTimestamps(left, right) {
  if (typeof left === "string" && typeof right === "string" && left.length === right.length) {
    return primitiveComparator(left, right);
  }
  var leftTimestamp = normalizeTimestamp(left);
  var rightTimestamp = normalizeTimestamp(right);
  var comparison = primitiveComparator(leftTimestamp.seconds, rightTimestamp.seconds);
  if (comparison !== 0) {
    return comparison;
  }
  return primitiveComparator(leftTimestamp.nanos, rightTimestamp.nanos);
}
function compareReferences(leftPath, rightPath) {
  var leftSegments = leftPath.split("/");
  var rightSegments = rightPath.split("/");
  for (var i = 0; i < leftSegments.length && i < rightSegments.length; i++) {
    var comparison = primitiveComparator(leftSegments[i], rightSegments[i]);
    if (comparison !== 0) {
      return comparison;
    }
  }
  return primitiveComparator(leftSegments.length, rightSegments.length);
}
function compareGeoPoints(left, right) {
  var comparison = primitiveComparator(normalizeNumber(left.latitude), normalizeNumber(right.latitude));
  if (comparison !== 0) {
    return comparison;
  }
  return primitiveComparator(normalizeNumber(left.longitude), normalizeNumber(right.longitude));
}
function compareBlobs(left, right) {
  var leftBytes = normalizeByteString(left);
  var rightBytes = normalizeByteString(right);
  return leftBytes.compareTo(rightBytes);
}
function compareArrays(left, right) {
  var leftArray = left.values || [];
  var rightArray = right.values || [];
  for (var i = 0; i < leftArray.length && i < rightArray.length; ++i) {
    var compare = valueCompare(leftArray[i], rightArray[i]);
    if (compare) {
      return compare;
    }
  }
  return primitiveComparator(leftArray.length, rightArray.length);
}
function compareMaps(left, right) {
  var leftMap = left.fields || {};
  var leftKeys = Object.keys(leftMap);
  var rightMap = right.fields || {};
  var rightKeys = Object.keys(rightMap);
  leftKeys.sort();
  rightKeys.sort();
  for (var i = 0; i < leftKeys.length && i < rightKeys.length; ++i) {
    var keyCompare = primitiveComparator(leftKeys[i], rightKeys[i]);
    if (keyCompare !== 0) {
      return keyCompare;
    }
    var compare = valueCompare(leftMap[leftKeys[i]], rightMap[rightKeys[i]]);
    if (compare !== 0) {
      return compare;
    }
  }
  return primitiveComparator(leftKeys.length, rightKeys.length);
}
function canonicalId(value) {
  return canonifyValue(value);
}
function canonifyValue(value) {
  if ("nullValue" in value) {
    return "null";
  } else if ("booleanValue" in value) {
    return "" + value.booleanValue;
  } else if ("integerValue" in value) {
    return "" + value.integerValue;
  } else if ("doubleValue" in value) {
    return "" + value.doubleValue;
  } else if ("timestampValue" in value) {
    return canonifyTimestamp(value.timestampValue);
  } else if ("stringValue" in value) {
    return value.stringValue;
  } else if ("bytesValue" in value) {
    return canonifyByteString(value.bytesValue);
  } else if ("referenceValue" in value) {
    return canonifyReference(value.referenceValue);
  } else if ("geoPointValue" in value) {
    return canonifyGeoPoint(value.geoPointValue);
  } else if ("arrayValue" in value) {
    return canonifyArray(value.arrayValue);
  } else if ("mapValue" in value) {
    return canonifyMap(value.mapValue);
  } else {
    return fail();
  }
}
function canonifyByteString(byteString) {
  return normalizeByteString(byteString).toBase64();
}
function canonifyTimestamp(timestamp) {
  var normalizedTimestamp = normalizeTimestamp(timestamp);
  return "time(" + normalizedTimestamp.seconds + "," + normalizedTimestamp.nanos + ")";
}
function canonifyGeoPoint(geoPoint) {
  return "geo(" + geoPoint.latitude + "," + geoPoint.longitude + ")";
}
function canonifyReference(referenceValue) {
  return DocumentKey.fromName(referenceValue).toString();
}
function canonifyMap(mapValue) {
  var sortedKeys = Object.keys(mapValue.fields || {}).sort();
  var result = "{";
  var first = true;
  for (var _i = 0, sortedKeys_1 = sortedKeys; _i < sortedKeys_1.length; _i++) {
    var key = sortedKeys_1[_i];
    if (!first) {
      result += ",";
    } else {
      first = false;
    }
    result += key + ":" + canonifyValue(mapValue.fields[key]);
  }
  return result + "}";
}
function canonifyArray(arrayValue) {
  var result = "[";
  var first = true;
  for (var _i = 0, _d = arrayValue.values || []; _i < _d.length; _i++) {
    var value = _d[_i];
    if (!first) {
      result += ",";
    } else {
      first = false;
    }
    result += canonifyValue(value);
  }
  return result + "]";
}
function refValue(databaseId, key) {
  return {
    referenceValue: "projects/" + databaseId.projectId + "/databases/" + databaseId.database + "/documents/" + key.path.canonicalString()
  };
}
function isInteger(value) {
  return !!value && "integerValue" in value;
}
function isDouble(value) {
  return !!value && "doubleValue" in value;
}
function isNumber(value) {
  return isInteger(value) || isDouble(value);
}
function isArray(value) {
  return !!value && "arrayValue" in value;
}
function isNullValue(value) {
  return !!value && "nullValue" in value;
}
function isNanValue(value) {
  return !!value && "doubleValue" in value && isNaN(Number(value.doubleValue));
}
function isMapValue(value) {
  return !!value && "mapValue" in value;
}
function deepClone(source) {
  if (source.geoPointValue) {
    return { geoPointValue: Object.assign({}, source.geoPointValue) };
  } else if (source.timestampValue && typeof source.timestampValue === "object") {
    return { timestampValue: Object.assign({}, source.timestampValue) };
  } else if (source.mapValue) {
    var target_1 = { mapValue: { fields: {} } };
    forEach(source.mapValue.fields, function(key, val) {
      return target_1.mapValue.fields[key] = deepClone(val);
    });
    return target_1;
  } else if (source.arrayValue) {
    var target = { arrayValue: { values: [] } };
    for (var i = 0; i < (source.arrayValue.values || []).length; ++i) {
      target.arrayValue.values[i] = deepClone(source.arrayValue.values[i]);
    }
    return target;
  } else {
    return Object.assign({}, source);
  }
}
var ObjectValue = function() {
  function ObjectValue2(value) {
    this.value = value;
  }
  ObjectValue2.empty = function() {
    return new ObjectValue2({ mapValue: {} });
  };
  ObjectValue2.prototype.field = function(path2) {
    if (path2.isEmpty()) {
      return this.value;
    } else {
      var currentLevel = this.value;
      for (var i = 0; i < path2.length - 1; ++i) {
        currentLevel = (currentLevel.mapValue.fields || {})[path2.get(i)];
        if (!isMapValue(currentLevel)) {
          return null;
        }
      }
      currentLevel = (currentLevel.mapValue.fields || {})[path2.lastSegment()];
      return currentLevel || null;
    }
  };
  ObjectValue2.prototype.set = function(path2, value) {
    var fieldsMap = this.getFieldsMap(path2.popLast());
    fieldsMap[path2.lastSegment()] = deepClone(value);
  };
  ObjectValue2.prototype.setAll = function(data) {
    var _this = this;
    var parent = FieldPath$1.emptyPath();
    var upserts = {};
    var deletes = [];
    data.forEach(function(value, path2) {
      if (!parent.isImmediateParentOf(path2)) {
        var fieldsMap_1 = _this.getFieldsMap(parent);
        _this.applyChanges(fieldsMap_1, upserts, deletes);
        upserts = {};
        deletes = [];
        parent = path2.popLast();
      }
      if (value) {
        upserts[path2.lastSegment()] = deepClone(value);
      } else {
        deletes.push(path2.lastSegment());
      }
    });
    var fieldsMap = this.getFieldsMap(parent);
    this.applyChanges(fieldsMap, upserts, deletes);
  };
  ObjectValue2.prototype.delete = function(path2) {
    var nestedValue = this.field(path2.popLast());
    if (isMapValue(nestedValue) && nestedValue.mapValue.fields) {
      delete nestedValue.mapValue.fields[path2.lastSegment()];
    }
  };
  ObjectValue2.prototype.isEqual = function(other) {
    return valueEquals(this.value, other.value);
  };
  ObjectValue2.prototype.getFieldsMap = function(path2) {
    var current = this.value;
    if (!current.mapValue.fields) {
      current.mapValue = { fields: {} };
    }
    for (var i = 0; i < path2.length; ++i) {
      var next = current.mapValue.fields[path2.get(i)];
      if (!isMapValue(next) || !next.mapValue.fields) {
        next = { mapValue: { fields: {} } };
        current.mapValue.fields[path2.get(i)] = next;
      }
      current = next;
    }
    return current.mapValue.fields;
  };
  ObjectValue2.prototype.applyChanges = function(fieldsMap, inserts, deletes) {
    forEach(inserts, function(key, val) {
      return fieldsMap[key] = val;
    });
    for (var _i = 0, deletes_1 = deletes; _i < deletes_1.length; _i++) {
      var field2 = deletes_1[_i];
      delete fieldsMap[field2];
    }
  };
  ObjectValue2.prototype.clone = function() {
    return new ObjectValue2(deepClone(this.value));
  };
  return ObjectValue2;
}();
function extractFieldMask(value) {
  var fields = [];
  forEach(value.fields, function(key, value2) {
    var currentPath = new FieldPath$1([key]);
    if (isMapValue(value2)) {
      var nestedMask = extractFieldMask(value2.mapValue);
      var nestedFields = nestedMask.fields;
      if (nestedFields.length === 0) {
        fields.push(currentPath);
      } else {
        for (var _i = 0, nestedFields_1 = nestedFields; _i < nestedFields_1.length; _i++) {
          var nestedPath = nestedFields_1[_i];
          fields.push(currentPath.child(nestedPath));
        }
      }
    } else {
      fields.push(currentPath);
    }
  });
  return new FieldMask(fields);
}
var MutableDocument = function() {
  function MutableDocument2(key, documentType, version2, data, documentState) {
    this.key = key;
    this.documentType = documentType;
    this.version = version2;
    this.data = data;
    this.documentState = documentState;
  }
  MutableDocument2.newInvalidDocument = function(documentKey) {
    return new MutableDocument2(documentKey, 0, SnapshotVersion.min(), ObjectValue.empty(), 0);
  };
  MutableDocument2.newFoundDocument = function(documentKey, version2, value) {
    return new MutableDocument2(documentKey, 1, version2, value, 0);
  };
  MutableDocument2.newNoDocument = function(documentKey, version2) {
    return new MutableDocument2(documentKey, 2, version2, ObjectValue.empty(), 0);
  };
  MutableDocument2.newUnknownDocument = function(documentKey, version2) {
    return new MutableDocument2(documentKey, 3, version2, ObjectValue.empty(), 2);
  };
  MutableDocument2.prototype.convertToFoundDocument = function(version2, value) {
    this.version = version2;
    this.documentType = 1;
    this.data = value;
    this.documentState = 0;
    return this;
  };
  MutableDocument2.prototype.convertToNoDocument = function(version2) {
    this.version = version2;
    this.documentType = 2;
    this.data = ObjectValue.empty();
    this.documentState = 0;
    return this;
  };
  MutableDocument2.prototype.convertToUnknownDocument = function(version2) {
    this.version = version2;
    this.documentType = 3;
    this.data = ObjectValue.empty();
    this.documentState = 2;
    return this;
  };
  MutableDocument2.prototype.setHasCommittedMutations = function() {
    this.documentState = 2;
    return this;
  };
  MutableDocument2.prototype.setHasLocalMutations = function() {
    this.documentState = 1;
    return this;
  };
  Object.defineProperty(MutableDocument2.prototype, "hasLocalMutations", {
    get: function() {
      return this.documentState === 1;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MutableDocument2.prototype, "hasCommittedMutations", {
    get: function() {
      return this.documentState === 2;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(MutableDocument2.prototype, "hasPendingWrites", {
    get: function() {
      return this.hasLocalMutations || this.hasCommittedMutations;
    },
    enumerable: false,
    configurable: true
  });
  MutableDocument2.prototype.isValidDocument = function() {
    return this.documentType !== 0;
  };
  MutableDocument2.prototype.isFoundDocument = function() {
    return this.documentType === 1;
  };
  MutableDocument2.prototype.isNoDocument = function() {
    return this.documentType === 2;
  };
  MutableDocument2.prototype.isUnknownDocument = function() {
    return this.documentType === 3;
  };
  MutableDocument2.prototype.isEqual = function(other) {
    return other instanceof MutableDocument2 && this.key.isEqual(other.key) && this.version.isEqual(other.version) && this.documentType === other.documentType && this.documentState === other.documentState && this.data.isEqual(other.data);
  };
  MutableDocument2.prototype.clone = function() {
    return new MutableDocument2(this.key, this.documentType, this.version, this.data.clone(), this.documentState);
  };
  MutableDocument2.prototype.toString = function() {
    return "Document(" + this.key + ", " + this.version + ", " + JSON.stringify(this.data.value) + ", " + ("{documentType: " + this.documentType + "}), ") + ("{documentState: " + this.documentState + "})");
  };
  return MutableDocument2;
}();
function compareDocumentsByField(field2, d1, d2) {
  var v1 = d1.data.field(field2);
  var v2 = d2.data.field(field2);
  if (v1 !== null && v2 !== null) {
    return valueCompare(v1, v2);
  } else {
    return fail();
  }
}
var TargetImpl = function() {
  function TargetImpl2(path2, collectionGroup2, orderBy2, filters, limit2, startAt2, endAt2) {
    if (collectionGroup2 === void 0) {
      collectionGroup2 = null;
    }
    if (orderBy2 === void 0) {
      orderBy2 = [];
    }
    if (filters === void 0) {
      filters = [];
    }
    if (limit2 === void 0) {
      limit2 = null;
    }
    if (startAt2 === void 0) {
      startAt2 = null;
    }
    if (endAt2 === void 0) {
      endAt2 = null;
    }
    this.path = path2;
    this.collectionGroup = collectionGroup2;
    this.orderBy = orderBy2;
    this.filters = filters;
    this.limit = limit2;
    this.startAt = startAt2;
    this.endAt = endAt2;
    this.memoizedCanonicalId = null;
  }
  return TargetImpl2;
}();
function newTarget(path2, collectionGroup2, orderBy2, filters, limit2, startAt2, endAt2) {
  if (collectionGroup2 === void 0) {
    collectionGroup2 = null;
  }
  if (orderBy2 === void 0) {
    orderBy2 = [];
  }
  if (filters === void 0) {
    filters = [];
  }
  if (limit2 === void 0) {
    limit2 = null;
  }
  if (startAt2 === void 0) {
    startAt2 = null;
  }
  if (endAt2 === void 0) {
    endAt2 = null;
  }
  return new TargetImpl(path2, collectionGroup2, orderBy2, filters, limit2, startAt2, endAt2);
}
function canonifyTarget(target) {
  var targetImpl = debugCast(target);
  if (targetImpl.memoizedCanonicalId === null) {
    var canonicalId_1 = targetImpl.path.canonicalString();
    if (targetImpl.collectionGroup !== null) {
      canonicalId_1 += "|cg:" + targetImpl.collectionGroup;
    }
    canonicalId_1 += "|f:";
    canonicalId_1 += targetImpl.filters.map(function(f) {
      return canonifyFilter(f);
    }).join(",");
    canonicalId_1 += "|ob:";
    canonicalId_1 += targetImpl.orderBy.map(function(o) {
      return canonifyOrderBy(o);
    }).join(",");
    if (!isNullOrUndefined(targetImpl.limit)) {
      canonicalId_1 += "|l:";
      canonicalId_1 += targetImpl.limit;
    }
    if (targetImpl.startAt) {
      canonicalId_1 += "|lb:";
      canonicalId_1 += canonifyBound(targetImpl.startAt);
    }
    if (targetImpl.endAt) {
      canonicalId_1 += "|ub:";
      canonicalId_1 += canonifyBound(targetImpl.endAt);
    }
    targetImpl.memoizedCanonicalId = canonicalId_1;
  }
  return targetImpl.memoizedCanonicalId;
}
function stringifyTarget(target) {
  var str = target.path.canonicalString();
  if (target.collectionGroup !== null) {
    str += " collectionGroup=" + target.collectionGroup;
  }
  if (target.filters.length > 0) {
    str += ", filters: [" + target.filters.map(function(f) {
      return stringifyFilter(f);
    }).join(", ") + "]";
  }
  if (!isNullOrUndefined(target.limit)) {
    str += ", limit: " + target.limit;
  }
  if (target.orderBy.length > 0) {
    str += ", orderBy: [" + target.orderBy.map(function(o) {
      return stringifyOrderBy(o);
    }).join(", ") + "]";
  }
  if (target.startAt) {
    str += ", startAt: " + canonifyBound(target.startAt);
  }
  if (target.endAt) {
    str += ", endAt: " + canonifyBound(target.endAt);
  }
  return "Target(" + str + ")";
}
function targetEquals(left, right) {
  if (left.limit !== right.limit) {
    return false;
  }
  if (left.orderBy.length !== right.orderBy.length) {
    return false;
  }
  for (var i = 0; i < left.orderBy.length; i++) {
    if (!orderByEquals(left.orderBy[i], right.orderBy[i])) {
      return false;
    }
  }
  if (left.filters.length !== right.filters.length) {
    return false;
  }
  for (var i = 0; i < left.filters.length; i++) {
    if (!filterEquals(left.filters[i], right.filters[i])) {
      return false;
    }
  }
  if (left.collectionGroup !== right.collectionGroup) {
    return false;
  }
  if (!left.path.isEqual(right.path)) {
    return false;
  }
  if (!boundEquals(left.startAt, right.startAt)) {
    return false;
  }
  return boundEquals(left.endAt, right.endAt);
}
function isDocumentTarget(target) {
  return DocumentKey.isDocumentKey(target.path) && target.collectionGroup === null && target.filters.length === 0;
}
var Filter = function() {
  function Filter2() {
  }
  return Filter2;
}();
var FieldFilter = function(_super) {
  tslib.__extends(FieldFilter2, _super);
  function FieldFilter2(field2, op, value) {
    var _this = _super.call(this) || this;
    _this.field = field2;
    _this.op = op;
    _this.value = value;
    return _this;
  }
  FieldFilter2.create = function(field2, op, value) {
    if (field2.isKeyField()) {
      if (op === "in" || op === "not-in") {
        return this.createKeyFieldInFilter(field2, op, value);
      } else {
        return new KeyFieldFilter(field2, op, value);
      }
    } else if (op === "array-contains") {
      return new ArrayContainsFilter(field2, value);
    } else if (op === "in") {
      return new InFilter(field2, value);
    } else if (op === "not-in") {
      return new NotInFilter(field2, value);
    } else if (op === "array-contains-any") {
      return new ArrayContainsAnyFilter(field2, value);
    } else {
      return new FieldFilter2(field2, op, value);
    }
  };
  FieldFilter2.createKeyFieldInFilter = function(field2, op, value) {
    return op === "in" ? new KeyFieldInFilter(field2, value) : new KeyFieldNotInFilter(field2, value);
  };
  FieldFilter2.prototype.matches = function(doc2) {
    var other = doc2.data.field(this.field);
    if (this.op === "!=") {
      return other !== null && this.matchesComparison(valueCompare(other, this.value));
    }
    return other !== null && typeOrder(this.value) === typeOrder(other) && this.matchesComparison(valueCompare(other, this.value));
  };
  FieldFilter2.prototype.matchesComparison = function(comparison) {
    switch (this.op) {
      case "<":
        return comparison < 0;
      case "<=":
        return comparison <= 0;
      case "==":
        return comparison === 0;
      case "!=":
        return comparison !== 0;
      case ">":
        return comparison > 0;
      case ">=":
        return comparison >= 0;
      default:
        return fail();
    }
  };
  FieldFilter2.prototype.isInequality = function() {
    return [
      "<",
      "<=",
      ">",
      ">=",
      "!=",
      "not-in"
    ].indexOf(this.op) >= 0;
  };
  return FieldFilter2;
}(Filter);
function canonifyFilter(filter2) {
  return filter2.field.canonicalString() + filter2.op.toString() + canonicalId(filter2.value);
}
function filterEquals(f1, f2) {
  return f1.op === f2.op && f1.field.isEqual(f2.field) && valueEquals(f1.value, f2.value);
}
function stringifyFilter(filter2) {
  return filter2.field.canonicalString() + " " + filter2.op + " " + canonicalId(filter2.value);
}
var KeyFieldFilter = function(_super) {
  tslib.__extends(KeyFieldFilter2, _super);
  function KeyFieldFilter2(field2, op, value) {
    var _this = _super.call(this, field2, op, value) || this;
    _this.key = DocumentKey.fromName(value.referenceValue);
    return _this;
  }
  KeyFieldFilter2.prototype.matches = function(doc2) {
    var comparison = DocumentKey.comparator(doc2.key, this.key);
    return this.matchesComparison(comparison);
  };
  return KeyFieldFilter2;
}(FieldFilter);
var KeyFieldInFilter = function(_super) {
  tslib.__extends(KeyFieldInFilter2, _super);
  function KeyFieldInFilter2(field2, value) {
    var _this = _super.call(this, field2, "in", value) || this;
    _this.keys = extractDocumentKeysFromArrayValue("in", value);
    return _this;
  }
  KeyFieldInFilter2.prototype.matches = function(doc2) {
    return this.keys.some(function(key) {
      return key.isEqual(doc2.key);
    });
  };
  return KeyFieldInFilter2;
}(FieldFilter);
var KeyFieldNotInFilter = function(_super) {
  tslib.__extends(KeyFieldNotInFilter2, _super);
  function KeyFieldNotInFilter2(field2, value) {
    var _this = _super.call(this, field2, "not-in", value) || this;
    _this.keys = extractDocumentKeysFromArrayValue("not-in", value);
    return _this;
  }
  KeyFieldNotInFilter2.prototype.matches = function(doc2) {
    return !this.keys.some(function(key) {
      return key.isEqual(doc2.key);
    });
  };
  return KeyFieldNotInFilter2;
}(FieldFilter);
function extractDocumentKeysFromArrayValue(op, value) {
  var _a;
  return (((_a = value.arrayValue) === null || _a === void 0 ? void 0 : _a.values) || []).map(function(v) {
    return DocumentKey.fromName(v.referenceValue);
  });
}
var ArrayContainsFilter = function(_super) {
  tslib.__extends(ArrayContainsFilter2, _super);
  function ArrayContainsFilter2(field2, value) {
    return _super.call(this, field2, "array-contains", value) || this;
  }
  ArrayContainsFilter2.prototype.matches = function(doc2) {
    var other = doc2.data.field(this.field);
    return isArray(other) && arrayValueContains(other.arrayValue, this.value);
  };
  return ArrayContainsFilter2;
}(FieldFilter);
var InFilter = function(_super) {
  tslib.__extends(InFilter2, _super);
  function InFilter2(field2, value) {
    return _super.call(this, field2, "in", value) || this;
  }
  InFilter2.prototype.matches = function(doc2) {
    var other = doc2.data.field(this.field);
    return other !== null && arrayValueContains(this.value.arrayValue, other);
  };
  return InFilter2;
}(FieldFilter);
var NotInFilter = function(_super) {
  tslib.__extends(NotInFilter2, _super);
  function NotInFilter2(field2, value) {
    return _super.call(this, field2, "not-in", value) || this;
  }
  NotInFilter2.prototype.matches = function(doc2) {
    if (arrayValueContains(this.value.arrayValue, { nullValue: "NULL_VALUE" })) {
      return false;
    }
    var other = doc2.data.field(this.field);
    return other !== null && !arrayValueContains(this.value.arrayValue, other);
  };
  return NotInFilter2;
}(FieldFilter);
var ArrayContainsAnyFilter = function(_super) {
  tslib.__extends(ArrayContainsAnyFilter2, _super);
  function ArrayContainsAnyFilter2(field2, value) {
    return _super.call(this, field2, "array-contains-any", value) || this;
  }
  ArrayContainsAnyFilter2.prototype.matches = function(doc2) {
    var _this = this;
    var other = doc2.data.field(this.field);
    if (!isArray(other) || !other.arrayValue.values) {
      return false;
    }
    return other.arrayValue.values.some(function(val) {
      return arrayValueContains(_this.value.arrayValue, val);
    });
  };
  return ArrayContainsAnyFilter2;
}(FieldFilter);
var Bound = function() {
  function Bound2(position, before) {
    this.position = position;
    this.before = before;
  }
  return Bound2;
}();
function canonifyBound(bound) {
  return (bound.before ? "b" : "a") + ":" + bound.position.map(function(p) {
    return canonicalId(p);
  }).join(",");
}
var OrderBy = function() {
  function OrderBy2(field2, dir) {
    if (dir === void 0) {
      dir = "asc";
    }
    this.field = field2;
    this.dir = dir;
  }
  return OrderBy2;
}();
function canonifyOrderBy(orderBy2) {
  return orderBy2.field.canonicalString() + orderBy2.dir;
}
function stringifyOrderBy(orderBy2) {
  return orderBy2.field.canonicalString() + " (" + orderBy2.dir + ")";
}
function orderByEquals(left, right) {
  return left.dir === right.dir && left.field.isEqual(right.field);
}
function sortsBeforeDocument(bound, orderBy2, doc2) {
  var comparison = 0;
  for (var i = 0; i < bound.position.length; i++) {
    var orderByComponent = orderBy2[i];
    var component2 = bound.position[i];
    if (orderByComponent.field.isKeyField()) {
      comparison = DocumentKey.comparator(DocumentKey.fromName(component2.referenceValue), doc2.key);
    } else {
      var docValue = doc2.data.field(orderByComponent.field);
      comparison = valueCompare(component2, docValue);
    }
    if (orderByComponent.dir === "desc") {
      comparison = comparison * -1;
    }
    if (comparison !== 0) {
      break;
    }
  }
  return bound.before ? comparison <= 0 : comparison < 0;
}
function boundEquals(left, right) {
  if (left === null) {
    return right === null;
  } else if (right === null) {
    return false;
  }
  if (left.before !== right.before || left.position.length !== right.position.length) {
    return false;
  }
  for (var i = 0; i < left.position.length; i++) {
    var leftPosition = left.position[i];
    var rightPosition = right.position[i];
    if (!valueEquals(leftPosition, rightPosition)) {
      return false;
    }
  }
  return true;
}
var QueryImpl = function() {
  function QueryImpl2(path2, collectionGroup2, explicitOrderBy, filters, limit2, limitType, startAt2, endAt2) {
    if (collectionGroup2 === void 0) {
      collectionGroup2 = null;
    }
    if (explicitOrderBy === void 0) {
      explicitOrderBy = [];
    }
    if (filters === void 0) {
      filters = [];
    }
    if (limit2 === void 0) {
      limit2 = null;
    }
    if (limitType === void 0) {
      limitType = "F";
    }
    if (startAt2 === void 0) {
      startAt2 = null;
    }
    if (endAt2 === void 0) {
      endAt2 = null;
    }
    this.path = path2;
    this.collectionGroup = collectionGroup2;
    this.explicitOrderBy = explicitOrderBy;
    this.filters = filters;
    this.limit = limit2;
    this.limitType = limitType;
    this.startAt = startAt2;
    this.endAt = endAt2;
    this.memoizedOrderBy = null;
    this.memoizedTarget = null;
    if (this.startAt)
      ;
    if (this.endAt)
      ;
  }
  return QueryImpl2;
}();
function newQuery(path2, collectionGroup2, explicitOrderBy, filters, limit2, limitType, startAt2, endAt2) {
  return new QueryImpl(path2, collectionGroup2, explicitOrderBy, filters, limit2, limitType, startAt2, endAt2);
}
function newQueryForPath(path2) {
  return new QueryImpl(path2);
}
function asCollectionQueryAtPath(query2, path2) {
  return new QueryImpl(path2, null, query2.explicitOrderBy.slice(), query2.filters.slice(), query2.limit, query2.limitType, query2.startAt, query2.endAt);
}
function matchesAllDocuments(query2) {
  return query2.filters.length === 0 && query2.limit === null && query2.startAt == null && query2.endAt == null && (query2.explicitOrderBy.length === 0 || query2.explicitOrderBy.length === 1 && query2.explicitOrderBy[0].field.isKeyField());
}
function hasLimitToFirst(query2) {
  return !isNullOrUndefined(query2.limit) && query2.limitType === "F";
}
function hasLimitToLast(query2) {
  return !isNullOrUndefined(query2.limit) && query2.limitType === "L";
}
function getFirstOrderByField(query2) {
  return query2.explicitOrderBy.length > 0 ? query2.explicitOrderBy[0].field : null;
}
function getInequalityFilterField(query2) {
  for (var _i = 0, _d = query2.filters; _i < _d.length; _i++) {
    var filter2 = _d[_i];
    if (filter2.isInequality()) {
      return filter2.field;
    }
  }
  return null;
}
function findFilterOperator(query2, operators) {
  for (var _i = 0, _d = query2.filters; _i < _d.length; _i++) {
    var filter2 = _d[_i];
    if (operators.indexOf(filter2.op) >= 0) {
      return filter2.op;
    }
  }
  return null;
}
function newQueryForCollectionGroup(collectionId) {
  return new QueryImpl(ResourcePath.emptyPath(), collectionId);
}
function isDocumentQuery$1(query2) {
  return DocumentKey.isDocumentKey(query2.path) && query2.collectionGroup === null && query2.filters.length === 0;
}
function isCollectionGroupQuery(query2) {
  return query2.collectionGroup !== null;
}
function queryOrderBy(query2) {
  var queryImpl = debugCast(query2);
  if (queryImpl.memoizedOrderBy === null) {
    queryImpl.memoizedOrderBy = [];
    var inequalityField = getInequalityFilterField(queryImpl);
    var firstOrderByField = getFirstOrderByField(queryImpl);
    if (inequalityField !== null && firstOrderByField === null) {
      if (!inequalityField.isKeyField()) {
        queryImpl.memoizedOrderBy.push(new OrderBy(inequalityField));
      }
      queryImpl.memoizedOrderBy.push(new OrderBy(FieldPath$1.keyField(), "asc"));
    } else {
      var foundKeyOrdering = false;
      for (var _i = 0, _d = queryImpl.explicitOrderBy; _i < _d.length; _i++) {
        var orderBy_1 = _d[_i];
        queryImpl.memoizedOrderBy.push(orderBy_1);
        if (orderBy_1.field.isKeyField()) {
          foundKeyOrdering = true;
        }
      }
      if (!foundKeyOrdering) {
        var lastDirection = queryImpl.explicitOrderBy.length > 0 ? queryImpl.explicitOrderBy[queryImpl.explicitOrderBy.length - 1].dir : "asc";
        queryImpl.memoizedOrderBy.push(new OrderBy(FieldPath$1.keyField(), lastDirection));
      }
    }
  }
  return queryImpl.memoizedOrderBy;
}
function queryToTarget(query2) {
  var queryImpl = debugCast(query2);
  if (!queryImpl.memoizedTarget) {
    if (queryImpl.limitType === "F") {
      queryImpl.memoizedTarget = newTarget(queryImpl.path, queryImpl.collectionGroup, queryOrderBy(queryImpl), queryImpl.filters, queryImpl.limit, queryImpl.startAt, queryImpl.endAt);
    } else {
      var orderBys = [];
      for (var _i = 0, _d = queryOrderBy(queryImpl); _i < _d.length; _i++) {
        var orderBy_2 = _d[_i];
        var dir = orderBy_2.dir === "desc" ? "asc" : "desc";
        orderBys.push(new OrderBy(orderBy_2.field, dir));
      }
      var startAt_1 = queryImpl.endAt ? new Bound(queryImpl.endAt.position, !queryImpl.endAt.before) : null;
      var endAt_1 = queryImpl.startAt ? new Bound(queryImpl.startAt.position, !queryImpl.startAt.before) : null;
      queryImpl.memoizedTarget = newTarget(queryImpl.path, queryImpl.collectionGroup, orderBys, queryImpl.filters, queryImpl.limit, startAt_1, endAt_1);
    }
  }
  return queryImpl.memoizedTarget;
}
function queryWithAddedFilter(query2, filter2) {
  var newFilters = query2.filters.concat([filter2]);
  return new QueryImpl(query2.path, query2.collectionGroup, query2.explicitOrderBy.slice(), newFilters, query2.limit, query2.limitType, query2.startAt, query2.endAt);
}
function queryWithAddedOrderBy(query2, orderBy2) {
  var newOrderBy = query2.explicitOrderBy.concat([orderBy2]);
  return new QueryImpl(query2.path, query2.collectionGroup, newOrderBy, query2.filters.slice(), query2.limit, query2.limitType, query2.startAt, query2.endAt);
}
function queryWithLimit(query2, limit2, limitType) {
  return new QueryImpl(query2.path, query2.collectionGroup, query2.explicitOrderBy.slice(), query2.filters.slice(), limit2, limitType, query2.startAt, query2.endAt);
}
function queryWithStartAt(query2, bound) {
  return new QueryImpl(query2.path, query2.collectionGroup, query2.explicitOrderBy.slice(), query2.filters.slice(), query2.limit, query2.limitType, bound, query2.endAt);
}
function queryWithEndAt(query2, bound) {
  return new QueryImpl(query2.path, query2.collectionGroup, query2.explicitOrderBy.slice(), query2.filters.slice(), query2.limit, query2.limitType, query2.startAt, bound);
}
function queryEquals(left, right) {
  return targetEquals(queryToTarget(left), queryToTarget(right)) && left.limitType === right.limitType;
}
function canonifyQuery(query2) {
  return canonifyTarget(queryToTarget(query2)) + "|lt:" + query2.limitType;
}
function stringifyQuery(query2) {
  return "Query(target=" + stringifyTarget(queryToTarget(query2)) + "; limitType=" + query2.limitType + ")";
}
function queryMatches(query2, doc2) {
  return doc2.isFoundDocument() && queryMatchesPathAndCollectionGroup(query2, doc2) && queryMatchesOrderBy(query2, doc2) && queryMatchesFilters(query2, doc2) && queryMatchesBounds(query2, doc2);
}
function queryMatchesPathAndCollectionGroup(query2, doc2) {
  var docPath = doc2.key.path;
  if (query2.collectionGroup !== null) {
    return doc2.key.hasCollectionId(query2.collectionGroup) && query2.path.isPrefixOf(docPath);
  } else if (DocumentKey.isDocumentKey(query2.path)) {
    return query2.path.isEqual(docPath);
  } else {
    return query2.path.isImmediateParentOf(docPath);
  }
}
function queryMatchesOrderBy(query2, doc2) {
  for (var _i = 0, _d = query2.explicitOrderBy; _i < _d.length; _i++) {
    var orderBy_3 = _d[_i];
    if (!orderBy_3.field.isKeyField() && doc2.data.field(orderBy_3.field) === null) {
      return false;
    }
  }
  return true;
}
function queryMatchesFilters(query2, doc2) {
  for (var _i = 0, _d = query2.filters; _i < _d.length; _i++) {
    var filter2 = _d[_i];
    if (!filter2.matches(doc2)) {
      return false;
    }
  }
  return true;
}
function queryMatchesBounds(query2, doc2) {
  if (query2.startAt && !sortsBeforeDocument(query2.startAt, queryOrderBy(query2), doc2)) {
    return false;
  }
  if (query2.endAt && sortsBeforeDocument(query2.endAt, queryOrderBy(query2), doc2)) {
    return false;
  }
  return true;
}
function newQueryComparator(query2) {
  return function(d1, d2) {
    var comparedOnKeyField = false;
    for (var _i = 0, _d = queryOrderBy(query2); _i < _d.length; _i++) {
      var orderBy_4 = _d[_i];
      var comp = compareDocs(orderBy_4, d1, d2);
      if (comp !== 0) {
        return comp;
      }
      comparedOnKeyField = comparedOnKeyField || orderBy_4.field.isKeyField();
    }
    return 0;
  };
}
function compareDocs(orderBy2, d1, d2) {
  var comparison = orderBy2.field.isKeyField() ? DocumentKey.comparator(d1.key, d2.key) : compareDocumentsByField(orderBy2.field, d1, d2);
  switch (orderBy2.dir) {
    case "asc":
      return comparison;
    case "desc":
      return -1 * comparison;
    default:
      return fail();
  }
}
var SortedMap = function() {
  function SortedMap2(comparator, root2) {
    this.comparator = comparator;
    this.root = root2 ? root2 : LLRBNode.EMPTY;
  }
  SortedMap2.prototype.insert = function(key, value) {
    return new SortedMap2(this.comparator, this.root.insert(key, value, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
  };
  SortedMap2.prototype.remove = function(key) {
    return new SortedMap2(this.comparator, this.root.remove(key, this.comparator).copy(null, null, LLRBNode.BLACK, null, null));
  };
  SortedMap2.prototype.get = function(key) {
    var node = this.root;
    while (!node.isEmpty()) {
      var cmp = this.comparator(key, node.key);
      if (cmp === 0) {
        return node.value;
      } else if (cmp < 0) {
        node = node.left;
      } else if (cmp > 0) {
        node = node.right;
      }
    }
    return null;
  };
  SortedMap2.prototype.indexOf = function(key) {
    var prunedNodes = 0;
    var node = this.root;
    while (!node.isEmpty()) {
      var cmp = this.comparator(key, node.key);
      if (cmp === 0) {
        return prunedNodes + node.left.size;
      } else if (cmp < 0) {
        node = node.left;
      } else {
        prunedNodes += node.left.size + 1;
        node = node.right;
      }
    }
    return -1;
  };
  SortedMap2.prototype.isEmpty = function() {
    return this.root.isEmpty();
  };
  Object.defineProperty(SortedMap2.prototype, "size", {
    get: function() {
      return this.root.size;
    },
    enumerable: false,
    configurable: true
  });
  SortedMap2.prototype.minKey = function() {
    return this.root.minKey();
  };
  SortedMap2.prototype.maxKey = function() {
    return this.root.maxKey();
  };
  SortedMap2.prototype.inorderTraversal = function(action) {
    return this.root.inorderTraversal(action);
  };
  SortedMap2.prototype.forEach = function(fn) {
    this.inorderTraversal(function(k, v) {
      fn(k, v);
      return false;
    });
  };
  SortedMap2.prototype.toString = function() {
    var descriptions = [];
    this.inorderTraversal(function(k, v) {
      descriptions.push(k + ":" + v);
      return false;
    });
    return "{" + descriptions.join(", ") + "}";
  };
  SortedMap2.prototype.reverseTraversal = function(action) {
    return this.root.reverseTraversal(action);
  };
  SortedMap2.prototype.getIterator = function() {
    return new SortedMapIterator(this.root, null, this.comparator, false);
  };
  SortedMap2.prototype.getIteratorFrom = function(key) {
    return new SortedMapIterator(this.root, key, this.comparator, false);
  };
  SortedMap2.prototype.getReverseIterator = function() {
    return new SortedMapIterator(this.root, null, this.comparator, true);
  };
  SortedMap2.prototype.getReverseIteratorFrom = function(key) {
    return new SortedMapIterator(this.root, key, this.comparator, true);
  };
  return SortedMap2;
}();
var SortedMapIterator = function() {
  function SortedMapIterator2(node, startKey, comparator, isReverse) {
    this.isReverse = isReverse;
    this.nodeStack = [];
    var cmp = 1;
    while (!node.isEmpty()) {
      cmp = startKey ? comparator(node.key, startKey) : 1;
      if (isReverse) {
        cmp *= -1;
      }
      if (cmp < 0) {
        if (this.isReverse) {
          node = node.left;
        } else {
          node = node.right;
        }
      } else if (cmp === 0) {
        this.nodeStack.push(node);
        break;
      } else {
        this.nodeStack.push(node);
        if (this.isReverse) {
          node = node.right;
        } else {
          node = node.left;
        }
      }
    }
  }
  SortedMapIterator2.prototype.getNext = function() {
    var node = this.nodeStack.pop();
    var result = { key: node.key, value: node.value };
    if (this.isReverse) {
      node = node.left;
      while (!node.isEmpty()) {
        this.nodeStack.push(node);
        node = node.right;
      }
    } else {
      node = node.right;
      while (!node.isEmpty()) {
        this.nodeStack.push(node);
        node = node.left;
      }
    }
    return result;
  };
  SortedMapIterator2.prototype.hasNext = function() {
    return this.nodeStack.length > 0;
  };
  SortedMapIterator2.prototype.peek = function() {
    if (this.nodeStack.length === 0) {
      return null;
    }
    var node = this.nodeStack[this.nodeStack.length - 1];
    return { key: node.key, value: node.value };
  };
  return SortedMapIterator2;
}();
var LLRBNode = function() {
  function LLRBNode2(key, value, color, left, right) {
    this.key = key;
    this.value = value;
    this.color = color != null ? color : LLRBNode2.RED;
    this.left = left != null ? left : LLRBNode2.EMPTY;
    this.right = right != null ? right : LLRBNode2.EMPTY;
    this.size = this.left.size + 1 + this.right.size;
  }
  LLRBNode2.prototype.copy = function(key, value, color, left, right) {
    return new LLRBNode2(key != null ? key : this.key, value != null ? value : this.value, color != null ? color : this.color, left != null ? left : this.left, right != null ? right : this.right);
  };
  LLRBNode2.prototype.isEmpty = function() {
    return false;
  };
  LLRBNode2.prototype.inorderTraversal = function(action) {
    return this.left.inorderTraversal(action) || action(this.key, this.value) || this.right.inorderTraversal(action);
  };
  LLRBNode2.prototype.reverseTraversal = function(action) {
    return this.right.reverseTraversal(action) || action(this.key, this.value) || this.left.reverseTraversal(action);
  };
  LLRBNode2.prototype.min = function() {
    if (this.left.isEmpty()) {
      return this;
    } else {
      return this.left.min();
    }
  };
  LLRBNode2.prototype.minKey = function() {
    return this.min().key;
  };
  LLRBNode2.prototype.maxKey = function() {
    if (this.right.isEmpty()) {
      return this.key;
    } else {
      return this.right.maxKey();
    }
  };
  LLRBNode2.prototype.insert = function(key, value, comparator) {
    var n = this;
    var cmp = comparator(key, n.key);
    if (cmp < 0) {
      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);
    } else if (cmp === 0) {
      n = n.copy(null, value, null, null, null);
    } else {
      n = n.copy(null, null, null, null, n.right.insert(key, value, comparator));
    }
    return n.fixUp();
  };
  LLRBNode2.prototype.removeMin = function() {
    if (this.left.isEmpty()) {
      return LLRBNode2.EMPTY;
    }
    var n = this;
    if (!n.left.isRed() && !n.left.left.isRed()) {
      n = n.moveRedLeft();
    }
    n = n.copy(null, null, null, n.left.removeMin(), null);
    return n.fixUp();
  };
  LLRBNode2.prototype.remove = function(key, comparator) {
    var smallest;
    var n = this;
    if (comparator(key, n.key) < 0) {
      if (!n.left.isEmpty() && !n.left.isRed() && !n.left.left.isRed()) {
        n = n.moveRedLeft();
      }
      n = n.copy(null, null, null, n.left.remove(key, comparator), null);
    } else {
      if (n.left.isRed()) {
        n = n.rotateRight();
      }
      if (!n.right.isEmpty() && !n.right.isRed() && !n.right.left.isRed()) {
        n = n.moveRedRight();
      }
      if (comparator(key, n.key) === 0) {
        if (n.right.isEmpty()) {
          return LLRBNode2.EMPTY;
        } else {
          smallest = n.right.min();
          n = n.copy(smallest.key, smallest.value, null, null, n.right.removeMin());
        }
      }
      n = n.copy(null, null, null, null, n.right.remove(key, comparator));
    }
    return n.fixUp();
  };
  LLRBNode2.prototype.isRed = function() {
    return this.color;
  };
  LLRBNode2.prototype.fixUp = function() {
    var n = this;
    if (n.right.isRed() && !n.left.isRed()) {
      n = n.rotateLeft();
    }
    if (n.left.isRed() && n.left.left.isRed()) {
      n = n.rotateRight();
    }
    if (n.left.isRed() && n.right.isRed()) {
      n = n.colorFlip();
    }
    return n;
  };
  LLRBNode2.prototype.moveRedLeft = function() {
    var n = this.colorFlip();
    if (n.right.left.isRed()) {
      n = n.copy(null, null, null, null, n.right.rotateRight());
      n = n.rotateLeft();
      n = n.colorFlip();
    }
    return n;
  };
  LLRBNode2.prototype.moveRedRight = function() {
    var n = this.colorFlip();
    if (n.left.left.isRed()) {
      n = n.rotateRight();
      n = n.colorFlip();
    }
    return n;
  };
  LLRBNode2.prototype.rotateLeft = function() {
    var nl = this.copy(null, null, LLRBNode2.RED, null, this.right.left);
    return this.right.copy(null, null, this.color, nl, null);
  };
  LLRBNode2.prototype.rotateRight = function() {
    var nr = this.copy(null, null, LLRBNode2.RED, this.left.right, null);
    return this.left.copy(null, null, this.color, null, nr);
  };
  LLRBNode2.prototype.colorFlip = function() {
    var left = this.left.copy(null, null, !this.left.color, null, null);
    var right = this.right.copy(null, null, !this.right.color, null, null);
    return this.copy(null, null, !this.color, left, right);
  };
  LLRBNode2.prototype.checkMaxDepth = function() {
    var blackDepth = this.check();
    if (Math.pow(2, blackDepth) <= this.size + 1) {
      return true;
    } else {
      return false;
    }
  };
  LLRBNode2.prototype.check = function() {
    if (this.isRed() && this.left.isRed()) {
      throw fail();
    }
    if (this.right.isRed()) {
      throw fail();
    }
    var blackDepth = this.left.check();
    if (blackDepth !== this.right.check()) {
      throw fail();
    } else {
      return blackDepth + (this.isRed() ? 0 : 1);
    }
  };
  return LLRBNode2;
}();
LLRBNode.EMPTY = null;
LLRBNode.RED = true;
LLRBNode.BLACK = false;
var LLRBEmptyNode = function() {
  function LLRBEmptyNode2() {
    this.size = 0;
  }
  Object.defineProperty(LLRBEmptyNode2.prototype, "key", {
    get: function() {
      throw fail();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(LLRBEmptyNode2.prototype, "value", {
    get: function() {
      throw fail();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(LLRBEmptyNode2.prototype, "color", {
    get: function() {
      throw fail();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(LLRBEmptyNode2.prototype, "left", {
    get: function() {
      throw fail();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(LLRBEmptyNode2.prototype, "right", {
    get: function() {
      throw fail();
    },
    enumerable: false,
    configurable: true
  });
  LLRBEmptyNode2.prototype.copy = function(key, value, color, left, right) {
    return this;
  };
  LLRBEmptyNode2.prototype.insert = function(key, value, comparator) {
    return new LLRBNode(key, value);
  };
  LLRBEmptyNode2.prototype.remove = function(key, comparator) {
    return this;
  };
  LLRBEmptyNode2.prototype.isEmpty = function() {
    return true;
  };
  LLRBEmptyNode2.prototype.inorderTraversal = function(action) {
    return false;
  };
  LLRBEmptyNode2.prototype.reverseTraversal = function(action) {
    return false;
  };
  LLRBEmptyNode2.prototype.minKey = function() {
    return null;
  };
  LLRBEmptyNode2.prototype.maxKey = function() {
    return null;
  };
  LLRBEmptyNode2.prototype.isRed = function() {
    return false;
  };
  LLRBEmptyNode2.prototype.checkMaxDepth = function() {
    return true;
  };
  LLRBEmptyNode2.prototype.check = function() {
    return 0;
  };
  return LLRBEmptyNode2;
}();
LLRBNode.EMPTY = new LLRBEmptyNode();
var SortedSet = function() {
  function SortedSet2(comparator) {
    this.comparator = comparator;
    this.data = new SortedMap(this.comparator);
  }
  SortedSet2.prototype.has = function(elem) {
    return this.data.get(elem) !== null;
  };
  SortedSet2.prototype.first = function() {
    return this.data.minKey();
  };
  SortedSet2.prototype.last = function() {
    return this.data.maxKey();
  };
  Object.defineProperty(SortedSet2.prototype, "size", {
    get: function() {
      return this.data.size;
    },
    enumerable: false,
    configurable: true
  });
  SortedSet2.prototype.indexOf = function(elem) {
    return this.data.indexOf(elem);
  };
  SortedSet2.prototype.forEach = function(cb) {
    this.data.inorderTraversal(function(k, v) {
      cb(k);
      return false;
    });
  };
  SortedSet2.prototype.forEachInRange = function(range, cb) {
    var iter = this.data.getIteratorFrom(range[0]);
    while (iter.hasNext()) {
      var elem = iter.getNext();
      if (this.comparator(elem.key, range[1]) >= 0) {
        return;
      }
      cb(elem.key);
    }
  };
  SortedSet2.prototype.forEachWhile = function(cb, start) {
    var iter;
    if (start !== void 0) {
      iter = this.data.getIteratorFrom(start);
    } else {
      iter = this.data.getIterator();
    }
    while (iter.hasNext()) {
      var elem = iter.getNext();
      var result = cb(elem.key);
      if (!result) {
        return;
      }
    }
  };
  SortedSet2.prototype.firstAfterOrEqual = function(elem) {
    var iter = this.data.getIteratorFrom(elem);
    return iter.hasNext() ? iter.getNext().key : null;
  };
  SortedSet2.prototype.getIterator = function() {
    return new SortedSetIterator(this.data.getIterator());
  };
  SortedSet2.prototype.getIteratorFrom = function(key) {
    return new SortedSetIterator(this.data.getIteratorFrom(key));
  };
  SortedSet2.prototype.add = function(elem) {
    return this.copy(this.data.remove(elem).insert(elem, true));
  };
  SortedSet2.prototype.delete = function(elem) {
    if (!this.has(elem)) {
      return this;
    }
    return this.copy(this.data.remove(elem));
  };
  SortedSet2.prototype.isEmpty = function() {
    return this.data.isEmpty();
  };
  SortedSet2.prototype.unionWith = function(other) {
    var result = this;
    if (result.size < other.size) {
      result = other;
      other = this;
    }
    other.forEach(function(elem) {
      result = result.add(elem);
    });
    return result;
  };
  SortedSet2.prototype.isEqual = function(other) {
    if (!(other instanceof SortedSet2)) {
      return false;
    }
    if (this.size !== other.size) {
      return false;
    }
    var thisIt = this.data.getIterator();
    var otherIt = other.data.getIterator();
    while (thisIt.hasNext()) {
      var thisElem = thisIt.getNext().key;
      var otherElem = otherIt.getNext().key;
      if (this.comparator(thisElem, otherElem) !== 0) {
        return false;
      }
    }
    return true;
  };
  SortedSet2.prototype.toArray = function() {
    var res = [];
    this.forEach(function(targetId) {
      res.push(targetId);
    });
    return res;
  };
  SortedSet2.prototype.toString = function() {
    var result = [];
    this.forEach(function(elem) {
      return result.push(elem);
    });
    return "SortedSet(" + result.toString() + ")";
  };
  SortedSet2.prototype.copy = function(data) {
    var result = new SortedSet2(this.comparator);
    result.data = data;
    return result;
  };
  return SortedSet2;
}();
var SortedSetIterator = function() {
  function SortedSetIterator2(iter) {
    this.iter = iter;
  }
  SortedSetIterator2.prototype.getNext = function() {
    return this.iter.getNext().key;
  };
  SortedSetIterator2.prototype.hasNext = function() {
    return this.iter.hasNext();
  };
  return SortedSetIterator2;
}();
var EMPTY_MUTABLE_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);
function mutableDocumentMap() {
  return EMPTY_MUTABLE_DOCUMENT_MAP;
}
var EMPTY_DOCUMENT_MAP = new SortedMap(DocumentKey.comparator);
function documentMap() {
  return EMPTY_DOCUMENT_MAP;
}
var EMPTY_DOCUMENT_VERSION_MAP = new SortedMap(DocumentKey.comparator);
function documentVersionMap() {
  return EMPTY_DOCUMENT_VERSION_MAP;
}
var EMPTY_DOCUMENT_KEY_SET = new SortedSet(DocumentKey.comparator);
function documentKeySet() {
  var keys = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    keys[_i] = arguments[_i];
  }
  var set = EMPTY_DOCUMENT_KEY_SET;
  for (var _d = 0, keys_1 = keys; _d < keys_1.length; _d++) {
    var key = keys_1[_d];
    set = set.add(key);
  }
  return set;
}
var EMPTY_TARGET_ID_SET = new SortedSet(primitiveComparator);
function targetIdSet() {
  return EMPTY_TARGET_ID_SET;
}
function toDouble(serializer, value) {
  if (serializer.useProto3Json) {
    if (isNaN(value)) {
      return { doubleValue: "NaN" };
    } else if (value === Infinity) {
      return { doubleValue: "Infinity" };
    } else if (value === -Infinity) {
      return { doubleValue: "-Infinity" };
    }
  }
  return { doubleValue: isNegativeZero(value) ? "-0" : value };
}
function toInteger(value) {
  return { integerValue: "" + value };
}
function toNumber(serializer, value) {
  return isSafeInteger(value) ? toInteger(value) : toDouble(serializer, value);
}
var TransformOperation = function() {
  function TransformOperation2() {
    this._ = void 0;
  }
  return TransformOperation2;
}();
function applyTransformOperationToLocalView(transform, previousValue, localWriteTime) {
  if (transform instanceof ServerTimestampTransform) {
    return serverTimestamp$1(localWriteTime, previousValue);
  } else if (transform instanceof ArrayUnionTransformOperation) {
    return applyArrayUnionTransformOperation(transform, previousValue);
  } else if (transform instanceof ArrayRemoveTransformOperation) {
    return applyArrayRemoveTransformOperation(transform, previousValue);
  } else {
    return applyNumericIncrementTransformOperationToLocalView(transform, previousValue);
  }
}
function applyTransformOperationToRemoteDocument(transform, previousValue, transformResult) {
  if (transform instanceof ArrayUnionTransformOperation) {
    return applyArrayUnionTransformOperation(transform, previousValue);
  } else if (transform instanceof ArrayRemoveTransformOperation) {
    return applyArrayRemoveTransformOperation(transform, previousValue);
  }
  return transformResult;
}
function computeTransformOperationBaseValue(transform, previousValue) {
  if (transform instanceof NumericIncrementTransformOperation) {
    return isNumber(previousValue) ? previousValue : { integerValue: 0 };
  }
  return null;
}
function transformOperationEquals(left, right) {
  if (left instanceof ArrayUnionTransformOperation && right instanceof ArrayUnionTransformOperation) {
    return arrayEquals(left.elements, right.elements, valueEquals);
  } else if (left instanceof ArrayRemoveTransformOperation && right instanceof ArrayRemoveTransformOperation) {
    return arrayEquals(left.elements, right.elements, valueEquals);
  } else if (left instanceof NumericIncrementTransformOperation && right instanceof NumericIncrementTransformOperation) {
    return valueEquals(left.operand, right.operand);
  }
  return left instanceof ServerTimestampTransform && right instanceof ServerTimestampTransform;
}
var ServerTimestampTransform = function(_super) {
  tslib.__extends(ServerTimestampTransform2, _super);
  function ServerTimestampTransform2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  return ServerTimestampTransform2;
}(TransformOperation);
var ArrayUnionTransformOperation = function(_super) {
  tslib.__extends(ArrayUnionTransformOperation2, _super);
  function ArrayUnionTransformOperation2(elements) {
    var _this = _super.call(this) || this;
    _this.elements = elements;
    return _this;
  }
  return ArrayUnionTransformOperation2;
}(TransformOperation);
function applyArrayUnionTransformOperation(transform, previousValue) {
  var values = coercedFieldValuesArray(previousValue);
  var _loop_3 = function(toUnion2) {
    if (!values.some(function(element) {
      return valueEquals(element, toUnion2);
    })) {
      values.push(toUnion2);
    }
  };
  for (var _i = 0, _d = transform.elements; _i < _d.length; _i++) {
    var toUnion = _d[_i];
    _loop_3(toUnion);
  }
  return { arrayValue: { values } };
}
var ArrayRemoveTransformOperation = function(_super) {
  tslib.__extends(ArrayRemoveTransformOperation2, _super);
  function ArrayRemoveTransformOperation2(elements) {
    var _this = _super.call(this) || this;
    _this.elements = elements;
    return _this;
  }
  return ArrayRemoveTransformOperation2;
}(TransformOperation);
function applyArrayRemoveTransformOperation(transform, previousValue) {
  var values = coercedFieldValuesArray(previousValue);
  var _loop_4 = function(toRemove2) {
    values = values.filter(function(element) {
      return !valueEquals(element, toRemove2);
    });
  };
  for (var _i = 0, _d = transform.elements; _i < _d.length; _i++) {
    var toRemove = _d[_i];
    _loop_4(toRemove);
  }
  return { arrayValue: { values } };
}
var NumericIncrementTransformOperation = function(_super) {
  tslib.__extends(NumericIncrementTransformOperation2, _super);
  function NumericIncrementTransformOperation2(serializer, operand) {
    var _this = _super.call(this) || this;
    _this.serializer = serializer;
    _this.operand = operand;
    return _this;
  }
  return NumericIncrementTransformOperation2;
}(TransformOperation);
function applyNumericIncrementTransformOperationToLocalView(transform, previousValue) {
  var baseValue = computeTransformOperationBaseValue(transform, previousValue);
  var sum = asNumber(baseValue) + asNumber(transform.operand);
  if (isInteger(baseValue) && isInteger(transform.operand)) {
    return toInteger(sum);
  } else {
    return toDouble(transform.serializer, sum);
  }
}
function asNumber(value) {
  return normalizeNumber(value.integerValue || value.doubleValue);
}
function coercedFieldValuesArray(value) {
  return isArray(value) && value.arrayValue.values ? value.arrayValue.values.slice() : [];
}
var FieldTransform = function() {
  function FieldTransform2(field2, transform) {
    this.field = field2;
    this.transform = transform;
  }
  return FieldTransform2;
}();
function fieldTransformEquals(left, right) {
  return left.field.isEqual(right.field) && transformOperationEquals(left.transform, right.transform);
}
function fieldTransformsAreEqual(left, right) {
  if (left === void 0 && right === void 0) {
    return true;
  }
  if (left && right) {
    return arrayEquals(left, right, function(l, r) {
      return fieldTransformEquals(l, r);
    });
  }
  return false;
}
var MutationResult = function() {
  function MutationResult2(version2, transformResults) {
    this.version = version2;
    this.transformResults = transformResults;
  }
  return MutationResult2;
}();
var Precondition = function() {
  function Precondition2(updateTime, exists) {
    this.updateTime = updateTime;
    this.exists = exists;
  }
  Precondition2.none = function() {
    return new Precondition2();
  };
  Precondition2.exists = function(exists) {
    return new Precondition2(void 0, exists);
  };
  Precondition2.updateTime = function(version2) {
    return new Precondition2(version2);
  };
  Object.defineProperty(Precondition2.prototype, "isNone", {
    get: function() {
      return this.updateTime === void 0 && this.exists === void 0;
    },
    enumerable: false,
    configurable: true
  });
  Precondition2.prototype.isEqual = function(other) {
    return this.exists === other.exists && (this.updateTime ? !!other.updateTime && this.updateTime.isEqual(other.updateTime) : !other.updateTime);
  };
  return Precondition2;
}();
function preconditionIsValidForDocument(precondition, document2) {
  if (precondition.updateTime !== void 0) {
    return document2.isFoundDocument() && document2.version.isEqual(precondition.updateTime);
  } else if (precondition.exists !== void 0) {
    return precondition.exists === document2.isFoundDocument();
  } else {
    return true;
  }
}
var Mutation = function() {
  function Mutation2() {
  }
  return Mutation2;
}();
function mutationApplyToRemoteDocument(mutation, document2, mutationResult) {
  if (mutation instanceof SetMutation) {
    setMutationApplyToRemoteDocument(mutation, document2, mutationResult);
  } else if (mutation instanceof PatchMutation) {
    patchMutationApplyToRemoteDocument(mutation, document2, mutationResult);
  } else {
    deleteMutationApplyToRemoteDocument(mutation, document2, mutationResult);
  }
}
function mutationApplyToLocalView(mutation, document2, localWriteTime) {
  if (mutation instanceof SetMutation) {
    setMutationApplyToLocalView(mutation, document2, localWriteTime);
  } else if (mutation instanceof PatchMutation) {
    patchMutationApplyToLocalView(mutation, document2, localWriteTime);
  } else {
    deleteMutationApplyToLocalView(mutation, document2);
  }
}
function mutationExtractBaseValue(mutation, document2) {
  var baseObject = null;
  for (var _i = 0, _d = mutation.fieldTransforms; _i < _d.length; _i++) {
    var fieldTransform = _d[_i];
    var existingValue = document2.data.field(fieldTransform.field);
    var coercedValue = computeTransformOperationBaseValue(fieldTransform.transform, existingValue || null);
    if (coercedValue != null) {
      if (baseObject == null) {
        baseObject = ObjectValue.empty();
      }
      baseObject.set(fieldTransform.field, coercedValue);
    }
  }
  return baseObject ? baseObject : null;
}
function mutationEquals(left, right) {
  if (left.type !== right.type) {
    return false;
  }
  if (!left.key.isEqual(right.key)) {
    return false;
  }
  if (!left.precondition.isEqual(right.precondition)) {
    return false;
  }
  if (!fieldTransformsAreEqual(left.fieldTransforms, right.fieldTransforms)) {
    return false;
  }
  if (left.type === 0) {
    return left.value.isEqual(right.value);
  }
  if (left.type === 1) {
    return left.data.isEqual(right.data) && left.fieldMask.isEqual(right.fieldMask);
  }
  return true;
}
function getPostMutationVersion(document2) {
  return document2.isFoundDocument() ? document2.version : SnapshotVersion.min();
}
var SetMutation = function(_super) {
  tslib.__extends(SetMutation2, _super);
  function SetMutation2(key, value, precondition, fieldTransforms) {
    if (fieldTransforms === void 0) {
      fieldTransforms = [];
    }
    var _this = _super.call(this) || this;
    _this.key = key;
    _this.value = value;
    _this.precondition = precondition;
    _this.fieldTransforms = fieldTransforms;
    _this.type = 0;
    return _this;
  }
  return SetMutation2;
}(Mutation);
function setMutationApplyToRemoteDocument(mutation, document2, mutationResult) {
  var newData = mutation.value.clone();
  var transformResults = serverTransformResults(mutation.fieldTransforms, document2, mutationResult.transformResults);
  newData.setAll(transformResults);
  document2.convertToFoundDocument(mutationResult.version, newData).setHasCommittedMutations();
}
function setMutationApplyToLocalView(mutation, document2, localWriteTime) {
  if (!preconditionIsValidForDocument(mutation.precondition, document2)) {
    return;
  }
  var newData = mutation.value.clone();
  var transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document2);
  newData.setAll(transformResults);
  document2.convertToFoundDocument(getPostMutationVersion(document2), newData).setHasLocalMutations();
}
var PatchMutation = function(_super) {
  tslib.__extends(PatchMutation2, _super);
  function PatchMutation2(key, data, fieldMask, precondition, fieldTransforms) {
    if (fieldTransforms === void 0) {
      fieldTransforms = [];
    }
    var _this = _super.call(this) || this;
    _this.key = key;
    _this.data = data;
    _this.fieldMask = fieldMask;
    _this.precondition = precondition;
    _this.fieldTransforms = fieldTransforms;
    _this.type = 1;
    return _this;
  }
  return PatchMutation2;
}(Mutation);
function patchMutationApplyToRemoteDocument(mutation, document2, mutationResult) {
  if (!preconditionIsValidForDocument(mutation.precondition, document2)) {
    document2.convertToUnknownDocument(mutationResult.version);
    return;
  }
  var transformResults = serverTransformResults(mutation.fieldTransforms, document2, mutationResult.transformResults);
  var newData = document2.data;
  newData.setAll(getPatch(mutation));
  newData.setAll(transformResults);
  document2.convertToFoundDocument(mutationResult.version, newData).setHasCommittedMutations();
}
function patchMutationApplyToLocalView(mutation, document2, localWriteTime) {
  if (!preconditionIsValidForDocument(mutation.precondition, document2)) {
    return;
  }
  var transformResults = localTransformResults(mutation.fieldTransforms, localWriteTime, document2);
  var newData = document2.data;
  newData.setAll(getPatch(mutation));
  newData.setAll(transformResults);
  document2.convertToFoundDocument(getPostMutationVersion(document2), newData).setHasLocalMutations();
}
function getPatch(mutation) {
  var result = new Map();
  mutation.fieldMask.fields.forEach(function(fieldPath) {
    if (!fieldPath.isEmpty()) {
      var newValue = mutation.data.field(fieldPath);
      result.set(fieldPath, newValue);
    }
  });
  return result;
}
function serverTransformResults(fieldTransforms, mutableDocument, serverTransformResults2) {
  var transformResults = new Map();
  hardAssert(fieldTransforms.length === serverTransformResults2.length);
  for (var i = 0; i < serverTransformResults2.length; i++) {
    var fieldTransform = fieldTransforms[i];
    var transform = fieldTransform.transform;
    var previousValue = mutableDocument.data.field(fieldTransform.field);
    transformResults.set(fieldTransform.field, applyTransformOperationToRemoteDocument(transform, previousValue, serverTransformResults2[i]));
  }
  return transformResults;
}
function localTransformResults(fieldTransforms, localWriteTime, mutableDocument) {
  var transformResults = new Map();
  for (var _i = 0, fieldTransforms_1 = fieldTransforms; _i < fieldTransforms_1.length; _i++) {
    var fieldTransform = fieldTransforms_1[_i];
    var transform = fieldTransform.transform;
    var previousValue = mutableDocument.data.field(fieldTransform.field);
    transformResults.set(fieldTransform.field, applyTransformOperationToLocalView(transform, previousValue, localWriteTime));
  }
  return transformResults;
}
var DeleteMutation = function(_super) {
  tslib.__extends(DeleteMutation2, _super);
  function DeleteMutation2(key, precondition) {
    var _this = _super.call(this) || this;
    _this.key = key;
    _this.precondition = precondition;
    _this.type = 2;
    _this.fieldTransforms = [];
    return _this;
  }
  return DeleteMutation2;
}(Mutation);
function deleteMutationApplyToRemoteDocument(mutation, document2, mutationResult) {
  document2.convertToNoDocument(mutationResult.version).setHasCommittedMutations();
}
function deleteMutationApplyToLocalView(mutation, document2) {
  if (preconditionIsValidForDocument(mutation.precondition, document2)) {
    document2.convertToNoDocument(SnapshotVersion.min());
  }
}
var VerifyMutation = function(_super) {
  tslib.__extends(VerifyMutation2, _super);
  function VerifyMutation2(key, precondition) {
    var _this = _super.call(this) || this;
    _this.key = key;
    _this.precondition = precondition;
    _this.type = 3;
    _this.fieldTransforms = [];
    return _this;
  }
  return VerifyMutation2;
}(Mutation);
var MutationBatch = function() {
  function MutationBatch2(batchId, localWriteTime, baseMutations, mutations) {
    this.batchId = batchId;
    this.localWriteTime = localWriteTime;
    this.baseMutations = baseMutations;
    this.mutations = mutations;
  }
  MutationBatch2.prototype.applyToRemoteDocument = function(document2, batchResult) {
    var mutationResults = batchResult.mutationResults;
    for (var i = 0; i < this.mutations.length; i++) {
      var mutation = this.mutations[i];
      if (mutation.key.isEqual(document2.key)) {
        var mutationResult = mutationResults[i];
        mutationApplyToRemoteDocument(mutation, document2, mutationResult);
      }
    }
  };
  MutationBatch2.prototype.applyToLocalView = function(document2) {
    for (var _i = 0, _d = this.baseMutations; _i < _d.length; _i++) {
      var mutation = _d[_i];
      if (mutation.key.isEqual(document2.key)) {
        mutationApplyToLocalView(mutation, document2, this.localWriteTime);
      }
    }
    for (var _e = 0, _f = this.mutations; _e < _f.length; _e++) {
      var mutation = _f[_e];
      if (mutation.key.isEqual(document2.key)) {
        mutationApplyToLocalView(mutation, document2, this.localWriteTime);
      }
    }
  };
  MutationBatch2.prototype.applyToLocalDocumentSet = function(documentMap2) {
    var _this = this;
    this.mutations.forEach(function(m) {
      var document2 = documentMap2.get(m.key);
      var mutableDocument = document2;
      _this.applyToLocalView(mutableDocument);
      if (!document2.isValidDocument()) {
        mutableDocument.convertToNoDocument(SnapshotVersion.min());
      }
    });
  };
  MutationBatch2.prototype.keys = function() {
    return this.mutations.reduce(function(keys, m) {
      return keys.add(m.key);
    }, documentKeySet());
  };
  MutationBatch2.prototype.isEqual = function(other) {
    return this.batchId === other.batchId && arrayEquals(this.mutations, other.mutations, function(l, r) {
      return mutationEquals(l, r);
    }) && arrayEquals(this.baseMutations, other.baseMutations, function(l, r) {
      return mutationEquals(l, r);
    });
  };
  return MutationBatch2;
}();
var MutationBatchResult = function() {
  function MutationBatchResult2(batch, commitVersion, mutationResults, docVersions) {
    this.batch = batch;
    this.commitVersion = commitVersion;
    this.mutationResults = mutationResults;
    this.docVersions = docVersions;
  }
  MutationBatchResult2.from = function(batch, commitVersion, results) {
    hardAssert(batch.mutations.length === results.length);
    var versionMap = documentVersionMap();
    var mutations = batch.mutations;
    for (var i = 0; i < mutations.length; i++) {
      versionMap = versionMap.insert(mutations[i].key, results[i].version);
    }
    return new MutationBatchResult2(batch, commitVersion, results, versionMap);
  };
  return MutationBatchResult2;
}();
var ExistenceFilter = function() {
  function ExistenceFilter2(count) {
    this.count = count;
  }
  return ExistenceFilter2;
}();
var RpcCode;
(function(RpcCode2) {
  RpcCode2[RpcCode2["OK"] = 0] = "OK";
  RpcCode2[RpcCode2["CANCELLED"] = 1] = "CANCELLED";
  RpcCode2[RpcCode2["UNKNOWN"] = 2] = "UNKNOWN";
  RpcCode2[RpcCode2["INVALID_ARGUMENT"] = 3] = "INVALID_ARGUMENT";
  RpcCode2[RpcCode2["DEADLINE_EXCEEDED"] = 4] = "DEADLINE_EXCEEDED";
  RpcCode2[RpcCode2["NOT_FOUND"] = 5] = "NOT_FOUND";
  RpcCode2[RpcCode2["ALREADY_EXISTS"] = 6] = "ALREADY_EXISTS";
  RpcCode2[RpcCode2["PERMISSION_DENIED"] = 7] = "PERMISSION_DENIED";
  RpcCode2[RpcCode2["UNAUTHENTICATED"] = 16] = "UNAUTHENTICATED";
  RpcCode2[RpcCode2["RESOURCE_EXHAUSTED"] = 8] = "RESOURCE_EXHAUSTED";
  RpcCode2[RpcCode2["FAILED_PRECONDITION"] = 9] = "FAILED_PRECONDITION";
  RpcCode2[RpcCode2["ABORTED"] = 10] = "ABORTED";
  RpcCode2[RpcCode2["OUT_OF_RANGE"] = 11] = "OUT_OF_RANGE";
  RpcCode2[RpcCode2["UNIMPLEMENTED"] = 12] = "UNIMPLEMENTED";
  RpcCode2[RpcCode2["INTERNAL"] = 13] = "INTERNAL";
  RpcCode2[RpcCode2["UNAVAILABLE"] = 14] = "UNAVAILABLE";
  RpcCode2[RpcCode2["DATA_LOSS"] = 15] = "DATA_LOSS";
})(RpcCode || (RpcCode = {}));
function isPermanentError(code) {
  switch (code) {
    case Code.OK:
      return fail();
    case Code.CANCELLED:
    case Code.UNKNOWN:
    case Code.DEADLINE_EXCEEDED:
    case Code.RESOURCE_EXHAUSTED:
    case Code.INTERNAL:
    case Code.UNAVAILABLE:
    case Code.UNAUTHENTICATED:
      return false;
    case Code.INVALID_ARGUMENT:
    case Code.NOT_FOUND:
    case Code.ALREADY_EXISTS:
    case Code.PERMISSION_DENIED:
    case Code.FAILED_PRECONDITION:
    case Code.ABORTED:
    case Code.OUT_OF_RANGE:
    case Code.UNIMPLEMENTED:
    case Code.DATA_LOSS:
      return true;
    default:
      return fail();
  }
}
function isPermanentWriteError(code) {
  return isPermanentError(code) && code !== Code.ABORTED;
}
function mapCodeFromRpcCode(code) {
  if (code === void 0) {
    logError("GRPC error has no .code");
    return Code.UNKNOWN;
  }
  switch (code) {
    case RpcCode.OK:
      return Code.OK;
    case RpcCode.CANCELLED:
      return Code.CANCELLED;
    case RpcCode.UNKNOWN:
      return Code.UNKNOWN;
    case RpcCode.DEADLINE_EXCEEDED:
      return Code.DEADLINE_EXCEEDED;
    case RpcCode.RESOURCE_EXHAUSTED:
      return Code.RESOURCE_EXHAUSTED;
    case RpcCode.INTERNAL:
      return Code.INTERNAL;
    case RpcCode.UNAVAILABLE:
      return Code.UNAVAILABLE;
    case RpcCode.UNAUTHENTICATED:
      return Code.UNAUTHENTICATED;
    case RpcCode.INVALID_ARGUMENT:
      return Code.INVALID_ARGUMENT;
    case RpcCode.NOT_FOUND:
      return Code.NOT_FOUND;
    case RpcCode.ALREADY_EXISTS:
      return Code.ALREADY_EXISTS;
    case RpcCode.PERMISSION_DENIED:
      return Code.PERMISSION_DENIED;
    case RpcCode.FAILED_PRECONDITION:
      return Code.FAILED_PRECONDITION;
    case RpcCode.ABORTED:
      return Code.ABORTED;
    case RpcCode.OUT_OF_RANGE:
      return Code.OUT_OF_RANGE;
    case RpcCode.UNIMPLEMENTED:
      return Code.UNIMPLEMENTED;
    case RpcCode.DATA_LOSS:
      return Code.DATA_LOSS;
    default:
      return fail();
  }
}
var RemoteEvent = function() {
  function RemoteEvent2(snapshotVersion, targetChanges, targetMismatches, documentUpdates, resolvedLimboDocuments) {
    this.snapshotVersion = snapshotVersion;
    this.targetChanges = targetChanges;
    this.targetMismatches = targetMismatches;
    this.documentUpdates = documentUpdates;
    this.resolvedLimboDocuments = resolvedLimboDocuments;
  }
  RemoteEvent2.createSynthesizedRemoteEventForCurrentChange = function(targetId, current) {
    var targetChanges = new Map();
    targetChanges.set(targetId, TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current));
    return new RemoteEvent2(SnapshotVersion.min(), targetChanges, targetIdSet(), mutableDocumentMap(), documentKeySet());
  };
  return RemoteEvent2;
}();
var TargetChange = function() {
  function TargetChange2(resumeToken, current, addedDocuments, modifiedDocuments, removedDocuments) {
    this.resumeToken = resumeToken;
    this.current = current;
    this.addedDocuments = addedDocuments;
    this.modifiedDocuments = modifiedDocuments;
    this.removedDocuments = removedDocuments;
  }
  TargetChange2.createSynthesizedTargetChangeForCurrentChange = function(targetId, current) {
    return new TargetChange2(ByteString.EMPTY_BYTE_STRING, current, documentKeySet(), documentKeySet(), documentKeySet());
  };
  return TargetChange2;
}();
var DocumentWatchChange = function() {
  function DocumentWatchChange2(updatedTargetIds, removedTargetIds, key, newDoc) {
    this.updatedTargetIds = updatedTargetIds;
    this.removedTargetIds = removedTargetIds;
    this.key = key;
    this.newDoc = newDoc;
  }
  return DocumentWatchChange2;
}();
var ExistenceFilterChange = function() {
  function ExistenceFilterChange2(targetId, existenceFilter) {
    this.targetId = targetId;
    this.existenceFilter = existenceFilter;
  }
  return ExistenceFilterChange2;
}();
var WatchTargetChange = function() {
  function WatchTargetChange2(state, targetIds, resumeToken, cause) {
    if (resumeToken === void 0) {
      resumeToken = ByteString.EMPTY_BYTE_STRING;
    }
    if (cause === void 0) {
      cause = null;
    }
    this.state = state;
    this.targetIds = targetIds;
    this.resumeToken = resumeToken;
    this.cause = cause;
  }
  return WatchTargetChange2;
}();
var TargetState = function() {
  function TargetState2() {
    this.pendingResponses = 0;
    this.documentChanges = snapshotChangesMap();
    this._resumeToken = ByteString.EMPTY_BYTE_STRING;
    this._current = false;
    this._hasPendingChanges = true;
  }
  Object.defineProperty(TargetState2.prototype, "current", {
    get: function() {
      return this._current;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(TargetState2.prototype, "resumeToken", {
    get: function() {
      return this._resumeToken;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(TargetState2.prototype, "isPending", {
    get: function() {
      return this.pendingResponses !== 0;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(TargetState2.prototype, "hasPendingChanges", {
    get: function() {
      return this._hasPendingChanges;
    },
    enumerable: false,
    configurable: true
  });
  TargetState2.prototype.updateResumeToken = function(resumeToken) {
    if (resumeToken.approximateByteSize() > 0) {
      this._hasPendingChanges = true;
      this._resumeToken = resumeToken;
    }
  };
  TargetState2.prototype.toTargetChange = function() {
    var addedDocuments = documentKeySet();
    var modifiedDocuments = documentKeySet();
    var removedDocuments = documentKeySet();
    this.documentChanges.forEach(function(key, changeType) {
      switch (changeType) {
        case 0:
          addedDocuments = addedDocuments.add(key);
          break;
        case 2:
          modifiedDocuments = modifiedDocuments.add(key);
          break;
        case 1:
          removedDocuments = removedDocuments.add(key);
          break;
        default:
          fail();
      }
    });
    return new TargetChange(this._resumeToken, this._current, addedDocuments, modifiedDocuments, removedDocuments);
  };
  TargetState2.prototype.clearPendingChanges = function() {
    this._hasPendingChanges = false;
    this.documentChanges = snapshotChangesMap();
  };
  TargetState2.prototype.addDocumentChange = function(key, changeType) {
    this._hasPendingChanges = true;
    this.documentChanges = this.documentChanges.insert(key, changeType);
  };
  TargetState2.prototype.removeDocumentChange = function(key) {
    this._hasPendingChanges = true;
    this.documentChanges = this.documentChanges.remove(key);
  };
  TargetState2.prototype.recordPendingTargetRequest = function() {
    this.pendingResponses += 1;
  };
  TargetState2.prototype.recordTargetResponse = function() {
    this.pendingResponses -= 1;
  };
  TargetState2.prototype.markCurrent = function() {
    this._hasPendingChanges = true;
    this._current = true;
  };
  return TargetState2;
}();
var LOG_TAG$f = "WatchChangeAggregator";
var WatchChangeAggregator = function() {
  function WatchChangeAggregator2(metadataProvider) {
    this.metadataProvider = metadataProvider;
    this.targetStates = new Map();
    this.pendingDocumentUpdates = mutableDocumentMap();
    this.pendingDocumentTargetMapping = documentTargetMap();
    this.pendingTargetResets = new SortedSet(primitiveComparator);
  }
  WatchChangeAggregator2.prototype.handleDocumentChange = function(docChange) {
    for (var _i = 0, _d = docChange.updatedTargetIds; _i < _d.length; _i++) {
      var targetId = _d[_i];
      if (docChange.newDoc && docChange.newDoc.isFoundDocument()) {
        this.addDocumentToTarget(targetId, docChange.newDoc);
      } else {
        this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);
      }
    }
    for (var _e = 0, _f = docChange.removedTargetIds; _e < _f.length; _e++) {
      var targetId = _f[_e];
      this.removeDocumentFromTarget(targetId, docChange.key, docChange.newDoc);
    }
  };
  WatchChangeAggregator2.prototype.handleTargetChange = function(targetChange) {
    var _this = this;
    this.forEachTarget(targetChange, function(targetId) {
      var targetState = _this.ensureTargetState(targetId);
      switch (targetChange.state) {
        case 0:
          if (_this.isActiveTarget(targetId)) {
            targetState.updateResumeToken(targetChange.resumeToken);
          }
          break;
        case 1:
          targetState.recordTargetResponse();
          if (!targetState.isPending) {
            targetState.clearPendingChanges();
          }
          targetState.updateResumeToken(targetChange.resumeToken);
          break;
        case 2:
          targetState.recordTargetResponse();
          if (!targetState.isPending) {
            _this.removeTarget(targetId);
          }
          break;
        case 3:
          if (_this.isActiveTarget(targetId)) {
            targetState.markCurrent();
            targetState.updateResumeToken(targetChange.resumeToken);
          }
          break;
        case 4:
          if (_this.isActiveTarget(targetId)) {
            _this.resetTarget(targetId);
            targetState.updateResumeToken(targetChange.resumeToken);
          }
          break;
        default:
          fail();
      }
    });
  };
  WatchChangeAggregator2.prototype.forEachTarget = function(targetChange, fn) {
    var _this = this;
    if (targetChange.targetIds.length > 0) {
      targetChange.targetIds.forEach(fn);
    } else {
      this.targetStates.forEach(function(_, targetId) {
        if (_this.isActiveTarget(targetId)) {
          fn(targetId);
        }
      });
    }
  };
  WatchChangeAggregator2.prototype.handleExistenceFilter = function(watchChange) {
    var targetId = watchChange.targetId;
    var expectedCount = watchChange.existenceFilter.count;
    var targetData = this.targetDataForActiveTarget(targetId);
    if (targetData) {
      var target = targetData.target;
      if (isDocumentTarget(target)) {
        if (expectedCount === 0) {
          var key = new DocumentKey(target.path);
          this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, SnapshotVersion.min()));
        } else {
          hardAssert(expectedCount === 1);
        }
      } else {
        var currentSize = this.getCurrentDocumentCountForTarget(targetId);
        if (currentSize !== expectedCount) {
          this.resetTarget(targetId);
          this.pendingTargetResets = this.pendingTargetResets.add(targetId);
        }
      }
    }
  };
  WatchChangeAggregator2.prototype.createRemoteEvent = function(snapshotVersion) {
    var _this = this;
    var targetChanges = new Map();
    this.targetStates.forEach(function(targetState, targetId) {
      var targetData = _this.targetDataForActiveTarget(targetId);
      if (targetData) {
        if (targetState.current && isDocumentTarget(targetData.target)) {
          var key = new DocumentKey(targetData.target.path);
          if (_this.pendingDocumentUpdates.get(key) === null && !_this.targetContainsDocument(targetId, key)) {
            _this.removeDocumentFromTarget(targetId, key, MutableDocument.newNoDocument(key, snapshotVersion));
          }
        }
        if (targetState.hasPendingChanges) {
          targetChanges.set(targetId, targetState.toTargetChange());
          targetState.clearPendingChanges();
        }
      }
    });
    var resolvedLimboDocuments = documentKeySet();
    this.pendingDocumentTargetMapping.forEach(function(key, targets) {
      var isOnlyLimboTarget = true;
      targets.forEachWhile(function(targetId) {
        var targetData = _this.targetDataForActiveTarget(targetId);
        if (targetData && targetData.purpose !== 2) {
          isOnlyLimboTarget = false;
          return false;
        }
        return true;
      });
      if (isOnlyLimboTarget) {
        resolvedLimboDocuments = resolvedLimboDocuments.add(key);
      }
    });
    var remoteEvent = new RemoteEvent(snapshotVersion, targetChanges, this.pendingTargetResets, this.pendingDocumentUpdates, resolvedLimboDocuments);
    this.pendingDocumentUpdates = mutableDocumentMap();
    this.pendingDocumentTargetMapping = documentTargetMap();
    this.pendingTargetResets = new SortedSet(primitiveComparator);
    return remoteEvent;
  };
  WatchChangeAggregator2.prototype.addDocumentToTarget = function(targetId, document2) {
    if (!this.isActiveTarget(targetId)) {
      return;
    }
    var changeType = this.targetContainsDocument(targetId, document2.key) ? 2 : 0;
    var targetState = this.ensureTargetState(targetId);
    targetState.addDocumentChange(document2.key, changeType);
    this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(document2.key, document2);
    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(document2.key, this.ensureDocumentTargetMapping(document2.key).add(targetId));
  };
  WatchChangeAggregator2.prototype.removeDocumentFromTarget = function(targetId, key, updatedDocument) {
    if (!this.isActiveTarget(targetId)) {
      return;
    }
    var targetState = this.ensureTargetState(targetId);
    if (this.targetContainsDocument(targetId, key)) {
      targetState.addDocumentChange(key, 1);
    } else {
      targetState.removeDocumentChange(key);
    }
    this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, this.ensureDocumentTargetMapping(key).delete(targetId));
    if (updatedDocument) {
      this.pendingDocumentUpdates = this.pendingDocumentUpdates.insert(key, updatedDocument);
    }
  };
  WatchChangeAggregator2.prototype.removeTarget = function(targetId) {
    this.targetStates.delete(targetId);
  };
  WatchChangeAggregator2.prototype.getCurrentDocumentCountForTarget = function(targetId) {
    var targetState = this.ensureTargetState(targetId);
    var targetChange = targetState.toTargetChange();
    return this.metadataProvider.getRemoteKeysForTarget(targetId).size + targetChange.addedDocuments.size - targetChange.removedDocuments.size;
  };
  WatchChangeAggregator2.prototype.recordPendingTargetRequest = function(targetId) {
    var targetState = this.ensureTargetState(targetId);
    targetState.recordPendingTargetRequest();
  };
  WatchChangeAggregator2.prototype.ensureTargetState = function(targetId) {
    var result = this.targetStates.get(targetId);
    if (!result) {
      result = new TargetState();
      this.targetStates.set(targetId, result);
    }
    return result;
  };
  WatchChangeAggregator2.prototype.ensureDocumentTargetMapping = function(key) {
    var targetMapping = this.pendingDocumentTargetMapping.get(key);
    if (!targetMapping) {
      targetMapping = new SortedSet(primitiveComparator);
      this.pendingDocumentTargetMapping = this.pendingDocumentTargetMapping.insert(key, targetMapping);
    }
    return targetMapping;
  };
  WatchChangeAggregator2.prototype.isActiveTarget = function(targetId) {
    var targetActive = this.targetDataForActiveTarget(targetId) !== null;
    if (!targetActive) {
      logDebug(LOG_TAG$f, "Detected inactive target", targetId);
    }
    return targetActive;
  };
  WatchChangeAggregator2.prototype.targetDataForActiveTarget = function(targetId) {
    var targetState = this.targetStates.get(targetId);
    return targetState && targetState.isPending ? null : this.metadataProvider.getTargetDataForTarget(targetId);
  };
  WatchChangeAggregator2.prototype.resetTarget = function(targetId) {
    var _this = this;
    this.targetStates.set(targetId, new TargetState());
    var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);
    existingKeys.forEach(function(key) {
      _this.removeDocumentFromTarget(targetId, key, null);
    });
  };
  WatchChangeAggregator2.prototype.targetContainsDocument = function(targetId, key) {
    var existingKeys = this.metadataProvider.getRemoteKeysForTarget(targetId);
    return existingKeys.has(key);
  };
  return WatchChangeAggregator2;
}();
function documentTargetMap() {
  return new SortedMap(DocumentKey.comparator);
}
function snapshotChangesMap() {
  return new SortedMap(DocumentKey.comparator);
}
var DIRECTIONS = function() {
  var dirs = {};
  dirs["asc"] = "ASCENDING";
  dirs["desc"] = "DESCENDING";
  return dirs;
}();
var OPERATORS = function() {
  var ops = {};
  ops["<"] = "LESS_THAN";
  ops["<="] = "LESS_THAN_OR_EQUAL";
  ops[">"] = "GREATER_THAN";
  ops[">="] = "GREATER_THAN_OR_EQUAL";
  ops["=="] = "EQUAL";
  ops["!="] = "NOT_EQUAL";
  ops["array-contains"] = "ARRAY_CONTAINS";
  ops["in"] = "IN";
  ops["not-in"] = "NOT_IN";
  ops["array-contains-any"] = "ARRAY_CONTAINS_ANY";
  return ops;
}();
function assertPresent(value, description2) {
}
var JsonProtoSerializer = function() {
  function JsonProtoSerializer2(databaseId, useProto3Json) {
    this.databaseId = databaseId;
    this.useProto3Json = useProto3Json;
  }
  return JsonProtoSerializer2;
}();
function fromRpcStatus(status) {
  var code = status.code === void 0 ? Code.UNKNOWN : mapCodeFromRpcCode(status.code);
  return new FirestoreError(code, status.message || "");
}
function toInt32Proto(serializer, val) {
  if (serializer.useProto3Json || isNullOrUndefined(val)) {
    return val;
  } else {
    return { value: val };
  }
}
function fromInt32Proto(val) {
  var result;
  if (typeof val === "object") {
    result = val.value;
  } else {
    result = val;
  }
  return isNullOrUndefined(result) ? null : result;
}
function toTimestamp(serializer, timestamp) {
  if (serializer.useProto3Json) {
    var jsDateStr = new Date(timestamp.seconds * 1e3).toISOString();
    var strUntilSeconds = jsDateStr.replace(/\.\d*/, "").replace("Z", "");
    var nanoStr = ("000000000" + timestamp.nanoseconds).slice(-9);
    return strUntilSeconds + "." + nanoStr + "Z";
  } else {
    return {
      seconds: "" + timestamp.seconds,
      nanos: timestamp.nanoseconds
    };
  }
}
function fromTimestamp(date) {
  var timestamp = normalizeTimestamp(date);
  return new Timestamp(timestamp.seconds, timestamp.nanos);
}
function toBytes(serializer, bytes) {
  if (serializer.useProto3Json) {
    return bytes.toBase64();
  } else {
    return bytes.toUint8Array();
  }
}
function fromBytes(serializer, value) {
  if (serializer.useProto3Json) {
    hardAssert(value === void 0 || typeof value === "string");
    return ByteString.fromBase64String(value ? value : "");
  } else {
    hardAssert(value === void 0 || value instanceof Uint8Array);
    return ByteString.fromUint8Array(value ? value : new Uint8Array());
  }
}
function toVersion(serializer, version2) {
  return toTimestamp(serializer, version2.toTimestamp());
}
function fromVersion(version2) {
  hardAssert(!!version2);
  return SnapshotVersion.fromTimestamp(fromTimestamp(version2));
}
function toResourceName(databaseId, path2) {
  return fullyQualifiedPrefixPath(databaseId).child("documents").child(path2).canonicalString();
}
function fromResourceName(name2) {
  var resource = ResourcePath.fromString(name2);
  hardAssert(isValidResourceName(resource));
  return resource;
}
function toName(serializer, key) {
  return toResourceName(serializer.databaseId, key.path);
}
function fromName(serializer, name2) {
  var resource = fromResourceName(name2);
  if (resource.get(1) !== serializer.databaseId.projectId) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Tried to deserialize key from different project: " + resource.get(1) + " vs " + serializer.databaseId.projectId);
  }
  if (resource.get(3) !== serializer.databaseId.database) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Tried to deserialize key from different database: " + resource.get(3) + " vs " + serializer.databaseId.database);
  }
  return new DocumentKey(extractLocalPathFromResourceName(resource));
}
function toQueryPath(serializer, path2) {
  return toResourceName(serializer.databaseId, path2);
}
function fromQueryPath(name2) {
  var resourceName = fromResourceName(name2);
  if (resourceName.length === 4) {
    return ResourcePath.emptyPath();
  }
  return extractLocalPathFromResourceName(resourceName);
}
function getEncodedDatabaseId(serializer) {
  var path2 = new ResourcePath([
    "projects",
    serializer.databaseId.projectId,
    "databases",
    serializer.databaseId.database
  ]);
  return path2.canonicalString();
}
function fullyQualifiedPrefixPath(databaseId) {
  return new ResourcePath([
    "projects",
    databaseId.projectId,
    "databases",
    databaseId.database
  ]);
}
function extractLocalPathFromResourceName(resourceName) {
  hardAssert(resourceName.length > 4 && resourceName.get(4) === "documents");
  return resourceName.popFirst(5);
}
function toMutationDocument(serializer, key, fields) {
  return {
    name: toName(serializer, key),
    fields: fields.value.mapValue.fields
  };
}
function toDocument(serializer, document2) {
  return {
    name: toName(serializer, document2.key),
    fields: document2.data.value.mapValue.fields,
    updateTime: toTimestamp(serializer, document2.version.toTimestamp())
  };
}
function fromDocument(serializer, document2, hasCommittedMutations) {
  var key = fromName(serializer, document2.name);
  var version2 = fromVersion(document2.updateTime);
  var data = new ObjectValue({ mapValue: { fields: document2.fields } });
  var result = MutableDocument.newFoundDocument(key, version2, data);
  if (hasCommittedMutations) {
    result.setHasCommittedMutations();
  }
  return hasCommittedMutations ? result.setHasCommittedMutations() : result;
}
function fromFound(serializer, doc2) {
  hardAssert(!!doc2.found);
  assertPresent(doc2.found.name);
  assertPresent(doc2.found.updateTime);
  var key = fromName(serializer, doc2.found.name);
  var version2 = fromVersion(doc2.found.updateTime);
  var data = new ObjectValue({ mapValue: { fields: doc2.found.fields } });
  return MutableDocument.newFoundDocument(key, version2, data);
}
function fromMissing(serializer, result) {
  hardAssert(!!result.missing);
  hardAssert(!!result.readTime);
  var key = fromName(serializer, result.missing);
  var version2 = fromVersion(result.readTime);
  return MutableDocument.newNoDocument(key, version2);
}
function fromBatchGetDocumentsResponse(serializer, result) {
  if ("found" in result) {
    return fromFound(serializer, result);
  } else if ("missing" in result) {
    return fromMissing(serializer, result);
  }
  return fail();
}
function fromWatchChange(serializer, change) {
  var watchChange;
  if ("targetChange" in change) {
    assertPresent(change.targetChange);
    var state = fromWatchTargetChangeState(change.targetChange.targetChangeType || "NO_CHANGE");
    var targetIds = change.targetChange.targetIds || [];
    var resumeToken = fromBytes(serializer, change.targetChange.resumeToken);
    var causeProto = change.targetChange.cause;
    var cause = causeProto && fromRpcStatus(causeProto);
    watchChange = new WatchTargetChange(state, targetIds, resumeToken, cause || null);
  } else if ("documentChange" in change) {
    assertPresent(change.documentChange);
    var entityChange = change.documentChange;
    assertPresent(entityChange.document);
    assertPresent(entityChange.document.name);
    assertPresent(entityChange.document.updateTime);
    var key = fromName(serializer, entityChange.document.name);
    var version_1 = fromVersion(entityChange.document.updateTime);
    var data = new ObjectValue({
      mapValue: { fields: entityChange.document.fields }
    });
    var doc_1 = MutableDocument.newFoundDocument(key, version_1, data);
    var updatedTargetIds = entityChange.targetIds || [];
    var removedTargetIds = entityChange.removedTargetIds || [];
    watchChange = new DocumentWatchChange(updatedTargetIds, removedTargetIds, doc_1.key, doc_1);
  } else if ("documentDelete" in change) {
    assertPresent(change.documentDelete);
    var docDelete = change.documentDelete;
    assertPresent(docDelete.document);
    var key = fromName(serializer, docDelete.document);
    var version_2 = docDelete.readTime ? fromVersion(docDelete.readTime) : SnapshotVersion.min();
    var doc_2 = MutableDocument.newNoDocument(key, version_2);
    var removedTargetIds = docDelete.removedTargetIds || [];
    watchChange = new DocumentWatchChange([], removedTargetIds, doc_2.key, doc_2);
  } else if ("documentRemove" in change) {
    assertPresent(change.documentRemove);
    var docRemove = change.documentRemove;
    assertPresent(docRemove.document);
    var key = fromName(serializer, docRemove.document);
    var removedTargetIds = docRemove.removedTargetIds || [];
    watchChange = new DocumentWatchChange([], removedTargetIds, key, null);
  } else if ("filter" in change) {
    assertPresent(change.filter);
    var filter2 = change.filter;
    assertPresent(filter2.targetId);
    var count = filter2.count || 0;
    var existenceFilter = new ExistenceFilter(count);
    var targetId = filter2.targetId;
    watchChange = new ExistenceFilterChange(targetId, existenceFilter);
  } else {
    return fail();
  }
  return watchChange;
}
function fromWatchTargetChangeState(state) {
  if (state === "NO_CHANGE") {
    return 0;
  } else if (state === "ADD") {
    return 1;
  } else if (state === "REMOVE") {
    return 2;
  } else if (state === "CURRENT") {
    return 3;
  } else if (state === "RESET") {
    return 4;
  } else {
    return fail();
  }
}
function versionFromListenResponse(change) {
  if (!("targetChange" in change)) {
    return SnapshotVersion.min();
  }
  var targetChange = change.targetChange;
  if (targetChange.targetIds && targetChange.targetIds.length) {
    return SnapshotVersion.min();
  }
  if (!targetChange.readTime) {
    return SnapshotVersion.min();
  }
  return fromVersion(targetChange.readTime);
}
function toMutation(serializer, mutation) {
  var result;
  if (mutation instanceof SetMutation) {
    result = {
      update: toMutationDocument(serializer, mutation.key, mutation.value)
    };
  } else if (mutation instanceof DeleteMutation) {
    result = { delete: toName(serializer, mutation.key) };
  } else if (mutation instanceof PatchMutation) {
    result = {
      update: toMutationDocument(serializer, mutation.key, mutation.data),
      updateMask: toDocumentMask(mutation.fieldMask)
    };
  } else if (mutation instanceof VerifyMutation) {
    result = {
      verify: toName(serializer, mutation.key)
    };
  } else {
    return fail();
  }
  if (mutation.fieldTransforms.length > 0) {
    result.updateTransforms = mutation.fieldTransforms.map(function(transform) {
      return toFieldTransform(serializer, transform);
    });
  }
  if (!mutation.precondition.isNone) {
    result.currentDocument = toPrecondition(serializer, mutation.precondition);
  }
  return result;
}
function fromMutation(serializer, proto) {
  var precondition = proto.currentDocument ? fromPrecondition(proto.currentDocument) : Precondition.none();
  var fieldTransforms = proto.updateTransforms ? proto.updateTransforms.map(function(transform) {
    return fromFieldTransform(serializer, transform);
  }) : [];
  if (proto.update) {
    assertPresent(proto.update.name);
    var key = fromName(serializer, proto.update.name);
    var value = new ObjectValue({
      mapValue: { fields: proto.update.fields }
    });
    if (proto.updateMask) {
      var fieldMask = fromDocumentMask(proto.updateMask);
      return new PatchMutation(key, value, fieldMask, precondition, fieldTransforms);
    } else {
      return new SetMutation(key, value, precondition, fieldTransforms);
    }
  } else if (proto.delete) {
    var key = fromName(serializer, proto.delete);
    return new DeleteMutation(key, precondition);
  } else if (proto.verify) {
    var key = fromName(serializer, proto.verify);
    return new VerifyMutation(key, precondition);
  } else {
    return fail();
  }
}
function toPrecondition(serializer, precondition) {
  if (precondition.updateTime !== void 0) {
    return {
      updateTime: toVersion(serializer, precondition.updateTime)
    };
  } else if (precondition.exists !== void 0) {
    return { exists: precondition.exists };
  } else {
    return fail();
  }
}
function fromPrecondition(precondition) {
  if (precondition.updateTime !== void 0) {
    return Precondition.updateTime(fromVersion(precondition.updateTime));
  } else if (precondition.exists !== void 0) {
    return Precondition.exists(precondition.exists);
  } else {
    return Precondition.none();
  }
}
function fromWriteResult(proto, commitTime) {
  var version2 = proto.updateTime ? fromVersion(proto.updateTime) : fromVersion(commitTime);
  if (version2.isEqual(SnapshotVersion.min())) {
    version2 = fromVersion(commitTime);
  }
  return new MutationResult(version2, proto.transformResults || []);
}
function fromWriteResults(protos, commitTime) {
  if (protos && protos.length > 0) {
    hardAssert(commitTime !== void 0);
    return protos.map(function(proto) {
      return fromWriteResult(proto, commitTime);
    });
  } else {
    return [];
  }
}
function toFieldTransform(serializer, fieldTransform) {
  var transform = fieldTransform.transform;
  if (transform instanceof ServerTimestampTransform) {
    return {
      fieldPath: fieldTransform.field.canonicalString(),
      setToServerValue: "REQUEST_TIME"
    };
  } else if (transform instanceof ArrayUnionTransformOperation) {
    return {
      fieldPath: fieldTransform.field.canonicalString(),
      appendMissingElements: {
        values: transform.elements
      }
    };
  } else if (transform instanceof ArrayRemoveTransformOperation) {
    return {
      fieldPath: fieldTransform.field.canonicalString(),
      removeAllFromArray: {
        values: transform.elements
      }
    };
  } else if (transform instanceof NumericIncrementTransformOperation) {
    return {
      fieldPath: fieldTransform.field.canonicalString(),
      increment: transform.operand
    };
  } else {
    throw fail();
  }
}
function fromFieldTransform(serializer, proto) {
  var transform = null;
  if ("setToServerValue" in proto) {
    hardAssert(proto.setToServerValue === "REQUEST_TIME");
    transform = new ServerTimestampTransform();
  } else if ("appendMissingElements" in proto) {
    var values = proto.appendMissingElements.values || [];
    transform = new ArrayUnionTransformOperation(values);
  } else if ("removeAllFromArray" in proto) {
    var values = proto.removeAllFromArray.values || [];
    transform = new ArrayRemoveTransformOperation(values);
  } else if ("increment" in proto) {
    transform = new NumericIncrementTransformOperation(serializer, proto.increment);
  } else {
    fail();
  }
  var fieldPath = FieldPath$1.fromServerFormat(proto.fieldPath);
  return new FieldTransform(fieldPath, transform);
}
function toDocumentsTarget(serializer, target) {
  return { documents: [toQueryPath(serializer, target.path)] };
}
function fromDocumentsTarget(documentsTarget) {
  var count = documentsTarget.documents.length;
  hardAssert(count === 1);
  var name2 = documentsTarget.documents[0];
  return queryToTarget(newQueryForPath(fromQueryPath(name2)));
}
function toQueryTarget(serializer, target) {
  var result = { structuredQuery: {} };
  var path2 = target.path;
  if (target.collectionGroup !== null) {
    result.parent = toQueryPath(serializer, path2);
    result.structuredQuery.from = [
      {
        collectionId: target.collectionGroup,
        allDescendants: true
      }
    ];
  } else {
    result.parent = toQueryPath(serializer, path2.popLast());
    result.structuredQuery.from = [{ collectionId: path2.lastSegment() }];
  }
  var where2 = toFilter(target.filters);
  if (where2) {
    result.structuredQuery.where = where2;
  }
  var orderBy2 = toOrder(target.orderBy);
  if (orderBy2) {
    result.structuredQuery.orderBy = orderBy2;
  }
  var limit2 = toInt32Proto(serializer, target.limit);
  if (limit2 !== null) {
    result.structuredQuery.limit = limit2;
  }
  if (target.startAt) {
    result.structuredQuery.startAt = toCursor(target.startAt);
  }
  if (target.endAt) {
    result.structuredQuery.endAt = toCursor(target.endAt);
  }
  return result;
}
function convertQueryTargetToQuery(target) {
  var path2 = fromQueryPath(target.parent);
  var query2 = target.structuredQuery;
  var fromCount = query2.from ? query2.from.length : 0;
  var collectionGroup2 = null;
  if (fromCount > 0) {
    hardAssert(fromCount === 1);
    var from2 = query2.from[0];
    if (from2.allDescendants) {
      collectionGroup2 = from2.collectionId;
    } else {
      path2 = path2.child(from2.collectionId);
    }
  }
  var filterBy = [];
  if (query2.where) {
    filterBy = fromFilter(query2.where);
  }
  var orderBy2 = [];
  if (query2.orderBy) {
    orderBy2 = fromOrder(query2.orderBy);
  }
  var limit2 = null;
  if (query2.limit) {
    limit2 = fromInt32Proto(query2.limit);
  }
  var startAt2 = null;
  if (query2.startAt) {
    startAt2 = fromCursor(query2.startAt);
  }
  var endAt2 = null;
  if (query2.endAt) {
    endAt2 = fromCursor(query2.endAt);
  }
  return newQuery(path2, collectionGroup2, orderBy2, filterBy, limit2, "F", startAt2, endAt2);
}
function fromQueryTarget(target) {
  return queryToTarget(convertQueryTargetToQuery(target));
}
function toListenRequestLabels(serializer, targetData) {
  var value = toLabel(serializer, targetData.purpose);
  if (value == null) {
    return null;
  } else {
    return {
      "goog-listen-tags": value
    };
  }
}
function toLabel(serializer, purpose) {
  switch (purpose) {
    case 0:
      return null;
    case 1:
      return "existence-filter-mismatch";
    case 2:
      return "limbo-document";
    default:
      return fail();
  }
}
function toTarget(serializer, targetData) {
  var result;
  var target = targetData.target;
  if (isDocumentTarget(target)) {
    result = { documents: toDocumentsTarget(serializer, target) };
  } else {
    result = { query: toQueryTarget(serializer, target) };
  }
  result.targetId = targetData.targetId;
  if (targetData.resumeToken.approximateByteSize() > 0) {
    result.resumeToken = toBytes(serializer, targetData.resumeToken);
  } else if (targetData.snapshotVersion.compareTo(SnapshotVersion.min()) > 0) {
    result.readTime = toTimestamp(serializer, targetData.snapshotVersion.toTimestamp());
  }
  return result;
}
function toFilter(filters) {
  if (filters.length === 0) {
    return;
  }
  var protos = filters.map(function(filter2) {
    return toUnaryOrFieldFilter(filter2);
  });
  if (protos.length === 1) {
    return protos[0];
  }
  return { compositeFilter: { op: "AND", filters: protos } };
}
function fromFilter(filter2) {
  if (!filter2) {
    return [];
  } else if (filter2.unaryFilter !== void 0) {
    return [fromUnaryFilter(filter2)];
  } else if (filter2.fieldFilter !== void 0) {
    return [fromFieldFilter(filter2)];
  } else if (filter2.compositeFilter !== void 0) {
    return filter2.compositeFilter.filters.map(function(f) {
      return fromFilter(f);
    }).reduce(function(accum, current) {
      return accum.concat(current);
    });
  } else {
    return fail();
  }
}
function toOrder(orderBys) {
  if (orderBys.length === 0) {
    return;
  }
  return orderBys.map(function(order) {
    return toPropertyOrder(order);
  });
}
function fromOrder(orderBys) {
  return orderBys.map(function(order) {
    return fromPropertyOrder(order);
  });
}
function toCursor(cursor) {
  return {
    before: cursor.before,
    values: cursor.position
  };
}
function fromCursor(cursor) {
  var before = !!cursor.before;
  var position = cursor.values || [];
  return new Bound(position, before);
}
function toDirection(dir) {
  return DIRECTIONS[dir];
}
function fromDirection(dir) {
  switch (dir) {
    case "ASCENDING":
      return "asc";
    case "DESCENDING":
      return "desc";
    default:
      return void 0;
  }
}
function toOperatorName(op) {
  return OPERATORS[op];
}
function fromOperatorName(op) {
  switch (op) {
    case "EQUAL":
      return "==";
    case "NOT_EQUAL":
      return "!=";
    case "GREATER_THAN":
      return ">";
    case "GREATER_THAN_OR_EQUAL":
      return ">=";
    case "LESS_THAN":
      return "<";
    case "LESS_THAN_OR_EQUAL":
      return "<=";
    case "ARRAY_CONTAINS":
      return "array-contains";
    case "IN":
      return "in";
    case "NOT_IN":
      return "not-in";
    case "ARRAY_CONTAINS_ANY":
      return "array-contains-any";
    case "OPERATOR_UNSPECIFIED":
      return fail();
    default:
      return fail();
  }
}
function toFieldPathReference(path2) {
  return { fieldPath: path2.canonicalString() };
}
function fromFieldPathReference(fieldReference) {
  return FieldPath$1.fromServerFormat(fieldReference.fieldPath);
}
function toPropertyOrder(orderBy2) {
  return {
    field: toFieldPathReference(orderBy2.field),
    direction: toDirection(orderBy2.dir)
  };
}
function fromPropertyOrder(orderBy2) {
  return new OrderBy(fromFieldPathReference(orderBy2.field), fromDirection(orderBy2.direction));
}
function fromFieldFilter(filter2) {
  return FieldFilter.create(fromFieldPathReference(filter2.fieldFilter.field), fromOperatorName(filter2.fieldFilter.op), filter2.fieldFilter.value);
}
function toUnaryOrFieldFilter(filter2) {
  if (filter2.op === "==") {
    if (isNanValue(filter2.value)) {
      return {
        unaryFilter: {
          field: toFieldPathReference(filter2.field),
          op: "IS_NAN"
        }
      };
    } else if (isNullValue(filter2.value)) {
      return {
        unaryFilter: {
          field: toFieldPathReference(filter2.field),
          op: "IS_NULL"
        }
      };
    }
  } else if (filter2.op === "!=") {
    if (isNanValue(filter2.value)) {
      return {
        unaryFilter: {
          field: toFieldPathReference(filter2.field),
          op: "IS_NOT_NAN"
        }
      };
    } else if (isNullValue(filter2.value)) {
      return {
        unaryFilter: {
          field: toFieldPathReference(filter2.field),
          op: "IS_NOT_NULL"
        }
      };
    }
  }
  return {
    fieldFilter: {
      field: toFieldPathReference(filter2.field),
      op: toOperatorName(filter2.op),
      value: filter2.value
    }
  };
}
function fromUnaryFilter(filter2) {
  switch (filter2.unaryFilter.op) {
    case "IS_NAN":
      var nanField = fromFieldPathReference(filter2.unaryFilter.field);
      return FieldFilter.create(nanField, "==", {
        doubleValue: NaN
      });
    case "IS_NULL":
      var nullField = fromFieldPathReference(filter2.unaryFilter.field);
      return FieldFilter.create(nullField, "==", {
        nullValue: "NULL_VALUE"
      });
    case "IS_NOT_NAN":
      var notNanField = fromFieldPathReference(filter2.unaryFilter.field);
      return FieldFilter.create(notNanField, "!=", {
        doubleValue: NaN
      });
    case "IS_NOT_NULL":
      var notNullField = fromFieldPathReference(filter2.unaryFilter.field);
      return FieldFilter.create(notNullField, "!=", {
        nullValue: "NULL_VALUE"
      });
    case "OPERATOR_UNSPECIFIED":
      return fail();
    default:
      return fail();
  }
}
function toDocumentMask(fieldMask) {
  var canonicalFields = [];
  fieldMask.fields.forEach(function(field2) {
    return canonicalFields.push(field2.canonicalString());
  });
  return {
    fieldPaths: canonicalFields
  };
}
function fromDocumentMask(proto) {
  var paths = proto.fieldPaths || [];
  return new FieldMask(paths.map(function(path2) {
    return FieldPath$1.fromServerFormat(path2);
  }));
}
function isValidResourceName(path2) {
  return path2.length >= 4 && path2.get(0) === "projects" && path2.get(2) === "databases";
}
var TargetData = function() {
  function TargetData2(target, targetId, purpose, sequenceNumber, snapshotVersion, lastLimboFreeSnapshotVersion, resumeToken) {
    if (snapshotVersion === void 0) {
      snapshotVersion = SnapshotVersion.min();
    }
    if (lastLimboFreeSnapshotVersion === void 0) {
      lastLimboFreeSnapshotVersion = SnapshotVersion.min();
    }
    if (resumeToken === void 0) {
      resumeToken = ByteString.EMPTY_BYTE_STRING;
    }
    this.target = target;
    this.targetId = targetId;
    this.purpose = purpose;
    this.sequenceNumber = sequenceNumber;
    this.snapshotVersion = snapshotVersion;
    this.lastLimboFreeSnapshotVersion = lastLimboFreeSnapshotVersion;
    this.resumeToken = resumeToken;
  }
  TargetData2.prototype.withSequenceNumber = function(sequenceNumber) {
    return new TargetData2(this.target, this.targetId, this.purpose, sequenceNumber, this.snapshotVersion, this.lastLimboFreeSnapshotVersion, this.resumeToken);
  };
  TargetData2.prototype.withResumeToken = function(resumeToken, snapshotVersion) {
    return new TargetData2(this.target, this.targetId, this.purpose, this.sequenceNumber, snapshotVersion, this.lastLimboFreeSnapshotVersion, resumeToken);
  };
  TargetData2.prototype.withLastLimboFreeSnapshotVersion = function(lastLimboFreeSnapshotVersion) {
    return new TargetData2(this.target, this.targetId, this.purpose, this.sequenceNumber, this.snapshotVersion, lastLimboFreeSnapshotVersion, this.resumeToken);
  };
  return TargetData2;
}();
var LocalSerializer = function() {
  function LocalSerializer2(remoteSerializer) {
    this.remoteSerializer = remoteSerializer;
  }
  return LocalSerializer2;
}();
function fromDbRemoteDocument(localSerializer, remoteDoc) {
  if (remoteDoc.document) {
    return fromDocument(localSerializer.remoteSerializer, remoteDoc.document, !!remoteDoc.hasCommittedMutations);
  } else if (remoteDoc.noDocument) {
    var key = DocumentKey.fromSegments(remoteDoc.noDocument.path);
    var version_3 = fromDbTimestamp(remoteDoc.noDocument.readTime);
    var document_1 = MutableDocument.newNoDocument(key, version_3);
    return remoteDoc.hasCommittedMutations ? document_1.setHasCommittedMutations() : document_1;
  } else if (remoteDoc.unknownDocument) {
    var key = DocumentKey.fromSegments(remoteDoc.unknownDocument.path);
    var version_4 = fromDbTimestamp(remoteDoc.unknownDocument.version);
    return MutableDocument.newUnknownDocument(key, version_4);
  } else {
    return fail();
  }
}
function toDbRemoteDocument(localSerializer, document2, readTime) {
  var dbReadTime = toDbTimestampKey(readTime);
  var parentPath = document2.key.path.popLast().toArray();
  if (document2.isFoundDocument()) {
    var doc_3 = toDocument(localSerializer.remoteSerializer, document2);
    var hasCommittedMutations = document2.hasCommittedMutations;
    return new DbRemoteDocument(null, null, doc_3, hasCommittedMutations, dbReadTime, parentPath);
  } else if (document2.isNoDocument()) {
    var path2 = document2.key.path.toArray();
    var readTime_1 = toDbTimestamp(document2.version);
    var hasCommittedMutations = document2.hasCommittedMutations;
    return new DbRemoteDocument(null, new DbNoDocument(path2, readTime_1), null, hasCommittedMutations, dbReadTime, parentPath);
  } else if (document2.isUnknownDocument()) {
    var path2 = document2.key.path.toArray();
    var readTime_2 = toDbTimestamp(document2.version);
    return new DbRemoteDocument(new DbUnknownDocument(path2, readTime_2), null, null, true, dbReadTime, parentPath);
  } else {
    return fail();
  }
}
function toDbTimestampKey(snapshotVersion) {
  var timestamp = snapshotVersion.toTimestamp();
  return [timestamp.seconds, timestamp.nanoseconds];
}
function fromDbTimestampKey(dbTimestampKey) {
  var timestamp = new Timestamp(dbTimestampKey[0], dbTimestampKey[1]);
  return SnapshotVersion.fromTimestamp(timestamp);
}
function toDbTimestamp(snapshotVersion) {
  var timestamp = snapshotVersion.toTimestamp();
  return new DbTimestamp(timestamp.seconds, timestamp.nanoseconds);
}
function fromDbTimestamp(dbTimestamp) {
  var timestamp = new Timestamp(dbTimestamp.seconds, dbTimestamp.nanoseconds);
  return SnapshotVersion.fromTimestamp(timestamp);
}
function toDbMutationBatch(localSerializer, userId, batch) {
  var serializedBaseMutations = batch.baseMutations.map(function(m) {
    return toMutation(localSerializer.remoteSerializer, m);
  });
  var serializedMutations = batch.mutations.map(function(m) {
    return toMutation(localSerializer.remoteSerializer, m);
  });
  return new DbMutationBatch(userId, batch.batchId, batch.localWriteTime.toMillis(), serializedBaseMutations, serializedMutations);
}
function fromDbMutationBatch(localSerializer, dbBatch) {
  var baseMutations = (dbBatch.baseMutations || []).map(function(m) {
    return fromMutation(localSerializer.remoteSerializer, m);
  });
  for (var i = 0; i < dbBatch.mutations.length - 1; ++i) {
    var currentMutation = dbBatch.mutations[i];
    var hasTransform = i + 1 < dbBatch.mutations.length && dbBatch.mutations[i + 1].transform !== void 0;
    if (hasTransform) {
      var transformMutation = dbBatch.mutations[i + 1];
      currentMutation.updateTransforms = transformMutation.transform.fieldTransforms;
      dbBatch.mutations.splice(i + 1, 1);
      ++i;
    }
  }
  var mutations = dbBatch.mutations.map(function(m) {
    return fromMutation(localSerializer.remoteSerializer, m);
  });
  var timestamp = Timestamp.fromMillis(dbBatch.localWriteTimeMs);
  return new MutationBatch(dbBatch.batchId, timestamp, baseMutations, mutations);
}
function fromDbTarget(dbTarget) {
  var version2 = fromDbTimestamp(dbTarget.readTime);
  var lastLimboFreeSnapshotVersion = dbTarget.lastLimboFreeSnapshotVersion !== void 0 ? fromDbTimestamp(dbTarget.lastLimboFreeSnapshotVersion) : SnapshotVersion.min();
  var target;
  if (isDocumentQuery(dbTarget.query)) {
    target = fromDocumentsTarget(dbTarget.query);
  } else {
    target = fromQueryTarget(dbTarget.query);
  }
  return new TargetData(target, dbTarget.targetId, 0, dbTarget.lastListenSequenceNumber, version2, lastLimboFreeSnapshotVersion, ByteString.fromBase64String(dbTarget.resumeToken));
}
function toDbTarget(localSerializer, targetData) {
  var dbTimestamp = toDbTimestamp(targetData.snapshotVersion);
  var dbLastLimboFreeTimestamp = toDbTimestamp(targetData.lastLimboFreeSnapshotVersion);
  var queryProto;
  if (isDocumentTarget(targetData.target)) {
    queryProto = toDocumentsTarget(localSerializer.remoteSerializer, targetData.target);
  } else {
    queryProto = toQueryTarget(localSerializer.remoteSerializer, targetData.target);
  }
  var resumeToken = targetData.resumeToken.toBase64();
  return new DbTarget(targetData.targetId, canonifyTarget(targetData.target), dbTimestamp, resumeToken, targetData.sequenceNumber, dbLastLimboFreeTimestamp, queryProto);
}
function isDocumentQuery(dbQuery) {
  return dbQuery.documents !== void 0;
}
function fromDbBundle(dbBundle) {
  return {
    id: dbBundle.bundleId,
    createTime: fromDbTimestamp(dbBundle.createTime),
    version: dbBundle.version
  };
}
function toDbBundle(metadata2) {
  return {
    bundleId: metadata2.id,
    createTime: toDbTimestamp(fromVersion(metadata2.createTime)),
    version: metadata2.version
  };
}
function fromDbNamedQuery(dbNamedQuery) {
  return {
    name: dbNamedQuery.name,
    query: fromBundledQuery(dbNamedQuery.bundledQuery),
    readTime: fromDbTimestamp(dbNamedQuery.readTime)
  };
}
function toDbNamedQuery(query2) {
  return {
    name: query2.name,
    readTime: toDbTimestamp(fromVersion(query2.readTime)),
    bundledQuery: query2.bundledQuery
  };
}
function fromBundledQuery(bundledQuery) {
  var query2 = convertQueryTargetToQuery({
    parent: bundledQuery.parent,
    structuredQuery: bundledQuery.structuredQuery
  });
  if (bundledQuery.limitType === "LAST") {
    return queryWithLimit(query2, query2.limit, "L");
  }
  return query2;
}
function fromProtoNamedQuery(namedQuery2) {
  return {
    name: namedQuery2.name,
    query: fromBundledQuery(namedQuery2.bundledQuery),
    readTime: fromVersion(namedQuery2.readTime)
  };
}
function fromBundleMetadata(metadata2) {
  return {
    id: metadata2.id,
    version: metadata2.version,
    createTime: fromVersion(metadata2.createTime)
  };
}
var IndexedDbBundleCache = function() {
  function IndexedDbBundleCache2() {
  }
  IndexedDbBundleCache2.prototype.getBundleMetadata = function(transaction, bundleId) {
    return bundlesStore(transaction).get(bundleId).next(function(bundle) {
      if (bundle) {
        return fromDbBundle(bundle);
      }
      return void 0;
    });
  };
  IndexedDbBundleCache2.prototype.saveBundleMetadata = function(transaction, bundleMetadata) {
    return bundlesStore(transaction).put(toDbBundle(bundleMetadata));
  };
  IndexedDbBundleCache2.prototype.getNamedQuery = function(transaction, queryName) {
    return namedQueriesStore(transaction).get(queryName).next(function(query2) {
      if (query2) {
        return fromDbNamedQuery(query2);
      }
      return void 0;
    });
  };
  IndexedDbBundleCache2.prototype.saveNamedQuery = function(transaction, query2) {
    return namedQueriesStore(transaction).put(toDbNamedQuery(query2));
  };
  return IndexedDbBundleCache2;
}();
function bundlesStore(txn) {
  return getStore(txn, DbBundle.store);
}
function namedQueriesStore(txn) {
  return getStore(txn, DbNamedQuery.store);
}
var MemoryIndexManager = function() {
  function MemoryIndexManager2() {
    this.collectionParentIndex = new MemoryCollectionParentIndex();
  }
  MemoryIndexManager2.prototype.addToCollectionParentIndex = function(transaction, collectionPath) {
    this.collectionParentIndex.add(collectionPath);
    return PersistencePromise.resolve();
  };
  MemoryIndexManager2.prototype.getCollectionParents = function(transaction, collectionId) {
    return PersistencePromise.resolve(this.collectionParentIndex.getEntries(collectionId));
  };
  return MemoryIndexManager2;
}();
var MemoryCollectionParentIndex = function() {
  function MemoryCollectionParentIndex2() {
    this.index = {};
  }
  MemoryCollectionParentIndex2.prototype.add = function(collectionPath) {
    var collectionId = collectionPath.lastSegment();
    var parentPath = collectionPath.popLast();
    var existingParents = this.index[collectionId] || new SortedSet(ResourcePath.comparator);
    var added = !existingParents.has(parentPath);
    this.index[collectionId] = existingParents.add(parentPath);
    return added;
  };
  MemoryCollectionParentIndex2.prototype.has = function(collectionPath) {
    var collectionId = collectionPath.lastSegment();
    var parentPath = collectionPath.popLast();
    var existingParents = this.index[collectionId];
    return existingParents && existingParents.has(parentPath);
  };
  MemoryCollectionParentIndex2.prototype.getEntries = function(collectionId) {
    var parentPaths = this.index[collectionId] || new SortedSet(ResourcePath.comparator);
    return parentPaths.toArray();
  };
  return MemoryCollectionParentIndex2;
}();
var IndexedDbIndexManager = function() {
  function IndexedDbIndexManager2() {
    this.collectionParentsCache = new MemoryCollectionParentIndex();
  }
  IndexedDbIndexManager2.prototype.addToCollectionParentIndex = function(transaction, collectionPath) {
    var _this = this;
    if (!this.collectionParentsCache.has(collectionPath)) {
      var collectionId = collectionPath.lastSegment();
      var parentPath = collectionPath.popLast();
      transaction.addOnCommittedListener(function() {
        _this.collectionParentsCache.add(collectionPath);
      });
      var collectionParent = {
        collectionId,
        parent: encodeResourcePath(parentPath)
      };
      return collectionParentsStore(transaction).put(collectionParent);
    }
    return PersistencePromise.resolve();
  };
  IndexedDbIndexManager2.prototype.getCollectionParents = function(transaction, collectionId) {
    var parentPaths = [];
    var range = IDBKeyRange.bound([collectionId, ""], [immediateSuccessor(collectionId), ""], false, true);
    return collectionParentsStore(transaction).loadAll(range).next(function(entries) {
      for (var _i = 0, entries_1 = entries; _i < entries_1.length; _i++) {
        var entry = entries_1[_i];
        if (entry.collectionId !== collectionId) {
          break;
        }
        parentPaths.push(decodeResourcePath(entry.parent));
      }
      return parentPaths;
    });
  };
  return IndexedDbIndexManager2;
}();
function collectionParentsStore(txn) {
  return getStore(txn, DbCollectionParent.store);
}
function removeMutationBatch(txn, userId, batch) {
  var mutationStore = txn.store(DbMutationBatch.store);
  var indexTxn = txn.store(DbDocumentMutation.store);
  var promises = [];
  var range = IDBKeyRange.only(batch.batchId);
  var numDeleted = 0;
  var removePromise = mutationStore.iterate({ range }, function(key, value, control) {
    numDeleted++;
    return control.delete();
  });
  promises.push(removePromise.next(function() {
    hardAssert(numDeleted === 1);
  }));
  var removedDocuments = [];
  for (var _i = 0, _d = batch.mutations; _i < _d.length; _i++) {
    var mutation = _d[_i];
    var indexKey = DbDocumentMutation.key(userId, mutation.key.path, batch.batchId);
    promises.push(indexTxn.delete(indexKey));
    removedDocuments.push(mutation.key);
  }
  return PersistencePromise.waitFor(promises).next(function() {
    return removedDocuments;
  });
}
function dbDocumentSize(doc2) {
  if (!doc2) {
    return 0;
  }
  var value;
  if (doc2.document) {
    value = doc2.document;
  } else if (doc2.unknownDocument) {
    value = doc2.unknownDocument;
  } else if (doc2.noDocument) {
    value = doc2.noDocument;
  } else {
    throw fail();
  }
  return JSON.stringify(value).length;
}
var IndexedDbMutationQueue = function() {
  function IndexedDbMutationQueue2(userId, serializer, indexManager, referenceDelegate) {
    this.userId = userId;
    this.serializer = serializer;
    this.indexManager = indexManager;
    this.referenceDelegate = referenceDelegate;
    this.documentKeysByBatchId = {};
  }
  IndexedDbMutationQueue2.forUser = function(user2, serializer, indexManager, referenceDelegate) {
    hardAssert(user2.uid !== "");
    var userId = user2.isAuthenticated() ? user2.uid : "";
    return new IndexedDbMutationQueue2(userId, serializer, indexManager, referenceDelegate);
  };
  IndexedDbMutationQueue2.prototype.checkEmpty = function(transaction) {
    var empty2 = true;
    var range = IDBKeyRange.bound([this.userId, Number.NEGATIVE_INFINITY], [this.userId, Number.POSITIVE_INFINITY]);
    return mutationsStore(transaction).iterate({ index: DbMutationBatch.userMutationsIndex, range }, function(key, value, control) {
      empty2 = false;
      control.done();
    }).next(function() {
      return empty2;
    });
  };
  IndexedDbMutationQueue2.prototype.addMutationBatch = function(transaction, localWriteTime, baseMutations, mutations) {
    var _this = this;
    var documentStore = documentMutationsStore(transaction);
    var mutationStore = mutationsStore(transaction);
    return mutationStore.add({}).next(function(batchId) {
      hardAssert(typeof batchId === "number");
      var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);
      var dbBatch = toDbMutationBatch(_this.serializer, _this.userId, batch);
      var promises = [];
      var collectionParents = new SortedSet(function(l, r) {
        return primitiveComparator(l.canonicalString(), r.canonicalString());
      });
      for (var _i = 0, mutations_1 = mutations; _i < mutations_1.length; _i++) {
        var mutation = mutations_1[_i];
        var indexKey = DbDocumentMutation.key(_this.userId, mutation.key.path, batchId);
        collectionParents = collectionParents.add(mutation.key.path.popLast());
        promises.push(mutationStore.put(dbBatch));
        promises.push(documentStore.put(indexKey, DbDocumentMutation.PLACEHOLDER));
      }
      collectionParents.forEach(function(parent) {
        promises.push(_this.indexManager.addToCollectionParentIndex(transaction, parent));
      });
      transaction.addOnCommittedListener(function() {
        _this.documentKeysByBatchId[batchId] = batch.keys();
      });
      return PersistencePromise.waitFor(promises).next(function() {
        return batch;
      });
    });
  };
  IndexedDbMutationQueue2.prototype.lookupMutationBatch = function(transaction, batchId) {
    var _this = this;
    return mutationsStore(transaction).get(batchId).next(function(dbBatch) {
      if (dbBatch) {
        hardAssert(dbBatch.userId === _this.userId);
        return fromDbMutationBatch(_this.serializer, dbBatch);
      }
      return null;
    });
  };
  IndexedDbMutationQueue2.prototype.lookupMutationKeys = function(transaction, batchId) {
    var _this = this;
    if (this.documentKeysByBatchId[batchId]) {
      return PersistencePromise.resolve(this.documentKeysByBatchId[batchId]);
    } else {
      return this.lookupMutationBatch(transaction, batchId).next(function(batch) {
        if (batch) {
          var keys = batch.keys();
          _this.documentKeysByBatchId[batchId] = keys;
          return keys;
        } else {
          return null;
        }
      });
    }
  };
  IndexedDbMutationQueue2.prototype.getNextMutationBatchAfterBatchId = function(transaction, batchId) {
    var _this = this;
    var nextBatchId = batchId + 1;
    var range = IDBKeyRange.lowerBound([this.userId, nextBatchId]);
    var foundBatch = null;
    return mutationsStore(transaction).iterate({ index: DbMutationBatch.userMutationsIndex, range }, function(key, dbBatch, control) {
      if (dbBatch.userId === _this.userId) {
        hardAssert(dbBatch.batchId >= nextBatchId);
        foundBatch = fromDbMutationBatch(_this.serializer, dbBatch);
      }
      control.done();
    }).next(function() {
      return foundBatch;
    });
  };
  IndexedDbMutationQueue2.prototype.getHighestUnacknowledgedBatchId = function(transaction) {
    var range = IDBKeyRange.upperBound([
      this.userId,
      Number.POSITIVE_INFINITY
    ]);
    var batchId = BATCHID_UNKNOWN;
    return mutationsStore(transaction).iterate({ index: DbMutationBatch.userMutationsIndex, range, reverse: true }, function(key, dbBatch, control) {
      batchId = dbBatch.batchId;
      control.done();
    }).next(function() {
      return batchId;
    });
  };
  IndexedDbMutationQueue2.prototype.getAllMutationBatches = function(transaction) {
    var _this = this;
    var range = IDBKeyRange.bound([this.userId, BATCHID_UNKNOWN], [this.userId, Number.POSITIVE_INFINITY]);
    return mutationsStore(transaction).loadAll(DbMutationBatch.userMutationsIndex, range).next(function(dbBatches) {
      return dbBatches.map(function(dbBatch) {
        return fromDbMutationBatch(_this.serializer, dbBatch);
      });
    });
  };
  IndexedDbMutationQueue2.prototype.getAllMutationBatchesAffectingDocumentKey = function(transaction, documentKey) {
    var _this = this;
    var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, documentKey.path);
    var indexStart = IDBKeyRange.lowerBound(indexPrefix);
    var results = [];
    return documentMutationsStore(transaction).iterate({ range: indexStart }, function(indexKey, _, control) {
      var userID = indexKey[0], encodedPath = indexKey[1], batchId = indexKey[2];
      var path2 = decodeResourcePath(encodedPath);
      if (userID !== _this.userId || !documentKey.path.isEqual(path2)) {
        control.done();
        return;
      }
      return mutationsStore(transaction).get(batchId).next(function(mutation) {
        if (!mutation) {
          throw fail();
        }
        hardAssert(mutation.userId === _this.userId);
        results.push(fromDbMutationBatch(_this.serializer, mutation));
      });
    }).next(function() {
      return results;
    });
  };
  IndexedDbMutationQueue2.prototype.getAllMutationBatchesAffectingDocumentKeys = function(transaction, documentKeys) {
    var _this = this;
    var uniqueBatchIDs = new SortedSet(primitiveComparator);
    var promises = [];
    documentKeys.forEach(function(documentKey) {
      var indexStart = DbDocumentMutation.prefixForPath(_this.userId, documentKey.path);
      var range = IDBKeyRange.lowerBound(indexStart);
      var promise = documentMutationsStore(transaction).iterate({ range }, function(indexKey, _, control) {
        var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];
        var path2 = decodeResourcePath(encodedPath);
        if (userID !== _this.userId || !documentKey.path.isEqual(path2)) {
          control.done();
          return;
        }
        uniqueBatchIDs = uniqueBatchIDs.add(batchID);
      });
      promises.push(promise);
    });
    return PersistencePromise.waitFor(promises).next(function() {
      return _this.lookupMutationBatches(transaction, uniqueBatchIDs);
    });
  };
  IndexedDbMutationQueue2.prototype.getAllMutationBatchesAffectingQuery = function(transaction, query2) {
    var _this = this;
    var queryPath = query2.path;
    var immediateChildrenLength = queryPath.length + 1;
    var indexPrefix = DbDocumentMutation.prefixForPath(this.userId, queryPath);
    var indexStart = IDBKeyRange.lowerBound(indexPrefix);
    var uniqueBatchIDs = new SortedSet(primitiveComparator);
    return documentMutationsStore(transaction).iterate({ range: indexStart }, function(indexKey, _, control) {
      var userID = indexKey[0], encodedPath = indexKey[1], batchID = indexKey[2];
      var path2 = decodeResourcePath(encodedPath);
      if (userID !== _this.userId || !queryPath.isPrefixOf(path2)) {
        control.done();
        return;
      }
      if (path2.length !== immediateChildrenLength) {
        return;
      }
      uniqueBatchIDs = uniqueBatchIDs.add(batchID);
    }).next(function() {
      return _this.lookupMutationBatches(transaction, uniqueBatchIDs);
    });
  };
  IndexedDbMutationQueue2.prototype.lookupMutationBatches = function(transaction, batchIDs) {
    var _this = this;
    var results = [];
    var promises = [];
    batchIDs.forEach(function(batchId) {
      promises.push(mutationsStore(transaction).get(batchId).next(function(mutation) {
        if (mutation === null) {
          throw fail();
        }
        hardAssert(mutation.userId === _this.userId);
        results.push(fromDbMutationBatch(_this.serializer, mutation));
      }));
    });
    return PersistencePromise.waitFor(promises).next(function() {
      return results;
    });
  };
  IndexedDbMutationQueue2.prototype.removeMutationBatch = function(transaction, batch) {
    var _this = this;
    return removeMutationBatch(transaction.simpleDbTransaction, this.userId, batch).next(function(removedDocuments) {
      transaction.addOnCommittedListener(function() {
        _this.removeCachedMutationKeys(batch.batchId);
      });
      return PersistencePromise.forEach(removedDocuments, function(key) {
        return _this.referenceDelegate.markPotentiallyOrphaned(transaction, key);
      });
    });
  };
  IndexedDbMutationQueue2.prototype.removeCachedMutationKeys = function(batchId) {
    delete this.documentKeysByBatchId[batchId];
  };
  IndexedDbMutationQueue2.prototype.performConsistencyCheck = function(txn) {
    var _this = this;
    return this.checkEmpty(txn).next(function(empty2) {
      if (!empty2) {
        return PersistencePromise.resolve();
      }
      var startRange = IDBKeyRange.lowerBound(DbDocumentMutation.prefixForUser(_this.userId));
      var danglingMutationReferences = [];
      return documentMutationsStore(txn).iterate({ range: startRange }, function(key, _, control) {
        var userID = key[0];
        if (userID !== _this.userId) {
          control.done();
          return;
        } else {
          var path2 = decodeResourcePath(key[1]);
          danglingMutationReferences.push(path2);
        }
      }).next(function() {
        hardAssert(danglingMutationReferences.length === 0);
      });
    });
  };
  IndexedDbMutationQueue2.prototype.containsKey = function(txn, key) {
    return mutationQueueContainsKey(txn, this.userId, key);
  };
  IndexedDbMutationQueue2.prototype.getMutationQueueMetadata = function(transaction) {
    var _this = this;
    return mutationQueuesStore(transaction).get(this.userId).next(function(metadata2) {
      return metadata2 || new DbMutationQueue(_this.userId, BATCHID_UNKNOWN, "");
    });
  };
  return IndexedDbMutationQueue2;
}();
function mutationQueueContainsKey(txn, userId, key) {
  var indexKey = DbDocumentMutation.prefixForPath(userId, key.path);
  var encodedPath = indexKey[1];
  var startRange = IDBKeyRange.lowerBound(indexKey);
  var containsKey = false;
  return documentMutationsStore(txn).iterate({ range: startRange, keysOnly: true }, function(key2, value, control) {
    var userID = key2[0], keyPath = key2[1];
    key2[2];
    if (userID === userId && keyPath === encodedPath) {
      containsKey = true;
    }
    control.done();
  }).next(function() {
    return containsKey;
  });
}
function mutationQueuesContainKey(txn, docKey) {
  var found = false;
  return mutationQueuesStore(txn).iterateSerial(function(userId) {
    return mutationQueueContainsKey(txn, userId, docKey).next(function(containsKey) {
      if (containsKey) {
        found = true;
      }
      return PersistencePromise.resolve(!containsKey);
    });
  }).next(function() {
    return found;
  });
}
function mutationsStore(txn) {
  return getStore(txn, DbMutationBatch.store);
}
function documentMutationsStore(txn) {
  return getStore(txn, DbDocumentMutation.store);
}
function mutationQueuesStore(txn) {
  return getStore(txn, DbMutationQueue.store);
}
var OFFSET = 2;
var TargetIdGenerator = function() {
  function TargetIdGenerator2(lastId) {
    this.lastId = lastId;
  }
  TargetIdGenerator2.prototype.next = function() {
    this.lastId += OFFSET;
    return this.lastId;
  };
  TargetIdGenerator2.forTargetCache = function() {
    return new TargetIdGenerator2(2 - OFFSET);
  };
  TargetIdGenerator2.forSyncEngine = function() {
    return new TargetIdGenerator2(1 - OFFSET);
  };
  return TargetIdGenerator2;
}();
var IndexedDbTargetCache = function() {
  function IndexedDbTargetCache2(referenceDelegate, serializer) {
    this.referenceDelegate = referenceDelegate;
    this.serializer = serializer;
  }
  IndexedDbTargetCache2.prototype.allocateTargetId = function(transaction) {
    var _this = this;
    return this.retrieveMetadata(transaction).next(function(metadata2) {
      var targetIdGenerator = new TargetIdGenerator(metadata2.highestTargetId);
      metadata2.highestTargetId = targetIdGenerator.next();
      return _this.saveMetadata(transaction, metadata2).next(function() {
        return metadata2.highestTargetId;
      });
    });
  };
  IndexedDbTargetCache2.prototype.getLastRemoteSnapshotVersion = function(transaction) {
    return this.retrieveMetadata(transaction).next(function(metadata2) {
      return SnapshotVersion.fromTimestamp(new Timestamp(metadata2.lastRemoteSnapshotVersion.seconds, metadata2.lastRemoteSnapshotVersion.nanoseconds));
    });
  };
  IndexedDbTargetCache2.prototype.getHighestSequenceNumber = function(transaction) {
    return this.retrieveMetadata(transaction).next(function(targetGlobal) {
      return targetGlobal.highestListenSequenceNumber;
    });
  };
  IndexedDbTargetCache2.prototype.setTargetsMetadata = function(transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {
    var _this = this;
    return this.retrieveMetadata(transaction).next(function(metadata2) {
      metadata2.highestListenSequenceNumber = highestListenSequenceNumber;
      if (lastRemoteSnapshotVersion) {
        metadata2.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion.toTimestamp();
      }
      if (highestListenSequenceNumber > metadata2.highestListenSequenceNumber) {
        metadata2.highestListenSequenceNumber = highestListenSequenceNumber;
      }
      return _this.saveMetadata(transaction, metadata2);
    });
  };
  IndexedDbTargetCache2.prototype.addTargetData = function(transaction, targetData) {
    var _this = this;
    return this.saveTargetData(transaction, targetData).next(function() {
      return _this.retrieveMetadata(transaction).next(function(metadata2) {
        metadata2.targetCount += 1;
        _this.updateMetadataFromTargetData(targetData, metadata2);
        return _this.saveMetadata(transaction, metadata2);
      });
    });
  };
  IndexedDbTargetCache2.prototype.updateTargetData = function(transaction, targetData) {
    return this.saveTargetData(transaction, targetData);
  };
  IndexedDbTargetCache2.prototype.removeTargetData = function(transaction, targetData) {
    var _this = this;
    return this.removeMatchingKeysForTargetId(transaction, targetData.targetId).next(function() {
      return targetsStore(transaction).delete(targetData.targetId);
    }).next(function() {
      return _this.retrieveMetadata(transaction);
    }).next(function(metadata2) {
      hardAssert(metadata2.targetCount > 0);
      metadata2.targetCount -= 1;
      return _this.saveMetadata(transaction, metadata2);
    });
  };
  IndexedDbTargetCache2.prototype.removeTargets = function(txn, upperBound, activeTargetIds) {
    var _this = this;
    var count = 0;
    var promises = [];
    return targetsStore(txn).iterate(function(key, value) {
      var targetData = fromDbTarget(value);
      if (targetData.sequenceNumber <= upperBound && activeTargetIds.get(targetData.targetId) === null) {
        count++;
        promises.push(_this.removeTargetData(txn, targetData));
      }
    }).next(function() {
      return PersistencePromise.waitFor(promises);
    }).next(function() {
      return count;
    });
  };
  IndexedDbTargetCache2.prototype.forEachTarget = function(txn, f) {
    return targetsStore(txn).iterate(function(key, value) {
      var targetData = fromDbTarget(value);
      f(targetData);
    });
  };
  IndexedDbTargetCache2.prototype.retrieveMetadata = function(transaction) {
    return globalTargetStore(transaction).get(DbTargetGlobal.key).next(function(metadata2) {
      hardAssert(metadata2 !== null);
      return metadata2;
    });
  };
  IndexedDbTargetCache2.prototype.saveMetadata = function(transaction, metadata2) {
    return globalTargetStore(transaction).put(DbTargetGlobal.key, metadata2);
  };
  IndexedDbTargetCache2.prototype.saveTargetData = function(transaction, targetData) {
    return targetsStore(transaction).put(toDbTarget(this.serializer, targetData));
  };
  IndexedDbTargetCache2.prototype.updateMetadataFromTargetData = function(targetData, metadata2) {
    var updated = false;
    if (targetData.targetId > metadata2.highestTargetId) {
      metadata2.highestTargetId = targetData.targetId;
      updated = true;
    }
    if (targetData.sequenceNumber > metadata2.highestListenSequenceNumber) {
      metadata2.highestListenSequenceNumber = targetData.sequenceNumber;
      updated = true;
    }
    return updated;
  };
  IndexedDbTargetCache2.prototype.getTargetCount = function(transaction) {
    return this.retrieveMetadata(transaction).next(function(metadata2) {
      return metadata2.targetCount;
    });
  };
  IndexedDbTargetCache2.prototype.getTargetData = function(transaction, target) {
    var canonicalId2 = canonifyTarget(target);
    var range = IDBKeyRange.bound([canonicalId2, Number.NEGATIVE_INFINITY], [canonicalId2, Number.POSITIVE_INFINITY]);
    var result = null;
    return targetsStore(transaction).iterate({ range, index: DbTarget.queryTargetsIndexName }, function(key, value, control) {
      var found = fromDbTarget(value);
      if (targetEquals(target, found.target)) {
        result = found;
        control.done();
      }
    }).next(function() {
      return result;
    });
  };
  IndexedDbTargetCache2.prototype.addMatchingKeys = function(txn, keys, targetId) {
    var _this = this;
    var promises = [];
    var store = documentTargetStore(txn);
    keys.forEach(function(key) {
      var path2 = encodeResourcePath(key.path);
      promises.push(store.put(new DbTargetDocument(targetId, path2)));
      promises.push(_this.referenceDelegate.addReference(txn, targetId, key));
    });
    return PersistencePromise.waitFor(promises);
  };
  IndexedDbTargetCache2.prototype.removeMatchingKeys = function(txn, keys, targetId) {
    var _this = this;
    var store = documentTargetStore(txn);
    return PersistencePromise.forEach(keys, function(key) {
      var path2 = encodeResourcePath(key.path);
      return PersistencePromise.waitFor([
        store.delete([targetId, path2]),
        _this.referenceDelegate.removeReference(txn, targetId, key)
      ]);
    });
  };
  IndexedDbTargetCache2.prototype.removeMatchingKeysForTargetId = function(txn, targetId) {
    var store = documentTargetStore(txn);
    var range = IDBKeyRange.bound([targetId], [targetId + 1], false, true);
    return store.delete(range);
  };
  IndexedDbTargetCache2.prototype.getMatchingKeysForTargetId = function(txn, targetId) {
    var range = IDBKeyRange.bound([targetId], [targetId + 1], false, true);
    var store = documentTargetStore(txn);
    var result = documentKeySet();
    return store.iterate({ range, keysOnly: true }, function(key, _, control) {
      var path2 = decodeResourcePath(key[1]);
      var docKey = new DocumentKey(path2);
      result = result.add(docKey);
    }).next(function() {
      return result;
    });
  };
  IndexedDbTargetCache2.prototype.containsKey = function(txn, key) {
    var path2 = encodeResourcePath(key.path);
    var range = IDBKeyRange.bound([path2], [immediateSuccessor(path2)], false, true);
    var count = 0;
    return documentTargetStore(txn).iterate({
      index: DbTargetDocument.documentTargetsIndex,
      keysOnly: true,
      range
    }, function(_d, _, control) {
      var targetId = _d[0];
      _d[1];
      if (targetId !== 0) {
        count++;
        control.done();
      }
    }).next(function() {
      return count > 0;
    });
  };
  IndexedDbTargetCache2.prototype.getTargetDataForTarget = function(transaction, targetId) {
    return targetsStore(transaction).get(targetId).next(function(found) {
      if (found) {
        return fromDbTarget(found);
      } else {
        return null;
      }
    });
  };
  return IndexedDbTargetCache2;
}();
function targetsStore(txn) {
  return getStore(txn, DbTarget.store);
}
function globalTargetStore(txn) {
  return getStore(txn, DbTargetGlobal.store);
}
function documentTargetStore(txn) {
  return getStore(txn, DbTargetDocument.store);
}
function ignoreIfPrimaryLeaseLoss(err) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    return tslib.__generator(this, function(_d) {
      if (err.code === Code.FAILED_PRECONDITION && err.message === PRIMARY_LEASE_LOST_ERROR_MSG) {
        logDebug("LocalStore", "Unexpectedly lost primary lease");
      } else {
        throw err;
      }
      return [2];
    });
  });
}
var GC_DID_NOT_RUN = {
  didRun: false,
  sequenceNumbersCollected: 0,
  targetsRemoved: 0,
  documentsRemoved: 0
};
var LRU_COLLECTION_DISABLED = -1;
var LRU_DEFAULT_CACHE_SIZE_BYTES = 40 * 1024 * 1024;
var LruParams = function() {
  function LruParams2(cacheSizeCollectionThreshold, percentileToCollect, maximumSequenceNumbersToCollect) {
    this.cacheSizeCollectionThreshold = cacheSizeCollectionThreshold;
    this.percentileToCollect = percentileToCollect;
    this.maximumSequenceNumbersToCollect = maximumSequenceNumbersToCollect;
  }
  LruParams2.withCacheSize = function(cacheSize) {
    return new LruParams2(cacheSize, LruParams2.DEFAULT_COLLECTION_PERCENTILE, LruParams2.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
  };
  return LruParams2;
}();
LruParams.DEFAULT_COLLECTION_PERCENTILE = 10;
LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT = 1e3;
LruParams.DEFAULT = new LruParams(LRU_DEFAULT_CACHE_SIZE_BYTES, LruParams.DEFAULT_COLLECTION_PERCENTILE, LruParams.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT);
LruParams.DISABLED = new LruParams(LRU_COLLECTION_DISABLED, 0, 0);
var LOG_TAG$e = "LruGarbageCollector";
var LRU_MINIMUM_CACHE_SIZE_BYTES = 1 * 1024 * 1024;
var INITIAL_GC_DELAY_MS = 1 * 60 * 1e3;
var REGULAR_GC_DELAY_MS = 5 * 60 * 1e3;
function bufferEntryComparator(_d, _e) {
  var aSequence = _d[0], aIndex = _d[1];
  var bSequence = _e[0], bIndex = _e[1];
  var seqCmp = primitiveComparator(aSequence, bSequence);
  if (seqCmp === 0) {
    return primitiveComparator(aIndex, bIndex);
  } else {
    return seqCmp;
  }
}
var RollingSequenceNumberBuffer = function() {
  function RollingSequenceNumberBuffer2(maxElements) {
    this.maxElements = maxElements;
    this.buffer = new SortedSet(bufferEntryComparator);
    this.previousIndex = 0;
  }
  RollingSequenceNumberBuffer2.prototype.nextIndex = function() {
    return ++this.previousIndex;
  };
  RollingSequenceNumberBuffer2.prototype.addElement = function(sequenceNumber) {
    var entry = [sequenceNumber, this.nextIndex()];
    if (this.buffer.size < this.maxElements) {
      this.buffer = this.buffer.add(entry);
    } else {
      var highestValue = this.buffer.last();
      if (bufferEntryComparator(entry, highestValue) < 0) {
        this.buffer = this.buffer.delete(highestValue).add(entry);
      }
    }
  };
  Object.defineProperty(RollingSequenceNumberBuffer2.prototype, "maxValue", {
    get: function() {
      return this.buffer.last()[0];
    },
    enumerable: false,
    configurable: true
  });
  return RollingSequenceNumberBuffer2;
}();
var LruScheduler = function() {
  function LruScheduler2(garbageCollector, asyncQueue) {
    this.garbageCollector = garbageCollector;
    this.asyncQueue = asyncQueue;
    this.hasRun = false;
    this.gcTask = null;
  }
  LruScheduler2.prototype.start = function(localStore) {
    if (this.garbageCollector.params.cacheSizeCollectionThreshold !== LRU_COLLECTION_DISABLED) {
      this.scheduleGC(localStore);
    }
  };
  LruScheduler2.prototype.stop = function() {
    if (this.gcTask) {
      this.gcTask.cancel();
      this.gcTask = null;
    }
  };
  Object.defineProperty(LruScheduler2.prototype, "started", {
    get: function() {
      return this.gcTask !== null;
    },
    enumerable: false,
    configurable: true
  });
  LruScheduler2.prototype.scheduleGC = function(localStore) {
    var _this = this;
    var delay = this.hasRun ? REGULAR_GC_DELAY_MS : INITIAL_GC_DELAY_MS;
    logDebug("LruGarbageCollector", "Garbage collection scheduled in " + delay + "ms");
    this.gcTask = this.asyncQueue.enqueueAfterDelay("lru_garbage_collection", delay, function() {
      return tslib.__awaiter(_this, void 0, void 0, function() {
        var e_1;
        return tslib.__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              this.gcTask = null;
              this.hasRun = true;
              _d.label = 1;
            case 1:
              _d.trys.push([1, 3, , 7]);
              return [4, localStore.collectGarbage(this.garbageCollector)];
            case 2:
              _d.sent();
              return [3, 7];
            case 3:
              e_1 = _d.sent();
              if (!isIndexedDbTransactionError(e_1))
                return [3, 4];
              logDebug(LOG_TAG$e, "Ignoring IndexedDB error during garbage collection: ", e_1);
              return [3, 6];
            case 4:
              return [4, ignoreIfPrimaryLeaseLoss(e_1)];
            case 5:
              _d.sent();
              _d.label = 6;
            case 6:
              return [3, 7];
            case 7:
              return [4, this.scheduleGC(localStore)];
            case 8:
              _d.sent();
              return [2];
          }
        });
      });
    });
  };
  return LruScheduler2;
}();
var LruGarbageCollectorImpl = function() {
  function LruGarbageCollectorImpl2(delegate, params) {
    this.delegate = delegate;
    this.params = params;
  }
  LruGarbageCollectorImpl2.prototype.calculateTargetCount = function(txn, percentile) {
    return this.delegate.getSequenceNumberCount(txn).next(function(targetCount) {
      return Math.floor(percentile / 100 * targetCount);
    });
  };
  LruGarbageCollectorImpl2.prototype.nthSequenceNumber = function(txn, n) {
    var _this = this;
    if (n === 0) {
      return PersistencePromise.resolve(ListenSequence.INVALID);
    }
    var buffer = new RollingSequenceNumberBuffer(n);
    return this.delegate.forEachTarget(txn, function(target) {
      return buffer.addElement(target.sequenceNumber);
    }).next(function() {
      return _this.delegate.forEachOrphanedDocumentSequenceNumber(txn, function(sequenceNumber) {
        return buffer.addElement(sequenceNumber);
      });
    }).next(function() {
      return buffer.maxValue;
    });
  };
  LruGarbageCollectorImpl2.prototype.removeTargets = function(txn, upperBound, activeTargetIds) {
    return this.delegate.removeTargets(txn, upperBound, activeTargetIds);
  };
  LruGarbageCollectorImpl2.prototype.removeOrphanedDocuments = function(txn, upperBound) {
    return this.delegate.removeOrphanedDocuments(txn, upperBound);
  };
  LruGarbageCollectorImpl2.prototype.collect = function(txn, activeTargetIds) {
    var _this = this;
    if (this.params.cacheSizeCollectionThreshold === LRU_COLLECTION_DISABLED) {
      logDebug("LruGarbageCollector", "Garbage collection skipped; disabled");
      return PersistencePromise.resolve(GC_DID_NOT_RUN);
    }
    return this.getCacheSize(txn).next(function(cacheSize) {
      if (cacheSize < _this.params.cacheSizeCollectionThreshold) {
        logDebug("LruGarbageCollector", "Garbage collection skipped; Cache size " + cacheSize + " " + ("is lower than threshold " + _this.params.cacheSizeCollectionThreshold));
        return GC_DID_NOT_RUN;
      } else {
        return _this.runGarbageCollection(txn, activeTargetIds);
      }
    });
  };
  LruGarbageCollectorImpl2.prototype.getCacheSize = function(txn) {
    return this.delegate.getCacheSize(txn);
  };
  LruGarbageCollectorImpl2.prototype.runGarbageCollection = function(txn, activeTargetIds) {
    var _this = this;
    var upperBoundSequenceNumber;
    var sequenceNumbersToCollect, targetsRemoved;
    var countedTargetsTs, foundUpperBoundTs, removedTargetsTs, removedDocumentsTs;
    var startTs = Date.now();
    return this.calculateTargetCount(txn, this.params.percentileToCollect).next(function(sequenceNumbers) {
      if (sequenceNumbers > _this.params.maximumSequenceNumbersToCollect) {
        logDebug("LruGarbageCollector", "Capping sequence numbers to collect down " + ("to the maximum of " + _this.params.maximumSequenceNumbersToCollect + " ") + ("from " + sequenceNumbers));
        sequenceNumbersToCollect = _this.params.maximumSequenceNumbersToCollect;
      } else {
        sequenceNumbersToCollect = sequenceNumbers;
      }
      countedTargetsTs = Date.now();
      return _this.nthSequenceNumber(txn, sequenceNumbersToCollect);
    }).next(function(upperBound) {
      upperBoundSequenceNumber = upperBound;
      foundUpperBoundTs = Date.now();
      return _this.removeTargets(txn, upperBoundSequenceNumber, activeTargetIds);
    }).next(function(numTargetsRemoved) {
      targetsRemoved = numTargetsRemoved;
      removedTargetsTs = Date.now();
      return _this.removeOrphanedDocuments(txn, upperBoundSequenceNumber);
    }).next(function(documentsRemoved) {
      removedDocumentsTs = Date.now();
      if (getLogLevel() <= logger.LogLevel.DEBUG) {
        var desc = "LRU Garbage Collection\n" + ("	Counted targets in " + (countedTargetsTs - startTs) + "ms\n") + ("	Determined least recently used " + sequenceNumbersToCollect + " in ") + (foundUpperBoundTs - countedTargetsTs + "ms\n") + ("	Removed " + targetsRemoved + " targets in ") + (removedTargetsTs - foundUpperBoundTs + "ms\n") + ("	Removed " + documentsRemoved + " documents in ") + (removedDocumentsTs - removedTargetsTs + "ms\n") + ("Total Duration: " + (removedDocumentsTs - startTs) + "ms");
        logDebug("LruGarbageCollector", desc);
      }
      return PersistencePromise.resolve({
        didRun: true,
        sequenceNumbersCollected: sequenceNumbersToCollect,
        targetsRemoved,
        documentsRemoved
      });
    });
  };
  return LruGarbageCollectorImpl2;
}();
function newLruGarbageCollector(delegate, params) {
  return new LruGarbageCollectorImpl(delegate, params);
}
var IndexedDbLruDelegateImpl = function() {
  function IndexedDbLruDelegateImpl2(db, params) {
    this.db = db;
    this.garbageCollector = newLruGarbageCollector(this, params);
  }
  IndexedDbLruDelegateImpl2.prototype.getSequenceNumberCount = function(txn) {
    var docCountPromise = this.orphanedDocumentCount(txn);
    var targetCountPromise = this.db.getTargetCache().getTargetCount(txn);
    return targetCountPromise.next(function(targetCount) {
      return docCountPromise.next(function(docCount) {
        return targetCount + docCount;
      });
    });
  };
  IndexedDbLruDelegateImpl2.prototype.orphanedDocumentCount = function(txn) {
    var orphanedCount = 0;
    return this.forEachOrphanedDocumentSequenceNumber(txn, function(_) {
      orphanedCount++;
    }).next(function() {
      return orphanedCount;
    });
  };
  IndexedDbLruDelegateImpl2.prototype.forEachTarget = function(txn, f) {
    return this.db.getTargetCache().forEachTarget(txn, f);
  };
  IndexedDbLruDelegateImpl2.prototype.forEachOrphanedDocumentSequenceNumber = function(txn, f) {
    return this.forEachOrphanedDocument(txn, function(docKey, sequenceNumber) {
      return f(sequenceNumber);
    });
  };
  IndexedDbLruDelegateImpl2.prototype.addReference = function(txn, targetId, key) {
    return writeSentinelKey(txn, key);
  };
  IndexedDbLruDelegateImpl2.prototype.removeReference = function(txn, targetId, key) {
    return writeSentinelKey(txn, key);
  };
  IndexedDbLruDelegateImpl2.prototype.removeTargets = function(txn, upperBound, activeTargetIds) {
    return this.db.getTargetCache().removeTargets(txn, upperBound, activeTargetIds);
  };
  IndexedDbLruDelegateImpl2.prototype.markPotentiallyOrphaned = function(txn, key) {
    return writeSentinelKey(txn, key);
  };
  IndexedDbLruDelegateImpl2.prototype.isPinned = function(txn, docKey) {
    return mutationQueuesContainKey(txn, docKey);
  };
  IndexedDbLruDelegateImpl2.prototype.removeOrphanedDocuments = function(txn, upperBound) {
    var _this = this;
    var documentCache = this.db.getRemoteDocumentCache();
    var changeBuffer = documentCache.newChangeBuffer();
    var promises = [];
    var documentCount = 0;
    var iteration = this.forEachOrphanedDocument(txn, function(docKey, sequenceNumber) {
      if (sequenceNumber <= upperBound) {
        var p = _this.isPinned(txn, docKey).next(function(isPinned) {
          if (!isPinned) {
            documentCount++;
            return changeBuffer.getEntry(txn, docKey).next(function() {
              changeBuffer.removeEntry(docKey);
              return documentTargetStore(txn).delete(sentinelKey$1(docKey));
            });
          }
        });
        promises.push(p);
      }
    });
    return iteration.next(function() {
      return PersistencePromise.waitFor(promises);
    }).next(function() {
      return changeBuffer.apply(txn);
    }).next(function() {
      return documentCount;
    });
  };
  IndexedDbLruDelegateImpl2.prototype.removeTarget = function(txn, targetData) {
    var updated = targetData.withSequenceNumber(txn.currentSequenceNumber);
    return this.db.getTargetCache().updateTargetData(txn, updated);
  };
  IndexedDbLruDelegateImpl2.prototype.updateLimboDocument = function(txn, key) {
    return writeSentinelKey(txn, key);
  };
  IndexedDbLruDelegateImpl2.prototype.forEachOrphanedDocument = function(txn, f) {
    var store = documentTargetStore(txn);
    var nextToReport = ListenSequence.INVALID;
    var nextPath;
    return store.iterate({
      index: DbTargetDocument.documentTargetsIndex
    }, function(_d, _e) {
      var targetId = _d[0];
      _d[1];
      var path2 = _e.path, sequenceNumber = _e.sequenceNumber;
      if (targetId === 0) {
        if (nextToReport !== ListenSequence.INVALID) {
          f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);
        }
        nextToReport = sequenceNumber;
        nextPath = path2;
      } else {
        nextToReport = ListenSequence.INVALID;
      }
    }).next(function() {
      if (nextToReport !== ListenSequence.INVALID) {
        f(new DocumentKey(decodeResourcePath(nextPath)), nextToReport);
      }
    });
  };
  IndexedDbLruDelegateImpl2.prototype.getCacheSize = function(txn) {
    return this.db.getRemoteDocumentCache().getSize(txn);
  };
  return IndexedDbLruDelegateImpl2;
}();
function sentinelKey$1(key) {
  return [0, encodeResourcePath(key.path)];
}
function sentinelRow(key, sequenceNumber) {
  return new DbTargetDocument(0, encodeResourcePath(key.path), sequenceNumber);
}
function writeSentinelKey(txn, key) {
  return documentTargetStore(txn).put(sentinelRow(key, txn.currentSequenceNumber));
}
var ObjectMap = function() {
  function ObjectMap2(mapKeyFn, equalsFn) {
    this.mapKeyFn = mapKeyFn;
    this.equalsFn = equalsFn;
    this.inner = {};
  }
  ObjectMap2.prototype.get = function(key) {
    var id = this.mapKeyFn(key);
    var matches = this.inner[id];
    if (matches === void 0) {
      return void 0;
    }
    for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {
      var _d = matches_1[_i], otherKey = _d[0], value = _d[1];
      if (this.equalsFn(otherKey, key)) {
        return value;
      }
    }
    return void 0;
  };
  ObjectMap2.prototype.has = function(key) {
    return this.get(key) !== void 0;
  };
  ObjectMap2.prototype.set = function(key, value) {
    var id = this.mapKeyFn(key);
    var matches = this.inner[id];
    if (matches === void 0) {
      this.inner[id] = [[key, value]];
      return;
    }
    for (var i = 0; i < matches.length; i++) {
      if (this.equalsFn(matches[i][0], key)) {
        matches[i] = [key, value];
        return;
      }
    }
    matches.push([key, value]);
  };
  ObjectMap2.prototype.delete = function(key) {
    var id = this.mapKeyFn(key);
    var matches = this.inner[id];
    if (matches === void 0) {
      return false;
    }
    for (var i = 0; i < matches.length; i++) {
      if (this.equalsFn(matches[i][0], key)) {
        if (matches.length === 1) {
          delete this.inner[id];
        } else {
          matches.splice(i, 1);
        }
        return true;
      }
    }
    return false;
  };
  ObjectMap2.prototype.forEach = function(fn) {
    forEach(this.inner, function(_, entries) {
      for (var _i = 0, entries_2 = entries; _i < entries_2.length; _i++) {
        var _d = entries_2[_i], k = _d[0], v = _d[1];
        fn(k, v);
      }
    });
  };
  ObjectMap2.prototype.isEmpty = function() {
    return isEmpty(this.inner);
  };
  return ObjectMap2;
}();
var RemoteDocumentChangeBuffer = function() {
  function RemoteDocumentChangeBuffer2() {
    this.changes = new ObjectMap(function(key) {
      return key.toString();
    }, function(l, r) {
      return l.isEqual(r);
    });
    this.changesApplied = false;
  }
  RemoteDocumentChangeBuffer2.prototype.getReadTime = function(key) {
    var change = this.changes.get(key);
    if (change) {
      return change.readTime;
    }
    return SnapshotVersion.min();
  };
  RemoteDocumentChangeBuffer2.prototype.addEntry = function(document2, readTime) {
    this.assertNotApplied();
    this.changes.set(document2.key, { document: document2, readTime });
  };
  RemoteDocumentChangeBuffer2.prototype.removeEntry = function(key, readTime) {
    if (readTime === void 0) {
      readTime = null;
    }
    this.assertNotApplied();
    this.changes.set(key, {
      document: MutableDocument.newInvalidDocument(key),
      readTime
    });
  };
  RemoteDocumentChangeBuffer2.prototype.getEntry = function(transaction, documentKey) {
    this.assertNotApplied();
    var bufferedEntry = this.changes.get(documentKey);
    if (bufferedEntry !== void 0) {
      return PersistencePromise.resolve(bufferedEntry.document);
    } else {
      return this.getFromCache(transaction, documentKey);
    }
  };
  RemoteDocumentChangeBuffer2.prototype.getEntries = function(transaction, documentKeys) {
    return this.getAllFromCache(transaction, documentKeys);
  };
  RemoteDocumentChangeBuffer2.prototype.apply = function(transaction) {
    this.assertNotApplied();
    this.changesApplied = true;
    return this.applyChanges(transaction);
  };
  RemoteDocumentChangeBuffer2.prototype.assertNotApplied = function() {
  };
  return RemoteDocumentChangeBuffer2;
}();
var IndexedDbRemoteDocumentCacheImpl = function() {
  function IndexedDbRemoteDocumentCacheImpl2(serializer, indexManager) {
    this.serializer = serializer;
    this.indexManager = indexManager;
  }
  IndexedDbRemoteDocumentCacheImpl2.prototype.addEntry = function(transaction, key, doc2) {
    var documentStore = remoteDocumentsStore(transaction);
    return documentStore.put(dbKey(key), doc2);
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.removeEntry = function(transaction, documentKey) {
    var store = remoteDocumentsStore(transaction);
    var key = dbKey(documentKey);
    return store.delete(key);
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.updateMetadata = function(transaction, sizeDelta) {
    var _this = this;
    return this.getMetadata(transaction).next(function(metadata2) {
      metadata2.byteSize += sizeDelta;
      return _this.setMetadata(transaction, metadata2);
    });
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.getEntry = function(transaction, documentKey) {
    var _this = this;
    return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function(dbRemoteDoc) {
      return _this.maybeDecodeDocument(documentKey, dbRemoteDoc);
    });
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.getSizedEntry = function(transaction, documentKey) {
    var _this = this;
    return remoteDocumentsStore(transaction).get(dbKey(documentKey)).next(function(dbRemoteDoc) {
      var doc2 = _this.maybeDecodeDocument(documentKey, dbRemoteDoc);
      return {
        document: doc2,
        size: dbDocumentSize(dbRemoteDoc)
      };
    });
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.getEntries = function(transaction, documentKeys) {
    var _this = this;
    var results = mutableDocumentMap();
    return this.forEachDbEntry(transaction, documentKeys, function(key, dbRemoteDoc) {
      var doc2 = _this.maybeDecodeDocument(key, dbRemoteDoc);
      results = results.insert(key, doc2);
    }).next(function() {
      return results;
    });
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.getSizedEntries = function(transaction, documentKeys) {
    var _this = this;
    var results = mutableDocumentMap();
    var sizeMap = new SortedMap(DocumentKey.comparator);
    return this.forEachDbEntry(transaction, documentKeys, function(key, dbRemoteDoc) {
      var doc2 = _this.maybeDecodeDocument(key, dbRemoteDoc);
      results = results.insert(key, doc2);
      sizeMap = sizeMap.insert(key, dbDocumentSize(dbRemoteDoc));
    }).next(function() {
      return { documents: results, sizeMap };
    });
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.forEachDbEntry = function(transaction, documentKeys, callback) {
    if (documentKeys.isEmpty()) {
      return PersistencePromise.resolve();
    }
    var range = IDBKeyRange.bound(documentKeys.first().path.toArray(), documentKeys.last().path.toArray());
    var keyIter = documentKeys.getIterator();
    var nextKey = keyIter.getNext();
    return remoteDocumentsStore(transaction).iterate({ range }, function(potentialKeyRaw, dbRemoteDoc, control) {
      var potentialKey = DocumentKey.fromSegments(potentialKeyRaw);
      while (nextKey && DocumentKey.comparator(nextKey, potentialKey) < 0) {
        callback(nextKey, null);
        nextKey = keyIter.getNext();
      }
      if (nextKey && nextKey.isEqual(potentialKey)) {
        callback(nextKey, dbRemoteDoc);
        nextKey = keyIter.hasNext() ? keyIter.getNext() : null;
      }
      if (nextKey) {
        control.skip(nextKey.path.toArray());
      } else {
        control.done();
      }
    }).next(function() {
      while (nextKey) {
        callback(nextKey, null);
        nextKey = keyIter.hasNext() ? keyIter.getNext() : null;
      }
    });
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.getDocumentsMatchingQuery = function(transaction, query2, sinceReadTime) {
    var _this = this;
    var results = mutableDocumentMap();
    var immediateChildrenPathLength = query2.path.length + 1;
    var iterationOptions = {};
    if (sinceReadTime.isEqual(SnapshotVersion.min())) {
      var startKey = query2.path.toArray();
      iterationOptions.range = IDBKeyRange.lowerBound(startKey);
    } else {
      var collectionKey = query2.path.toArray();
      var readTimeKey = toDbTimestampKey(sinceReadTime);
      iterationOptions.range = IDBKeyRange.lowerBound([collectionKey, readTimeKey], true);
      iterationOptions.index = DbRemoteDocument.collectionReadTimeIndex;
    }
    return remoteDocumentsStore(transaction).iterate(iterationOptions, function(key, dbRemoteDoc, control) {
      if (key.length !== immediateChildrenPathLength) {
        return;
      }
      var document2 = fromDbRemoteDocument(_this.serializer, dbRemoteDoc);
      if (!query2.path.isPrefixOf(document2.key.path)) {
        control.done();
      } else if (queryMatches(query2, document2)) {
        results = results.insert(document2.key, document2);
      }
    }).next(function() {
      return results;
    });
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.newChangeBuffer = function(options2) {
    return new IndexedDbRemoteDocumentChangeBuffer(this, !!options2 && options2.trackRemovals);
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.getSize = function(txn) {
    return this.getMetadata(txn).next(function(metadata2) {
      return metadata2.byteSize;
    });
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.getMetadata = function(txn) {
    return documentGlobalStore(txn).get(DbRemoteDocumentGlobal.key).next(function(metadata2) {
      hardAssert(!!metadata2);
      return metadata2;
    });
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.setMetadata = function(txn, metadata2) {
    return documentGlobalStore(txn).put(DbRemoteDocumentGlobal.key, metadata2);
  };
  IndexedDbRemoteDocumentCacheImpl2.prototype.maybeDecodeDocument = function(documentKey, dbRemoteDoc) {
    if (dbRemoteDoc) {
      var doc_4 = fromDbRemoteDocument(this.serializer, dbRemoteDoc);
      var isSentinelRemoval = doc_4.isNoDocument() && doc_4.version.isEqual(SnapshotVersion.min());
      if (!isSentinelRemoval) {
        return doc_4;
      }
    }
    return MutableDocument.newInvalidDocument(documentKey);
  };
  return IndexedDbRemoteDocumentCacheImpl2;
}();
function newIndexedDbRemoteDocumentCache(serializer, indexManager) {
  return new IndexedDbRemoteDocumentCacheImpl(serializer, indexManager);
}
function remoteDocumentCacheGetNewDocumentChanges(remoteDocumentCache, transaction, sinceReadTime) {
  var remoteDocumentCacheImpl = debugCast(remoteDocumentCache);
  var changedDocs = mutableDocumentMap();
  var lastReadTime = toDbTimestampKey(sinceReadTime);
  var documentsStore = remoteDocumentsStore(transaction);
  var range = IDBKeyRange.lowerBound(lastReadTime, true);
  return documentsStore.iterate({ index: DbRemoteDocument.readTimeIndex, range }, function(_, dbRemoteDoc) {
    var doc2 = fromDbRemoteDocument(remoteDocumentCacheImpl.serializer, dbRemoteDoc);
    changedDocs = changedDocs.insert(doc2.key, doc2);
    lastReadTime = dbRemoteDoc.readTime;
  }).next(function() {
    return {
      changedDocs,
      readTime: fromDbTimestampKey(lastReadTime)
    };
  });
}
function remoteDocumentCacheGetLastReadTime(transaction) {
  var documentsStore = remoteDocumentsStore(transaction);
  var readTime = SnapshotVersion.min();
  return documentsStore.iterate({ index: DbRemoteDocument.readTimeIndex, reverse: true }, function(key, dbRemoteDoc, control) {
    if (dbRemoteDoc.readTime) {
      readTime = fromDbTimestampKey(dbRemoteDoc.readTime);
    }
    control.done();
  }).next(function() {
    return readTime;
  });
}
var IndexedDbRemoteDocumentChangeBuffer = function(_super) {
  tslib.__extends(IndexedDbRemoteDocumentChangeBuffer2, _super);
  function IndexedDbRemoteDocumentChangeBuffer2(documentCache, trackRemovals) {
    var _this = _super.call(this) || this;
    _this.documentCache = documentCache;
    _this.trackRemovals = trackRemovals;
    _this.documentSizes = new ObjectMap(function(key) {
      return key.toString();
    }, function(l, r) {
      return l.isEqual(r);
    });
    return _this;
  }
  IndexedDbRemoteDocumentChangeBuffer2.prototype.applyChanges = function(transaction) {
    var _this = this;
    var promises = [];
    var sizeDelta = 0;
    var collectionParents = new SortedSet(function(l, r) {
      return primitiveComparator(l.canonicalString(), r.canonicalString());
    });
    this.changes.forEach(function(key, documentChange) {
      var previousSize = _this.documentSizes.get(key);
      if (documentChange.document.isValidDocument()) {
        var doc_5 = toDbRemoteDocument(_this.documentCache.serializer, documentChange.document, _this.getReadTime(key));
        collectionParents = collectionParents.add(key.path.popLast());
        var size = dbDocumentSize(doc_5);
        sizeDelta += size - previousSize;
        promises.push(_this.documentCache.addEntry(transaction, key, doc_5));
      } else {
        sizeDelta -= previousSize;
        if (_this.trackRemovals) {
          var deletedDoc = toDbRemoteDocument(_this.documentCache.serializer, MutableDocument.newNoDocument(key, SnapshotVersion.min()), _this.getReadTime(key));
          promises.push(_this.documentCache.addEntry(transaction, key, deletedDoc));
        } else {
          promises.push(_this.documentCache.removeEntry(transaction, key));
        }
      }
    });
    collectionParents.forEach(function(parent) {
      promises.push(_this.documentCache.indexManager.addToCollectionParentIndex(transaction, parent));
    });
    promises.push(this.documentCache.updateMetadata(transaction, sizeDelta));
    return PersistencePromise.waitFor(promises);
  };
  IndexedDbRemoteDocumentChangeBuffer2.prototype.getFromCache = function(transaction, documentKey) {
    var _this = this;
    return this.documentCache.getSizedEntry(transaction, documentKey).next(function(getResult) {
      _this.documentSizes.set(documentKey, getResult.size);
      return getResult.document;
    });
  };
  IndexedDbRemoteDocumentChangeBuffer2.prototype.getAllFromCache = function(transaction, documentKeys) {
    var _this = this;
    return this.documentCache.getSizedEntries(transaction, documentKeys).next(function(_d) {
      var documents = _d.documents, sizeMap = _d.sizeMap;
      sizeMap.forEach(function(documentKey, size) {
        _this.documentSizes.set(documentKey, size);
      });
      return documents;
    });
  };
  return IndexedDbRemoteDocumentChangeBuffer2;
}(RemoteDocumentChangeBuffer);
function documentGlobalStore(txn) {
  return getStore(txn, DbRemoteDocumentGlobal.store);
}
function remoteDocumentsStore(txn) {
  return getStore(txn, DbRemoteDocument.store);
}
function dbKey(docKey) {
  return docKey.path.toArray();
}
var SchemaConverter = function() {
  function SchemaConverter2(serializer) {
    this.serializer = serializer;
  }
  SchemaConverter2.prototype.createOrUpgrade = function(db, txn, fromVersion2, toVersion2) {
    var _this = this;
    hardAssert(fromVersion2 < toVersion2 && fromVersion2 >= 0 && toVersion2 <= SCHEMA_VERSION);
    var simpleDbTransaction = new SimpleDbTransaction("createOrUpgrade", txn);
    if (fromVersion2 < 1 && toVersion2 >= 1) {
      createPrimaryClientStore(db);
      createMutationQueue(db);
      createQueryCache(db);
      createRemoteDocumentCache(db);
    }
    var p = PersistencePromise.resolve();
    if (fromVersion2 < 3 && toVersion2 >= 3) {
      if (fromVersion2 !== 0) {
        dropQueryCache(db);
        createQueryCache(db);
      }
      p = p.next(function() {
        return writeEmptyTargetGlobalEntry(simpleDbTransaction);
      });
    }
    if (fromVersion2 < 4 && toVersion2 >= 4) {
      if (fromVersion2 !== 0) {
        p = p.next(function() {
          return upgradeMutationBatchSchemaAndMigrateData(db, simpleDbTransaction);
        });
      }
      p = p.next(function() {
        createClientMetadataStore(db);
      });
    }
    if (fromVersion2 < 5 && toVersion2 >= 5) {
      p = p.next(function() {
        return _this.removeAcknowledgedMutations(simpleDbTransaction);
      });
    }
    if (fromVersion2 < 6 && toVersion2 >= 6) {
      p = p.next(function() {
        createDocumentGlobalStore(db);
        return _this.addDocumentGlobal(simpleDbTransaction);
      });
    }
    if (fromVersion2 < 7 && toVersion2 >= 7) {
      p = p.next(function() {
        return _this.ensureSequenceNumbers(simpleDbTransaction);
      });
    }
    if (fromVersion2 < 8 && toVersion2 >= 8) {
      p = p.next(function() {
        return _this.createCollectionParentIndex(db, simpleDbTransaction);
      });
    }
    if (fromVersion2 < 9 && toVersion2 >= 9) {
      p = p.next(function() {
        dropRemoteDocumentChangesStore(db);
        createRemoteDocumentReadTimeIndex(txn);
      });
    }
    if (fromVersion2 < 10 && toVersion2 >= 10) {
      p = p.next(function() {
        return _this.rewriteCanonicalIds(simpleDbTransaction);
      });
    }
    if (fromVersion2 < 11 && toVersion2 >= 11) {
      p = p.next(function() {
        createBundlesStore(db);
        createNamedQueriesStore(db);
      });
    }
    return p;
  };
  SchemaConverter2.prototype.addDocumentGlobal = function(txn) {
    var byteCount = 0;
    return txn.store(DbRemoteDocument.store).iterate(function(_, doc2) {
      byteCount += dbDocumentSize(doc2);
    }).next(function() {
      var metadata2 = new DbRemoteDocumentGlobal(byteCount);
      return txn.store(DbRemoteDocumentGlobal.store).put(DbRemoteDocumentGlobal.key, metadata2);
    });
  };
  SchemaConverter2.prototype.removeAcknowledgedMutations = function(txn) {
    var _this = this;
    var queuesStore = txn.store(DbMutationQueue.store);
    var mutationsStore2 = txn.store(DbMutationBatch.store);
    return queuesStore.loadAll().next(function(queues) {
      return PersistencePromise.forEach(queues, function(queue) {
        var range = IDBKeyRange.bound([queue.userId, BATCHID_UNKNOWN], [queue.userId, queue.lastAcknowledgedBatchId]);
        return mutationsStore2.loadAll(DbMutationBatch.userMutationsIndex, range).next(function(dbBatches) {
          return PersistencePromise.forEach(dbBatches, function(dbBatch) {
            hardAssert(dbBatch.userId === queue.userId);
            var batch = fromDbMutationBatch(_this.serializer, dbBatch);
            return removeMutationBatch(txn, queue.userId, batch).next(function() {
            });
          });
        });
      });
    });
  };
  SchemaConverter2.prototype.ensureSequenceNumbers = function(txn) {
    var documentTargetStore2 = txn.store(DbTargetDocument.store);
    var documentsStore = txn.store(DbRemoteDocument.store);
    var globalTargetStore2 = txn.store(DbTargetGlobal.store);
    return globalTargetStore2.get(DbTargetGlobal.key).next(function(metadata2) {
      var writeSentinelKey2 = function(path2) {
        return documentTargetStore2.put(new DbTargetDocument(0, encodeResourcePath(path2), metadata2.highestListenSequenceNumber));
      };
      var promises = [];
      return documentsStore.iterate(function(key, doc2) {
        var path2 = new ResourcePath(key);
        var docSentinelKey = sentinelKey(path2);
        promises.push(documentTargetStore2.get(docSentinelKey).next(function(maybeSentinel) {
          if (!maybeSentinel) {
            return writeSentinelKey2(path2);
          } else {
            return PersistencePromise.resolve();
          }
        }));
      }).next(function() {
        return PersistencePromise.waitFor(promises);
      });
    });
  };
  SchemaConverter2.prototype.createCollectionParentIndex = function(db, txn) {
    db.createObjectStore(DbCollectionParent.store, {
      keyPath: DbCollectionParent.keyPath
    });
    var collectionParentsStore2 = txn.store(DbCollectionParent.store);
    var cache = new MemoryCollectionParentIndex();
    var addEntry = function(collectionPath) {
      if (cache.add(collectionPath)) {
        var collectionId = collectionPath.lastSegment();
        var parentPath = collectionPath.popLast();
        return collectionParentsStore2.put({
          collectionId,
          parent: encodeResourcePath(parentPath)
        });
      }
    };
    return txn.store(DbRemoteDocument.store).iterate({ keysOnly: true }, function(pathSegments, _) {
      var path2 = new ResourcePath(pathSegments);
      return addEntry(path2.popLast());
    }).next(function() {
      return txn.store(DbDocumentMutation.store).iterate({ keysOnly: true }, function(_d, _) {
        _d[0];
        var encodedPath = _d[1];
        _d[2];
        var path2 = decodeResourcePath(encodedPath);
        return addEntry(path2.popLast());
      });
    });
  };
  SchemaConverter2.prototype.rewriteCanonicalIds = function(txn) {
    var _this = this;
    var targetStore = txn.store(DbTarget.store);
    return targetStore.iterate(function(key, originalDbTarget) {
      var originalTargetData = fromDbTarget(originalDbTarget);
      var updatedDbTarget = toDbTarget(_this.serializer, originalTargetData);
      return targetStore.put(updatedDbTarget);
    });
  };
  return SchemaConverter2;
}();
function sentinelKey(path2) {
  return [0, encodeResourcePath(path2)];
}
function createPrimaryClientStore(db) {
  db.createObjectStore(DbPrimaryClient.store);
}
function createMutationQueue(db) {
  db.createObjectStore(DbMutationQueue.store, {
    keyPath: DbMutationQueue.keyPath
  });
  var mutationBatchesStore = db.createObjectStore(DbMutationBatch.store, {
    keyPath: DbMutationBatch.keyPath,
    autoIncrement: true
  });
  mutationBatchesStore.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, { unique: true });
  db.createObjectStore(DbDocumentMutation.store);
}
function upgradeMutationBatchSchemaAndMigrateData(db, txn) {
  var v1MutationsStore = txn.store(DbMutationBatch.store);
  return v1MutationsStore.loadAll().next(function(existingMutations) {
    db.deleteObjectStore(DbMutationBatch.store);
    var mutationsStore2 = db.createObjectStore(DbMutationBatch.store, {
      keyPath: DbMutationBatch.keyPath,
      autoIncrement: true
    });
    mutationsStore2.createIndex(DbMutationBatch.userMutationsIndex, DbMutationBatch.userMutationsKeyPath, { unique: true });
    var v3MutationsStore = txn.store(DbMutationBatch.store);
    var writeAll = existingMutations.map(function(mutation) {
      return v3MutationsStore.put(mutation);
    });
    return PersistencePromise.waitFor(writeAll);
  });
}
function createRemoteDocumentCache(db) {
  db.createObjectStore(DbRemoteDocument.store);
}
function createDocumentGlobalStore(db) {
  db.createObjectStore(DbRemoteDocumentGlobal.store);
}
function createQueryCache(db) {
  var targetDocumentsStore = db.createObjectStore(DbTargetDocument.store, {
    keyPath: DbTargetDocument.keyPath
  });
  targetDocumentsStore.createIndex(DbTargetDocument.documentTargetsIndex, DbTargetDocument.documentTargetsKeyPath, { unique: true });
  var targetStore = db.createObjectStore(DbTarget.store, {
    keyPath: DbTarget.keyPath
  });
  targetStore.createIndex(DbTarget.queryTargetsIndexName, DbTarget.queryTargetsKeyPath, { unique: true });
  db.createObjectStore(DbTargetGlobal.store);
}
function dropQueryCache(db) {
  db.deleteObjectStore(DbTargetDocument.store);
  db.deleteObjectStore(DbTarget.store);
  db.deleteObjectStore(DbTargetGlobal.store);
}
function dropRemoteDocumentChangesStore(db) {
  if (db.objectStoreNames.contains("remoteDocumentChanges")) {
    db.deleteObjectStore("remoteDocumentChanges");
  }
}
function writeEmptyTargetGlobalEntry(txn) {
  var globalStore = txn.store(DbTargetGlobal.store);
  var metadata2 = new DbTargetGlobal(0, 0, SnapshotVersion.min().toTimestamp(), 0);
  return globalStore.put(DbTargetGlobal.key, metadata2);
}
function createRemoteDocumentReadTimeIndex(txn) {
  var remoteDocumentStore = txn.objectStore(DbRemoteDocument.store);
  remoteDocumentStore.createIndex(DbRemoteDocument.readTimeIndex, DbRemoteDocument.readTimeIndexPath, { unique: false });
  remoteDocumentStore.createIndex(DbRemoteDocument.collectionReadTimeIndex, DbRemoteDocument.collectionReadTimeIndexPath, { unique: false });
}
function createClientMetadataStore(db) {
  db.createObjectStore(DbClientMetadata.store, {
    keyPath: DbClientMetadata.keyPath
  });
}
function createBundlesStore(db) {
  db.createObjectStore(DbBundle.store, {
    keyPath: DbBundle.keyPath
  });
}
function createNamedQueriesStore(db) {
  db.createObjectStore(DbNamedQuery.store, {
    keyPath: DbNamedQuery.keyPath
  });
}
var LOG_TAG$d = "IndexedDbPersistence";
var MAX_CLIENT_AGE_MS = 30 * 60 * 1e3;
var MAX_PRIMARY_ELIGIBLE_AGE_MS = 5e3;
var CLIENT_METADATA_REFRESH_INTERVAL_MS = 4e3;
var PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG = "Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";
var UNSUPPORTED_PLATFORM_ERROR_MSG = "This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.";
var ZOMBIED_CLIENTS_KEY_PREFIX = "firestore_zombie";
var MAIN_DATABASE = "main";
var IndexedDbPersistence = function() {
  function IndexedDbPersistence2(allowTabSynchronization, persistenceKey, clientId, lruParams, queue, window2, document2, serializer, sequenceNumberSyncer, forceOwningTab) {
    this.allowTabSynchronization = allowTabSynchronization;
    this.persistenceKey = persistenceKey;
    this.clientId = clientId;
    this.queue = queue;
    this.window = window2;
    this.document = document2;
    this.sequenceNumberSyncer = sequenceNumberSyncer;
    this.forceOwningTab = forceOwningTab;
    this.listenSequence = null;
    this._started = false;
    this.isPrimary = false;
    this.networkEnabled = true;
    this.windowUnloadHandler = null;
    this.inForeground = false;
    this.documentVisibilityHandler = null;
    this.clientMetadataRefresher = null;
    this.lastGarbageCollectionTime = Number.NEGATIVE_INFINITY;
    this.primaryStateListener = function(_) {
      return Promise.resolve();
    };
    if (!IndexedDbPersistence2.isAvailable()) {
      throw new FirestoreError(Code.UNIMPLEMENTED, UNSUPPORTED_PLATFORM_ERROR_MSG);
    }
    this.referenceDelegate = new IndexedDbLruDelegateImpl(this, lruParams);
    this.dbName = persistenceKey + MAIN_DATABASE;
    this.serializer = new LocalSerializer(serializer);
    this.simpleDb = new SimpleDb(this.dbName, SCHEMA_VERSION, new SchemaConverter(this.serializer));
    this.targetCache = new IndexedDbTargetCache(this.referenceDelegate, this.serializer);
    this.indexManager = new IndexedDbIndexManager();
    this.remoteDocumentCache = newIndexedDbRemoteDocumentCache(this.serializer, this.indexManager);
    this.bundleCache = new IndexedDbBundleCache();
    if (this.window && this.window.localStorage) {
      this.webStorage = this.window.localStorage;
    } else {
      this.webStorage = null;
      if (forceOwningTab === false) {
        logError(LOG_TAG$d, "LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page.");
      }
    }
  }
  IndexedDbPersistence2.prototype.start = function() {
    var _this = this;
    return this.updateClientMetadataAndTryBecomePrimary().then(function() {
      if (!_this.isPrimary && !_this.allowTabSynchronization) {
        throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
      }
      _this.attachVisibilityHandler();
      _this.attachWindowUnloadHook();
      _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();
      return _this.runTransaction("getHighestListenSequenceNumber", "readonly", function(txn) {
        return _this.targetCache.getHighestSequenceNumber(txn);
      });
    }).then(function(highestListenSequenceNumber) {
      _this.listenSequence = new ListenSequence(highestListenSequenceNumber, _this.sequenceNumberSyncer);
    }).then(function() {
      _this._started = true;
    }).catch(function(reason) {
      _this.simpleDb && _this.simpleDb.close();
      return Promise.reject(reason);
    });
  };
  IndexedDbPersistence2.prototype.setPrimaryStateListener = function(primaryStateListener) {
    var _this = this;
    this.primaryStateListener = function(primaryState) {
      return tslib.__awaiter(_this, void 0, void 0, function() {
        return tslib.__generator(this, function(_d) {
          if (this.started) {
            return [2, primaryStateListener(primaryState)];
          }
          return [2];
        });
      });
    };
    return primaryStateListener(this.isPrimary);
  };
  IndexedDbPersistence2.prototype.setDatabaseDeletedListener = function(databaseDeletedListener) {
    var _this = this;
    this.simpleDb.setVersionChangeListener(function(event) {
      return tslib.__awaiter(_this, void 0, void 0, function() {
        return tslib.__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              if (!(event.newVersion === null))
                return [3, 2];
              return [4, databaseDeletedListener()];
            case 1:
              _d.sent();
              _d.label = 2;
            case 2:
              return [2];
          }
        });
      });
    });
  };
  IndexedDbPersistence2.prototype.setNetworkEnabled = function(networkEnabled) {
    var _this = this;
    if (this.networkEnabled !== networkEnabled) {
      this.networkEnabled = networkEnabled;
      this.queue.enqueueAndForget(function() {
        return tslib.__awaiter(_this, void 0, void 0, function() {
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                if (!this.started)
                  return [3, 2];
                return [4, this.updateClientMetadataAndTryBecomePrimary()];
              case 1:
                _d.sent();
                _d.label = 2;
              case 2:
                return [2];
            }
          });
        });
      });
    }
  };
  IndexedDbPersistence2.prototype.updateClientMetadataAndTryBecomePrimary = function() {
    var _this = this;
    return this.runTransaction("updateClientMetadataAndTryBecomePrimary", "readwrite", function(txn) {
      var metadataStore = clientMetadataStore(txn);
      return metadataStore.put(new DbClientMetadata(_this.clientId, Date.now(), _this.networkEnabled, _this.inForeground)).next(function() {
        if (_this.isPrimary) {
          return _this.verifyPrimaryLease(txn).next(function(success) {
            if (!success) {
              _this.isPrimary = false;
              _this.queue.enqueueRetryable(function() {
                return _this.primaryStateListener(false);
              });
            }
          });
        }
      }).next(function() {
        return _this.canActAsPrimary(txn);
      }).next(function(canActAsPrimary) {
        if (_this.isPrimary && !canActAsPrimary) {
          return _this.releasePrimaryLeaseIfHeld(txn).next(function() {
            return false;
          });
        } else if (canActAsPrimary) {
          return _this.acquireOrExtendPrimaryLease(txn).next(function() {
            return true;
          });
        } else {
          return false;
        }
      });
    }).catch(function(e) {
      if (isIndexedDbTransactionError(e)) {
        logDebug(LOG_TAG$d, "Failed to extend owner lease: ", e);
        return _this.isPrimary;
      }
      if (!_this.allowTabSynchronization) {
        throw e;
      }
      logDebug(LOG_TAG$d, "Releasing owner lease after error during lease refresh", e);
      return false;
    }).then(function(isPrimary) {
      if (_this.isPrimary !== isPrimary) {
        _this.queue.enqueueRetryable(function() {
          return _this.primaryStateListener(isPrimary);
        });
      }
      _this.isPrimary = isPrimary;
    });
  };
  IndexedDbPersistence2.prototype.verifyPrimaryLease = function(txn) {
    var _this = this;
    var store = primaryClientStore(txn);
    return store.get(DbPrimaryClient.key).next(function(primaryClient) {
      return PersistencePromise.resolve(_this.isLocalClient(primaryClient));
    });
  };
  IndexedDbPersistence2.prototype.removeClientMetadata = function(txn) {
    var metadataStore = clientMetadataStore(txn);
    return metadataStore.delete(this.clientId);
  };
  IndexedDbPersistence2.prototype.maybeGarbageCollectMultiClientState = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var inactiveClients, _i, inactiveClients_1, inactiveClient;
      var _this = this;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            if (!(this.isPrimary && !this.isWithinAge(this.lastGarbageCollectionTime, MAX_CLIENT_AGE_MS)))
              return [3, 2];
            this.lastGarbageCollectionTime = Date.now();
            return [4, this.runTransaction("maybeGarbageCollectMultiClientState", "readwrite-primary", function(txn) {
              var metadataStore = getStore(txn, DbClientMetadata.store);
              return metadataStore.loadAll().next(function(existingClients) {
                var active = _this.filterActiveClients(existingClients, MAX_CLIENT_AGE_MS);
                var inactive = existingClients.filter(function(client2) {
                  return active.indexOf(client2) === -1;
                });
                return PersistencePromise.forEach(inactive, function(inactiveClient2) {
                  return metadataStore.delete(inactiveClient2.clientId);
                }).next(function() {
                  return inactive;
                });
              });
            }).catch(function() {
              return [];
            })];
          case 1:
            inactiveClients = _d.sent();
            if (this.webStorage) {
              for (_i = 0, inactiveClients_1 = inactiveClients; _i < inactiveClients_1.length; _i++) {
                inactiveClient = inactiveClients_1[_i];
                this.webStorage.removeItem(this.zombiedClientLocalStorageKey(inactiveClient.clientId));
              }
            }
            _d.label = 2;
          case 2:
            return [2];
        }
      });
    });
  };
  IndexedDbPersistence2.prototype.scheduleClientMetadataAndPrimaryLeaseRefreshes = function() {
    var _this = this;
    this.clientMetadataRefresher = this.queue.enqueueAfterDelay("client_metadata_refresh", CLIENT_METADATA_REFRESH_INTERVAL_MS, function() {
      return _this.updateClientMetadataAndTryBecomePrimary().then(function() {
        return _this.maybeGarbageCollectMultiClientState();
      }).then(function() {
        return _this.scheduleClientMetadataAndPrimaryLeaseRefreshes();
      });
    });
  };
  IndexedDbPersistence2.prototype.isLocalClient = function(client2) {
    return client2 ? client2.ownerId === this.clientId : false;
  };
  IndexedDbPersistence2.prototype.canActAsPrimary = function(txn) {
    var _this = this;
    if (this.forceOwningTab) {
      return PersistencePromise.resolve(true);
    }
    var store = primaryClientStore(txn);
    return store.get(DbPrimaryClient.key).next(function(currentPrimary) {
      var currentLeaseIsValid = currentPrimary !== null && _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !_this.isClientZombied(currentPrimary.ownerId);
      if (currentLeaseIsValid) {
        if (_this.isLocalClient(currentPrimary) && _this.networkEnabled) {
          return true;
        }
        if (!_this.isLocalClient(currentPrimary)) {
          if (!currentPrimary.allowTabSynchronization) {
            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
          }
          return false;
        }
      }
      if (_this.networkEnabled && _this.inForeground) {
        return true;
      }
      return clientMetadataStore(txn).loadAll().next(function(existingClients) {
        var preferredCandidate = _this.filterActiveClients(existingClients, MAX_PRIMARY_ELIGIBLE_AGE_MS).find(function(otherClient) {
          if (_this.clientId !== otherClient.clientId) {
            var otherClientHasBetterNetworkState = !_this.networkEnabled && otherClient.networkEnabled;
            var otherClientHasBetterVisibility = !_this.inForeground && otherClient.inForeground;
            var otherClientHasSameNetworkState = _this.networkEnabled === otherClient.networkEnabled;
            if (otherClientHasBetterNetworkState || otherClientHasBetterVisibility && otherClientHasSameNetworkState) {
              return true;
            }
          }
          return false;
        });
        return preferredCandidate === void 0;
      });
    }).next(function(canActAsPrimary) {
      if (_this.isPrimary !== canActAsPrimary) {
        logDebug(LOG_TAG$d, "Client " + (canActAsPrimary ? "is" : "is not") + " eligible for a primary lease.");
      }
      return canActAsPrimary;
    });
  };
  IndexedDbPersistence2.prototype.shutdown = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var _this = this;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            this._started = false;
            this.markClientZombied();
            if (this.clientMetadataRefresher) {
              this.clientMetadataRefresher.cancel();
              this.clientMetadataRefresher = null;
            }
            this.detachVisibilityHandler();
            this.detachWindowUnloadHook();
            return [4, this.simpleDb.runTransaction("shutdown", "readwrite", [DbPrimaryClient.store, DbClientMetadata.store], function(simpleDbTxn) {
              var persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, ListenSequence.INVALID);
              return _this.releasePrimaryLeaseIfHeld(persistenceTransaction).next(function() {
                return _this.removeClientMetadata(persistenceTransaction);
              });
            })];
          case 1:
            _d.sent();
            this.simpleDb.close();
            this.removeClientZombiedEntry();
            return [2];
        }
      });
    });
  };
  IndexedDbPersistence2.prototype.filterActiveClients = function(clients, activityThresholdMs) {
    var _this = this;
    return clients.filter(function(client2) {
      return _this.isWithinAge(client2.updateTimeMs, activityThresholdMs) && !_this.isClientZombied(client2.clientId);
    });
  };
  IndexedDbPersistence2.prototype.getActiveClients = function() {
    var _this = this;
    return this.runTransaction("getActiveClients", "readonly", function(txn) {
      return clientMetadataStore(txn).loadAll().next(function(clients) {
        return _this.filterActiveClients(clients, MAX_CLIENT_AGE_MS).map(function(clientMetadata) {
          return clientMetadata.clientId;
        });
      });
    });
  };
  Object.defineProperty(IndexedDbPersistence2.prototype, "started", {
    get: function() {
      return this._started;
    },
    enumerable: false,
    configurable: true
  });
  IndexedDbPersistence2.prototype.getMutationQueue = function(user2) {
    return IndexedDbMutationQueue.forUser(user2, this.serializer, this.indexManager, this.referenceDelegate);
  };
  IndexedDbPersistence2.prototype.getTargetCache = function() {
    return this.targetCache;
  };
  IndexedDbPersistence2.prototype.getRemoteDocumentCache = function() {
    return this.remoteDocumentCache;
  };
  IndexedDbPersistence2.prototype.getIndexManager = function() {
    return this.indexManager;
  };
  IndexedDbPersistence2.prototype.getBundleCache = function() {
    return this.bundleCache;
  };
  IndexedDbPersistence2.prototype.runTransaction = function(action, mode, transactionOperation) {
    var _this = this;
    logDebug(LOG_TAG$d, "Starting transaction:", action);
    var simpleDbMode = mode === "readonly" ? "readonly" : "readwrite";
    var persistenceTransaction;
    return this.simpleDb.runTransaction(action, simpleDbMode, ALL_STORES, function(simpleDbTxn) {
      persistenceTransaction = new IndexedDbTransaction(simpleDbTxn, _this.listenSequence ? _this.listenSequence.next() : ListenSequence.INVALID);
      if (mode === "readwrite-primary") {
        return _this.verifyPrimaryLease(persistenceTransaction).next(function(holdsPrimaryLease) {
          if (holdsPrimaryLease) {
            return true;
          }
          return _this.canActAsPrimary(persistenceTransaction);
        }).next(function(holdsPrimaryLease) {
          if (!holdsPrimaryLease) {
            logError("Failed to obtain primary lease for action '" + action + "'.");
            _this.isPrimary = false;
            _this.queue.enqueueRetryable(function() {
              return _this.primaryStateListener(false);
            });
            throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_LOST_ERROR_MSG);
          }
          return transactionOperation(persistenceTransaction);
        }).next(function(result) {
          return _this.acquireOrExtendPrimaryLease(persistenceTransaction).next(function() {
            return result;
          });
        });
      } else {
        return _this.verifyAllowTabSynchronization(persistenceTransaction).next(function() {
          return transactionOperation(persistenceTransaction);
        });
      }
    }).then(function(result) {
      persistenceTransaction.raiseOnCommittedEvent();
      return result;
    });
  };
  IndexedDbPersistence2.prototype.verifyAllowTabSynchronization = function(txn) {
    var _this = this;
    var store = primaryClientStore(txn);
    return store.get(DbPrimaryClient.key).next(function(currentPrimary) {
      var currentLeaseIsValid = currentPrimary !== null && _this.isWithinAge(currentPrimary.leaseTimestampMs, MAX_PRIMARY_ELIGIBLE_AGE_MS) && !_this.isClientZombied(currentPrimary.ownerId);
      if (currentLeaseIsValid && !_this.isLocalClient(currentPrimary)) {
        if (!_this.forceOwningTab && (!_this.allowTabSynchronization || !currentPrimary.allowTabSynchronization)) {
          throw new FirestoreError(Code.FAILED_PRECONDITION, PRIMARY_LEASE_EXCLUSIVE_ERROR_MSG);
        }
      }
    });
  };
  IndexedDbPersistence2.prototype.acquireOrExtendPrimaryLease = function(txn) {
    var newPrimary = new DbPrimaryClient(this.clientId, this.allowTabSynchronization, Date.now());
    return primaryClientStore(txn).put(DbPrimaryClient.key, newPrimary);
  };
  IndexedDbPersistence2.isAvailable = function() {
    return SimpleDb.isAvailable();
  };
  IndexedDbPersistence2.prototype.releasePrimaryLeaseIfHeld = function(txn) {
    var _this = this;
    var store = primaryClientStore(txn);
    return store.get(DbPrimaryClient.key).next(function(primaryClient) {
      if (_this.isLocalClient(primaryClient)) {
        logDebug(LOG_TAG$d, "Releasing primary lease.");
        return store.delete(DbPrimaryClient.key);
      } else {
        return PersistencePromise.resolve();
      }
    });
  };
  IndexedDbPersistence2.prototype.isWithinAge = function(updateTimeMs, maxAgeMs) {
    var now = Date.now();
    var minAcceptable = now - maxAgeMs;
    var maxAcceptable = now;
    if (updateTimeMs < minAcceptable) {
      return false;
    } else if (updateTimeMs > maxAcceptable) {
      logError("Detected an update time that is in the future: " + updateTimeMs + " > " + maxAcceptable);
      return false;
    }
    return true;
  };
  IndexedDbPersistence2.prototype.attachVisibilityHandler = function() {
    var _this = this;
    if (this.document !== null && typeof this.document.addEventListener === "function") {
      this.documentVisibilityHandler = function() {
        _this.queue.enqueueAndForget(function() {
          _this.inForeground = _this.document.visibilityState === "visible";
          return _this.updateClientMetadataAndTryBecomePrimary();
        });
      };
      this.document.addEventListener("visibilitychange", this.documentVisibilityHandler);
      this.inForeground = this.document.visibilityState === "visible";
    }
  };
  IndexedDbPersistence2.prototype.detachVisibilityHandler = function() {
    if (this.documentVisibilityHandler) {
      this.document.removeEventListener("visibilitychange", this.documentVisibilityHandler);
      this.documentVisibilityHandler = null;
    }
  };
  IndexedDbPersistence2.prototype.attachWindowUnloadHook = function() {
    var _this = this;
    var _a;
    if (typeof ((_a = this.window) === null || _a === void 0 ? void 0 : _a.addEventListener) === "function") {
      this.windowUnloadHandler = function() {
        _this.markClientZombied();
        if (util.isSafari() && navigator.appVersion.match("Version/14")) {
          _this.queue.enterRestrictedMode(true);
        }
        _this.queue.enqueueAndForget(function() {
          return _this.shutdown();
        });
      };
      this.window.addEventListener("pagehide", this.windowUnloadHandler);
    }
  };
  IndexedDbPersistence2.prototype.detachWindowUnloadHook = function() {
    if (this.windowUnloadHandler) {
      this.window.removeEventListener("pagehide", this.windowUnloadHandler);
      this.windowUnloadHandler = null;
    }
  };
  IndexedDbPersistence2.prototype.isClientZombied = function(clientId) {
    var _a;
    try {
      var isZombied = ((_a = this.webStorage) === null || _a === void 0 ? void 0 : _a.getItem(this.zombiedClientLocalStorageKey(clientId))) !== null;
      logDebug(LOG_TAG$d, "Client '" + clientId + "' " + (isZombied ? "is" : "is not") + " zombied in LocalStorage");
      return isZombied;
    } catch (e) {
      logError(LOG_TAG$d, "Failed to get zombied client id.", e);
      return false;
    }
  };
  IndexedDbPersistence2.prototype.markClientZombied = function() {
    if (!this.webStorage) {
      return;
    }
    try {
      this.webStorage.setItem(this.zombiedClientLocalStorageKey(this.clientId), String(Date.now()));
    } catch (e) {
      logError("Failed to set zombie client id.", e);
    }
  };
  IndexedDbPersistence2.prototype.removeClientZombiedEntry = function() {
    if (!this.webStorage) {
      return;
    }
    try {
      this.webStorage.removeItem(this.zombiedClientLocalStorageKey(this.clientId));
    } catch (e) {
    }
  };
  IndexedDbPersistence2.prototype.zombiedClientLocalStorageKey = function(clientId) {
    return ZOMBIED_CLIENTS_KEY_PREFIX + "_" + this.persistenceKey + "_" + clientId;
  };
  return IndexedDbPersistence2;
}();
function primaryClientStore(txn) {
  return getStore(txn, DbPrimaryClient.store);
}
function clientMetadataStore(txn) {
  return getStore(txn, DbClientMetadata.store);
}
function indexedDbStoragePrefix(databaseId, persistenceKey) {
  var database = databaseId.projectId;
  if (!databaseId.isDefaultDatabase) {
    database += "." + databaseId.database;
  }
  return "firestore/" + persistenceKey + "/" + database + "/";
}
function indexedDbClearPersistence(persistenceKey) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var dbName;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          if (!SimpleDb.isAvailable()) {
            return [2, Promise.resolve()];
          }
          dbName = persistenceKey + MAIN_DATABASE;
          return [4, SimpleDb.delete(dbName)];
        case 1:
          _d.sent();
          return [2];
      }
    });
  });
}
var LocalDocumentsView = function() {
  function LocalDocumentsView2(remoteDocumentCache, mutationQueue, indexManager) {
    this.remoteDocumentCache = remoteDocumentCache;
    this.mutationQueue = mutationQueue;
    this.indexManager = indexManager;
  }
  LocalDocumentsView2.prototype.getDocument = function(transaction, key) {
    var _this = this;
    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKey(transaction, key).next(function(batches) {
      return _this.getDocumentInternal(transaction, key, batches);
    });
  };
  LocalDocumentsView2.prototype.getDocumentInternal = function(transaction, key, inBatches) {
    return this.remoteDocumentCache.getEntry(transaction, key).next(function(doc2) {
      for (var _i = 0, inBatches_1 = inBatches; _i < inBatches_1.length; _i++) {
        var batch = inBatches_1[_i];
        batch.applyToLocalView(doc2);
      }
      return doc2;
    });
  };
  LocalDocumentsView2.prototype.applyLocalMutationsToDocuments = function(docs, batches) {
    docs.forEach(function(key, localView) {
      for (var _i = 0, batches_1 = batches; _i < batches_1.length; _i++) {
        var batch = batches_1[_i];
        batch.applyToLocalView(localView);
      }
    });
  };
  LocalDocumentsView2.prototype.getDocuments = function(transaction, keys) {
    var _this = this;
    return this.remoteDocumentCache.getEntries(transaction, keys).next(function(docs) {
      return _this.applyLocalViewToDocuments(transaction, docs).next(function() {
        return docs;
      });
    });
  };
  LocalDocumentsView2.prototype.applyLocalViewToDocuments = function(transaction, baseDocs) {
    var _this = this;
    return this.mutationQueue.getAllMutationBatchesAffectingDocumentKeys(transaction, baseDocs).next(function(batches) {
      return _this.applyLocalMutationsToDocuments(baseDocs, batches);
    });
  };
  LocalDocumentsView2.prototype.getDocumentsMatchingQuery = function(transaction, query2, sinceReadTime) {
    if (isDocumentQuery$1(query2)) {
      return this.getDocumentsMatchingDocumentQuery(transaction, query2.path);
    } else if (isCollectionGroupQuery(query2)) {
      return this.getDocumentsMatchingCollectionGroupQuery(transaction, query2, sinceReadTime);
    } else {
      return this.getDocumentsMatchingCollectionQuery(transaction, query2, sinceReadTime);
    }
  };
  LocalDocumentsView2.prototype.getDocumentsMatchingDocumentQuery = function(transaction, docPath) {
    return this.getDocument(transaction, new DocumentKey(docPath)).next(function(document2) {
      var result = documentMap();
      if (document2.isFoundDocument()) {
        result = result.insert(document2.key, document2);
      }
      return result;
    });
  };
  LocalDocumentsView2.prototype.getDocumentsMatchingCollectionGroupQuery = function(transaction, query2, sinceReadTime) {
    var _this = this;
    var collectionId = query2.collectionGroup;
    var results = documentMap();
    return this.indexManager.getCollectionParents(transaction, collectionId).next(function(parents) {
      return PersistencePromise.forEach(parents, function(parent) {
        var collectionQuery = asCollectionQueryAtPath(query2, parent.child(collectionId));
        return _this.getDocumentsMatchingCollectionQuery(transaction, collectionQuery, sinceReadTime).next(function(r) {
          r.forEach(function(key, doc2) {
            results = results.insert(key, doc2);
          });
        });
      }).next(function() {
        return results;
      });
    });
  };
  LocalDocumentsView2.prototype.getDocumentsMatchingCollectionQuery = function(transaction, query2, sinceReadTime) {
    var _this = this;
    var results;
    var mutationBatches;
    return this.remoteDocumentCache.getDocumentsMatchingQuery(transaction, query2, sinceReadTime).next(function(queryResults) {
      results = queryResults;
      return _this.mutationQueue.getAllMutationBatchesAffectingQuery(transaction, query2);
    }).next(function(matchingMutationBatches) {
      mutationBatches = matchingMutationBatches;
      return _this.addMissingBaseDocuments(transaction, mutationBatches, results).next(function(mergedDocuments) {
        results = mergedDocuments;
        for (var _i = 0, mutationBatches_1 = mutationBatches; _i < mutationBatches_1.length; _i++) {
          var batch = mutationBatches_1[_i];
          for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {
            var mutation = _e[_d];
            var key = mutation.key;
            var document_2 = results.get(key);
            if (document_2 == null) {
              document_2 = MutableDocument.newInvalidDocument(key);
              results = results.insert(key, document_2);
            }
            mutationApplyToLocalView(mutation, document_2, batch.localWriteTime);
            if (!document_2.isFoundDocument()) {
              results = results.remove(key);
            }
          }
        }
      });
    }).next(function() {
      results.forEach(function(key, doc2) {
        if (!queryMatches(query2, doc2)) {
          results = results.remove(key);
        }
      });
      return results;
    });
  };
  LocalDocumentsView2.prototype.addMissingBaseDocuments = function(transaction, matchingMutationBatches, existingDocuments) {
    var missingBaseDocEntriesForPatching = documentKeySet();
    for (var _i = 0, matchingMutationBatches_1 = matchingMutationBatches; _i < matchingMutationBatches_1.length; _i++) {
      var batch = matchingMutationBatches_1[_i];
      for (var _d = 0, _e = batch.mutations; _d < _e.length; _d++) {
        var mutation = _e[_d];
        if (mutation instanceof PatchMutation && existingDocuments.get(mutation.key) === null) {
          missingBaseDocEntriesForPatching = missingBaseDocEntriesForPatching.add(mutation.key);
        }
      }
    }
    var mergedDocuments = existingDocuments;
    return this.remoteDocumentCache.getEntries(transaction, missingBaseDocEntriesForPatching).next(function(missingBaseDocs) {
      missingBaseDocs.forEach(function(key, doc2) {
        if (doc2.isFoundDocument()) {
          mergedDocuments = mergedDocuments.insert(key, doc2);
        }
      });
      return mergedDocuments;
    });
  };
  return LocalDocumentsView2;
}();
var LOG_TAG$c = "LocalStore";
var RESUME_TOKEN_MAX_AGE_MICROS = 5 * 60 * 1e6;
var LocalStoreImpl = function() {
  function LocalStoreImpl2(persistence, queryEngine, initialUser, serializer) {
    this.persistence = persistence;
    this.queryEngine = queryEngine;
    this.serializer = serializer;
    this.targetDataByTarget = new SortedMap(primitiveComparator);
    this.targetIdByTarget = new ObjectMap(function(t) {
      return canonifyTarget(t);
    }, targetEquals);
    this.lastDocumentChangeReadTime = SnapshotVersion.min();
    this.mutationQueue = persistence.getMutationQueue(initialUser);
    this.remoteDocuments = persistence.getRemoteDocumentCache();
    this.targetCache = persistence.getTargetCache();
    this.localDocuments = new LocalDocumentsView(this.remoteDocuments, this.mutationQueue, this.persistence.getIndexManager());
    this.bundleCache = persistence.getBundleCache();
    this.queryEngine.setLocalDocumentsView(this.localDocuments);
  }
  LocalStoreImpl2.prototype.collectGarbage = function(garbageCollector) {
    var _this = this;
    return this.persistence.runTransaction("Collect garbage", "readwrite-primary", function(txn) {
      return garbageCollector.collect(txn, _this.targetDataByTarget);
    });
  };
  return LocalStoreImpl2;
}();
function newLocalStore(persistence, queryEngine, initialUser, serializer) {
  return new LocalStoreImpl(persistence, queryEngine, initialUser, serializer);
}
function localStoreHandleUserChange(localStore, user2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var localStoreImpl, newMutationQueue, newLocalDocuments, result;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          localStoreImpl = debugCast(localStore);
          newMutationQueue = localStoreImpl.mutationQueue;
          newLocalDocuments = localStoreImpl.localDocuments;
          return [4, localStoreImpl.persistence.runTransaction("Handle user change", "readonly", function(txn) {
            var oldBatches;
            return localStoreImpl.mutationQueue.getAllMutationBatches(txn).next(function(promisedOldBatches) {
              oldBatches = promisedOldBatches;
              newMutationQueue = localStoreImpl.persistence.getMutationQueue(user2);
              newLocalDocuments = new LocalDocumentsView(localStoreImpl.remoteDocuments, newMutationQueue, localStoreImpl.persistence.getIndexManager());
              return newMutationQueue.getAllMutationBatches(txn);
            }).next(function(newBatches) {
              var removedBatchIds = [];
              var addedBatchIds = [];
              var changedKeys = documentKeySet();
              for (var _i = 0, oldBatches_1 = oldBatches; _i < oldBatches_1.length; _i++) {
                var batch = oldBatches_1[_i];
                removedBatchIds.push(batch.batchId);
                for (var _d2 = 0, _e = batch.mutations; _d2 < _e.length; _d2++) {
                  var mutation = _e[_d2];
                  changedKeys = changedKeys.add(mutation.key);
                }
              }
              for (var _f = 0, newBatches_1 = newBatches; _f < newBatches_1.length; _f++) {
                var batch = newBatches_1[_f];
                addedBatchIds.push(batch.batchId);
                for (var _g = 0, _h = batch.mutations; _g < _h.length; _g++) {
                  var mutation = _h[_g];
                  changedKeys = changedKeys.add(mutation.key);
                }
              }
              return newLocalDocuments.getDocuments(txn, changedKeys).next(function(affectedDocuments) {
                return {
                  affectedDocuments,
                  removedBatchIds,
                  addedBatchIds
                };
              });
            });
          })];
        case 1:
          result = _d.sent();
          localStoreImpl.mutationQueue = newMutationQueue;
          localStoreImpl.localDocuments = newLocalDocuments;
          localStoreImpl.queryEngine.setLocalDocumentsView(localStoreImpl.localDocuments);
          return [2, result];
      }
    });
  });
}
function localStoreWriteLocally(localStore, mutations) {
  var localStoreImpl = debugCast(localStore);
  var localWriteTime = Timestamp.now();
  var keys = mutations.reduce(function(keys2, m) {
    return keys2.add(m.key);
  }, documentKeySet());
  var existingDocs;
  return localStoreImpl.persistence.runTransaction("Locally write mutations", "readwrite", function(txn) {
    return localStoreImpl.localDocuments.getDocuments(txn, keys).next(function(docs) {
      existingDocs = docs;
      var baseMutations = [];
      for (var _i = 0, mutations_2 = mutations; _i < mutations_2.length; _i++) {
        var mutation = mutations_2[_i];
        var baseValue = mutationExtractBaseValue(mutation, existingDocs.get(mutation.key));
        if (baseValue != null) {
          baseMutations.push(new PatchMutation(mutation.key, baseValue, extractFieldMask(baseValue.value.mapValue), Precondition.exists(true)));
        }
      }
      return localStoreImpl.mutationQueue.addMutationBatch(txn, localWriteTime, baseMutations, mutations);
    });
  }).then(function(batch) {
    batch.applyToLocalDocumentSet(existingDocs);
    return { batchId: batch.batchId, changes: existingDocs };
  });
}
function localStoreAcknowledgeBatch(localStore, batchResult) {
  var localStoreImpl = debugCast(localStore);
  return localStoreImpl.persistence.runTransaction("Acknowledge batch", "readwrite-primary", function(txn) {
    var affected = batchResult.batch.keys();
    var documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({
      trackRemovals: true
    });
    return applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer).next(function() {
      return documentBuffer.apply(txn);
    }).next(function() {
      return localStoreImpl.mutationQueue.performConsistencyCheck(txn);
    }).next(function() {
      return localStoreImpl.localDocuments.getDocuments(txn, affected);
    });
  });
}
function localStoreRejectBatch(localStore, batchId) {
  var localStoreImpl = debugCast(localStore);
  return localStoreImpl.persistence.runTransaction("Reject batch", "readwrite-primary", function(txn) {
    var affectedKeys;
    return localStoreImpl.mutationQueue.lookupMutationBatch(txn, batchId).next(function(batch) {
      hardAssert(batch !== null);
      affectedKeys = batch.keys();
      return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);
    }).next(function() {
      return localStoreImpl.mutationQueue.performConsistencyCheck(txn);
    }).next(function() {
      return localStoreImpl.localDocuments.getDocuments(txn, affectedKeys);
    });
  });
}
function localStoreGetHighestUnacknowledgedBatchId(localStore) {
  var localStoreImpl = debugCast(localStore);
  return localStoreImpl.persistence.runTransaction("Get highest unacknowledged batch id", "readonly", function(txn) {
    return localStoreImpl.mutationQueue.getHighestUnacknowledgedBatchId(txn);
  });
}
function localStoreGetLastRemoteSnapshotVersion(localStore) {
  var localStoreImpl = debugCast(localStore);
  return localStoreImpl.persistence.runTransaction("Get last remote snapshot version", "readonly", function(txn) {
    return localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn);
  });
}
function localStoreApplyRemoteEventToLocalCache(localStore, remoteEvent) {
  var localStoreImpl = debugCast(localStore);
  var remoteVersion = remoteEvent.snapshotVersion;
  var newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;
  return localStoreImpl.persistence.runTransaction("Apply remote event", "readwrite-primary", function(txn) {
    var documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({
      trackRemovals: true
    });
    newTargetDataByTargetMap = localStoreImpl.targetDataByTarget;
    var promises = [];
    remoteEvent.targetChanges.forEach(function(change, targetId) {
      var oldTargetData = newTargetDataByTargetMap.get(targetId);
      if (!oldTargetData) {
        return;
      }
      promises.push(localStoreImpl.targetCache.removeMatchingKeys(txn, change.removedDocuments, targetId).next(function() {
        return localStoreImpl.targetCache.addMatchingKeys(txn, change.addedDocuments, targetId);
      }));
      var resumeToken = change.resumeToken;
      if (resumeToken.approximateByteSize() > 0) {
        var newTargetData = oldTargetData.withResumeToken(resumeToken, remoteVersion).withSequenceNumber(txn.currentSequenceNumber);
        newTargetDataByTargetMap = newTargetDataByTargetMap.insert(targetId, newTargetData);
        if (shouldPersistTargetData(oldTargetData, newTargetData, change)) {
          promises.push(localStoreImpl.targetCache.updateTargetData(txn, newTargetData));
        }
      }
    });
    var changedDocs = mutableDocumentMap();
    remoteEvent.documentUpdates.forEach(function(key, doc2) {
      if (remoteEvent.resolvedLimboDocuments.has(key)) {
        promises.push(localStoreImpl.persistence.referenceDelegate.updateLimboDocument(txn, key));
      }
    });
    promises.push(populateDocumentChangeBuffer(txn, documentBuffer, remoteEvent.documentUpdates, remoteVersion, void 0).next(function(result) {
      changedDocs = result;
    }));
    if (!remoteVersion.isEqual(SnapshotVersion.min())) {
      var updateRemoteVersion = localStoreImpl.targetCache.getLastRemoteSnapshotVersion(txn).next(function(lastRemoteSnapshotVersion) {
        return localStoreImpl.targetCache.setTargetsMetadata(txn, txn.currentSequenceNumber, remoteVersion);
      });
      promises.push(updateRemoteVersion);
    }
    return PersistencePromise.waitFor(promises).next(function() {
      return documentBuffer.apply(txn);
    }).next(function() {
      return localStoreImpl.localDocuments.applyLocalViewToDocuments(txn, changedDocs);
    }).next(function() {
      return changedDocs;
    });
  }).then(function(changedDocs) {
    localStoreImpl.targetDataByTarget = newTargetDataByTargetMap;
    return changedDocs;
  });
}
function populateDocumentChangeBuffer(txn, documentBuffer, documents, globalVersion, documentVersions) {
  var updatedKeys = documentKeySet();
  documents.forEach(function(k) {
    return updatedKeys = updatedKeys.add(k);
  });
  return documentBuffer.getEntries(txn, updatedKeys).next(function(existingDocs) {
    var changedDocs = mutableDocumentMap();
    documents.forEach(function(key, doc2) {
      var existingDoc = existingDocs.get(key);
      var docReadTime = (documentVersions === null || documentVersions === void 0 ? void 0 : documentVersions.get(key)) || globalVersion;
      if (doc2.isNoDocument() && doc2.version.isEqual(SnapshotVersion.min())) {
        documentBuffer.removeEntry(key, docReadTime);
        changedDocs = changedDocs.insert(key, doc2);
      } else if (!existingDoc.isValidDocument() || doc2.version.compareTo(existingDoc.version) > 0 || doc2.version.compareTo(existingDoc.version) === 0 && existingDoc.hasPendingWrites) {
        documentBuffer.addEntry(doc2, docReadTime);
        changedDocs = changedDocs.insert(key, doc2);
      } else {
        logDebug(LOG_TAG$c, "Ignoring outdated watch update for ", key, ". Current version:", existingDoc.version, " Watch version:", doc2.version);
      }
    });
    return changedDocs;
  });
}
function shouldPersistTargetData(oldTargetData, newTargetData, change) {
  hardAssert(newTargetData.resumeToken.approximateByteSize() > 0);
  if (oldTargetData.resumeToken.approximateByteSize() === 0) {
    return true;
  }
  var timeDelta = newTargetData.snapshotVersion.toMicroseconds() - oldTargetData.snapshotVersion.toMicroseconds();
  if (timeDelta >= RESUME_TOKEN_MAX_AGE_MICROS) {
    return true;
  }
  var changes = change.addedDocuments.size + change.modifiedDocuments.size + change.removedDocuments.size;
  return changes > 0;
}
function localStoreNotifyLocalViewChanges(localStore, viewChanges) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var localStoreImpl, e_2, _i, viewChanges_1, viewChange, targetId, targetData, lastLimboFreeSnapshotVersion, updatedTargetData;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          localStoreImpl = debugCast(localStore);
          _d.label = 1;
        case 1:
          _d.trys.push([1, 3, , 4]);
          return [4, localStoreImpl.persistence.runTransaction("notifyLocalViewChanges", "readwrite", function(txn) {
            return PersistencePromise.forEach(viewChanges, function(viewChange2) {
              return PersistencePromise.forEach(viewChange2.addedKeys, function(key) {
                return localStoreImpl.persistence.referenceDelegate.addReference(txn, viewChange2.targetId, key);
              }).next(function() {
                return PersistencePromise.forEach(viewChange2.removedKeys, function(key) {
                  return localStoreImpl.persistence.referenceDelegate.removeReference(txn, viewChange2.targetId, key);
                });
              });
            });
          })];
        case 2:
          _d.sent();
          return [3, 4];
        case 3:
          e_2 = _d.sent();
          if (isIndexedDbTransactionError(e_2)) {
            logDebug(LOG_TAG$c, "Failed to update sequence numbers: " + e_2);
          } else {
            throw e_2;
          }
          return [3, 4];
        case 4:
          for (_i = 0, viewChanges_1 = viewChanges; _i < viewChanges_1.length; _i++) {
            viewChange = viewChanges_1[_i];
            targetId = viewChange.targetId;
            if (!viewChange.fromCache) {
              targetData = localStoreImpl.targetDataByTarget.get(targetId);
              lastLimboFreeSnapshotVersion = targetData.snapshotVersion;
              updatedTargetData = targetData.withLastLimboFreeSnapshotVersion(lastLimboFreeSnapshotVersion);
              localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetId, updatedTargetData);
            }
          }
          return [2];
      }
    });
  });
}
function localStoreGetNextMutationBatch(localStore, afterBatchId) {
  var localStoreImpl = debugCast(localStore);
  return localStoreImpl.persistence.runTransaction("Get next mutation batch", "readonly", function(txn) {
    if (afterBatchId === void 0) {
      afterBatchId = BATCHID_UNKNOWN;
    }
    return localStoreImpl.mutationQueue.getNextMutationBatchAfterBatchId(txn, afterBatchId);
  });
}
function localStoreReadDocument(localStore, key) {
  var localStoreImpl = debugCast(localStore);
  return localStoreImpl.persistence.runTransaction("read document", "readonly", function(txn) {
    return localStoreImpl.localDocuments.getDocument(txn, key);
  });
}
function localStoreAllocateTarget(localStore, target) {
  var localStoreImpl = debugCast(localStore);
  return localStoreImpl.persistence.runTransaction("Allocate target", "readwrite", function(txn) {
    var targetData;
    return localStoreImpl.targetCache.getTargetData(txn, target).next(function(cached) {
      if (cached) {
        targetData = cached;
        return PersistencePromise.resolve(targetData);
      } else {
        return localStoreImpl.targetCache.allocateTargetId(txn).next(function(targetId) {
          targetData = new TargetData(target, targetId, 0, txn.currentSequenceNumber);
          return localStoreImpl.targetCache.addTargetData(txn, targetData).next(function() {
            return targetData;
          });
        });
      }
    });
  }).then(function(targetData) {
    var cachedTargetData = localStoreImpl.targetDataByTarget.get(targetData.targetId);
    if (cachedTargetData === null || targetData.snapshotVersion.compareTo(cachedTargetData.snapshotVersion) > 0) {
      localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(targetData.targetId, targetData);
      localStoreImpl.targetIdByTarget.set(target, targetData.targetId);
    }
    return targetData;
  });
}
function localStoreGetTargetData(localStore, transaction, target) {
  var localStoreImpl = debugCast(localStore);
  var targetId = localStoreImpl.targetIdByTarget.get(target);
  if (targetId !== void 0) {
    return PersistencePromise.resolve(localStoreImpl.targetDataByTarget.get(targetId));
  } else {
    return localStoreImpl.targetCache.getTargetData(transaction, target);
  }
}
function localStoreReleaseTarget(localStore, targetId, keepPersistedTargetData) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var localStoreImpl, targetData, mode, e_3;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          localStoreImpl = debugCast(localStore);
          targetData = localStoreImpl.targetDataByTarget.get(targetId);
          mode = keepPersistedTargetData ? "readwrite" : "readwrite-primary";
          _d.label = 1;
        case 1:
          _d.trys.push([1, 4, , 5]);
          if (!!keepPersistedTargetData)
            return [3, 3];
          return [4, localStoreImpl.persistence.runTransaction("Release target", mode, function(txn) {
            return localStoreImpl.persistence.referenceDelegate.removeTarget(txn, targetData);
          })];
        case 2:
          _d.sent();
          _d.label = 3;
        case 3:
          return [3, 5];
        case 4:
          e_3 = _d.sent();
          if (isIndexedDbTransactionError(e_3)) {
            logDebug(LOG_TAG$c, "Failed to update sequence numbers for target " + targetId + ": " + e_3);
          } else {
            throw e_3;
          }
          return [3, 5];
        case 5:
          localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.remove(targetId);
          localStoreImpl.targetIdByTarget.delete(targetData.target);
          return [2];
      }
    });
  });
}
function localStoreExecuteQuery(localStore, query2, usePreviousResults) {
  var localStoreImpl = debugCast(localStore);
  var lastLimboFreeSnapshotVersion = SnapshotVersion.min();
  var remoteKeys = documentKeySet();
  return localStoreImpl.persistence.runTransaction("Execute query", "readonly", function(txn) {
    return localStoreGetTargetData(localStoreImpl, txn, queryToTarget(query2)).next(function(targetData) {
      if (targetData) {
        lastLimboFreeSnapshotVersion = targetData.lastLimboFreeSnapshotVersion;
        return localStoreImpl.targetCache.getMatchingKeysForTargetId(txn, targetData.targetId).next(function(result) {
          remoteKeys = result;
        });
      }
    }).next(function() {
      return localStoreImpl.queryEngine.getDocumentsMatchingQuery(txn, query2, usePreviousResults ? lastLimboFreeSnapshotVersion : SnapshotVersion.min(), usePreviousResults ? remoteKeys : documentKeySet());
    }).next(function(documents) {
      return { documents, remoteKeys };
    });
  });
}
function applyWriteToRemoteDocuments(localStoreImpl, txn, batchResult, documentBuffer) {
  var batch = batchResult.batch;
  var docKeys = batch.keys();
  var promiseChain = PersistencePromise.resolve();
  docKeys.forEach(function(docKey) {
    promiseChain = promiseChain.next(function() {
      return documentBuffer.getEntry(txn, docKey);
    }).next(function(doc2) {
      var ackVersion = batchResult.docVersions.get(docKey);
      hardAssert(ackVersion !== null);
      if (doc2.version.compareTo(ackVersion) < 0) {
        batch.applyToRemoteDocument(doc2, batchResult);
        if (doc2.isValidDocument()) {
          documentBuffer.addEntry(doc2, batchResult.commitVersion);
        }
      }
    });
  });
  return promiseChain.next(function() {
    return localStoreImpl.mutationQueue.removeMutationBatch(txn, batch);
  });
}
function localStoreLookupMutationDocuments(localStore, batchId) {
  var localStoreImpl = debugCast(localStore);
  var mutationQueueImpl = debugCast(localStoreImpl.mutationQueue);
  return localStoreImpl.persistence.runTransaction("Lookup mutation documents", "readonly", function(txn) {
    return mutationQueueImpl.lookupMutationKeys(txn, batchId).next(function(keys) {
      if (keys) {
        return localStoreImpl.localDocuments.getDocuments(txn, keys);
      } else {
        return PersistencePromise.resolve(null);
      }
    });
  });
}
function localStoreRemoveCachedMutationBatchMetadata(localStore, batchId) {
  var mutationQueueImpl = debugCast(debugCast(localStore, LocalStoreImpl).mutationQueue);
  mutationQueueImpl.removeCachedMutationKeys(batchId);
}
function localStoreGetActiveClients(localStore) {
  var persistenceImpl = debugCast(debugCast(localStore, LocalStoreImpl).persistence);
  return persistenceImpl.getActiveClients();
}
function localStoreGetCachedTarget(localStore, targetId) {
  var localStoreImpl = debugCast(localStore);
  var targetCacheImpl = debugCast(localStoreImpl.targetCache);
  var cachedTargetData = localStoreImpl.targetDataByTarget.get(targetId);
  if (cachedTargetData) {
    return Promise.resolve(cachedTargetData.target);
  } else {
    return localStoreImpl.persistence.runTransaction("Get target data", "readonly", function(txn) {
      return targetCacheImpl.getTargetDataForTarget(txn, targetId).next(function(targetData) {
        return targetData ? targetData.target : null;
      });
    });
  }
}
function localStoreGetNewDocumentChanges(localStore) {
  var localStoreImpl = debugCast(localStore);
  return localStoreImpl.persistence.runTransaction("Get new document changes", "readonly", function(txn) {
    return remoteDocumentCacheGetNewDocumentChanges(localStoreImpl.remoteDocuments, txn, localStoreImpl.lastDocumentChangeReadTime);
  }).then(function(_d) {
    var changedDocs = _d.changedDocs, readTime = _d.readTime;
    localStoreImpl.lastDocumentChangeReadTime = readTime;
    return changedDocs;
  });
}
function localStoreSynchronizeLastDocumentChangeReadTime(localStore) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var localStoreImpl;
    return tslib.__generator(this, function(_d) {
      localStoreImpl = debugCast(localStore);
      return [2, localStoreImpl.persistence.runTransaction("Synchronize last document change read time", "readonly", function(txn) {
        return remoteDocumentCacheGetLastReadTime(txn);
      }).then(function(readTime) {
        localStoreImpl.lastDocumentChangeReadTime = readTime;
      })];
    });
  });
}
function umbrellaTarget(bundleName) {
  return queryToTarget(newQueryForPath(ResourcePath.fromString("__bundle__/docs/" + bundleName)));
}
function localStoreApplyBundledDocuments(localStore, bundleConverter, documents, bundleName) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var localStoreImpl, documentKeys, documentMap2, versionMap, _i, documents_1, bundleDoc, documentKey, documentBuffer, umbrellaTargetData;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          localStoreImpl = debugCast(localStore);
          documentKeys = documentKeySet();
          documentMap2 = mutableDocumentMap();
          versionMap = documentVersionMap();
          for (_i = 0, documents_1 = documents; _i < documents_1.length; _i++) {
            bundleDoc = documents_1[_i];
            documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);
            if (bundleDoc.document) {
              documentKeys = documentKeys.add(documentKey);
            }
            documentMap2 = documentMap2.insert(documentKey, bundleConverter.toMutableDocument(bundleDoc));
            versionMap = versionMap.insert(documentKey, bundleConverter.toSnapshotVersion(bundleDoc.metadata.readTime));
          }
          documentBuffer = localStoreImpl.remoteDocuments.newChangeBuffer({
            trackRemovals: true
          });
          return [4, localStoreAllocateTarget(localStoreImpl, umbrellaTarget(bundleName))];
        case 1:
          umbrellaTargetData = _d.sent();
          return [2, localStoreImpl.persistence.runTransaction("Apply bundle documents", "readwrite", function(txn) {
            return populateDocumentChangeBuffer(txn, documentBuffer, documentMap2, SnapshotVersion.min(), versionMap).next(function(changedDocs) {
              documentBuffer.apply(txn);
              return changedDocs;
            }).next(function(changedDocs) {
              return localStoreImpl.targetCache.removeMatchingKeysForTargetId(txn, umbrellaTargetData.targetId).next(function() {
                return localStoreImpl.targetCache.addMatchingKeys(txn, documentKeys, umbrellaTargetData.targetId);
              }).next(function() {
                return localStoreImpl.localDocuments.applyLocalViewToDocuments(txn, changedDocs);
              }).next(function() {
                return changedDocs;
              });
            });
          })];
      }
    });
  });
}
function localStoreHasNewerBundle(localStore, bundleMetadata) {
  var localStoreImpl = debugCast(localStore);
  var currentReadTime = fromVersion(bundleMetadata.createTime);
  return localStoreImpl.persistence.runTransaction("hasNewerBundle", "readonly", function(transaction) {
    return localStoreImpl.bundleCache.getBundleMetadata(transaction, bundleMetadata.id);
  }).then(function(cached) {
    return !!cached && cached.createTime.compareTo(currentReadTime) >= 0;
  });
}
function localStoreSaveBundle(localStore, bundleMetadata) {
  var localStoreImpl = debugCast(localStore);
  return localStoreImpl.persistence.runTransaction("Save bundle", "readwrite", function(transaction) {
    return localStoreImpl.bundleCache.saveBundleMetadata(transaction, bundleMetadata);
  });
}
function localStoreGetNamedQuery(localStore, queryName) {
  var localStoreImpl = debugCast(localStore);
  return localStoreImpl.persistence.runTransaction("Get named query", "readonly", function(transaction) {
    return localStoreImpl.bundleCache.getNamedQuery(transaction, queryName);
  });
}
function localStoreSaveNamedQuery(localStore, query2, documents) {
  if (documents === void 0) {
    documents = documentKeySet();
  }
  return tslib.__awaiter(this, void 0, void 0, function() {
    var allocated, localStoreImpl;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          return [4, localStoreAllocateTarget(localStore, queryToTarget(fromBundledQuery(query2.bundledQuery)))];
        case 1:
          allocated = _d.sent();
          localStoreImpl = debugCast(localStore);
          return [2, localStoreImpl.persistence.runTransaction("Save named query", "readwrite", function(transaction) {
            var readTime = fromVersion(query2.readTime);
            if (allocated.snapshotVersion.compareTo(readTime) >= 0) {
              return localStoreImpl.bundleCache.saveNamedQuery(transaction, query2);
            }
            var newTargetData = allocated.withResumeToken(ByteString.EMPTY_BYTE_STRING, readTime);
            localStoreImpl.targetDataByTarget = localStoreImpl.targetDataByTarget.insert(newTargetData.targetId, newTargetData);
            return localStoreImpl.targetCache.updateTargetData(transaction, newTargetData).next(function() {
              return localStoreImpl.targetCache.removeMatchingKeysForTargetId(transaction, allocated.targetId);
            }).next(function() {
              return localStoreImpl.targetCache.addMatchingKeys(transaction, documents, allocated.targetId);
            }).next(function() {
              return localStoreImpl.bundleCache.saveNamedQuery(transaction, query2);
            });
          })];
      }
    });
  });
}
var MemoryBundleCache = function() {
  function MemoryBundleCache2(serializer) {
    this.serializer = serializer;
    this.bundles = new Map();
    this.namedQueries = new Map();
  }
  MemoryBundleCache2.prototype.getBundleMetadata = function(transaction, bundleId) {
    return PersistencePromise.resolve(this.bundles.get(bundleId));
  };
  MemoryBundleCache2.prototype.saveBundleMetadata = function(transaction, bundleMetadata) {
    this.bundles.set(bundleMetadata.id, fromBundleMetadata(bundleMetadata));
    return PersistencePromise.resolve();
  };
  MemoryBundleCache2.prototype.getNamedQuery = function(transaction, queryName) {
    return PersistencePromise.resolve(this.namedQueries.get(queryName));
  };
  MemoryBundleCache2.prototype.saveNamedQuery = function(transaction, query2) {
    this.namedQueries.set(query2.name, fromProtoNamedQuery(query2));
    return PersistencePromise.resolve();
  };
  return MemoryBundleCache2;
}();
var ReferenceSet = function() {
  function ReferenceSet2() {
    this.refsByKey = new SortedSet(DocReference.compareByKey);
    this.refsByTarget = new SortedSet(DocReference.compareByTargetId);
  }
  ReferenceSet2.prototype.isEmpty = function() {
    return this.refsByKey.isEmpty();
  };
  ReferenceSet2.prototype.addReference = function(key, id) {
    var ref = new DocReference(key, id);
    this.refsByKey = this.refsByKey.add(ref);
    this.refsByTarget = this.refsByTarget.add(ref);
  };
  ReferenceSet2.prototype.addReferences = function(keys, id) {
    var _this = this;
    keys.forEach(function(key) {
      return _this.addReference(key, id);
    });
  };
  ReferenceSet2.prototype.removeReference = function(key, id) {
    this.removeRef(new DocReference(key, id));
  };
  ReferenceSet2.prototype.removeReferences = function(keys, id) {
    var _this = this;
    keys.forEach(function(key) {
      return _this.removeReference(key, id);
    });
  };
  ReferenceSet2.prototype.removeReferencesForId = function(id) {
    var _this = this;
    var emptyKey = new DocumentKey(new ResourcePath([]));
    var startRef = new DocReference(emptyKey, id);
    var endRef = new DocReference(emptyKey, id + 1);
    var keys = [];
    this.refsByTarget.forEachInRange([startRef, endRef], function(ref) {
      _this.removeRef(ref);
      keys.push(ref.key);
    });
    return keys;
  };
  ReferenceSet2.prototype.removeAllReferences = function() {
    var _this = this;
    this.refsByKey.forEach(function(ref) {
      return _this.removeRef(ref);
    });
  };
  ReferenceSet2.prototype.removeRef = function(ref) {
    this.refsByKey = this.refsByKey.delete(ref);
    this.refsByTarget = this.refsByTarget.delete(ref);
  };
  ReferenceSet2.prototype.referencesForId = function(id) {
    var emptyKey = new DocumentKey(new ResourcePath([]));
    var startRef = new DocReference(emptyKey, id);
    var endRef = new DocReference(emptyKey, id + 1);
    var keys = documentKeySet();
    this.refsByTarget.forEachInRange([startRef, endRef], function(ref) {
      keys = keys.add(ref.key);
    });
    return keys;
  };
  ReferenceSet2.prototype.containsKey = function(key) {
    var ref = new DocReference(key, 0);
    var firstRef = this.refsByKey.firstAfterOrEqual(ref);
    return firstRef !== null && key.isEqual(firstRef.key);
  };
  return ReferenceSet2;
}();
var DocReference = function() {
  function DocReference2(key, targetOrBatchId) {
    this.key = key;
    this.targetOrBatchId = targetOrBatchId;
  }
  DocReference2.compareByKey = function(left, right) {
    return DocumentKey.comparator(left.key, right.key) || primitiveComparator(left.targetOrBatchId, right.targetOrBatchId);
  };
  DocReference2.compareByTargetId = function(left, right) {
    return primitiveComparator(left.targetOrBatchId, right.targetOrBatchId) || DocumentKey.comparator(left.key, right.key);
  };
  return DocReference2;
}();
var MemoryMutationQueue = function() {
  function MemoryMutationQueue2(indexManager, referenceDelegate) {
    this.indexManager = indexManager;
    this.referenceDelegate = referenceDelegate;
    this.mutationQueue = [];
    this.nextBatchId = 1;
    this.batchesByDocumentKey = new SortedSet(DocReference.compareByKey);
  }
  MemoryMutationQueue2.prototype.checkEmpty = function(transaction) {
    return PersistencePromise.resolve(this.mutationQueue.length === 0);
  };
  MemoryMutationQueue2.prototype.addMutationBatch = function(transaction, localWriteTime, baseMutations, mutations) {
    var batchId = this.nextBatchId;
    this.nextBatchId++;
    if (this.mutationQueue.length > 0) {
      this.mutationQueue[this.mutationQueue.length - 1];
    }
    var batch = new MutationBatch(batchId, localWriteTime, baseMutations, mutations);
    this.mutationQueue.push(batch);
    for (var _i = 0, mutations_3 = mutations; _i < mutations_3.length; _i++) {
      var mutation = mutations_3[_i];
      this.batchesByDocumentKey = this.batchesByDocumentKey.add(new DocReference(mutation.key, batchId));
      this.indexManager.addToCollectionParentIndex(transaction, mutation.key.path.popLast());
    }
    return PersistencePromise.resolve(batch);
  };
  MemoryMutationQueue2.prototype.lookupMutationBatch = function(transaction, batchId) {
    return PersistencePromise.resolve(this.findMutationBatch(batchId));
  };
  MemoryMutationQueue2.prototype.getNextMutationBatchAfterBatchId = function(transaction, batchId) {
    var nextBatchId = batchId + 1;
    var rawIndex = this.indexOfBatchId(nextBatchId);
    var index2 = rawIndex < 0 ? 0 : rawIndex;
    return PersistencePromise.resolve(this.mutationQueue.length > index2 ? this.mutationQueue[index2] : null);
  };
  MemoryMutationQueue2.prototype.getHighestUnacknowledgedBatchId = function() {
    return PersistencePromise.resolve(this.mutationQueue.length === 0 ? BATCHID_UNKNOWN : this.nextBatchId - 1);
  };
  MemoryMutationQueue2.prototype.getAllMutationBatches = function(transaction) {
    return PersistencePromise.resolve(this.mutationQueue.slice());
  };
  MemoryMutationQueue2.prototype.getAllMutationBatchesAffectingDocumentKey = function(transaction, documentKey) {
    var _this = this;
    var start = new DocReference(documentKey, 0);
    var end2 = new DocReference(documentKey, Number.POSITIVE_INFINITY);
    var result = [];
    this.batchesByDocumentKey.forEachInRange([start, end2], function(ref) {
      var batch = _this.findMutationBatch(ref.targetOrBatchId);
      result.push(batch);
    });
    return PersistencePromise.resolve(result);
  };
  MemoryMutationQueue2.prototype.getAllMutationBatchesAffectingDocumentKeys = function(transaction, documentKeys) {
    var _this = this;
    var uniqueBatchIDs = new SortedSet(primitiveComparator);
    documentKeys.forEach(function(documentKey) {
      var start = new DocReference(documentKey, 0);
      var end2 = new DocReference(documentKey, Number.POSITIVE_INFINITY);
      _this.batchesByDocumentKey.forEachInRange([start, end2], function(ref) {
        uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);
      });
    });
    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));
  };
  MemoryMutationQueue2.prototype.getAllMutationBatchesAffectingQuery = function(transaction, query2) {
    var prefix = query2.path;
    var immediateChildrenPathLength = prefix.length + 1;
    var startPath = prefix;
    if (!DocumentKey.isDocumentKey(startPath)) {
      startPath = startPath.child("");
    }
    var start = new DocReference(new DocumentKey(startPath), 0);
    var uniqueBatchIDs = new SortedSet(primitiveComparator);
    this.batchesByDocumentKey.forEachWhile(function(ref) {
      var rowKeyPath = ref.key.path;
      if (!prefix.isPrefixOf(rowKeyPath)) {
        return false;
      } else {
        if (rowKeyPath.length === immediateChildrenPathLength) {
          uniqueBatchIDs = uniqueBatchIDs.add(ref.targetOrBatchId);
        }
        return true;
      }
    }, start);
    return PersistencePromise.resolve(this.findMutationBatches(uniqueBatchIDs));
  };
  MemoryMutationQueue2.prototype.findMutationBatches = function(batchIDs) {
    var _this = this;
    var result = [];
    batchIDs.forEach(function(batchId) {
      var batch = _this.findMutationBatch(batchId);
      if (batch !== null) {
        result.push(batch);
      }
    });
    return result;
  };
  MemoryMutationQueue2.prototype.removeMutationBatch = function(transaction, batch) {
    var _this = this;
    var batchIndex = this.indexOfExistingBatchId(batch.batchId, "removed");
    hardAssert(batchIndex === 0);
    this.mutationQueue.shift();
    var references = this.batchesByDocumentKey;
    return PersistencePromise.forEach(batch.mutations, function(mutation) {
      var ref = new DocReference(mutation.key, batch.batchId);
      references = references.delete(ref);
      return _this.referenceDelegate.markPotentiallyOrphaned(transaction, mutation.key);
    }).next(function() {
      _this.batchesByDocumentKey = references;
    });
  };
  MemoryMutationQueue2.prototype.removeCachedMutationKeys = function(batchId) {
  };
  MemoryMutationQueue2.prototype.containsKey = function(txn, key) {
    var ref = new DocReference(key, 0);
    var firstRef = this.batchesByDocumentKey.firstAfterOrEqual(ref);
    return PersistencePromise.resolve(key.isEqual(firstRef && firstRef.key));
  };
  MemoryMutationQueue2.prototype.performConsistencyCheck = function(txn) {
    if (this.mutationQueue.length === 0)
      ;
    return PersistencePromise.resolve();
  };
  MemoryMutationQueue2.prototype.indexOfExistingBatchId = function(batchId, action) {
    var index2 = this.indexOfBatchId(batchId);
    return index2;
  };
  MemoryMutationQueue2.prototype.indexOfBatchId = function(batchId) {
    if (this.mutationQueue.length === 0) {
      return 0;
    }
    var firstBatchId = this.mutationQueue[0].batchId;
    return batchId - firstBatchId;
  };
  MemoryMutationQueue2.prototype.findMutationBatch = function(batchId) {
    var index2 = this.indexOfBatchId(batchId);
    if (index2 < 0 || index2 >= this.mutationQueue.length) {
      return null;
    }
    var batch = this.mutationQueue[index2];
    return batch;
  };
  return MemoryMutationQueue2;
}();
function documentEntryMap() {
  return new SortedMap(DocumentKey.comparator);
}
var MemoryRemoteDocumentCacheImpl = function() {
  function MemoryRemoteDocumentCacheImpl2(indexManager, sizer) {
    this.indexManager = indexManager;
    this.sizer = sizer;
    this.docs = documentEntryMap();
    this.size = 0;
  }
  MemoryRemoteDocumentCacheImpl2.prototype.addEntry = function(transaction, doc2, readTime) {
    var key = doc2.key;
    var entry = this.docs.get(key);
    var previousSize = entry ? entry.size : 0;
    var currentSize = this.sizer(doc2);
    this.docs = this.docs.insert(key, {
      document: doc2.clone(),
      size: currentSize,
      readTime
    });
    this.size += currentSize - previousSize;
    return this.indexManager.addToCollectionParentIndex(transaction, key.path.popLast());
  };
  MemoryRemoteDocumentCacheImpl2.prototype.removeEntry = function(documentKey) {
    var entry = this.docs.get(documentKey);
    if (entry) {
      this.docs = this.docs.remove(documentKey);
      this.size -= entry.size;
    }
  };
  MemoryRemoteDocumentCacheImpl2.prototype.getEntry = function(transaction, documentKey) {
    var entry = this.docs.get(documentKey);
    return PersistencePromise.resolve(entry ? entry.document.clone() : MutableDocument.newInvalidDocument(documentKey));
  };
  MemoryRemoteDocumentCacheImpl2.prototype.getEntries = function(transaction, documentKeys) {
    var _this = this;
    var results = mutableDocumentMap();
    documentKeys.forEach(function(documentKey) {
      var entry = _this.docs.get(documentKey);
      results = results.insert(documentKey, entry ? entry.document.clone() : MutableDocument.newInvalidDocument(documentKey));
    });
    return PersistencePromise.resolve(results);
  };
  MemoryRemoteDocumentCacheImpl2.prototype.getDocumentsMatchingQuery = function(transaction, query2, sinceReadTime) {
    var results = mutableDocumentMap();
    var prefix = new DocumentKey(query2.path.child(""));
    var iterator = this.docs.getIteratorFrom(prefix);
    while (iterator.hasNext()) {
      var _d = iterator.getNext(), key = _d.key, _e = _d.value, document_3 = _e.document, readTime = _e.readTime;
      if (!query2.path.isPrefixOf(key.path)) {
        break;
      }
      if (readTime.compareTo(sinceReadTime) <= 0) {
        continue;
      }
      if (!queryMatches(query2, document_3)) {
        continue;
      }
      results = results.insert(document_3.key, document_3.clone());
    }
    return PersistencePromise.resolve(results);
  };
  MemoryRemoteDocumentCacheImpl2.prototype.forEachDocumentKey = function(transaction, f) {
    return PersistencePromise.forEach(this.docs, function(key) {
      return f(key);
    });
  };
  MemoryRemoteDocumentCacheImpl2.prototype.newChangeBuffer = function(options2) {
    return new MemoryRemoteDocumentChangeBuffer(this);
  };
  MemoryRemoteDocumentCacheImpl2.prototype.getSize = function(txn) {
    return PersistencePromise.resolve(this.size);
  };
  return MemoryRemoteDocumentCacheImpl2;
}();
function newMemoryRemoteDocumentCache(indexManager, sizer) {
  return new MemoryRemoteDocumentCacheImpl(indexManager, sizer);
}
var MemoryRemoteDocumentChangeBuffer = function(_super) {
  tslib.__extends(MemoryRemoteDocumentChangeBuffer2, _super);
  function MemoryRemoteDocumentChangeBuffer2(documentCache) {
    var _this = _super.call(this) || this;
    _this.documentCache = documentCache;
    return _this;
  }
  MemoryRemoteDocumentChangeBuffer2.prototype.applyChanges = function(transaction) {
    var _this = this;
    var promises = [];
    this.changes.forEach(function(key, doc2) {
      if (doc2.document.isValidDocument()) {
        promises.push(_this.documentCache.addEntry(transaction, doc2.document, _this.getReadTime(key)));
      } else {
        _this.documentCache.removeEntry(key);
      }
    });
    return PersistencePromise.waitFor(promises);
  };
  MemoryRemoteDocumentChangeBuffer2.prototype.getFromCache = function(transaction, documentKey) {
    return this.documentCache.getEntry(transaction, documentKey);
  };
  MemoryRemoteDocumentChangeBuffer2.prototype.getAllFromCache = function(transaction, documentKeys) {
    return this.documentCache.getEntries(transaction, documentKeys);
  };
  return MemoryRemoteDocumentChangeBuffer2;
}(RemoteDocumentChangeBuffer);
var MemoryTargetCache = function() {
  function MemoryTargetCache2(persistence) {
    this.persistence = persistence;
    this.targets = new ObjectMap(function(t) {
      return canonifyTarget(t);
    }, targetEquals);
    this.lastRemoteSnapshotVersion = SnapshotVersion.min();
    this.highestTargetId = 0;
    this.highestSequenceNumber = 0;
    this.references = new ReferenceSet();
    this.targetCount = 0;
    this.targetIdGenerator = TargetIdGenerator.forTargetCache();
  }
  MemoryTargetCache2.prototype.forEachTarget = function(txn, f) {
    this.targets.forEach(function(_, targetData) {
      return f(targetData);
    });
    return PersistencePromise.resolve();
  };
  MemoryTargetCache2.prototype.getLastRemoteSnapshotVersion = function(transaction) {
    return PersistencePromise.resolve(this.lastRemoteSnapshotVersion);
  };
  MemoryTargetCache2.prototype.getHighestSequenceNumber = function(transaction) {
    return PersistencePromise.resolve(this.highestSequenceNumber);
  };
  MemoryTargetCache2.prototype.allocateTargetId = function(transaction) {
    this.highestTargetId = this.targetIdGenerator.next();
    return PersistencePromise.resolve(this.highestTargetId);
  };
  MemoryTargetCache2.prototype.setTargetsMetadata = function(transaction, highestListenSequenceNumber, lastRemoteSnapshotVersion) {
    if (lastRemoteSnapshotVersion) {
      this.lastRemoteSnapshotVersion = lastRemoteSnapshotVersion;
    }
    if (highestListenSequenceNumber > this.highestSequenceNumber) {
      this.highestSequenceNumber = highestListenSequenceNumber;
    }
    return PersistencePromise.resolve();
  };
  MemoryTargetCache2.prototype.saveTargetData = function(targetData) {
    this.targets.set(targetData.target, targetData);
    var targetId = targetData.targetId;
    if (targetId > this.highestTargetId) {
      this.targetIdGenerator = new TargetIdGenerator(targetId);
      this.highestTargetId = targetId;
    }
    if (targetData.sequenceNumber > this.highestSequenceNumber) {
      this.highestSequenceNumber = targetData.sequenceNumber;
    }
  };
  MemoryTargetCache2.prototype.addTargetData = function(transaction, targetData) {
    this.saveTargetData(targetData);
    this.targetCount += 1;
    return PersistencePromise.resolve();
  };
  MemoryTargetCache2.prototype.updateTargetData = function(transaction, targetData) {
    this.saveTargetData(targetData);
    return PersistencePromise.resolve();
  };
  MemoryTargetCache2.prototype.removeTargetData = function(transaction, targetData) {
    this.targets.delete(targetData.target);
    this.references.removeReferencesForId(targetData.targetId);
    this.targetCount -= 1;
    return PersistencePromise.resolve();
  };
  MemoryTargetCache2.prototype.removeTargets = function(transaction, upperBound, activeTargetIds) {
    var _this = this;
    var count = 0;
    var removals = [];
    this.targets.forEach(function(key, targetData) {
      if (targetData.sequenceNumber <= upperBound && activeTargetIds.get(targetData.targetId) === null) {
        _this.targets.delete(key);
        removals.push(_this.removeMatchingKeysForTargetId(transaction, targetData.targetId));
        count++;
      }
    });
    return PersistencePromise.waitFor(removals).next(function() {
      return count;
    });
  };
  MemoryTargetCache2.prototype.getTargetCount = function(transaction) {
    return PersistencePromise.resolve(this.targetCount);
  };
  MemoryTargetCache2.prototype.getTargetData = function(transaction, target) {
    var targetData = this.targets.get(target) || null;
    return PersistencePromise.resolve(targetData);
  };
  MemoryTargetCache2.prototype.addMatchingKeys = function(txn, keys, targetId) {
    this.references.addReferences(keys, targetId);
    return PersistencePromise.resolve();
  };
  MemoryTargetCache2.prototype.removeMatchingKeys = function(txn, keys, targetId) {
    this.references.removeReferences(keys, targetId);
    var referenceDelegate = this.persistence.referenceDelegate;
    var promises = [];
    if (referenceDelegate) {
      keys.forEach(function(key) {
        promises.push(referenceDelegate.markPotentiallyOrphaned(txn, key));
      });
    }
    return PersistencePromise.waitFor(promises);
  };
  MemoryTargetCache2.prototype.removeMatchingKeysForTargetId = function(txn, targetId) {
    this.references.removeReferencesForId(targetId);
    return PersistencePromise.resolve();
  };
  MemoryTargetCache2.prototype.getMatchingKeysForTargetId = function(txn, targetId) {
    var matchingKeys = this.references.referencesForId(targetId);
    return PersistencePromise.resolve(matchingKeys);
  };
  MemoryTargetCache2.prototype.containsKey = function(txn, key) {
    return PersistencePromise.resolve(this.references.containsKey(key));
  };
  return MemoryTargetCache2;
}();
var LOG_TAG$b = "MemoryPersistence";
var MemoryPersistence = function() {
  function MemoryPersistence2(referenceDelegateFactory, serializer) {
    var _this = this;
    this.mutationQueues = {};
    this.listenSequence = new ListenSequence(0);
    this._started = false;
    this._started = true;
    this.referenceDelegate = referenceDelegateFactory(this);
    this.targetCache = new MemoryTargetCache(this);
    var sizer = function(doc2) {
      return _this.referenceDelegate.documentSize(doc2);
    };
    this.indexManager = new MemoryIndexManager();
    this.remoteDocumentCache = newMemoryRemoteDocumentCache(this.indexManager, sizer);
    this.serializer = new LocalSerializer(serializer);
    this.bundleCache = new MemoryBundleCache(this.serializer);
  }
  MemoryPersistence2.prototype.start = function() {
    return Promise.resolve();
  };
  MemoryPersistence2.prototype.shutdown = function() {
    this._started = false;
    return Promise.resolve();
  };
  Object.defineProperty(MemoryPersistence2.prototype, "started", {
    get: function() {
      return this._started;
    },
    enumerable: false,
    configurable: true
  });
  MemoryPersistence2.prototype.setDatabaseDeletedListener = function() {
  };
  MemoryPersistence2.prototype.setNetworkEnabled = function() {
  };
  MemoryPersistence2.prototype.getIndexManager = function() {
    return this.indexManager;
  };
  MemoryPersistence2.prototype.getMutationQueue = function(user2) {
    var queue = this.mutationQueues[user2.toKey()];
    if (!queue) {
      queue = new MemoryMutationQueue(this.indexManager, this.referenceDelegate);
      this.mutationQueues[user2.toKey()] = queue;
    }
    return queue;
  };
  MemoryPersistence2.prototype.getTargetCache = function() {
    return this.targetCache;
  };
  MemoryPersistence2.prototype.getRemoteDocumentCache = function() {
    return this.remoteDocumentCache;
  };
  MemoryPersistence2.prototype.getBundleCache = function() {
    return this.bundleCache;
  };
  MemoryPersistence2.prototype.runTransaction = function(action, mode, transactionOperation) {
    var _this = this;
    logDebug(LOG_TAG$b, "Starting transaction:", action);
    var txn = new MemoryTransaction(this.listenSequence.next());
    this.referenceDelegate.onTransactionStarted();
    return transactionOperation(txn).next(function(result) {
      return _this.referenceDelegate.onTransactionCommitted(txn).next(function() {
        return result;
      });
    }).toPromise().then(function(result) {
      txn.raiseOnCommittedEvent();
      return result;
    });
  };
  MemoryPersistence2.prototype.mutationQueuesContainKey = function(transaction, key) {
    return PersistencePromise.or(Object.values(this.mutationQueues).map(function(queue) {
      return function() {
        return queue.containsKey(transaction, key);
      };
    }));
  };
  return MemoryPersistence2;
}();
var MemoryTransaction = function(_super) {
  tslib.__extends(MemoryTransaction2, _super);
  function MemoryTransaction2(currentSequenceNumber) {
    var _this = _super.call(this) || this;
    _this.currentSequenceNumber = currentSequenceNumber;
    return _this;
  }
  return MemoryTransaction2;
}(PersistenceTransaction);
var MemoryEagerDelegate = function() {
  function MemoryEagerDelegate2(persistence) {
    this.persistence = persistence;
    this.localViewReferences = new ReferenceSet();
    this._orphanedDocuments = null;
  }
  MemoryEagerDelegate2.factory = function(persistence) {
    return new MemoryEagerDelegate2(persistence);
  };
  Object.defineProperty(MemoryEagerDelegate2.prototype, "orphanedDocuments", {
    get: function() {
      if (!this._orphanedDocuments) {
        throw fail();
      } else {
        return this._orphanedDocuments;
      }
    },
    enumerable: false,
    configurable: true
  });
  MemoryEagerDelegate2.prototype.addReference = function(txn, targetId, key) {
    this.localViewReferences.addReference(key, targetId);
    this.orphanedDocuments.delete(key.toString());
    return PersistencePromise.resolve();
  };
  MemoryEagerDelegate2.prototype.removeReference = function(txn, targetId, key) {
    this.localViewReferences.removeReference(key, targetId);
    this.orphanedDocuments.add(key.toString());
    return PersistencePromise.resolve();
  };
  MemoryEagerDelegate2.prototype.markPotentiallyOrphaned = function(txn, key) {
    this.orphanedDocuments.add(key.toString());
    return PersistencePromise.resolve();
  };
  MemoryEagerDelegate2.prototype.removeTarget = function(txn, targetData) {
    var _this = this;
    var orphaned = this.localViewReferences.removeReferencesForId(targetData.targetId);
    orphaned.forEach(function(key) {
      return _this.orphanedDocuments.add(key.toString());
    });
    var cache = this.persistence.getTargetCache();
    return cache.getMatchingKeysForTargetId(txn, targetData.targetId).next(function(keys) {
      keys.forEach(function(key) {
        return _this.orphanedDocuments.add(key.toString());
      });
    }).next(function() {
      return cache.removeTargetData(txn, targetData);
    });
  };
  MemoryEagerDelegate2.prototype.onTransactionStarted = function() {
    this._orphanedDocuments = new Set();
  };
  MemoryEagerDelegate2.prototype.onTransactionCommitted = function(txn) {
    var _this = this;
    var cache = this.persistence.getRemoteDocumentCache();
    var changeBuffer = cache.newChangeBuffer();
    return PersistencePromise.forEach(this.orphanedDocuments, function(path2) {
      var key = DocumentKey.fromPath(path2);
      return _this.isReferenced(txn, key).next(function(isReferenced) {
        if (!isReferenced) {
          changeBuffer.removeEntry(key);
        }
      });
    }).next(function() {
      _this._orphanedDocuments = null;
      return changeBuffer.apply(txn);
    });
  };
  MemoryEagerDelegate2.prototype.updateLimboDocument = function(txn, key) {
    var _this = this;
    return this.isReferenced(txn, key).next(function(isReferenced) {
      if (isReferenced) {
        _this.orphanedDocuments.delete(key.toString());
      } else {
        _this.orphanedDocuments.add(key.toString());
      }
    });
  };
  MemoryEagerDelegate2.prototype.documentSize = function(doc2) {
    return 0;
  };
  MemoryEagerDelegate2.prototype.isReferenced = function(txn, key) {
    var _this = this;
    return PersistencePromise.or([
      function() {
        return PersistencePromise.resolve(_this.localViewReferences.containsKey(key));
      },
      function() {
        return _this.persistence.getTargetCache().containsKey(txn, key);
      },
      function() {
        return _this.persistence.mutationQueuesContainKey(txn, key);
      }
    ]);
  };
  return MemoryEagerDelegate2;
}();
var QueryEngine = function() {
  function QueryEngine2() {
  }
  QueryEngine2.prototype.setLocalDocumentsView = function(localDocuments) {
    this.localDocumentsView = localDocuments;
  };
  QueryEngine2.prototype.getDocumentsMatchingQuery = function(transaction, query2, lastLimboFreeSnapshotVersion, remoteKeys) {
    var _this = this;
    if (matchesAllDocuments(query2)) {
      return this.executeFullCollectionScan(transaction, query2);
    }
    if (lastLimboFreeSnapshotVersion.isEqual(SnapshotVersion.min())) {
      return this.executeFullCollectionScan(transaction, query2);
    }
    return this.localDocumentsView.getDocuments(transaction, remoteKeys).next(function(documents) {
      var previousResults = _this.applyQuery(query2, documents);
      if ((hasLimitToFirst(query2) || hasLimitToLast(query2)) && _this.needsRefill(query2.limitType, previousResults, remoteKeys, lastLimboFreeSnapshotVersion)) {
        return _this.executeFullCollectionScan(transaction, query2);
      }
      if (getLogLevel() <= logger.LogLevel.DEBUG) {
        logDebug("QueryEngine", "Re-using previous result from %s to execute query: %s", lastLimboFreeSnapshotVersion.toString(), stringifyQuery(query2));
      }
      return _this.localDocumentsView.getDocumentsMatchingQuery(transaction, query2, lastLimboFreeSnapshotVersion).next(function(updatedResults) {
        previousResults.forEach(function(doc2) {
          updatedResults = updatedResults.insert(doc2.key, doc2);
        });
        return updatedResults;
      });
    });
  };
  QueryEngine2.prototype.applyQuery = function(query2, documents) {
    var queryResults = new SortedSet(newQueryComparator(query2));
    documents.forEach(function(_, maybeDoc) {
      if (queryMatches(query2, maybeDoc)) {
        queryResults = queryResults.add(maybeDoc);
      }
    });
    return queryResults;
  };
  QueryEngine2.prototype.needsRefill = function(limitType, sortedPreviousResults, remoteKeys, limboFreeSnapshotVersion) {
    if (remoteKeys.size !== sortedPreviousResults.size) {
      return true;
    }
    var docAtLimitEdge = limitType === "F" ? sortedPreviousResults.last() : sortedPreviousResults.first();
    if (!docAtLimitEdge) {
      return false;
    }
    return docAtLimitEdge.hasPendingWrites || docAtLimitEdge.version.compareTo(limboFreeSnapshotVersion) > 0;
  };
  QueryEngine2.prototype.executeFullCollectionScan = function(transaction, query2) {
    if (getLogLevel() <= logger.LogLevel.DEBUG) {
      logDebug("QueryEngine", "Using full collection scan to execute query:", stringifyQuery(query2));
    }
    return this.localDocumentsView.getDocumentsMatchingQuery(transaction, query2, SnapshotVersion.min());
  };
  return QueryEngine2;
}();
var CLIENT_STATE_KEY_PREFIX = "firestore_clients";
function createWebStorageClientStateKey(persistenceKey, clientId) {
  return CLIENT_STATE_KEY_PREFIX + "_" + persistenceKey + "_" + clientId;
}
var MUTATION_BATCH_KEY_PREFIX = "firestore_mutations";
function createWebStorageMutationBatchKey(persistenceKey, user2, batchId) {
  var mutationKey = MUTATION_BATCH_KEY_PREFIX + "_" + persistenceKey + "_" + batchId;
  if (user2.isAuthenticated()) {
    mutationKey += "_" + user2.uid;
  }
  return mutationKey;
}
var QUERY_TARGET_KEY_PREFIX = "firestore_targets";
function createWebStorageQueryTargetMetadataKey(persistenceKey, targetId) {
  return QUERY_TARGET_KEY_PREFIX + "_" + persistenceKey + "_" + targetId;
}
var ONLINE_STATE_KEY_PREFIX = "firestore_online_state";
function createWebStorageOnlineStateKey(persistenceKey) {
  return ONLINE_STATE_KEY_PREFIX + "_" + persistenceKey;
}
var BUNDLE_LOADED_KEY_PREFIX = "firestore_bundle_loaded";
function createBundleLoadedKey(persistenceKey) {
  return BUNDLE_LOADED_KEY_PREFIX + "_" + persistenceKey;
}
var SEQUENCE_NUMBER_KEY_PREFIX = "firestore_sequence_number";
function createWebStorageSequenceNumberKey(persistenceKey) {
  return SEQUENCE_NUMBER_KEY_PREFIX + "_" + persistenceKey;
}
var LOG_TAG$a = "SharedClientState";
var MutationMetadata = function() {
  function MutationMetadata2(user2, batchId, state, error2) {
    this.user = user2;
    this.batchId = batchId;
    this.state = state;
    this.error = error2;
  }
  MutationMetadata2.fromWebStorageEntry = function(user2, batchId, value) {
    var mutationBatch = JSON.parse(value);
    var validData = typeof mutationBatch === "object" && ["pending", "acknowledged", "rejected"].indexOf(mutationBatch.state) !== -1 && (mutationBatch.error === void 0 || typeof mutationBatch.error === "object");
    var firestoreError = void 0;
    if (validData && mutationBatch.error) {
      validData = typeof mutationBatch.error.message === "string" && typeof mutationBatch.error.code === "string";
      if (validData) {
        firestoreError = new FirestoreError(mutationBatch.error.code, mutationBatch.error.message);
      }
    }
    if (validData) {
      return new MutationMetadata2(user2, batchId, mutationBatch.state, firestoreError);
    } else {
      logError(LOG_TAG$a, "Failed to parse mutation state for ID '" + batchId + "': " + value);
      return null;
    }
  };
  MutationMetadata2.prototype.toWebStorageJSON = function() {
    var batchMetadata = {
      state: this.state,
      updateTimeMs: Date.now()
    };
    if (this.error) {
      batchMetadata.error = {
        code: this.error.code,
        message: this.error.message
      };
    }
    return JSON.stringify(batchMetadata);
  };
  return MutationMetadata2;
}();
var QueryTargetMetadata = function() {
  function QueryTargetMetadata2(targetId, state, error2) {
    this.targetId = targetId;
    this.state = state;
    this.error = error2;
  }
  QueryTargetMetadata2.fromWebStorageEntry = function(targetId, value) {
    var targetState = JSON.parse(value);
    var validData = typeof targetState === "object" && ["not-current", "current", "rejected"].indexOf(targetState.state) !== -1 && (targetState.error === void 0 || typeof targetState.error === "object");
    var firestoreError = void 0;
    if (validData && targetState.error) {
      validData = typeof targetState.error.message === "string" && typeof targetState.error.code === "string";
      if (validData) {
        firestoreError = new FirestoreError(targetState.error.code, targetState.error.message);
      }
    }
    if (validData) {
      return new QueryTargetMetadata2(targetId, targetState.state, firestoreError);
    } else {
      logError(LOG_TAG$a, "Failed to parse target state for ID '" + targetId + "': " + value);
      return null;
    }
  };
  QueryTargetMetadata2.prototype.toWebStorageJSON = function() {
    var targetState = {
      state: this.state,
      updateTimeMs: Date.now()
    };
    if (this.error) {
      targetState.error = {
        code: this.error.code,
        message: this.error.message
      };
    }
    return JSON.stringify(targetState);
  };
  return QueryTargetMetadata2;
}();
var RemoteClientState = function() {
  function RemoteClientState2(clientId, activeTargetIds) {
    this.clientId = clientId;
    this.activeTargetIds = activeTargetIds;
  }
  RemoteClientState2.fromWebStorageEntry = function(clientId, value) {
    var clientState = JSON.parse(value);
    var validData = typeof clientState === "object" && clientState.activeTargetIds instanceof Array;
    var activeTargetIdsSet = targetIdSet();
    for (var i = 0; validData && i < clientState.activeTargetIds.length; ++i) {
      validData = isSafeInteger(clientState.activeTargetIds[i]);
      activeTargetIdsSet = activeTargetIdsSet.add(clientState.activeTargetIds[i]);
    }
    if (validData) {
      return new RemoteClientState2(clientId, activeTargetIdsSet);
    } else {
      logError(LOG_TAG$a, "Failed to parse client data for instance '" + clientId + "': " + value);
      return null;
    }
  };
  return RemoteClientState2;
}();
var SharedOnlineState = function() {
  function SharedOnlineState2(clientId, onlineState) {
    this.clientId = clientId;
    this.onlineState = onlineState;
  }
  SharedOnlineState2.fromWebStorageEntry = function(value) {
    var onlineState = JSON.parse(value);
    var validData = typeof onlineState === "object" && ["Unknown", "Online", "Offline"].indexOf(onlineState.onlineState) !== -1 && typeof onlineState.clientId === "string";
    if (validData) {
      return new SharedOnlineState2(onlineState.clientId, onlineState.onlineState);
    } else {
      logError(LOG_TAG$a, "Failed to parse online state: " + value);
      return null;
    }
  };
  return SharedOnlineState2;
}();
var LocalClientState = function() {
  function LocalClientState2() {
    this.activeTargetIds = targetIdSet();
  }
  LocalClientState2.prototype.addQueryTarget = function(targetId) {
    this.activeTargetIds = this.activeTargetIds.add(targetId);
  };
  LocalClientState2.prototype.removeQueryTarget = function(targetId) {
    this.activeTargetIds = this.activeTargetIds.delete(targetId);
  };
  LocalClientState2.prototype.toWebStorageJSON = function() {
    var data = {
      activeTargetIds: this.activeTargetIds.toArray(),
      updateTimeMs: Date.now()
    };
    return JSON.stringify(data);
  };
  return LocalClientState2;
}();
var WebStorageSharedClientState = function() {
  function WebStorageSharedClientState2(window2, queue, persistenceKey, localClientId, initialUser) {
    this.window = window2;
    this.queue = queue;
    this.persistenceKey = persistenceKey;
    this.localClientId = localClientId;
    this.syncEngine = null;
    this.onlineStateHandler = null;
    this.sequenceNumberHandler = null;
    this.storageListener = this.handleWebStorageEvent.bind(this);
    this.activeClients = new SortedMap(primitiveComparator);
    this.started = false;
    this.earlyEvents = [];
    var escapedPersistenceKey = persistenceKey.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
    this.storage = this.window.localStorage;
    this.currentUser = initialUser;
    this.localClientStorageKey = createWebStorageClientStateKey(this.persistenceKey, this.localClientId);
    this.sequenceNumberKey = createWebStorageSequenceNumberKey(this.persistenceKey);
    this.activeClients = this.activeClients.insert(this.localClientId, new LocalClientState());
    this.clientStateKeyRe = new RegExp("^" + CLIENT_STATE_KEY_PREFIX + "_" + escapedPersistenceKey + "_([^_]*)$");
    this.mutationBatchKeyRe = new RegExp("^" + MUTATION_BATCH_KEY_PREFIX + "_" + escapedPersistenceKey + "_(\\d+)(?:_(.*))?$");
    this.queryTargetKeyRe = new RegExp("^" + QUERY_TARGET_KEY_PREFIX + "_" + escapedPersistenceKey + "_(\\d+)$");
    this.onlineStateKey = createWebStorageOnlineStateKey(this.persistenceKey);
    this.bundleLoadedKey = createBundleLoadedKey(this.persistenceKey);
    this.window.addEventListener("storage", this.storageListener);
  }
  WebStorageSharedClientState2.isAvailable = function(window2) {
    return !!(window2 && window2.localStorage);
  };
  WebStorageSharedClientState2.prototype.start = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var existingClients, _i, existingClients_1, clientId, storageItem, clientState, onlineStateJSON, onlineState, _d, _e, event_1;
      var _this = this;
      return tslib.__generator(this, function(_f) {
        switch (_f.label) {
          case 0:
            return [4, this.syncEngine.getActiveClients()];
          case 1:
            existingClients = _f.sent();
            for (_i = 0, existingClients_1 = existingClients; _i < existingClients_1.length; _i++) {
              clientId = existingClients_1[_i];
              if (clientId === this.localClientId) {
                continue;
              }
              storageItem = this.getItem(createWebStorageClientStateKey(this.persistenceKey, clientId));
              if (storageItem) {
                clientState = RemoteClientState.fromWebStorageEntry(clientId, storageItem);
                if (clientState) {
                  this.activeClients = this.activeClients.insert(clientState.clientId, clientState);
                }
              }
            }
            this.persistClientState();
            onlineStateJSON = this.storage.getItem(this.onlineStateKey);
            if (onlineStateJSON) {
              onlineState = this.fromWebStorageOnlineState(onlineStateJSON);
              if (onlineState) {
                this.handleOnlineStateEvent(onlineState);
              }
            }
            for (_d = 0, _e = this.earlyEvents; _d < _e.length; _d++) {
              event_1 = _e[_d];
              this.handleWebStorageEvent(event_1);
            }
            this.earlyEvents = [];
            this.window.addEventListener("pagehide", function() {
              return _this.shutdown();
            });
            this.started = true;
            return [2];
        }
      });
    });
  };
  WebStorageSharedClientState2.prototype.writeSequenceNumber = function(sequenceNumber) {
    this.setItem(this.sequenceNumberKey, JSON.stringify(sequenceNumber));
  };
  WebStorageSharedClientState2.prototype.getAllActiveQueryTargets = function() {
    return this.extractActiveQueryTargets(this.activeClients);
  };
  WebStorageSharedClientState2.prototype.isActiveQueryTarget = function(targetId) {
    var found = false;
    this.activeClients.forEach(function(key, value) {
      if (value.activeTargetIds.has(targetId)) {
        found = true;
      }
    });
    return found;
  };
  WebStorageSharedClientState2.prototype.addPendingMutation = function(batchId) {
    this.persistMutationState(batchId, "pending");
  };
  WebStorageSharedClientState2.prototype.updateMutationState = function(batchId, state, error2) {
    this.persistMutationState(batchId, state, error2);
    this.removeMutationState(batchId);
  };
  WebStorageSharedClientState2.prototype.addLocalQueryTarget = function(targetId) {
    var queryState = "not-current";
    if (this.isActiveQueryTarget(targetId)) {
      var storageItem = this.storage.getItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));
      if (storageItem) {
        var metadata2 = QueryTargetMetadata.fromWebStorageEntry(targetId, storageItem);
        if (metadata2) {
          queryState = metadata2.state;
        }
      }
    }
    this.localClientState.addQueryTarget(targetId);
    this.persistClientState();
    return queryState;
  };
  WebStorageSharedClientState2.prototype.removeLocalQueryTarget = function(targetId) {
    this.localClientState.removeQueryTarget(targetId);
    this.persistClientState();
  };
  WebStorageSharedClientState2.prototype.isLocalQueryTarget = function(targetId) {
    return this.localClientState.activeTargetIds.has(targetId);
  };
  WebStorageSharedClientState2.prototype.clearQueryState = function(targetId) {
    this.removeItem(createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId));
  };
  WebStorageSharedClientState2.prototype.updateQueryState = function(targetId, state, error2) {
    this.persistQueryTargetState(targetId, state, error2);
  };
  WebStorageSharedClientState2.prototype.handleUserChange = function(user2, removedBatchIds, addedBatchIds) {
    var _this = this;
    removedBatchIds.forEach(function(batchId) {
      _this.removeMutationState(batchId);
    });
    this.currentUser = user2;
    addedBatchIds.forEach(function(batchId) {
      _this.addPendingMutation(batchId);
    });
  };
  WebStorageSharedClientState2.prototype.setOnlineState = function(onlineState) {
    this.persistOnlineState(onlineState);
  };
  WebStorageSharedClientState2.prototype.notifyBundleLoaded = function() {
    this.persistBundleLoadedState();
  };
  WebStorageSharedClientState2.prototype.shutdown = function() {
    if (this.started) {
      this.window.removeEventListener("storage", this.storageListener);
      this.removeItem(this.localClientStorageKey);
      this.started = false;
    }
  };
  WebStorageSharedClientState2.prototype.getItem = function(key) {
    var value = this.storage.getItem(key);
    logDebug(LOG_TAG$a, "READ", key, value);
    return value;
  };
  WebStorageSharedClientState2.prototype.setItem = function(key, value) {
    logDebug(LOG_TAG$a, "SET", key, value);
    this.storage.setItem(key, value);
  };
  WebStorageSharedClientState2.prototype.removeItem = function(key) {
    logDebug(LOG_TAG$a, "REMOVE", key);
    this.storage.removeItem(key);
  };
  WebStorageSharedClientState2.prototype.handleWebStorageEvent = function(event) {
    var _this = this;
    var storageEvent = event;
    if (storageEvent.storageArea === this.storage) {
      logDebug(LOG_TAG$a, "EVENT", storageEvent.key, storageEvent.newValue);
      if (storageEvent.key === this.localClientStorageKey) {
        logError("Received WebStorage notification for local change. Another client might have garbage-collected our state");
        return;
      }
      this.queue.enqueueRetryable(function() {
        return tslib.__awaiter(_this, void 0, void 0, function() {
          var clientState, clientId, mutationMetadata, queryTargetMetadata, onlineState, sequenceNumber;
          return tslib.__generator(this, function(_d) {
            if (!this.started) {
              this.earlyEvents.push(storageEvent);
              return [2];
            }
            if (storageEvent.key === null) {
              return [2];
            }
            if (this.clientStateKeyRe.test(storageEvent.key)) {
              if (storageEvent.newValue != null) {
                clientState = this.fromWebStorageClientState(storageEvent.key, storageEvent.newValue);
                if (clientState) {
                  return [2, this.handleClientStateEvent(clientState.clientId, clientState)];
                }
              } else {
                clientId = this.fromWebStorageClientStateKey(storageEvent.key);
                return [2, this.handleClientStateEvent(clientId, null)];
              }
            } else if (this.mutationBatchKeyRe.test(storageEvent.key)) {
              if (storageEvent.newValue !== null) {
                mutationMetadata = this.fromWebStorageMutationMetadata(storageEvent.key, storageEvent.newValue);
                if (mutationMetadata) {
                  return [2, this.handleMutationBatchEvent(mutationMetadata)];
                }
              }
            } else if (this.queryTargetKeyRe.test(storageEvent.key)) {
              if (storageEvent.newValue !== null) {
                queryTargetMetadata = this.fromWebStorageQueryTargetMetadata(storageEvent.key, storageEvent.newValue);
                if (queryTargetMetadata) {
                  return [2, this.handleQueryTargetEvent(queryTargetMetadata)];
                }
              }
            } else if (storageEvent.key === this.onlineStateKey) {
              if (storageEvent.newValue !== null) {
                onlineState = this.fromWebStorageOnlineState(storageEvent.newValue);
                if (onlineState) {
                  return [2, this.handleOnlineStateEvent(onlineState)];
                }
              }
            } else if (storageEvent.key === this.sequenceNumberKey) {
              sequenceNumber = fromWebStorageSequenceNumber(storageEvent.newValue);
              if (sequenceNumber !== ListenSequence.INVALID) {
                this.sequenceNumberHandler(sequenceNumber);
              }
            } else if (storageEvent.key === this.bundleLoadedKey) {
              return [2, this.syncEngine.synchronizeWithChangedDocuments()];
            }
            return [2];
          });
        });
      });
    }
  };
  Object.defineProperty(WebStorageSharedClientState2.prototype, "localClientState", {
    get: function() {
      return this.activeClients.get(this.localClientId);
    },
    enumerable: false,
    configurable: true
  });
  WebStorageSharedClientState2.prototype.persistClientState = function() {
    this.setItem(this.localClientStorageKey, this.localClientState.toWebStorageJSON());
  };
  WebStorageSharedClientState2.prototype.persistMutationState = function(batchId, state, error2) {
    var mutationState = new MutationMetadata(this.currentUser, batchId, state, error2);
    var mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);
    this.setItem(mutationKey, mutationState.toWebStorageJSON());
  };
  WebStorageSharedClientState2.prototype.removeMutationState = function(batchId) {
    var mutationKey = createWebStorageMutationBatchKey(this.persistenceKey, this.currentUser, batchId);
    this.removeItem(mutationKey);
  };
  WebStorageSharedClientState2.prototype.persistOnlineState = function(onlineState) {
    var entry = {
      clientId: this.localClientId,
      onlineState
    };
    this.storage.setItem(this.onlineStateKey, JSON.stringify(entry));
  };
  WebStorageSharedClientState2.prototype.persistQueryTargetState = function(targetId, state, error2) {
    var targetKey = createWebStorageQueryTargetMetadataKey(this.persistenceKey, targetId);
    var targetMetadata = new QueryTargetMetadata(targetId, state, error2);
    this.setItem(targetKey, targetMetadata.toWebStorageJSON());
  };
  WebStorageSharedClientState2.prototype.persistBundleLoadedState = function() {
    this.setItem(this.bundleLoadedKey, "value-not-used");
  };
  WebStorageSharedClientState2.prototype.fromWebStorageClientStateKey = function(key) {
    var match = this.clientStateKeyRe.exec(key);
    return match ? match[1] : null;
  };
  WebStorageSharedClientState2.prototype.fromWebStorageClientState = function(key, value) {
    var clientId = this.fromWebStorageClientStateKey(key);
    return RemoteClientState.fromWebStorageEntry(clientId, value);
  };
  WebStorageSharedClientState2.prototype.fromWebStorageMutationMetadata = function(key, value) {
    var match = this.mutationBatchKeyRe.exec(key);
    var batchId = Number(match[1]);
    var userId = match[2] !== void 0 ? match[2] : null;
    return MutationMetadata.fromWebStorageEntry(new User(userId), batchId, value);
  };
  WebStorageSharedClientState2.prototype.fromWebStorageQueryTargetMetadata = function(key, value) {
    var match = this.queryTargetKeyRe.exec(key);
    var targetId = Number(match[1]);
    return QueryTargetMetadata.fromWebStorageEntry(targetId, value);
  };
  WebStorageSharedClientState2.prototype.fromWebStorageOnlineState = function(value) {
    return SharedOnlineState.fromWebStorageEntry(value);
  };
  WebStorageSharedClientState2.prototype.handleMutationBatchEvent = function(mutationBatch) {
    return tslib.__awaiter(this, void 0, void 0, function() {
      return tslib.__generator(this, function(_d) {
        if (mutationBatch.user.uid !== this.currentUser.uid) {
          logDebug(LOG_TAG$a, "Ignoring mutation for non-active user " + mutationBatch.user.uid);
          return [2];
        }
        return [2, this.syncEngine.applyBatchState(mutationBatch.batchId, mutationBatch.state, mutationBatch.error)];
      });
    });
  };
  WebStorageSharedClientState2.prototype.handleQueryTargetEvent = function(targetMetadata) {
    return this.syncEngine.applyTargetState(targetMetadata.targetId, targetMetadata.state, targetMetadata.error);
  };
  WebStorageSharedClientState2.prototype.handleClientStateEvent = function(clientId, clientState) {
    var _this = this;
    var updatedClients = clientState ? this.activeClients.insert(clientId, clientState) : this.activeClients.remove(clientId);
    var existingTargets = this.extractActiveQueryTargets(this.activeClients);
    var newTargets = this.extractActiveQueryTargets(updatedClients);
    var addedTargets = [];
    var removedTargets = [];
    newTargets.forEach(function(targetId) {
      if (!existingTargets.has(targetId)) {
        addedTargets.push(targetId);
      }
    });
    existingTargets.forEach(function(targetId) {
      if (!newTargets.has(targetId)) {
        removedTargets.push(targetId);
      }
    });
    return this.syncEngine.applyActiveTargetsChange(addedTargets, removedTargets).then(function() {
      _this.activeClients = updatedClients;
    });
  };
  WebStorageSharedClientState2.prototype.handleOnlineStateEvent = function(onlineState) {
    if (this.activeClients.get(onlineState.clientId)) {
      this.onlineStateHandler(onlineState.onlineState);
    }
  };
  WebStorageSharedClientState2.prototype.extractActiveQueryTargets = function(clients) {
    var activeTargets = targetIdSet();
    clients.forEach(function(kev, value) {
      activeTargets = activeTargets.unionWith(value.activeTargetIds);
    });
    return activeTargets;
  };
  return WebStorageSharedClientState2;
}();
function fromWebStorageSequenceNumber(seqString) {
  var sequenceNumber = ListenSequence.INVALID;
  if (seqString != null) {
    try {
      var parsed = JSON.parse(seqString);
      hardAssert(typeof parsed === "number");
      sequenceNumber = parsed;
    } catch (e) {
      logError(LOG_TAG$a, "Failed to read sequence number from WebStorage", e);
    }
  }
  return sequenceNumber;
}
var MemorySharedClientState = function() {
  function MemorySharedClientState2() {
    this.localState = new LocalClientState();
    this.queryState = {};
    this.onlineStateHandler = null;
    this.sequenceNumberHandler = null;
  }
  MemorySharedClientState2.prototype.addPendingMutation = function(batchId) {
  };
  MemorySharedClientState2.prototype.updateMutationState = function(batchId, state, error2) {
  };
  MemorySharedClientState2.prototype.addLocalQueryTarget = function(targetId) {
    this.localState.addQueryTarget(targetId);
    return this.queryState[targetId] || "not-current";
  };
  MemorySharedClientState2.prototype.updateQueryState = function(targetId, state, error2) {
    this.queryState[targetId] = state;
  };
  MemorySharedClientState2.prototype.removeLocalQueryTarget = function(targetId) {
    this.localState.removeQueryTarget(targetId);
  };
  MemorySharedClientState2.prototype.isLocalQueryTarget = function(targetId) {
    return this.localState.activeTargetIds.has(targetId);
  };
  MemorySharedClientState2.prototype.clearQueryState = function(targetId) {
    delete this.queryState[targetId];
  };
  MemorySharedClientState2.prototype.getAllActiveQueryTargets = function() {
    return this.localState.activeTargetIds;
  };
  MemorySharedClientState2.prototype.isActiveQueryTarget = function(targetId) {
    return this.localState.activeTargetIds.has(targetId);
  };
  MemorySharedClientState2.prototype.start = function() {
    this.localState = new LocalClientState();
    return Promise.resolve();
  };
  MemorySharedClientState2.prototype.handleUserChange = function(user2, removedBatchIds, addedBatchIds) {
  };
  MemorySharedClientState2.prototype.setOnlineState = function(onlineState) {
  };
  MemorySharedClientState2.prototype.shutdown = function() {
  };
  MemorySharedClientState2.prototype.writeSequenceNumber = function(sequenceNumber) {
  };
  MemorySharedClientState2.prototype.notifyBundleLoaded = function() {
  };
  return MemorySharedClientState2;
}();
var NoopConnectivityMonitor = function() {
  function NoopConnectivityMonitor2() {
  }
  NoopConnectivityMonitor2.prototype.addCallback = function(callback) {
  };
  NoopConnectivityMonitor2.prototype.shutdown = function() {
  };
  return NoopConnectivityMonitor2;
}();
var StreamBridge = function() {
  function StreamBridge2(args) {
    this.sendFn = args.sendFn;
    this.closeFn = args.closeFn;
  }
  StreamBridge2.prototype.onOpen = function(callback) {
    this.wrappedOnOpen = callback;
  };
  StreamBridge2.prototype.onClose = function(callback) {
    this.wrappedOnClose = callback;
  };
  StreamBridge2.prototype.onMessage = function(callback) {
    this.wrappedOnMessage = callback;
  };
  StreamBridge2.prototype.close = function() {
    this.closeFn();
  };
  StreamBridge2.prototype.send = function(msg) {
    this.sendFn(msg);
  };
  StreamBridge2.prototype.callOnOpen = function() {
    this.wrappedOnOpen();
  };
  StreamBridge2.prototype.callOnClose = function(err) {
    this.wrappedOnClose(err);
  };
  StreamBridge2.prototype.callOnMessage = function(msg) {
    this.wrappedOnMessage(msg);
  };
  return StreamBridge2;
}();
function nodePromise(action) {
  return new Promise(function(resolve6, reject) {
    action(function(error2, value) {
      if (error2) {
        reject(error2);
      } else {
        resolve6(value);
      }
    });
  });
}
var LOG_TAG$9 = "Connection";
var X_GOOG_API_CLIENT_VALUE = "gl-node/" + process.versions.node + " fire/" + SDK_VERSION + " grpc/" + package_json.version;
function createMetadata(databasePath, token, appId) {
  hardAssert(token === null || token.type === "OAuth");
  var metadata2 = new grpcJs.Metadata();
  if (token) {
    for (var header in token.authHeaders) {
      if (token.authHeaders.hasOwnProperty(header)) {
        metadata2.set(header, token.authHeaders[header]);
      }
    }
  }
  if (appId) {
    metadata2.set("X-Firebase-GMPID", appId);
  }
  metadata2.set("X-Goog-Api-Client", X_GOOG_API_CLIENT_VALUE);
  metadata2.set("Google-Cloud-Resource-Prefix", databasePath);
  return metadata2;
}
var GrpcConnection = function() {
  function GrpcConnection2(protos, databaseInfo) {
    this.databaseInfo = databaseInfo;
    this.cachedStub = null;
    this.firestore = protos["google"]["firestore"]["v1"];
    this.databasePath = "projects/" + databaseInfo.databaseId.projectId + "/databases/" + databaseInfo.databaseId.database;
  }
  GrpcConnection2.prototype.ensureActiveStub = function() {
    if (!this.cachedStub) {
      logDebug(LOG_TAG$9, "Creating Firestore stub.");
      var credentials$1 = this.databaseInfo.ssl ? grpcJs.credentials.createSsl() : grpcJs.credentials.createInsecure();
      this.cachedStub = new this.firestore.Firestore(this.databaseInfo.host, credentials$1);
    }
    return this.cachedStub;
  };
  GrpcConnection2.prototype.invokeRPC = function(rpcName, path2, request, token) {
    var stub = this.ensureActiveStub();
    var metadata2 = createMetadata(this.databasePath, token, this.databaseInfo.appId);
    var jsonRequest = Object.assign({ database: this.databasePath }, request);
    return nodePromise(function(callback) {
      logDebug(LOG_TAG$9, "RPC '" + rpcName + "' invoked with request:", request);
      return stub[rpcName](jsonRequest, metadata2, function(grpcError, value) {
        if (grpcError) {
          logDebug(LOG_TAG$9, "RPC '" + rpcName + "' failed with error:", grpcError);
          callback(new FirestoreError(mapCodeFromRpcCode(grpcError.code), grpcError.message));
        } else {
          logDebug(LOG_TAG$9, "RPC '" + rpcName + "' completed with response:", value);
          callback(void 0, value);
        }
      });
    });
  };
  GrpcConnection2.prototype.invokeStreamingRPC = function(rpcName, path2, request, token) {
    var results = [];
    var responseDeferred = new Deferred();
    logDebug(LOG_TAG$9, "RPC '" + rpcName + "' invoked (streaming) with request:", request);
    var stub = this.ensureActiveStub();
    var metadata2 = createMetadata(this.databasePath, token, this.databaseInfo.appId);
    var jsonRequest = Object.assign(Object.assign({}, request), { database: this.databasePath });
    var stream = stub[rpcName](jsonRequest, metadata2);
    stream.on("data", function(response) {
      logDebug(LOG_TAG$9, "RPC " + rpcName + " received result:", response);
      results.push(response);
    });
    stream.on("end", function() {
      logDebug(LOG_TAG$9, "RPC '" + rpcName + "' completed.");
      responseDeferred.resolve(results);
    });
    stream.on("error", function(grpcError) {
      logDebug(LOG_TAG$9, "RPC '" + rpcName + "' failed with error:", grpcError);
      var code = mapCodeFromRpcCode(grpcError.code);
      responseDeferred.reject(new FirestoreError(code, grpcError.message));
    });
    return responseDeferred.promise;
  };
  GrpcConnection2.prototype.openStream = function(rpcName, token) {
    var stub = this.ensureActiveStub();
    var metadata2 = createMetadata(this.databasePath, token, this.databaseInfo.appId);
    var grpcStream = stub[rpcName](metadata2);
    var closed = false;
    var close = function(err) {
      if (!closed) {
        closed = true;
        stream.callOnClose(err);
        grpcStream.end();
      }
    };
    var stream = new StreamBridge({
      sendFn: function(msg) {
        if (!closed) {
          logDebug(LOG_TAG$9, "GRPC stream sending:", msg);
          try {
            grpcStream.write(msg);
          } catch (e) {
            logError("Failure sending:", msg);
            logError("Error:", e);
            throw e;
          }
        } else {
          logDebug(LOG_TAG$9, "Not sending because gRPC stream is closed:", msg);
        }
      },
      closeFn: function() {
        logDebug(LOG_TAG$9, "GRPC stream closed locally via close().");
        close();
      }
    });
    grpcStream.on("data", function(msg) {
      if (!closed) {
        logDebug(LOG_TAG$9, "GRPC stream received:", msg);
        stream.callOnMessage(msg);
      }
    });
    grpcStream.on("end", function() {
      logDebug(LOG_TAG$9, "GRPC stream ended.");
      close();
    });
    grpcStream.on("error", function(grpcError) {
      if (!closed) {
        logWarn(LOG_TAG$9, "GRPC stream error. Code:", grpcError.code, "Message:", grpcError.message);
        var code = mapCodeFromRpcCode(grpcError.code);
        close(new FirestoreError(code, grpcError.message));
      }
    });
    logDebug(LOG_TAG$9, "Opening GRPC stream");
    setTimeout(function() {
      stream.callOnOpen();
    }, 0);
    return stream;
  };
  return GrpcConnection2;
}();
var protoLoaderOptions = {
  longs: String,
  enums: String,
  defaults: true,
  oneofs: false
};
function loadProtos() {
  var root2 = path.resolve(__dirname, "src/protos");
  var firestoreProtoFile = path.join(root2, "google/firestore/v1/firestore.proto");
  var packageDefinition = protoLoader.loadSync(firestoreProtoFile, Object.assign(Object.assign({}, protoLoaderOptions), { includeDirs: [root2] }));
  return grpcJs.loadPackageDefinition(packageDefinition);
}
function newConnection(databaseInfo) {
  var protos = loadProtos();
  return new GrpcConnection(protos, databaseInfo);
}
function newConnectivityMonitor() {
  return new NoopConnectivityMonitor();
}
function getWindow() {
  return null;
}
function getDocument() {
  return null;
}
function newSerializer(databaseId) {
  return new JsonProtoSerializer(databaseId, false);
}
function newTextEncoder() {
  return new util$1.TextEncoder();
}
function newTextDecoder() {
  return new util$1.TextDecoder("utf-8");
}
var LOG_TAG$8 = "ExponentialBackoff";
var DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1e3;
var DEFAULT_BACKOFF_FACTOR = 1.5;
var DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1e3;
var ExponentialBackoff = function() {
  function ExponentialBackoff2(queue, timerId, initialDelayMs, backoffFactor, maxDelayMs) {
    if (initialDelayMs === void 0) {
      initialDelayMs = DEFAULT_BACKOFF_INITIAL_DELAY_MS;
    }
    if (backoffFactor === void 0) {
      backoffFactor = DEFAULT_BACKOFF_FACTOR;
    }
    if (maxDelayMs === void 0) {
      maxDelayMs = DEFAULT_BACKOFF_MAX_DELAY_MS;
    }
    this.queue = queue;
    this.timerId = timerId;
    this.initialDelayMs = initialDelayMs;
    this.backoffFactor = backoffFactor;
    this.maxDelayMs = maxDelayMs;
    this.currentBaseMs = 0;
    this.timerPromise = null;
    this.lastAttemptTime = Date.now();
    this.reset();
  }
  ExponentialBackoff2.prototype.reset = function() {
    this.currentBaseMs = 0;
  };
  ExponentialBackoff2.prototype.resetToMax = function() {
    this.currentBaseMs = this.maxDelayMs;
  };
  ExponentialBackoff2.prototype.backoffAndRun = function(op) {
    var _this = this;
    this.cancel();
    var desiredDelayWithJitterMs = Math.floor(this.currentBaseMs + this.jitterDelayMs());
    var delaySoFarMs = Math.max(0, Date.now() - this.lastAttemptTime);
    var remainingDelayMs = Math.max(0, desiredDelayWithJitterMs - delaySoFarMs);
    if (remainingDelayMs > 0) {
      logDebug(LOG_TAG$8, "Backing off for " + remainingDelayMs + " ms " + ("(base delay: " + this.currentBaseMs + " ms, ") + ("delay with jitter: " + desiredDelayWithJitterMs + " ms, ") + ("last attempt: " + delaySoFarMs + " ms ago)"));
    }
    this.timerPromise = this.queue.enqueueAfterDelay(this.timerId, remainingDelayMs, function() {
      _this.lastAttemptTime = Date.now();
      return op();
    });
    this.currentBaseMs *= this.backoffFactor;
    if (this.currentBaseMs < this.initialDelayMs) {
      this.currentBaseMs = this.initialDelayMs;
    }
    if (this.currentBaseMs > this.maxDelayMs) {
      this.currentBaseMs = this.maxDelayMs;
    }
  };
  ExponentialBackoff2.prototype.skipBackoff = function() {
    if (this.timerPromise !== null) {
      this.timerPromise.skipDelay();
      this.timerPromise = null;
    }
  };
  ExponentialBackoff2.prototype.cancel = function() {
    if (this.timerPromise !== null) {
      this.timerPromise.cancel();
      this.timerPromise = null;
    }
  };
  ExponentialBackoff2.prototype.jitterDelayMs = function() {
    return (Math.random() - 0.5) * this.currentBaseMs;
  };
  return ExponentialBackoff2;
}();
var LOG_TAG$7 = "PersistentStream";
var IDLE_TIMEOUT_MS = 60 * 1e3;
var PersistentStream = function() {
  function PersistentStream2(queue, connectionTimerId, idleTimerId, connection, credentialsProvider, listener) {
    this.queue = queue;
    this.idleTimerId = idleTimerId;
    this.connection = connection;
    this.credentialsProvider = credentialsProvider;
    this.listener = listener;
    this.state = 0;
    this.closeCount = 0;
    this.idleTimer = null;
    this.stream = null;
    this.backoff = new ExponentialBackoff(queue, connectionTimerId);
  }
  PersistentStream2.prototype.isStarted = function() {
    return this.state === 1 || this.state === 2 || this.state === 4;
  };
  PersistentStream2.prototype.isOpen = function() {
    return this.state === 2;
  };
  PersistentStream2.prototype.start = function() {
    if (this.state === 3) {
      this.performBackoff();
      return;
    }
    this.auth();
  };
  PersistentStream2.prototype.stop = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            if (!this.isStarted())
              return [3, 2];
            return [4, this.close(0)];
          case 1:
            _d.sent();
            _d.label = 2;
          case 2:
            return [2];
        }
      });
    });
  };
  PersistentStream2.prototype.inhibitBackoff = function() {
    this.state = 0;
    this.backoff.reset();
  };
  PersistentStream2.prototype.markIdle = function() {
    var _this = this;
    if (this.isOpen() && this.idleTimer === null) {
      this.idleTimer = this.queue.enqueueAfterDelay(this.idleTimerId, IDLE_TIMEOUT_MS, function() {
        return _this.handleIdleCloseTimer();
      });
    }
  };
  PersistentStream2.prototype.sendRequest = function(msg) {
    this.cancelIdleCheck();
    this.stream.send(msg);
  };
  PersistentStream2.prototype.handleIdleCloseTimer = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      return tslib.__generator(this, function(_d) {
        if (this.isOpen()) {
          return [2, this.close(0)];
        }
        return [2];
      });
    });
  };
  PersistentStream2.prototype.cancelIdleCheck = function() {
    if (this.idleTimer) {
      this.idleTimer.cancel();
      this.idleTimer = null;
    }
  };
  PersistentStream2.prototype.close = function(finalState, error2) {
    return tslib.__awaiter(this, void 0, void 0, function() {
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            this.cancelIdleCheck();
            this.backoff.cancel();
            this.closeCount++;
            if (finalState !== 3) {
              this.backoff.reset();
            } else if (error2 && error2.code === Code.RESOURCE_EXHAUSTED) {
              logError(error2.toString());
              logError("Using maximum backoff delay to prevent overloading the backend.");
              this.backoff.resetToMax();
            } else if (error2 && error2.code === Code.UNAUTHENTICATED) {
              this.credentialsProvider.invalidateToken();
            }
            if (this.stream !== null) {
              this.tearDown();
              this.stream.close();
              this.stream = null;
            }
            this.state = finalState;
            return [4, this.listener.onClose(error2)];
          case 1:
            _d.sent();
            return [2];
        }
      });
    });
  };
  PersistentStream2.prototype.tearDown = function() {
  };
  PersistentStream2.prototype.auth = function() {
    var _this = this;
    this.state = 1;
    var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);
    var closeCount = this.closeCount;
    this.credentialsProvider.getToken().then(function(token) {
      if (_this.closeCount === closeCount) {
        _this.startStream(token);
      }
    }, function(error2) {
      dispatchIfNotClosed(function() {
        var rpcError = new FirestoreError(Code.UNKNOWN, "Fetching auth token failed: " + error2.message);
        return _this.handleStreamClose(rpcError);
      });
    });
  };
  PersistentStream2.prototype.startStream = function(token) {
    var _this = this;
    var dispatchIfNotClosed = this.getCloseGuardedDispatcher(this.closeCount);
    this.stream = this.startRpc(token);
    this.stream.onOpen(function() {
      dispatchIfNotClosed(function() {
        _this.state = 2;
        return _this.listener.onOpen();
      });
    });
    this.stream.onClose(function(error2) {
      dispatchIfNotClosed(function() {
        return _this.handleStreamClose(error2);
      });
    });
    this.stream.onMessage(function(msg) {
      dispatchIfNotClosed(function() {
        return _this.onMessage(msg);
      });
    });
  };
  PersistentStream2.prototype.performBackoff = function() {
    var _this = this;
    this.state = 4;
    this.backoff.backoffAndRun(function() {
      return tslib.__awaiter(_this, void 0, void 0, function() {
        return tslib.__generator(this, function(_d) {
          this.state = 0;
          this.start();
          return [2];
        });
      });
    });
  };
  PersistentStream2.prototype.handleStreamClose = function(error2) {
    logDebug(LOG_TAG$7, "close with error: " + error2);
    this.stream = null;
    return this.close(3, error2);
  };
  PersistentStream2.prototype.getCloseGuardedDispatcher = function(startCloseCount) {
    var _this = this;
    return function(fn) {
      _this.queue.enqueueAndForget(function() {
        if (_this.closeCount === startCloseCount) {
          return fn();
        } else {
          logDebug(LOG_TAG$7, "stream callback skipped by getCloseGuardedDispatcher.");
          return Promise.resolve();
        }
      });
    };
  };
  return PersistentStream2;
}();
var PersistentListenStream = function(_super) {
  tslib.__extends(PersistentListenStream2, _super);
  function PersistentListenStream2(queue, connection, credentials, serializer, listener) {
    var _this = _super.call(this, queue, "listen_stream_connection_backoff", "listen_stream_idle", connection, credentials, listener) || this;
    _this.serializer = serializer;
    return _this;
  }
  PersistentListenStream2.prototype.startRpc = function(token) {
    return this.connection.openStream("Listen", token);
  };
  PersistentListenStream2.prototype.onMessage = function(watchChangeProto) {
    this.backoff.reset();
    var watchChange = fromWatchChange(this.serializer, watchChangeProto);
    var snapshot = versionFromListenResponse(watchChangeProto);
    return this.listener.onWatchChange(watchChange, snapshot);
  };
  PersistentListenStream2.prototype.watch = function(targetData) {
    var request = {};
    request.database = getEncodedDatabaseId(this.serializer);
    request.addTarget = toTarget(this.serializer, targetData);
    var labels = toListenRequestLabels(this.serializer, targetData);
    if (labels) {
      request.labels = labels;
    }
    this.sendRequest(request);
  };
  PersistentListenStream2.prototype.unwatch = function(targetId) {
    var request = {};
    request.database = getEncodedDatabaseId(this.serializer);
    request.removeTarget = targetId;
    this.sendRequest(request);
  };
  return PersistentListenStream2;
}(PersistentStream);
var PersistentWriteStream = function(_super) {
  tslib.__extends(PersistentWriteStream2, _super);
  function PersistentWriteStream2(queue, connection, credentials, serializer, listener) {
    var _this = _super.call(this, queue, "write_stream_connection_backoff", "write_stream_idle", connection, credentials, listener) || this;
    _this.serializer = serializer;
    _this.handshakeComplete_ = false;
    return _this;
  }
  Object.defineProperty(PersistentWriteStream2.prototype, "handshakeComplete", {
    get: function() {
      return this.handshakeComplete_;
    },
    enumerable: false,
    configurable: true
  });
  PersistentWriteStream2.prototype.start = function() {
    this.handshakeComplete_ = false;
    this.lastStreamToken = void 0;
    _super.prototype.start.call(this);
  };
  PersistentWriteStream2.prototype.tearDown = function() {
    if (this.handshakeComplete_) {
      this.writeMutations([]);
    }
  };
  PersistentWriteStream2.prototype.startRpc = function(token) {
    return this.connection.openStream("Write", token);
  };
  PersistentWriteStream2.prototype.onMessage = function(responseProto) {
    hardAssert(!!responseProto.streamToken);
    this.lastStreamToken = responseProto.streamToken;
    if (!this.handshakeComplete_) {
      hardAssert(!responseProto.writeResults || responseProto.writeResults.length === 0);
      this.handshakeComplete_ = true;
      return this.listener.onHandshakeComplete();
    } else {
      this.backoff.reset();
      var results = fromWriteResults(responseProto.writeResults, responseProto.commitTime);
      var commitVersion = fromVersion(responseProto.commitTime);
      return this.listener.onMutationResult(commitVersion, results);
    }
  };
  PersistentWriteStream2.prototype.writeHandshake = function() {
    var request = {};
    request.database = getEncodedDatabaseId(this.serializer);
    this.sendRequest(request);
  };
  PersistentWriteStream2.prototype.writeMutations = function(mutations) {
    var _this = this;
    var request = {
      streamToken: this.lastStreamToken,
      writes: mutations.map(function(mutation) {
        return toMutation(_this.serializer, mutation);
      })
    };
    this.sendRequest(request);
  };
  return PersistentWriteStream2;
}(PersistentStream);
var Datastore = function() {
  function Datastore2() {
  }
  return Datastore2;
}();
var DatastoreImpl = function(_super) {
  tslib.__extends(DatastoreImpl2, _super);
  function DatastoreImpl2(credentials, connection, serializer) {
    var _this = _super.call(this) || this;
    _this.credentials = credentials;
    _this.connection = connection;
    _this.serializer = serializer;
    _this.terminated = false;
    return _this;
  }
  DatastoreImpl2.prototype.verifyInitialized = function() {
    if (this.terminated) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, "The client has already been terminated.");
    }
  };
  DatastoreImpl2.prototype.invokeRPC = function(rpcName, path2, request) {
    var _this = this;
    this.verifyInitialized();
    return this.credentials.getToken().then(function(token) {
      return _this.connection.invokeRPC(rpcName, path2, request, token);
    }).catch(function(error2) {
      if (error2.name === "FirebaseError") {
        if (error2.code === Code.UNAUTHENTICATED) {
          _this.credentials.invalidateToken();
        }
        throw error2;
      } else {
        throw new FirestoreError(Code.UNKNOWN, error2.toString());
      }
    });
  };
  DatastoreImpl2.prototype.invokeStreamingRPC = function(rpcName, path2, request) {
    var _this = this;
    this.verifyInitialized();
    return this.credentials.getToken().then(function(token) {
      return _this.connection.invokeStreamingRPC(rpcName, path2, request, token);
    }).catch(function(error2) {
      if (error2.name === "FirebaseError") {
        if (error2.code === Code.UNAUTHENTICATED) {
          _this.credentials.invalidateToken();
        }
        throw error2;
      } else {
        throw new FirestoreError(Code.UNKNOWN, error2.toString());
      }
    });
  };
  DatastoreImpl2.prototype.terminate = function() {
    this.terminated = true;
  };
  return DatastoreImpl2;
}(Datastore);
function newDatastore(credentials, connection, serializer) {
  return new DatastoreImpl(credentials, connection, serializer);
}
function invokeCommitRpc(datastore, mutations) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var datastoreImpl, path2, request;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          datastoreImpl = debugCast(datastore);
          path2 = getEncodedDatabaseId(datastoreImpl.serializer) + "/documents";
          request = {
            writes: mutations.map(function(m) {
              return toMutation(datastoreImpl.serializer, m);
            })
          };
          return [4, datastoreImpl.invokeRPC("Commit", path2, request)];
        case 1:
          _d.sent();
          return [2];
      }
    });
  });
}
function invokeBatchGetDocumentsRpc(datastore, keys) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var datastoreImpl, path2, request, response, docs, result;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          datastoreImpl = debugCast(datastore);
          path2 = getEncodedDatabaseId(datastoreImpl.serializer) + "/documents";
          request = {
            documents: keys.map(function(k) {
              return toName(datastoreImpl.serializer, k);
            })
          };
          return [4, datastoreImpl.invokeStreamingRPC("BatchGetDocuments", path2, request)];
        case 1:
          response = _d.sent();
          docs = new Map();
          response.forEach(function(proto) {
            var doc2 = fromBatchGetDocumentsResponse(datastoreImpl.serializer, proto);
            docs.set(doc2.key.toString(), doc2);
          });
          result = [];
          keys.forEach(function(key) {
            var doc2 = docs.get(key.toString());
            hardAssert(!!doc2);
            result.push(doc2);
          });
          return [2, result];
      }
    });
  });
}
function newPersistentWriteStream(datastore, queue, listener) {
  var datastoreImpl = debugCast(datastore);
  datastoreImpl.verifyInitialized();
  return new PersistentWriteStream(queue, datastoreImpl.connection, datastoreImpl.credentials, datastoreImpl.serializer, listener);
}
function newPersistentWatchStream(datastore, queue, listener) {
  var datastoreImpl = debugCast(datastore);
  datastoreImpl.verifyInitialized();
  return new PersistentListenStream(queue, datastoreImpl.connection, datastoreImpl.credentials, datastoreImpl.serializer, listener);
}
var LOG_TAG$6 = "OnlineStateTracker";
var MAX_WATCH_STREAM_FAILURES = 1;
var ONLINE_STATE_TIMEOUT_MS = 10 * 1e3;
var OnlineStateTracker = function() {
  function OnlineStateTracker2(asyncQueue, onlineStateHandler) {
    this.asyncQueue = asyncQueue;
    this.onlineStateHandler = onlineStateHandler;
    this.state = "Unknown";
    this.watchStreamFailures = 0;
    this.onlineStateTimer = null;
    this.shouldWarnClientIsOffline = true;
  }
  OnlineStateTracker2.prototype.handleWatchStreamStart = function() {
    var _this = this;
    if (this.watchStreamFailures === 0) {
      this.setAndBroadcast("Unknown");
      this.onlineStateTimer = this.asyncQueue.enqueueAfterDelay("online_state_timeout", ONLINE_STATE_TIMEOUT_MS, function() {
        _this.onlineStateTimer = null;
        _this.logClientOfflineWarningIfNecessary("Backend didn't respond within " + ONLINE_STATE_TIMEOUT_MS / 1e3 + " seconds.");
        _this.setAndBroadcast("Offline");
        return Promise.resolve();
      });
    }
  };
  OnlineStateTracker2.prototype.handleWatchStreamFailure = function(error2) {
    if (this.state === "Online") {
      this.setAndBroadcast("Unknown");
    } else {
      this.watchStreamFailures++;
      if (this.watchStreamFailures >= MAX_WATCH_STREAM_FAILURES) {
        this.clearOnlineStateTimer();
        this.logClientOfflineWarningIfNecessary("Connection failed " + MAX_WATCH_STREAM_FAILURES + " " + ("times. Most recent error: " + error2.toString()));
        this.setAndBroadcast("Offline");
      }
    }
  };
  OnlineStateTracker2.prototype.set = function(newState) {
    this.clearOnlineStateTimer();
    this.watchStreamFailures = 0;
    if (newState === "Online") {
      this.shouldWarnClientIsOffline = false;
    }
    this.setAndBroadcast(newState);
  };
  OnlineStateTracker2.prototype.setAndBroadcast = function(newState) {
    if (newState !== this.state) {
      this.state = newState;
      this.onlineStateHandler(newState);
    }
  };
  OnlineStateTracker2.prototype.logClientOfflineWarningIfNecessary = function(details) {
    var message2 = "Could not reach Cloud Firestore backend. " + details + "\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.";
    if (this.shouldWarnClientIsOffline) {
      logError(message2);
      this.shouldWarnClientIsOffline = false;
    } else {
      logDebug(LOG_TAG$6, message2);
    }
  };
  OnlineStateTracker2.prototype.clearOnlineStateTimer = function() {
    if (this.onlineStateTimer !== null) {
      this.onlineStateTimer.cancel();
      this.onlineStateTimer = null;
    }
  };
  return OnlineStateTracker2;
}();
var LOG_TAG$5 = "RemoteStore";
var MAX_PENDING_WRITES = 10;
var RemoteStoreImpl = function() {
  function RemoteStoreImpl2(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {
    var _this = this;
    this.localStore = localStore;
    this.datastore = datastore;
    this.asyncQueue = asyncQueue;
    this.remoteSyncer = {};
    this.writePipeline = [];
    this.listenTargets = new Map();
    this.offlineCauses = new Set();
    this.onNetworkStatusChange = [];
    this.connectivityMonitor = connectivityMonitor;
    this.connectivityMonitor.addCallback(function(_) {
      asyncQueue.enqueueAndForget(function() {
        return tslib.__awaiter(_this, void 0, void 0, function() {
          return tslib.__generator(this, function(_d) {
            switch (_d.label) {
              case 0:
                if (!canUseNetwork(this))
                  return [3, 2];
                logDebug(LOG_TAG$5, "Restarting streams for network reachability change.");
                return [4, restartNetwork(this)];
              case 1:
                _d.sent();
                _d.label = 2;
              case 2:
                return [2];
            }
          });
        });
      });
    });
    this.onlineStateTracker = new OnlineStateTracker(asyncQueue, onlineStateHandler);
  }
  return RemoteStoreImpl2;
}();
function newRemoteStore(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor) {
  return new RemoteStoreImpl(localStore, datastore, asyncQueue, onlineStateHandler, connectivityMonitor);
}
function remoteStoreEnableNetwork(remoteStore) {
  var remoteStoreImpl = debugCast(remoteStore);
  remoteStoreImpl.offlineCauses.delete(0);
  return enableNetworkInternal(remoteStoreImpl);
}
function enableNetworkInternal(remoteStoreImpl) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var _i, _d, networkStatusHandler;
    return tslib.__generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          if (!canUseNetwork(remoteStoreImpl))
            return [3, 4];
          _i = 0, _d = remoteStoreImpl.onNetworkStatusChange;
          _e.label = 1;
        case 1:
          if (!(_i < _d.length))
            return [3, 4];
          networkStatusHandler = _d[_i];
          return [4, networkStatusHandler(true)];
        case 2:
          _e.sent();
          _e.label = 3;
        case 3:
          _i++;
          return [3, 1];
        case 4:
          return [2];
      }
    });
  });
}
function remoteStoreDisableNetwork(remoteStore) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var remoteStoreImpl;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          remoteStoreImpl = debugCast(remoteStore);
          remoteStoreImpl.offlineCauses.add(0);
          return [4, disableNetworkInternal(remoteStoreImpl)];
        case 1:
          _d.sent();
          remoteStoreImpl.onlineStateTracker.set("Offline");
          return [2];
      }
    });
  });
}
function disableNetworkInternal(remoteStoreImpl) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var _i, _d, networkStatusHandler;
    return tslib.__generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          _i = 0, _d = remoteStoreImpl.onNetworkStatusChange;
          _e.label = 1;
        case 1:
          if (!(_i < _d.length))
            return [3, 4];
          networkStatusHandler = _d[_i];
          return [4, networkStatusHandler(false)];
        case 2:
          _e.sent();
          _e.label = 3;
        case 3:
          _i++;
          return [3, 1];
        case 4:
          return [2];
      }
    });
  });
}
function remoteStoreShutdown(remoteStore) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var remoteStoreImpl;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          remoteStoreImpl = debugCast(remoteStore);
          logDebug(LOG_TAG$5, "RemoteStore shutting down.");
          remoteStoreImpl.offlineCauses.add(5);
          return [4, disableNetworkInternal(remoteStoreImpl)];
        case 1:
          _d.sent();
          remoteStoreImpl.connectivityMonitor.shutdown();
          remoteStoreImpl.onlineStateTracker.set("Unknown");
          return [2];
      }
    });
  });
}
function remoteStoreListen(remoteStore, targetData) {
  var remoteStoreImpl = debugCast(remoteStore);
  if (remoteStoreImpl.listenTargets.has(targetData.targetId)) {
    return;
  }
  remoteStoreImpl.listenTargets.set(targetData.targetId, targetData);
  if (shouldStartWatchStream(remoteStoreImpl)) {
    startWatchStream(remoteStoreImpl);
  } else if (ensureWatchStream(remoteStoreImpl).isOpen()) {
    sendWatchRequest(remoteStoreImpl, targetData);
  }
}
function remoteStoreUnlisten(remoteStore, targetId) {
  var remoteStoreImpl = debugCast(remoteStore);
  var watchStream = ensureWatchStream(remoteStoreImpl);
  remoteStoreImpl.listenTargets.delete(targetId);
  if (watchStream.isOpen()) {
    sendUnwatchRequest(remoteStoreImpl, targetId);
  }
  if (remoteStoreImpl.listenTargets.size === 0) {
    if (watchStream.isOpen()) {
      watchStream.markIdle();
    } else if (canUseNetwork(remoteStoreImpl)) {
      remoteStoreImpl.onlineStateTracker.set("Unknown");
    }
  }
}
function sendWatchRequest(remoteStoreImpl, targetData) {
  remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetData.targetId);
  ensureWatchStream(remoteStoreImpl).watch(targetData);
}
function sendUnwatchRequest(remoteStoreImpl, targetId) {
  remoteStoreImpl.watchChangeAggregator.recordPendingTargetRequest(targetId);
  ensureWatchStream(remoteStoreImpl).unwatch(targetId);
}
function startWatchStream(remoteStoreImpl) {
  remoteStoreImpl.watchChangeAggregator = new WatchChangeAggregator({
    getRemoteKeysForTarget: function(targetId) {
      return remoteStoreImpl.remoteSyncer.getRemoteKeysForTarget(targetId);
    },
    getTargetDataForTarget: function(targetId) {
      return remoteStoreImpl.listenTargets.get(targetId) || null;
    }
  });
  ensureWatchStream(remoteStoreImpl).start();
  remoteStoreImpl.onlineStateTracker.handleWatchStreamStart();
}
function shouldStartWatchStream(remoteStoreImpl) {
  return canUseNetwork(remoteStoreImpl) && !ensureWatchStream(remoteStoreImpl).isStarted() && remoteStoreImpl.listenTargets.size > 0;
}
function canUseNetwork(remoteStore) {
  var remoteStoreImpl = debugCast(remoteStore);
  return remoteStoreImpl.offlineCauses.size === 0;
}
function cleanUpWatchStreamState(remoteStoreImpl) {
  remoteStoreImpl.watchChangeAggregator = void 0;
}
function onWatchStreamOpen(remoteStoreImpl) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    return tslib.__generator(this, function(_d) {
      remoteStoreImpl.listenTargets.forEach(function(targetData, targetId) {
        sendWatchRequest(remoteStoreImpl, targetData);
      });
      return [2];
    });
  });
}
function onWatchStreamClose(remoteStoreImpl, error2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    return tslib.__generator(this, function(_d) {
      cleanUpWatchStreamState(remoteStoreImpl);
      if (shouldStartWatchStream(remoteStoreImpl)) {
        remoteStoreImpl.onlineStateTracker.handleWatchStreamFailure(error2);
        startWatchStream(remoteStoreImpl);
      } else {
        remoteStoreImpl.onlineStateTracker.set("Unknown");
      }
      return [2];
    });
  });
}
function onWatchStreamChange(remoteStoreImpl, watchChange, snapshotVersion) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var e_4, lastRemoteSnapshotVersion, e_5;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          remoteStoreImpl.onlineStateTracker.set("Online");
          if (!(watchChange instanceof WatchTargetChange && watchChange.state === 2 && watchChange.cause))
            return [3, 6];
          _d.label = 1;
        case 1:
          _d.trys.push([1, 3, , 5]);
          return [4, handleTargetError(remoteStoreImpl, watchChange)];
        case 2:
          _d.sent();
          return [3, 5];
        case 3:
          e_4 = _d.sent();
          logDebug(LOG_TAG$5, "Failed to remove targets %s: %s ", watchChange.targetIds.join(","), e_4);
          return [4, disableNetworkUntilRecovery(remoteStoreImpl, e_4)];
        case 4:
          _d.sent();
          return [3, 5];
        case 5:
          return [2];
        case 6:
          if (watchChange instanceof DocumentWatchChange) {
            remoteStoreImpl.watchChangeAggregator.handleDocumentChange(watchChange);
          } else if (watchChange instanceof ExistenceFilterChange) {
            remoteStoreImpl.watchChangeAggregator.handleExistenceFilter(watchChange);
          } else {
            remoteStoreImpl.watchChangeAggregator.handleTargetChange(watchChange);
          }
          if (!!snapshotVersion.isEqual(SnapshotVersion.min()))
            return [3, 13];
          _d.label = 7;
        case 7:
          _d.trys.push([7, 11, , 13]);
          return [4, localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore)];
        case 8:
          lastRemoteSnapshotVersion = _d.sent();
          if (!(snapshotVersion.compareTo(lastRemoteSnapshotVersion) >= 0))
            return [3, 10];
          return [4, raiseWatchSnapshot(remoteStoreImpl, snapshotVersion)];
        case 9:
          _d.sent();
          _d.label = 10;
        case 10:
          return [3, 13];
        case 11:
          e_5 = _d.sent();
          logDebug(LOG_TAG$5, "Failed to raise snapshot:", e_5);
          return [4, disableNetworkUntilRecovery(remoteStoreImpl, e_5)];
        case 12:
          _d.sent();
          return [3, 13];
        case 13:
          return [2];
      }
    });
  });
}
function disableNetworkUntilRecovery(remoteStoreImpl, e, op) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var _this = this;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          if (!isIndexedDbTransactionError(e))
            return [3, 2];
          remoteStoreImpl.offlineCauses.add(1);
          return [4, disableNetworkInternal(remoteStoreImpl)];
        case 1:
          _d.sent();
          remoteStoreImpl.onlineStateTracker.set("Offline");
          if (!op) {
            op = function() {
              return localStoreGetLastRemoteSnapshotVersion(remoteStoreImpl.localStore);
            };
          }
          remoteStoreImpl.asyncQueue.enqueueRetryable(function() {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              return tslib.__generator(this, function(_d2) {
                switch (_d2.label) {
                  case 0:
                    logDebug(LOG_TAG$5, "Retrying IndexedDB access");
                    return [4, op()];
                  case 1:
                    _d2.sent();
                    remoteStoreImpl.offlineCauses.delete(1);
                    return [4, enableNetworkInternal(remoteStoreImpl)];
                  case 2:
                    _d2.sent();
                    return [2];
                }
              });
            });
          });
          return [3, 3];
        case 2:
          throw e;
        case 3:
          return [2];
      }
    });
  });
}
function executeWithRecovery(remoteStoreImpl, op) {
  return op().catch(function(e) {
    return disableNetworkUntilRecovery(remoteStoreImpl, e, op);
  });
}
function raiseWatchSnapshot(remoteStoreImpl, snapshotVersion) {
  var remoteEvent = remoteStoreImpl.watchChangeAggregator.createRemoteEvent(snapshotVersion);
  remoteEvent.targetChanges.forEach(function(change, targetId) {
    if (change.resumeToken.approximateByteSize() > 0) {
      var targetData = remoteStoreImpl.listenTargets.get(targetId);
      if (targetData) {
        remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(change.resumeToken, snapshotVersion));
      }
    }
  });
  remoteEvent.targetMismatches.forEach(function(targetId) {
    var targetData = remoteStoreImpl.listenTargets.get(targetId);
    if (!targetData) {
      return;
    }
    remoteStoreImpl.listenTargets.set(targetId, targetData.withResumeToken(ByteString.EMPTY_BYTE_STRING, targetData.snapshotVersion));
    sendUnwatchRequest(remoteStoreImpl, targetId);
    var requestTargetData = new TargetData(targetData.target, targetId, 1, targetData.sequenceNumber);
    sendWatchRequest(remoteStoreImpl, requestTargetData);
  });
  return remoteStoreImpl.remoteSyncer.applyRemoteEvent(remoteEvent);
}
function handleTargetError(remoteStoreImpl, watchChange) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var error2, _i, _d, targetId;
    return tslib.__generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          error2 = watchChange.cause;
          _i = 0, _d = watchChange.targetIds;
          _e.label = 1;
        case 1:
          if (!(_i < _d.length))
            return [3, 4];
          targetId = _d[_i];
          if (!remoteStoreImpl.listenTargets.has(targetId))
            return [3, 3];
          return [4, remoteStoreImpl.remoteSyncer.rejectListen(targetId, error2)];
        case 2:
          _e.sent();
          remoteStoreImpl.listenTargets.delete(targetId);
          remoteStoreImpl.watchChangeAggregator.removeTarget(targetId);
          _e.label = 3;
        case 3:
          _i++;
          return [3, 1];
        case 4:
          return [2];
      }
    });
  });
}
function fillWritePipeline(remoteStore) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var remoteStoreImpl, writeStream, lastBatchIdRetrieved, batch, e_6;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          remoteStoreImpl = debugCast(remoteStore);
          writeStream = ensureWriteStream(remoteStoreImpl);
          lastBatchIdRetrieved = remoteStoreImpl.writePipeline.length > 0 ? remoteStoreImpl.writePipeline[remoteStoreImpl.writePipeline.length - 1].batchId : BATCHID_UNKNOWN;
          _d.label = 1;
        case 1:
          if (!canAddToWritePipeline(remoteStoreImpl))
            return [3, 7];
          _d.label = 2;
        case 2:
          _d.trys.push([2, 4, , 6]);
          return [4, localStoreGetNextMutationBatch(remoteStoreImpl.localStore, lastBatchIdRetrieved)];
        case 3:
          batch = _d.sent();
          if (batch === null) {
            if (remoteStoreImpl.writePipeline.length === 0) {
              writeStream.markIdle();
            }
            return [3, 7];
          } else {
            lastBatchIdRetrieved = batch.batchId;
            addToWritePipeline(remoteStoreImpl, batch);
          }
          return [3, 6];
        case 4:
          e_6 = _d.sent();
          return [4, disableNetworkUntilRecovery(remoteStoreImpl, e_6)];
        case 5:
          _d.sent();
          return [3, 6];
        case 6:
          return [3, 1];
        case 7:
          if (shouldStartWriteStream(remoteStoreImpl)) {
            startWriteStream(remoteStoreImpl);
          }
          return [2];
      }
    });
  });
}
function canAddToWritePipeline(remoteStoreImpl) {
  return canUseNetwork(remoteStoreImpl) && remoteStoreImpl.writePipeline.length < MAX_PENDING_WRITES;
}
function addToWritePipeline(remoteStoreImpl, batch) {
  remoteStoreImpl.writePipeline.push(batch);
  var writeStream = ensureWriteStream(remoteStoreImpl);
  if (writeStream.isOpen() && writeStream.handshakeComplete) {
    writeStream.writeMutations(batch.mutations);
  }
}
function shouldStartWriteStream(remoteStoreImpl) {
  return canUseNetwork(remoteStoreImpl) && !ensureWriteStream(remoteStoreImpl).isStarted() && remoteStoreImpl.writePipeline.length > 0;
}
function startWriteStream(remoteStoreImpl) {
  ensureWriteStream(remoteStoreImpl).start();
}
function onWriteStreamOpen(remoteStoreImpl) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    return tslib.__generator(this, function(_d) {
      ensureWriteStream(remoteStoreImpl).writeHandshake();
      return [2];
    });
  });
}
function onWriteHandshakeComplete(remoteStoreImpl) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var writeStream, _i, _d, batch;
    return tslib.__generator(this, function(_e) {
      writeStream = ensureWriteStream(remoteStoreImpl);
      for (_i = 0, _d = remoteStoreImpl.writePipeline; _i < _d.length; _i++) {
        batch = _d[_i];
        writeStream.writeMutations(batch.mutations);
      }
      return [2];
    });
  });
}
function onMutationResult(remoteStoreImpl, commitVersion, results) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var batch, success;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          batch = remoteStoreImpl.writePipeline.shift();
          success = MutationBatchResult.from(batch, commitVersion, results);
          return [4, executeWithRecovery(remoteStoreImpl, function() {
            return remoteStoreImpl.remoteSyncer.applySuccessfulWrite(success);
          })];
        case 1:
          _d.sent();
          return [4, fillWritePipeline(remoteStoreImpl)];
        case 2:
          _d.sent();
          return [2];
      }
    });
  });
}
function onWriteStreamClose(remoteStoreImpl, error2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          if (!(error2 && ensureWriteStream(remoteStoreImpl).handshakeComplete))
            return [3, 2];
          return [4, handleWriteError(remoteStoreImpl, error2)];
        case 1:
          _d.sent();
          _d.label = 2;
        case 2:
          if (shouldStartWriteStream(remoteStoreImpl)) {
            startWriteStream(remoteStoreImpl);
          }
          return [2];
      }
    });
  });
}
function handleWriteError(remoteStoreImpl, error2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var batch_1;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          if (!isPermanentWriteError(error2.code))
            return [3, 3];
          batch_1 = remoteStoreImpl.writePipeline.shift();
          ensureWriteStream(remoteStoreImpl).inhibitBackoff();
          return [4, executeWithRecovery(remoteStoreImpl, function() {
            return remoteStoreImpl.remoteSyncer.rejectFailedWrite(batch_1.batchId, error2);
          })];
        case 1:
          _d.sent();
          return [4, fillWritePipeline(remoteStoreImpl)];
        case 2:
          _d.sent();
          _d.label = 3;
        case 3:
          return [2];
      }
    });
  });
}
function restartNetwork(remoteStore) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var remoteStoreImpl;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          remoteStoreImpl = debugCast(remoteStore);
          remoteStoreImpl.offlineCauses.add(4);
          return [4, disableNetworkInternal(remoteStoreImpl)];
        case 1:
          _d.sent();
          remoteStoreImpl.onlineStateTracker.set("Unknown");
          remoteStoreImpl.offlineCauses.delete(4);
          return [4, enableNetworkInternal(remoteStoreImpl)];
        case 2:
          _d.sent();
          return [2];
      }
    });
  });
}
function remoteStoreHandleCredentialChange(remoteStore, user2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var remoteStoreImpl, usesNetwork;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          remoteStoreImpl = debugCast(remoteStore);
          remoteStoreImpl.asyncQueue.verifyOperationInProgress();
          logDebug(LOG_TAG$5, "RemoteStore received new credentials");
          usesNetwork = canUseNetwork(remoteStoreImpl);
          remoteStoreImpl.offlineCauses.add(3);
          return [4, disableNetworkInternal(remoteStoreImpl)];
        case 1:
          _d.sent();
          if (usesNetwork) {
            remoteStoreImpl.onlineStateTracker.set("Unknown");
          }
          return [4, remoteStoreImpl.remoteSyncer.handleCredentialChange(user2)];
        case 2:
          _d.sent();
          remoteStoreImpl.offlineCauses.delete(3);
          return [4, enableNetworkInternal(remoteStoreImpl)];
        case 3:
          _d.sent();
          return [2];
      }
    });
  });
}
function remoteStoreApplyPrimaryState(remoteStore, isPrimary) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var remoteStoreImpl;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          remoteStoreImpl = debugCast(remoteStore);
          if (!isPrimary)
            return [3, 2];
          remoteStoreImpl.offlineCauses.delete(2);
          return [4, enableNetworkInternal(remoteStoreImpl)];
        case 1:
          _d.sent();
          return [3, 4];
        case 2:
          if (!!isPrimary)
            return [3, 4];
          remoteStoreImpl.offlineCauses.add(2);
          return [4, disableNetworkInternal(remoteStoreImpl)];
        case 3:
          _d.sent();
          remoteStoreImpl.onlineStateTracker.set("Unknown");
          _d.label = 4;
        case 4:
          return [2];
      }
    });
  });
}
function ensureWatchStream(remoteStoreImpl) {
  var _this = this;
  if (!remoteStoreImpl.watchStream) {
    remoteStoreImpl.watchStream = newPersistentWatchStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {
      onOpen: onWatchStreamOpen.bind(null, remoteStoreImpl),
      onClose: onWatchStreamClose.bind(null, remoteStoreImpl),
      onWatchChange: onWatchStreamChange.bind(null, remoteStoreImpl)
    });
    remoteStoreImpl.onNetworkStatusChange.push(function(enabled) {
      return tslib.__awaiter(_this, void 0, void 0, function() {
        return tslib.__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              if (!enabled)
                return [3, 1];
              remoteStoreImpl.watchStream.inhibitBackoff();
              if (shouldStartWatchStream(remoteStoreImpl)) {
                startWatchStream(remoteStoreImpl);
              } else {
                remoteStoreImpl.onlineStateTracker.set("Unknown");
              }
              return [3, 3];
            case 1:
              return [4, remoteStoreImpl.watchStream.stop()];
            case 2:
              _d.sent();
              cleanUpWatchStreamState(remoteStoreImpl);
              _d.label = 3;
            case 3:
              return [2];
          }
        });
      });
    });
  }
  return remoteStoreImpl.watchStream;
}
function ensureWriteStream(remoteStoreImpl) {
  var _this = this;
  if (!remoteStoreImpl.writeStream) {
    remoteStoreImpl.writeStream = newPersistentWriteStream(remoteStoreImpl.datastore, remoteStoreImpl.asyncQueue, {
      onOpen: onWriteStreamOpen.bind(null, remoteStoreImpl),
      onClose: onWriteStreamClose.bind(null, remoteStoreImpl),
      onHandshakeComplete: onWriteHandshakeComplete.bind(null, remoteStoreImpl),
      onMutationResult: onMutationResult.bind(null, remoteStoreImpl)
    });
    remoteStoreImpl.onNetworkStatusChange.push(function(enabled) {
      return tslib.__awaiter(_this, void 0, void 0, function() {
        return tslib.__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              if (!enabled)
                return [3, 2];
              remoteStoreImpl.writeStream.inhibitBackoff();
              return [4, fillWritePipeline(remoteStoreImpl)];
            case 1:
              _d.sent();
              return [3, 4];
            case 2:
              return [4, remoteStoreImpl.writeStream.stop()];
            case 3:
              _d.sent();
              if (remoteStoreImpl.writePipeline.length > 0) {
                logDebug(LOG_TAG$5, "Stopping write stream with " + remoteStoreImpl.writePipeline.length + " pending writes");
                remoteStoreImpl.writePipeline = [];
              }
              _d.label = 4;
            case 4:
              return [2];
          }
        });
      });
    });
  }
  return remoteStoreImpl.writeStream;
}
var LOG_TAG$4 = "AsyncQueue";
var DelayedOperation = function() {
  function DelayedOperation2(asyncQueue, timerId, targetTimeMs, op, removalCallback) {
    this.asyncQueue = asyncQueue;
    this.timerId = timerId;
    this.targetTimeMs = targetTimeMs;
    this.op = op;
    this.removalCallback = removalCallback;
    this.deferred = new Deferred();
    this.then = this.deferred.promise.then.bind(this.deferred.promise);
    this.deferred.promise.catch(function(err) {
    });
  }
  DelayedOperation2.createAndSchedule = function(asyncQueue, timerId, delayMs, op, removalCallback) {
    var targetTime = Date.now() + delayMs;
    var delayedOp = new DelayedOperation2(asyncQueue, timerId, targetTime, op, removalCallback);
    delayedOp.start(delayMs);
    return delayedOp;
  };
  DelayedOperation2.prototype.start = function(delayMs) {
    var _this = this;
    this.timerHandle = setTimeout(function() {
      return _this.handleDelayElapsed();
    }, delayMs);
  };
  DelayedOperation2.prototype.skipDelay = function() {
    return this.handleDelayElapsed();
  };
  DelayedOperation2.prototype.cancel = function(reason) {
    if (this.timerHandle !== null) {
      this.clearTimeout();
      this.deferred.reject(new FirestoreError(Code.CANCELLED, "Operation cancelled" + (reason ? ": " + reason : "")));
    }
  };
  DelayedOperation2.prototype.handleDelayElapsed = function() {
    var _this = this;
    this.asyncQueue.enqueueAndForget(function() {
      if (_this.timerHandle !== null) {
        _this.clearTimeout();
        return _this.op().then(function(result) {
          return _this.deferred.resolve(result);
        });
      } else {
        return Promise.resolve();
      }
    });
  };
  DelayedOperation2.prototype.clearTimeout = function() {
    if (this.timerHandle !== null) {
      this.removalCallback(this);
      clearTimeout(this.timerHandle);
      this.timerHandle = null;
    }
  };
  return DelayedOperation2;
}();
function wrapInUserErrorIfRecoverable(e, msg) {
  logError(LOG_TAG$4, msg + ": " + e);
  if (isIndexedDbTransactionError(e)) {
    return new FirestoreError(Code.UNAVAILABLE, msg + ": " + e);
  } else {
    throw e;
  }
}
var DocumentSet = function() {
  function DocumentSet2(comp) {
    if (comp) {
      this.comparator = function(d1, d2) {
        return comp(d1, d2) || DocumentKey.comparator(d1.key, d2.key);
      };
    } else {
      this.comparator = function(d1, d2) {
        return DocumentKey.comparator(d1.key, d2.key);
      };
    }
    this.keyedMap = documentMap();
    this.sortedSet = new SortedMap(this.comparator);
  }
  DocumentSet2.emptySet = function(oldSet) {
    return new DocumentSet2(oldSet.comparator);
  };
  DocumentSet2.prototype.has = function(key) {
    return this.keyedMap.get(key) != null;
  };
  DocumentSet2.prototype.get = function(key) {
    return this.keyedMap.get(key);
  };
  DocumentSet2.prototype.first = function() {
    return this.sortedSet.minKey();
  };
  DocumentSet2.prototype.last = function() {
    return this.sortedSet.maxKey();
  };
  DocumentSet2.prototype.isEmpty = function() {
    return this.sortedSet.isEmpty();
  };
  DocumentSet2.prototype.indexOf = function(key) {
    var doc2 = this.keyedMap.get(key);
    return doc2 ? this.sortedSet.indexOf(doc2) : -1;
  };
  Object.defineProperty(DocumentSet2.prototype, "size", {
    get: function() {
      return this.sortedSet.size;
    },
    enumerable: false,
    configurable: true
  });
  DocumentSet2.prototype.forEach = function(cb) {
    this.sortedSet.inorderTraversal(function(k, v) {
      cb(k);
      return false;
    });
  };
  DocumentSet2.prototype.add = function(doc2) {
    var set = this.delete(doc2.key);
    return set.copy(set.keyedMap.insert(doc2.key, doc2), set.sortedSet.insert(doc2, null));
  };
  DocumentSet2.prototype.delete = function(key) {
    var doc2 = this.get(key);
    if (!doc2) {
      return this;
    }
    return this.copy(this.keyedMap.remove(key), this.sortedSet.remove(doc2));
  };
  DocumentSet2.prototype.isEqual = function(other) {
    if (!(other instanceof DocumentSet2)) {
      return false;
    }
    if (this.size !== other.size) {
      return false;
    }
    var thisIt = this.sortedSet.getIterator();
    var otherIt = other.sortedSet.getIterator();
    while (thisIt.hasNext()) {
      var thisDoc = thisIt.getNext().key;
      var otherDoc = otherIt.getNext().key;
      if (!thisDoc.isEqual(otherDoc)) {
        return false;
      }
    }
    return true;
  };
  DocumentSet2.prototype.toString = function() {
    var docStrings = [];
    this.forEach(function(doc2) {
      docStrings.push(doc2.toString());
    });
    if (docStrings.length === 0) {
      return "DocumentSet ()";
    } else {
      return "DocumentSet (\n  " + docStrings.join("  \n") + "\n)";
    }
  };
  DocumentSet2.prototype.copy = function(keyedMap, sortedSet) {
    var newSet = new DocumentSet2();
    newSet.comparator = this.comparator;
    newSet.keyedMap = keyedMap;
    newSet.sortedSet = sortedSet;
    return newSet;
  };
  return DocumentSet2;
}();
var DocumentChangeSet = function() {
  function DocumentChangeSet2() {
    this.changeMap = new SortedMap(DocumentKey.comparator);
  }
  DocumentChangeSet2.prototype.track = function(change) {
    var key = change.doc.key;
    var oldChange = this.changeMap.get(key);
    if (!oldChange) {
      this.changeMap = this.changeMap.insert(key, change);
      return;
    }
    if (change.type !== 0 && oldChange.type === 3) {
      this.changeMap = this.changeMap.insert(key, change);
    } else if (change.type === 3 && oldChange.type !== 1) {
      this.changeMap = this.changeMap.insert(key, {
        type: oldChange.type,
        doc: change.doc
      });
    } else if (change.type === 2 && oldChange.type === 2) {
      this.changeMap = this.changeMap.insert(key, {
        type: 2,
        doc: change.doc
      });
    } else if (change.type === 2 && oldChange.type === 0) {
      this.changeMap = this.changeMap.insert(key, {
        type: 0,
        doc: change.doc
      });
    } else if (change.type === 1 && oldChange.type === 0) {
      this.changeMap = this.changeMap.remove(key);
    } else if (change.type === 1 && oldChange.type === 2) {
      this.changeMap = this.changeMap.insert(key, {
        type: 1,
        doc: oldChange.doc
      });
    } else if (change.type === 0 && oldChange.type === 1) {
      this.changeMap = this.changeMap.insert(key, {
        type: 2,
        doc: change.doc
      });
    } else {
      fail();
    }
  };
  DocumentChangeSet2.prototype.getChanges = function() {
    var changes = [];
    this.changeMap.inorderTraversal(function(key, change) {
      changes.push(change);
    });
    return changes;
  };
  return DocumentChangeSet2;
}();
var ViewSnapshot = function() {
  function ViewSnapshot2(query2, docs, oldDocs, docChanges, mutatedKeys, fromCache, syncStateChanged, excludesMetadataChanges) {
    this.query = query2;
    this.docs = docs;
    this.oldDocs = oldDocs;
    this.docChanges = docChanges;
    this.mutatedKeys = mutatedKeys;
    this.fromCache = fromCache;
    this.syncStateChanged = syncStateChanged;
    this.excludesMetadataChanges = excludesMetadataChanges;
  }
  ViewSnapshot2.fromInitialDocuments = function(query2, documents, mutatedKeys, fromCache) {
    var changes = [];
    documents.forEach(function(doc2) {
      changes.push({ type: 0, doc: doc2 });
    });
    return new ViewSnapshot2(query2, documents, DocumentSet.emptySet(documents), changes, mutatedKeys, fromCache, true, false);
  };
  Object.defineProperty(ViewSnapshot2.prototype, "hasPendingWrites", {
    get: function() {
      return !this.mutatedKeys.isEmpty();
    },
    enumerable: false,
    configurable: true
  });
  ViewSnapshot2.prototype.isEqual = function(other) {
    if (this.fromCache !== other.fromCache || this.syncStateChanged !== other.syncStateChanged || !this.mutatedKeys.isEqual(other.mutatedKeys) || !queryEquals(this.query, other.query) || !this.docs.isEqual(other.docs) || !this.oldDocs.isEqual(other.oldDocs)) {
      return false;
    }
    var changes = this.docChanges;
    var otherChanges = other.docChanges;
    if (changes.length !== otherChanges.length) {
      return false;
    }
    for (var i = 0; i < changes.length; i++) {
      if (changes[i].type !== otherChanges[i].type || !changes[i].doc.isEqual(otherChanges[i].doc)) {
        return false;
      }
    }
    return true;
  };
  return ViewSnapshot2;
}();
var QueryListenersInfo = function() {
  function QueryListenersInfo2() {
    this.viewSnap = void 0;
    this.listeners = [];
  }
  return QueryListenersInfo2;
}();
function newEventManager() {
  return new EventManagerImpl();
}
var EventManagerImpl = function() {
  function EventManagerImpl2() {
    this.queries = new ObjectMap(function(q) {
      return canonifyQuery(q);
    }, queryEquals);
    this.onlineState = "Unknown";
    this.snapshotsInSyncListeners = new Set();
  }
  return EventManagerImpl2;
}();
function eventManagerListen(eventManager, listener) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var eventManagerImpl, query2, firstListen, queryInfo, _d, e_7, firestoreError, raisedEvent;
    return tslib.__generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          eventManagerImpl = debugCast(eventManager);
          query2 = listener.query;
          firstListen = false;
          queryInfo = eventManagerImpl.queries.get(query2);
          if (!queryInfo) {
            firstListen = true;
            queryInfo = new QueryListenersInfo();
          }
          if (!firstListen)
            return [3, 4];
          _e.label = 1;
        case 1:
          _e.trys.push([1, 3, , 4]);
          _d = queryInfo;
          return [4, eventManagerImpl.onListen(query2)];
        case 2:
          _d.viewSnap = _e.sent();
          return [3, 4];
        case 3:
          e_7 = _e.sent();
          firestoreError = wrapInUserErrorIfRecoverable(e_7, "Initialization of query '" + stringifyQuery(listener.query) + "' failed");
          listener.onError(firestoreError);
          return [2];
        case 4:
          eventManagerImpl.queries.set(query2, queryInfo);
          queryInfo.listeners.push(listener);
          listener.applyOnlineStateChange(eventManagerImpl.onlineState);
          if (queryInfo.viewSnap) {
            raisedEvent = listener.onViewSnapshot(queryInfo.viewSnap);
            if (raisedEvent) {
              raiseSnapshotsInSyncEvent(eventManagerImpl);
            }
          }
          return [2];
      }
    });
  });
}
function eventManagerUnlisten(eventManager, listener) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var eventManagerImpl, query2, lastListen, queryInfo, i;
    return tslib.__generator(this, function(_d) {
      eventManagerImpl = debugCast(eventManager);
      query2 = listener.query;
      lastListen = false;
      queryInfo = eventManagerImpl.queries.get(query2);
      if (queryInfo) {
        i = queryInfo.listeners.indexOf(listener);
        if (i >= 0) {
          queryInfo.listeners.splice(i, 1);
          lastListen = queryInfo.listeners.length === 0;
        }
      }
      if (lastListen) {
        eventManagerImpl.queries.delete(query2);
        return [2, eventManagerImpl.onUnlisten(query2)];
      }
      return [2];
    });
  });
}
function eventManagerOnWatchChange(eventManager, viewSnaps) {
  var eventManagerImpl = debugCast(eventManager);
  var raisedEvent = false;
  for (var _i = 0, viewSnaps_1 = viewSnaps; _i < viewSnaps_1.length; _i++) {
    var viewSnap = viewSnaps_1[_i];
    var query_1 = viewSnap.query;
    var queryInfo = eventManagerImpl.queries.get(query_1);
    if (queryInfo) {
      for (var _d = 0, _e = queryInfo.listeners; _d < _e.length; _d++) {
        var listener = _e[_d];
        if (listener.onViewSnapshot(viewSnap)) {
          raisedEvent = true;
        }
      }
      queryInfo.viewSnap = viewSnap;
    }
  }
  if (raisedEvent) {
    raiseSnapshotsInSyncEvent(eventManagerImpl);
  }
}
function eventManagerOnWatchError(eventManager, query2, error2) {
  var eventManagerImpl = debugCast(eventManager);
  var queryInfo = eventManagerImpl.queries.get(query2);
  if (queryInfo) {
    for (var _i = 0, _d = queryInfo.listeners; _i < _d.length; _i++) {
      var listener = _d[_i];
      listener.onError(error2);
    }
  }
  eventManagerImpl.queries.delete(query2);
}
function eventManagerOnOnlineStateChange(eventManager, onlineState) {
  var eventManagerImpl = debugCast(eventManager);
  eventManagerImpl.onlineState = onlineState;
  var raisedEvent = false;
  eventManagerImpl.queries.forEach(function(_, queryInfo) {
    for (var _i = 0, _d = queryInfo.listeners; _i < _d.length; _i++) {
      var listener = _d[_i];
      if (listener.applyOnlineStateChange(onlineState)) {
        raisedEvent = true;
      }
    }
  });
  if (raisedEvent) {
    raiseSnapshotsInSyncEvent(eventManagerImpl);
  }
}
function addSnapshotsInSyncListener(eventManager, observer) {
  var eventManagerImpl = debugCast(eventManager);
  eventManagerImpl.snapshotsInSyncListeners.add(observer);
  observer.next();
}
function removeSnapshotsInSyncListener(eventManager, observer) {
  var eventManagerImpl = debugCast(eventManager);
  eventManagerImpl.snapshotsInSyncListeners.delete(observer);
}
function raiseSnapshotsInSyncEvent(eventManagerImpl) {
  eventManagerImpl.snapshotsInSyncListeners.forEach(function(observer) {
    observer.next();
  });
}
var QueryListener = function() {
  function QueryListener2(query2, queryObserver, options2) {
    this.query = query2;
    this.queryObserver = queryObserver;
    this.raisedInitialEvent = false;
    this.snap = null;
    this.onlineState = "Unknown";
    this.options = options2 || {};
  }
  QueryListener2.prototype.onViewSnapshot = function(snap) {
    if (!this.options.includeMetadataChanges) {
      var docChanges = [];
      for (var _i = 0, _d = snap.docChanges; _i < _d.length; _i++) {
        var docChange = _d[_i];
        if (docChange.type !== 3) {
          docChanges.push(docChange);
        }
      }
      snap = new ViewSnapshot(snap.query, snap.docs, snap.oldDocs, docChanges, snap.mutatedKeys, snap.fromCache, snap.syncStateChanged, true);
    }
    var raisedEvent = false;
    if (!this.raisedInitialEvent) {
      if (this.shouldRaiseInitialEvent(snap, this.onlineState)) {
        this.raiseInitialEvent(snap);
        raisedEvent = true;
      }
    } else if (this.shouldRaiseEvent(snap)) {
      this.queryObserver.next(snap);
      raisedEvent = true;
    }
    this.snap = snap;
    return raisedEvent;
  };
  QueryListener2.prototype.onError = function(error2) {
    this.queryObserver.error(error2);
  };
  QueryListener2.prototype.applyOnlineStateChange = function(onlineState) {
    this.onlineState = onlineState;
    var raisedEvent = false;
    if (this.snap && !this.raisedInitialEvent && this.shouldRaiseInitialEvent(this.snap, onlineState)) {
      this.raiseInitialEvent(this.snap);
      raisedEvent = true;
    }
    return raisedEvent;
  };
  QueryListener2.prototype.shouldRaiseInitialEvent = function(snap, onlineState) {
    if (!snap.fromCache) {
      return true;
    }
    var maybeOnline = onlineState !== "Offline";
    if (this.options.waitForSyncWhenOnline && maybeOnline) {
      return false;
    }
    return !snap.docs.isEmpty() || onlineState === "Offline";
  };
  QueryListener2.prototype.shouldRaiseEvent = function(snap) {
    if (snap.docChanges.length > 0) {
      return true;
    }
    var hasPendingWritesChanged = this.snap && this.snap.hasPendingWrites !== snap.hasPendingWrites;
    if (snap.syncStateChanged || hasPendingWritesChanged) {
      return this.options.includeMetadataChanges === true;
    }
    return false;
  };
  QueryListener2.prototype.raiseInitialEvent = function(snap) {
    snap = ViewSnapshot.fromInitialDocuments(snap.query, snap.docs, snap.mutatedKeys, snap.fromCache);
    this.raisedInitialEvent = true;
    this.queryObserver.next(snap);
  };
  return QueryListener2;
}();
var LocalViewChanges = function() {
  function LocalViewChanges2(targetId, fromCache, addedKeys, removedKeys) {
    this.targetId = targetId;
    this.fromCache = fromCache;
    this.addedKeys = addedKeys;
    this.removedKeys = removedKeys;
  }
  LocalViewChanges2.fromSnapshot = function(targetId, viewSnapshot) {
    var addedKeys = documentKeySet();
    var removedKeys = documentKeySet();
    for (var _i = 0, _d = viewSnapshot.docChanges; _i < _d.length; _i++) {
      var docChange = _d[_i];
      switch (docChange.type) {
        case 0:
          addedKeys = addedKeys.add(docChange.doc.key);
          break;
        case 1:
          removedKeys = removedKeys.add(docChange.doc.key);
          break;
      }
    }
    return new LocalViewChanges2(targetId, viewSnapshot.fromCache, addedKeys, removedKeys);
  };
  return LocalViewChanges2;
}();
var BundleLoadResult = function() {
  function BundleLoadResult2(progress, changedDocs) {
    this.progress = progress;
    this.changedDocs = changedDocs;
  }
  return BundleLoadResult2;
}();
var BundleConverterImpl = function() {
  function BundleConverterImpl2(serializer) {
    this.serializer = serializer;
  }
  BundleConverterImpl2.prototype.toDocumentKey = function(name2) {
    return fromName(this.serializer, name2);
  };
  BundleConverterImpl2.prototype.toMutableDocument = function(bundledDoc) {
    if (bundledDoc.metadata.exists) {
      return fromDocument(this.serializer, bundledDoc.document, false);
    } else {
      return MutableDocument.newNoDocument(this.toDocumentKey(bundledDoc.metadata.name), this.toSnapshotVersion(bundledDoc.metadata.readTime));
    }
  };
  BundleConverterImpl2.prototype.toSnapshotVersion = function(time) {
    return fromVersion(time);
  };
  return BundleConverterImpl2;
}();
var BundleLoader = function() {
  function BundleLoader2(bundleMetadata, localStore, serializer) {
    this.bundleMetadata = bundleMetadata;
    this.localStore = localStore;
    this.serializer = serializer;
    this.queries = [];
    this.documents = [];
    this.progress = bundleInitialProgress(bundleMetadata);
  }
  BundleLoader2.prototype.addSizedElement = function(element) {
    this.progress.bytesLoaded += element.byteLength;
    var documentsLoaded = this.progress.documentsLoaded;
    if (element.payload.namedQuery) {
      this.queries.push(element.payload.namedQuery);
    } else if (element.payload.documentMetadata) {
      this.documents.push({ metadata: element.payload.documentMetadata });
      if (!element.payload.documentMetadata.exists) {
        ++documentsLoaded;
      }
    } else if (element.payload.document) {
      this.documents[this.documents.length - 1].document = element.payload.document;
      ++documentsLoaded;
    }
    if (documentsLoaded !== this.progress.documentsLoaded) {
      this.progress.documentsLoaded = documentsLoaded;
      return Object.assign({}, this.progress);
    }
    return null;
  };
  BundleLoader2.prototype.getQueryDocumentMapping = function(documents) {
    var queryDocumentMap = new Map();
    var bundleConverter = new BundleConverterImpl(this.serializer);
    for (var _i = 0, documents_2 = documents; _i < documents_2.length; _i++) {
      var bundleDoc = documents_2[_i];
      if (bundleDoc.metadata.queries) {
        var documentKey = bundleConverter.toDocumentKey(bundleDoc.metadata.name);
        for (var _d = 0, _e = bundleDoc.metadata.queries; _d < _e.length; _d++) {
          var queryName = _e[_d];
          var documentKeys = (queryDocumentMap.get(queryName) || documentKeySet()).add(documentKey);
          queryDocumentMap.set(queryName, documentKeys);
        }
      }
    }
    return queryDocumentMap;
  };
  BundleLoader2.prototype.complete = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var changedDocuments, queryDocumentMap, _i, _d, q;
      return tslib.__generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            return [4, localStoreApplyBundledDocuments(this.localStore, new BundleConverterImpl(this.serializer), this.documents, this.bundleMetadata.id)];
          case 1:
            changedDocuments = _e.sent();
            queryDocumentMap = this.getQueryDocumentMapping(this.documents);
            _i = 0, _d = this.queries;
            _e.label = 2;
          case 2:
            if (!(_i < _d.length))
              return [3, 5];
            q = _d[_i];
            return [4, localStoreSaveNamedQuery(this.localStore, q, queryDocumentMap.get(q.name))];
          case 3:
            _e.sent();
            _e.label = 4;
          case 4:
            _i++;
            return [3, 2];
          case 5:
            this.progress.taskState = "Success";
            return [2, new BundleLoadResult(Object.assign({}, this.progress), changedDocuments)];
        }
      });
    });
  };
  return BundleLoader2;
}();
function bundleInitialProgress(metadata2) {
  return {
    taskState: "Running",
    documentsLoaded: 0,
    bytesLoaded: 0,
    totalDocuments: metadata2.totalDocuments,
    totalBytes: metadata2.totalBytes
  };
}
function bundleSuccessProgress(metadata2) {
  return {
    taskState: "Success",
    documentsLoaded: metadata2.totalDocuments,
    bytesLoaded: metadata2.totalBytes,
    totalDocuments: metadata2.totalDocuments,
    totalBytes: metadata2.totalBytes
  };
}
var AddedLimboDocument = function() {
  function AddedLimboDocument2(key) {
    this.key = key;
  }
  return AddedLimboDocument2;
}();
var RemovedLimboDocument = function() {
  function RemovedLimboDocument2(key) {
    this.key = key;
  }
  return RemovedLimboDocument2;
}();
var View = function() {
  function View2(query2, _syncedDocuments) {
    this.query = query2;
    this._syncedDocuments = _syncedDocuments;
    this.syncState = null;
    this.current = false;
    this.limboDocuments = documentKeySet();
    this.mutatedKeys = documentKeySet();
    this.docComparator = newQueryComparator(query2);
    this.documentSet = new DocumentSet(this.docComparator);
  }
  Object.defineProperty(View2.prototype, "syncedDocuments", {
    get: function() {
      return this._syncedDocuments;
    },
    enumerable: false,
    configurable: true
  });
  View2.prototype.computeDocChanges = function(docChanges, previousChanges) {
    var _this = this;
    var changeSet = previousChanges ? previousChanges.changeSet : new DocumentChangeSet();
    var oldDocumentSet = previousChanges ? previousChanges.documentSet : this.documentSet;
    var newMutatedKeys = previousChanges ? previousChanges.mutatedKeys : this.mutatedKeys;
    var newDocumentSet = oldDocumentSet;
    var needsRefill = false;
    var lastDocInLimit = hasLimitToFirst(this.query) && oldDocumentSet.size === this.query.limit ? oldDocumentSet.last() : null;
    var firstDocInLimit = hasLimitToLast(this.query) && oldDocumentSet.size === this.query.limit ? oldDocumentSet.first() : null;
    docChanges.inorderTraversal(function(key, entry) {
      var oldDoc2 = oldDocumentSet.get(key);
      var newDoc = queryMatches(_this.query, entry) ? entry : null;
      var oldDocHadPendingMutations = oldDoc2 ? _this.mutatedKeys.has(oldDoc2.key) : false;
      var newDocHasPendingMutations = newDoc ? newDoc.hasLocalMutations || _this.mutatedKeys.has(newDoc.key) && newDoc.hasCommittedMutations : false;
      var changeApplied = false;
      if (oldDoc2 && newDoc) {
        var docsEqual = oldDoc2.data.isEqual(newDoc.data);
        if (!docsEqual) {
          if (!_this.shouldWaitForSyncedDocument(oldDoc2, newDoc)) {
            changeSet.track({
              type: 2,
              doc: newDoc
            });
            changeApplied = true;
            if (lastDocInLimit && _this.docComparator(newDoc, lastDocInLimit) > 0 || firstDocInLimit && _this.docComparator(newDoc, firstDocInLimit) < 0) {
              needsRefill = true;
            }
          }
        } else if (oldDocHadPendingMutations !== newDocHasPendingMutations) {
          changeSet.track({ type: 3, doc: newDoc });
          changeApplied = true;
        }
      } else if (!oldDoc2 && newDoc) {
        changeSet.track({ type: 0, doc: newDoc });
        changeApplied = true;
      } else if (oldDoc2 && !newDoc) {
        changeSet.track({ type: 1, doc: oldDoc2 });
        changeApplied = true;
        if (lastDocInLimit || firstDocInLimit) {
          needsRefill = true;
        }
      }
      if (changeApplied) {
        if (newDoc) {
          newDocumentSet = newDocumentSet.add(newDoc);
          if (newDocHasPendingMutations) {
            newMutatedKeys = newMutatedKeys.add(key);
          } else {
            newMutatedKeys = newMutatedKeys.delete(key);
          }
        } else {
          newDocumentSet = newDocumentSet.delete(key);
          newMutatedKeys = newMutatedKeys.delete(key);
        }
      }
    });
    if (hasLimitToFirst(this.query) || hasLimitToLast(this.query)) {
      while (newDocumentSet.size > this.query.limit) {
        var oldDoc = hasLimitToFirst(this.query) ? newDocumentSet.last() : newDocumentSet.first();
        newDocumentSet = newDocumentSet.delete(oldDoc.key);
        newMutatedKeys = newMutatedKeys.delete(oldDoc.key);
        changeSet.track({ type: 1, doc: oldDoc });
      }
    }
    return {
      documentSet: newDocumentSet,
      changeSet,
      needsRefill,
      mutatedKeys: newMutatedKeys
    };
  };
  View2.prototype.shouldWaitForSyncedDocument = function(oldDoc, newDoc) {
    return oldDoc.hasLocalMutations && newDoc.hasCommittedMutations && !newDoc.hasLocalMutations;
  };
  View2.prototype.applyChanges = function(docChanges, updateLimboDocuments, targetChange) {
    var _this = this;
    var oldDocs = this.documentSet;
    this.documentSet = docChanges.documentSet;
    this.mutatedKeys = docChanges.mutatedKeys;
    var changes = docChanges.changeSet.getChanges();
    changes.sort(function(c1, c2) {
      return compareChangeType(c1.type, c2.type) || _this.docComparator(c1.doc, c2.doc);
    });
    this.applyTargetChange(targetChange);
    var limboChanges = updateLimboDocuments ? this.updateLimboDocuments() : [];
    var synced = this.limboDocuments.size === 0 && this.current;
    var newSyncState = synced ? 1 : 0;
    var syncStateChanged = newSyncState !== this.syncState;
    this.syncState = newSyncState;
    if (changes.length === 0 && !syncStateChanged) {
      return { limboChanges };
    } else {
      var snap = new ViewSnapshot(this.query, docChanges.documentSet, oldDocs, changes, docChanges.mutatedKeys, newSyncState === 0, syncStateChanged, false);
      return {
        snapshot: snap,
        limboChanges
      };
    }
  };
  View2.prototype.applyOnlineStateChange = function(onlineState) {
    if (this.current && onlineState === "Offline") {
      this.current = false;
      return this.applyChanges({
        documentSet: this.documentSet,
        changeSet: new DocumentChangeSet(),
        mutatedKeys: this.mutatedKeys,
        needsRefill: false
      }, false);
    } else {
      return { limboChanges: [] };
    }
  };
  View2.prototype.shouldBeInLimbo = function(key) {
    if (this._syncedDocuments.has(key)) {
      return false;
    }
    if (!this.documentSet.has(key)) {
      return false;
    }
    if (this.documentSet.get(key).hasLocalMutations) {
      return false;
    }
    return true;
  };
  View2.prototype.applyTargetChange = function(targetChange) {
    var _this = this;
    if (targetChange) {
      targetChange.addedDocuments.forEach(function(key) {
        return _this._syncedDocuments = _this._syncedDocuments.add(key);
      });
      targetChange.modifiedDocuments.forEach(function(key) {
      });
      targetChange.removedDocuments.forEach(function(key) {
        return _this._syncedDocuments = _this._syncedDocuments.delete(key);
      });
      this.current = targetChange.current;
    }
  };
  View2.prototype.updateLimboDocuments = function() {
    var _this = this;
    if (!this.current) {
      return [];
    }
    var oldLimboDocuments = this.limboDocuments;
    this.limboDocuments = documentKeySet();
    this.documentSet.forEach(function(doc2) {
      if (_this.shouldBeInLimbo(doc2.key)) {
        _this.limboDocuments = _this.limboDocuments.add(doc2.key);
      }
    });
    var changes = [];
    oldLimboDocuments.forEach(function(key) {
      if (!_this.limboDocuments.has(key)) {
        changes.push(new RemovedLimboDocument(key));
      }
    });
    this.limboDocuments.forEach(function(key) {
      if (!oldLimboDocuments.has(key)) {
        changes.push(new AddedLimboDocument(key));
      }
    });
    return changes;
  };
  View2.prototype.synchronizeWithPersistedState = function(queryResult) {
    this._syncedDocuments = queryResult.remoteKeys;
    this.limboDocuments = documentKeySet();
    var docChanges = this.computeDocChanges(queryResult.documents);
    return this.applyChanges(docChanges, true);
  };
  View2.prototype.computeInitialSnapshot = function() {
    return ViewSnapshot.fromInitialDocuments(this.query, this.documentSet, this.mutatedKeys, this.syncState === 0);
  };
  return View2;
}();
function compareChangeType(c1, c2) {
  var order = function(change) {
    switch (change) {
      case 0:
        return 1;
      case 2:
        return 2;
      case 3:
        return 2;
      case 1:
        return 0;
      default:
        return fail();
    }
  };
  return order(c1) - order(c2);
}
var LOG_TAG$3 = "SyncEngine";
var QueryView = function() {
  function QueryView2(query2, targetId, view) {
    this.query = query2;
    this.targetId = targetId;
    this.view = view;
  }
  return QueryView2;
}();
var LimboResolution = function() {
  function LimboResolution2(key) {
    this.key = key;
    this.receivedDocument = false;
  }
  return LimboResolution2;
}();
var SyncEngineImpl = function() {
  function SyncEngineImpl2(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions) {
    this.localStore = localStore;
    this.remoteStore = remoteStore;
    this.eventManager = eventManager;
    this.sharedClientState = sharedClientState;
    this.currentUser = currentUser;
    this.maxConcurrentLimboResolutions = maxConcurrentLimboResolutions;
    this.syncEngineListener = {};
    this.queryViewsByQuery = new ObjectMap(function(q) {
      return canonifyQuery(q);
    }, queryEquals);
    this.queriesByTarget = new Map();
    this.enqueuedLimboResolutions = new Set();
    this.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);
    this.activeLimboResolutionsByTarget = new Map();
    this.limboDocumentRefs = new ReferenceSet();
    this.mutationUserCallbacks = {};
    this.pendingWritesCallbacks = new Map();
    this.limboTargetIdGenerator = TargetIdGenerator.forSyncEngine();
    this.onlineState = "Unknown";
    this._isPrimaryClient = void 0;
  }
  Object.defineProperty(SyncEngineImpl2.prototype, "isPrimaryClient", {
    get: function() {
      return this._isPrimaryClient === true;
    },
    enumerable: false,
    configurable: true
  });
  return SyncEngineImpl2;
}();
function newSyncEngine(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions, isPrimary) {
  var syncEngine = new SyncEngineImpl(localStore, remoteStore, eventManager, sharedClientState, currentUser, maxConcurrentLimboResolutions);
  if (isPrimary) {
    syncEngine._isPrimaryClient = true;
  }
  return syncEngine;
}
function syncEngineListen(syncEngine, query2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, targetId, viewSnapshot, queryView, targetData, status_1;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = ensureWatchCallbacks(syncEngine);
          queryView = syncEngineImpl.queryViewsByQuery.get(query2);
          if (!queryView)
            return [3, 1];
          targetId = queryView.targetId;
          syncEngineImpl.sharedClientState.addLocalQueryTarget(targetId);
          viewSnapshot = queryView.view.computeInitialSnapshot();
          return [3, 4];
        case 1:
          return [4, localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(query2))];
        case 2:
          targetData = _d.sent();
          status_1 = syncEngineImpl.sharedClientState.addLocalQueryTarget(targetData.targetId);
          targetId = targetData.targetId;
          return [4, initializeViewAndComputeSnapshot(syncEngineImpl, query2, targetId, status_1 === "current")];
        case 3:
          viewSnapshot = _d.sent();
          if (syncEngineImpl.isPrimaryClient) {
            remoteStoreListen(syncEngineImpl.remoteStore, targetData);
          }
          _d.label = 4;
        case 4:
          return [2, viewSnapshot];
      }
    });
  });
}
function initializeViewAndComputeSnapshot(syncEngineImpl, query2, targetId, current) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var queryResult, view, viewDocChanges, synthesizedTargetChange, viewChange, data;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl.applyDocChanges = function(queryView, changes, remoteEvent) {
            return applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent);
          };
          return [4, localStoreExecuteQuery(syncEngineImpl.localStore, query2, true)];
        case 1:
          queryResult = _d.sent();
          view = new View(query2, queryResult.remoteKeys);
          viewDocChanges = view.computeDocChanges(queryResult.documents);
          synthesizedTargetChange = TargetChange.createSynthesizedTargetChangeForCurrentChange(targetId, current && syncEngineImpl.onlineState !== "Offline");
          viewChange = view.applyChanges(viewDocChanges, syncEngineImpl.isPrimaryClient, synthesizedTargetChange);
          updateTrackedLimbos(syncEngineImpl, targetId, viewChange.limboChanges);
          data = new QueryView(query2, targetId, view);
          syncEngineImpl.queryViewsByQuery.set(query2, data);
          if (syncEngineImpl.queriesByTarget.has(targetId)) {
            syncEngineImpl.queriesByTarget.get(targetId).push(query2);
          } else {
            syncEngineImpl.queriesByTarget.set(targetId, [query2]);
          }
          return [2, viewChange.snapshot];
      }
    });
  });
}
function syncEngineUnlisten(syncEngine, query2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, queryView, queries, targetRemainsActive;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          queryView = syncEngineImpl.queryViewsByQuery.get(query2);
          queries = syncEngineImpl.queriesByTarget.get(queryView.targetId);
          if (queries.length > 1) {
            syncEngineImpl.queriesByTarget.set(queryView.targetId, queries.filter(function(q) {
              return !queryEquals(q, query2);
            }));
            syncEngineImpl.queryViewsByQuery.delete(query2);
            return [2];
          }
          if (!syncEngineImpl.isPrimaryClient)
            return [3, 3];
          syncEngineImpl.sharedClientState.removeLocalQueryTarget(queryView.targetId);
          targetRemainsActive = syncEngineImpl.sharedClientState.isActiveQueryTarget(queryView.targetId);
          if (!!targetRemainsActive)
            return [3, 2];
          return [4, localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId, false).then(function() {
            syncEngineImpl.sharedClientState.clearQueryState(queryView.targetId);
            remoteStoreUnlisten(syncEngineImpl.remoteStore, queryView.targetId);
            removeAndCleanupTarget(syncEngineImpl, queryView.targetId);
          }).catch(ignoreIfPrimaryLeaseLoss)];
        case 1:
          _d.sent();
          _d.label = 2;
        case 2:
          return [3, 5];
        case 3:
          removeAndCleanupTarget(syncEngineImpl, queryView.targetId);
          return [4, localStoreReleaseTarget(syncEngineImpl.localStore, queryView.targetId, true)];
        case 4:
          _d.sent();
          _d.label = 5;
        case 5:
          return [2];
      }
    });
  });
}
function syncEngineWrite(syncEngine, batch, userCallback) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, result, e_8, error2;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = syncEngineEnsureWriteCallbacks(syncEngine);
          _d.label = 1;
        case 1:
          _d.trys.push([1, 5, , 6]);
          return [4, localStoreWriteLocally(syncEngineImpl.localStore, batch)];
        case 2:
          result = _d.sent();
          syncEngineImpl.sharedClientState.addPendingMutation(result.batchId);
          addMutationCallback(syncEngineImpl, result.batchId, userCallback);
          return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.changes)];
        case 3:
          _d.sent();
          return [4, fillWritePipeline(syncEngineImpl.remoteStore)];
        case 4:
          _d.sent();
          return [3, 6];
        case 5:
          e_8 = _d.sent();
          error2 = wrapInUserErrorIfRecoverable(e_8, "Failed to persist write");
          userCallback.reject(error2);
          return [3, 6];
        case 6:
          return [2];
      }
    });
  });
}
function syncEngineApplyRemoteEvent(syncEngine, remoteEvent) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, changes, error_2;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          _d.label = 1;
        case 1:
          _d.trys.push([1, 4, , 6]);
          return [4, localStoreApplyRemoteEventToLocalCache(syncEngineImpl.localStore, remoteEvent)];
        case 2:
          changes = _d.sent();
          remoteEvent.targetChanges.forEach(function(targetChange, targetId) {
            var limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);
            if (limboResolution) {
              hardAssert(targetChange.addedDocuments.size + targetChange.modifiedDocuments.size + targetChange.removedDocuments.size <= 1);
              if (targetChange.addedDocuments.size > 0) {
                limboResolution.receivedDocument = true;
              } else if (targetChange.modifiedDocuments.size > 0) {
                hardAssert(limboResolution.receivedDocument);
              } else if (targetChange.removedDocuments.size > 0) {
                hardAssert(limboResolution.receivedDocument);
                limboResolution.receivedDocument = false;
              } else
                ;
            }
          });
          return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, remoteEvent)];
        case 3:
          _d.sent();
          return [3, 6];
        case 4:
          error_2 = _d.sent();
          return [4, ignoreIfPrimaryLeaseLoss(error_2)];
        case 5:
          _d.sent();
          return [3, 6];
        case 6:
          return [2];
      }
    });
  });
}
function syncEngineApplyOnlineStateChange(syncEngine, onlineState, source) {
  var syncEngineImpl = debugCast(syncEngine);
  if (syncEngineImpl.isPrimaryClient && source === 0 || !syncEngineImpl.isPrimaryClient && source === 1) {
    var newViewSnapshots_1 = [];
    syncEngineImpl.queryViewsByQuery.forEach(function(query2, queryView) {
      var viewChange = queryView.view.applyOnlineStateChange(onlineState);
      if (viewChange.snapshot) {
        newViewSnapshots_1.push(viewChange.snapshot);
      }
    });
    eventManagerOnOnlineStateChange(syncEngineImpl.eventManager, onlineState);
    if (newViewSnapshots_1.length) {
      syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots_1);
    }
    syncEngineImpl.onlineState = onlineState;
    if (syncEngineImpl.isPrimaryClient) {
      syncEngineImpl.sharedClientState.setOnlineState(onlineState);
    }
  }
}
function syncEngineRejectListen(syncEngine, targetId, err) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, limboResolution, limboKey, documentUpdates, resolvedLimboDocuments, event_2;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          syncEngineImpl.sharedClientState.updateQueryState(targetId, "rejected", err);
          limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);
          limboKey = limboResolution && limboResolution.key;
          if (!limboKey)
            return [3, 2];
          documentUpdates = new SortedMap(DocumentKey.comparator);
          documentUpdates = documentUpdates.insert(limboKey, MutableDocument.newNoDocument(limboKey, SnapshotVersion.min()));
          resolvedLimboDocuments = documentKeySet().add(limboKey);
          event_2 = new RemoteEvent(SnapshotVersion.min(), new Map(), new SortedSet(primitiveComparator), documentUpdates, resolvedLimboDocuments);
          return [4, syncEngineApplyRemoteEvent(syncEngineImpl, event_2)];
        case 1:
          _d.sent();
          syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(limboKey);
          syncEngineImpl.activeLimboResolutionsByTarget.delete(targetId);
          pumpEnqueuedLimboResolutions(syncEngineImpl);
          return [3, 4];
        case 2:
          return [4, localStoreReleaseTarget(syncEngineImpl.localStore, targetId, false).then(function() {
            return removeAndCleanupTarget(syncEngineImpl, targetId, err);
          }).catch(ignoreIfPrimaryLeaseLoss)];
        case 3:
          _d.sent();
          _d.label = 4;
        case 4:
          return [2];
      }
    });
  });
}
function syncEngineApplySuccessfulWrite(syncEngine, mutationBatchResult) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, batchId, changes, error_3;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          batchId = mutationBatchResult.batch.batchId;
          _d.label = 1;
        case 1:
          _d.trys.push([1, 4, , 6]);
          return [4, localStoreAcknowledgeBatch(syncEngineImpl.localStore, mutationBatchResult)];
        case 2:
          changes = _d.sent();
          processUserCallback(syncEngineImpl, batchId, null);
          triggerPendingWritesCallbacks(syncEngineImpl, batchId);
          syncEngineImpl.sharedClientState.updateMutationState(batchId, "acknowledged");
          return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes)];
        case 3:
          _d.sent();
          return [3, 6];
        case 4:
          error_3 = _d.sent();
          return [4, ignoreIfPrimaryLeaseLoss(error_3)];
        case 5:
          _d.sent();
          return [3, 6];
        case 6:
          return [2];
      }
    });
  });
}
function syncEngineRejectFailedWrite(syncEngine, batchId, error2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, changes, error_4;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          _d.label = 1;
        case 1:
          _d.trys.push([1, 4, , 6]);
          return [4, localStoreRejectBatch(syncEngineImpl.localStore, batchId)];
        case 2:
          changes = _d.sent();
          processUserCallback(syncEngineImpl, batchId, error2);
          triggerPendingWritesCallbacks(syncEngineImpl, batchId);
          syncEngineImpl.sharedClientState.updateMutationState(batchId, "rejected", error2);
          return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes)];
        case 3:
          _d.sent();
          return [3, 6];
        case 4:
          error_4 = _d.sent();
          return [4, ignoreIfPrimaryLeaseLoss(error_4)];
        case 5:
          _d.sent();
          return [3, 6];
        case 6:
          return [2];
      }
    });
  });
}
function syncEngineRegisterPendingWritesCallback(syncEngine, callback) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, highestBatchId, callbacks, e_9, firestoreError;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          if (!canUseNetwork(syncEngineImpl.remoteStore)) {
            logDebug(LOG_TAG$3, "The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");
          }
          _d.label = 1;
        case 1:
          _d.trys.push([1, 3, , 4]);
          return [4, localStoreGetHighestUnacknowledgedBatchId(syncEngineImpl.localStore)];
        case 2:
          highestBatchId = _d.sent();
          if (highestBatchId === BATCHID_UNKNOWN) {
            callback.resolve();
            return [2];
          }
          callbacks = syncEngineImpl.pendingWritesCallbacks.get(highestBatchId) || [];
          callbacks.push(callback);
          syncEngineImpl.pendingWritesCallbacks.set(highestBatchId, callbacks);
          return [3, 4];
        case 3:
          e_9 = _d.sent();
          firestoreError = wrapInUserErrorIfRecoverable(e_9, "Initialization of waitForPendingWrites() operation failed");
          callback.reject(firestoreError);
          return [3, 4];
        case 4:
          return [2];
      }
    });
  });
}
function triggerPendingWritesCallbacks(syncEngineImpl, batchId) {
  (syncEngineImpl.pendingWritesCallbacks.get(batchId) || []).forEach(function(callback) {
    callback.resolve();
  });
  syncEngineImpl.pendingWritesCallbacks.delete(batchId);
}
function rejectOutstandingPendingWritesCallbacks(syncEngineImpl, errorMessage) {
  syncEngineImpl.pendingWritesCallbacks.forEach(function(callbacks) {
    callbacks.forEach(function(callback) {
      callback.reject(new FirestoreError(Code.CANCELLED, errorMessage));
    });
  });
  syncEngineImpl.pendingWritesCallbacks.clear();
}
function addMutationCallback(syncEngineImpl, batchId, callback) {
  var newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];
  if (!newCallbacks) {
    newCallbacks = new SortedMap(primitiveComparator);
  }
  newCallbacks = newCallbacks.insert(batchId, callback);
  syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;
}
function processUserCallback(syncEngine, batchId, error2) {
  var syncEngineImpl = debugCast(syncEngine);
  var newCallbacks = syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()];
  if (newCallbacks) {
    var callback = newCallbacks.get(batchId);
    if (callback) {
      if (error2) {
        callback.reject(error2);
      } else {
        callback.resolve();
      }
      newCallbacks = newCallbacks.remove(batchId);
    }
    syncEngineImpl.mutationUserCallbacks[syncEngineImpl.currentUser.toKey()] = newCallbacks;
  }
}
function removeAndCleanupTarget(syncEngineImpl, targetId, error2) {
  if (error2 === void 0) {
    error2 = null;
  }
  syncEngineImpl.sharedClientState.removeLocalQueryTarget(targetId);
  for (var _i = 0, _d = syncEngineImpl.queriesByTarget.get(targetId); _i < _d.length; _i++) {
    var query_2 = _d[_i];
    syncEngineImpl.queryViewsByQuery.delete(query_2);
    if (error2) {
      syncEngineImpl.syncEngineListener.onWatchError(query_2, error2);
    }
  }
  syncEngineImpl.queriesByTarget.delete(targetId);
  if (syncEngineImpl.isPrimaryClient) {
    var limboKeys = syncEngineImpl.limboDocumentRefs.removeReferencesForId(targetId);
    limboKeys.forEach(function(limboKey) {
      var isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboKey);
      if (!isReferenced) {
        removeLimboTarget(syncEngineImpl, limboKey);
      }
    });
  }
}
function removeLimboTarget(syncEngineImpl, key) {
  syncEngineImpl.enqueuedLimboResolutions.delete(key.path.canonicalString());
  var limboTargetId = syncEngineImpl.activeLimboTargetsByKey.get(key);
  if (limboTargetId === null) {
    return;
  }
  remoteStoreUnlisten(syncEngineImpl.remoteStore, limboTargetId);
  syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.remove(key);
  syncEngineImpl.activeLimboResolutionsByTarget.delete(limboTargetId);
  pumpEnqueuedLimboResolutions(syncEngineImpl);
}
function updateTrackedLimbos(syncEngineImpl, targetId, limboChanges) {
  for (var _i = 0, limboChanges_1 = limboChanges; _i < limboChanges_1.length; _i++) {
    var limboChange = limboChanges_1[_i];
    if (limboChange instanceof AddedLimboDocument) {
      syncEngineImpl.limboDocumentRefs.addReference(limboChange.key, targetId);
      trackLimboChange(syncEngineImpl, limboChange);
    } else if (limboChange instanceof RemovedLimboDocument) {
      logDebug(LOG_TAG$3, "Document no longer in limbo: " + limboChange.key);
      syncEngineImpl.limboDocumentRefs.removeReference(limboChange.key, targetId);
      var isReferenced = syncEngineImpl.limboDocumentRefs.containsKey(limboChange.key);
      if (!isReferenced) {
        removeLimboTarget(syncEngineImpl, limboChange.key);
      }
    } else {
      fail();
    }
  }
}
function trackLimboChange(syncEngineImpl, limboChange) {
  var key = limboChange.key;
  var keyString = key.path.canonicalString();
  if (!syncEngineImpl.activeLimboTargetsByKey.get(key) && !syncEngineImpl.enqueuedLimboResolutions.has(keyString)) {
    logDebug(LOG_TAG$3, "New document in limbo: " + key);
    syncEngineImpl.enqueuedLimboResolutions.add(keyString);
    pumpEnqueuedLimboResolutions(syncEngineImpl);
  }
}
function pumpEnqueuedLimboResolutions(syncEngineImpl) {
  while (syncEngineImpl.enqueuedLimboResolutions.size > 0 && syncEngineImpl.activeLimboTargetsByKey.size < syncEngineImpl.maxConcurrentLimboResolutions) {
    var keyString = syncEngineImpl.enqueuedLimboResolutions.values().next().value;
    syncEngineImpl.enqueuedLimboResolutions.delete(keyString);
    var key = new DocumentKey(ResourcePath.fromString(keyString));
    var limboTargetId = syncEngineImpl.limboTargetIdGenerator.next();
    syncEngineImpl.activeLimboResolutionsByTarget.set(limboTargetId, new LimboResolution(key));
    syncEngineImpl.activeLimboTargetsByKey = syncEngineImpl.activeLimboTargetsByKey.insert(key, limboTargetId);
    remoteStoreListen(syncEngineImpl.remoteStore, new TargetData(queryToTarget(newQueryForPath(key.path)), limboTargetId, 2, ListenSequence.INVALID));
  }
}
function syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, changes, remoteEvent) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, newSnaps, docChangesInAllViews, queriesProcessed;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          newSnaps = [];
          docChangesInAllViews = [];
          queriesProcessed = [];
          if (syncEngineImpl.queryViewsByQuery.isEmpty()) {
            return [2];
          }
          syncEngineImpl.queryViewsByQuery.forEach(function(_, queryView) {
            queriesProcessed.push(syncEngineImpl.applyDocChanges(queryView, changes, remoteEvent).then(function(viewSnapshot) {
              if (viewSnapshot) {
                if (syncEngineImpl.isPrimaryClient) {
                  syncEngineImpl.sharedClientState.updateQueryState(queryView.targetId, viewSnapshot.fromCache ? "not-current" : "current");
                }
                newSnaps.push(viewSnapshot);
                var docChanges = LocalViewChanges.fromSnapshot(queryView.targetId, viewSnapshot);
                docChangesInAllViews.push(docChanges);
              }
            }));
          });
          return [4, Promise.all(queriesProcessed)];
        case 1:
          _d.sent();
          syncEngineImpl.syncEngineListener.onWatchChange(newSnaps);
          return [4, localStoreNotifyLocalViewChanges(syncEngineImpl.localStore, docChangesInAllViews)];
        case 2:
          _d.sent();
          return [2];
      }
    });
  });
}
function applyDocChanges(syncEngineImpl, queryView, changes, remoteEvent) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var viewDocChanges, targetChange, viewChange;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          viewDocChanges = queryView.view.computeDocChanges(changes);
          if (!viewDocChanges.needsRefill)
            return [3, 2];
          return [4, localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query, false).then(function(_d2) {
            var documents = _d2.documents;
            return queryView.view.computeDocChanges(documents, viewDocChanges);
          })];
        case 1:
          viewDocChanges = _d.sent();
          _d.label = 2;
        case 2:
          targetChange = remoteEvent && remoteEvent.targetChanges.get(queryView.targetId);
          viewChange = queryView.view.applyChanges(viewDocChanges, syncEngineImpl.isPrimaryClient, targetChange);
          updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewChange.limboChanges);
          return [2, viewChange.snapshot];
      }
    });
  });
}
function syncEngineHandleCredentialChange(syncEngine, user2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, userChanged, result;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          userChanged = !syncEngineImpl.currentUser.isEqual(user2);
          if (!userChanged)
            return [3, 3];
          logDebug(LOG_TAG$3, "User change. New user:", user2.toKey());
          return [4, localStoreHandleUserChange(syncEngineImpl.localStore, user2)];
        case 1:
          result = _d.sent();
          syncEngineImpl.currentUser = user2;
          rejectOutstandingPendingWritesCallbacks(syncEngineImpl, "'waitForPendingWrites' promise is rejected due to a user change.");
          syncEngineImpl.sharedClientState.handleUserChange(user2, result.removedBatchIds, result.addedBatchIds);
          return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, result.affectedDocuments)];
        case 2:
          _d.sent();
          _d.label = 3;
        case 3:
          return [2];
      }
    });
  });
}
function syncEngineGetRemoteKeysForTarget(syncEngine, targetId) {
  var syncEngineImpl = debugCast(syncEngine);
  var limboResolution = syncEngineImpl.activeLimboResolutionsByTarget.get(targetId);
  if (limboResolution && limboResolution.receivedDocument) {
    return documentKeySet().add(limboResolution.key);
  } else {
    var keySet = documentKeySet();
    var queries = syncEngineImpl.queriesByTarget.get(targetId);
    if (!queries) {
      return keySet;
    }
    for (var _i = 0, queries_1 = queries; _i < queries_1.length; _i++) {
      var query_3 = queries_1[_i];
      var queryView = syncEngineImpl.queryViewsByQuery.get(query_3);
      keySet = keySet.unionWith(queryView.view.syncedDocuments);
    }
    return keySet;
  }
}
function synchronizeViewAndComputeSnapshot(syncEngine, queryView) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, queryResult, viewSnapshot;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          return [4, localStoreExecuteQuery(syncEngineImpl.localStore, queryView.query, true)];
        case 1:
          queryResult = _d.sent();
          viewSnapshot = queryView.view.synchronizeWithPersistedState(queryResult);
          if (syncEngineImpl.isPrimaryClient) {
            updateTrackedLimbos(syncEngineImpl, queryView.targetId, viewSnapshot.limboChanges);
          }
          return [2, viewSnapshot];
      }
    });
  });
}
function syncEngineSynchronizeWithChangedDocuments(syncEngine) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl;
    return tslib.__generator(this, function(_d) {
      syncEngineImpl = debugCast(syncEngine);
      return [2, localStoreGetNewDocumentChanges(syncEngineImpl.localStore).then(function(changes) {
        return syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes);
      })];
    });
  });
}
function syncEngineApplyBatchState(syncEngine, batchId, batchState, error2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, documents;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          return [4, localStoreLookupMutationDocuments(syncEngineImpl.localStore, batchId)];
        case 1:
          documents = _d.sent();
          if (documents === null) {
            logDebug(LOG_TAG$3, "Cannot apply mutation batch with id: " + batchId);
            return [2];
          }
          if (!(batchState === "pending"))
            return [3, 3];
          return [4, fillWritePipeline(syncEngineImpl.remoteStore)];
        case 2:
          _d.sent();
          return [3, 4];
        case 3:
          if (batchState === "acknowledged" || batchState === "rejected") {
            processUserCallback(syncEngineImpl, batchId, error2 ? error2 : null);
            triggerPendingWritesCallbacks(syncEngineImpl, batchId);
            localStoreRemoveCachedMutationBatchMetadata(syncEngineImpl.localStore, batchId);
          } else {
            fail();
          }
          _d.label = 4;
        case 4:
          return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, documents)];
        case 5:
          _d.sent();
          return [2];
      }
    });
  });
}
function syncEngineApplyPrimaryState(syncEngine, isPrimary) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, activeTargets, activeQueries, _i, activeQueries_1, targetData, activeTargets_1, p_1;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          ensureWatchCallbacks(syncEngineImpl);
          syncEngineEnsureWriteCallbacks(syncEngineImpl);
          if (!(isPrimary === true && syncEngineImpl._isPrimaryClient !== true))
            return [3, 3];
          activeTargets = syncEngineImpl.sharedClientState.getAllActiveQueryTargets();
          return [4, synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets.toArray())];
        case 1:
          activeQueries = _d.sent();
          syncEngineImpl._isPrimaryClient = true;
          return [4, remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, true)];
        case 2:
          _d.sent();
          for (_i = 0, activeQueries_1 = activeQueries; _i < activeQueries_1.length; _i++) {
            targetData = activeQueries_1[_i];
            remoteStoreListen(syncEngineImpl.remoteStore, targetData);
          }
          return [3, 7];
        case 3:
          if (!(isPrimary === false && syncEngineImpl._isPrimaryClient !== false))
            return [3, 7];
          activeTargets_1 = [];
          p_1 = Promise.resolve();
          syncEngineImpl.queriesByTarget.forEach(function(_, targetId) {
            if (syncEngineImpl.sharedClientState.isLocalQueryTarget(targetId)) {
              activeTargets_1.push(targetId);
            } else {
              p_1 = p_1.then(function() {
                removeAndCleanupTarget(syncEngineImpl, targetId);
                return localStoreReleaseTarget(syncEngineImpl.localStore, targetId, true);
              });
            }
            remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);
          });
          return [4, p_1];
        case 4:
          _d.sent();
          return [4, synchronizeQueryViewsAndRaiseSnapshots(syncEngineImpl, activeTargets_1)];
        case 5:
          _d.sent();
          resetLimboDocuments(syncEngineImpl);
          syncEngineImpl._isPrimaryClient = false;
          return [4, remoteStoreApplyPrimaryState(syncEngineImpl.remoteStore, false)];
        case 6:
          _d.sent();
          _d.label = 7;
        case 7:
          return [2];
      }
    });
  });
}
function resetLimboDocuments(syncEngine) {
  var syncEngineImpl = debugCast(syncEngine);
  syncEngineImpl.activeLimboResolutionsByTarget.forEach(function(_, targetId) {
    remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId);
  });
  syncEngineImpl.limboDocumentRefs.removeAllReferences();
  syncEngineImpl.activeLimboResolutionsByTarget = new Map();
  syncEngineImpl.activeLimboTargetsByKey = new SortedMap(DocumentKey.comparator);
}
function synchronizeQueryViewsAndRaiseSnapshots(syncEngine, targets, transitionToPrimary) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, activeQueries, newViewSnapshots, _i, targets_1, targetId, targetData, queries, _d, queries_2, query_4, queryView, viewChange, target;
    return tslib.__generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          activeQueries = [];
          newViewSnapshots = [];
          _i = 0, targets_1 = targets;
          _e.label = 1;
        case 1:
          if (!(_i < targets_1.length))
            return [3, 13];
          targetId = targets_1[_i];
          targetData = void 0;
          queries = syncEngineImpl.queriesByTarget.get(targetId);
          if (!(queries && queries.length !== 0))
            return [3, 7];
          return [4, localStoreAllocateTarget(syncEngineImpl.localStore, queryToTarget(queries[0]))];
        case 2:
          targetData = _e.sent();
          _d = 0, queries_2 = queries;
          _e.label = 3;
        case 3:
          if (!(_d < queries_2.length))
            return [3, 6];
          query_4 = queries_2[_d];
          queryView = syncEngineImpl.queryViewsByQuery.get(query_4);
          return [4, synchronizeViewAndComputeSnapshot(syncEngineImpl, queryView)];
        case 4:
          viewChange = _e.sent();
          if (viewChange.snapshot) {
            newViewSnapshots.push(viewChange.snapshot);
          }
          _e.label = 5;
        case 5:
          _d++;
          return [3, 3];
        case 6:
          return [3, 11];
        case 7:
          return [4, localStoreGetCachedTarget(syncEngineImpl.localStore, targetId)];
        case 8:
          target = _e.sent();
          return [4, localStoreAllocateTarget(syncEngineImpl.localStore, target)];
        case 9:
          targetData = _e.sent();
          return [4, initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetId, false)];
        case 10:
          _e.sent();
          _e.label = 11;
        case 11:
          activeQueries.push(targetData);
          _e.label = 12;
        case 12:
          _i++;
          return [3, 1];
        case 13:
          syncEngineImpl.syncEngineListener.onWatchChange(newViewSnapshots);
          return [2, activeQueries];
      }
    });
  });
}
function synthesizeTargetToQuery(target) {
  return newQuery(target.path, target.collectionGroup, target.orderBy, target.filters, target.limit, "F", target.startAt, target.endAt);
}
function syncEngineGetActiveClients(syncEngine) {
  var syncEngineImpl = debugCast(syncEngine);
  return localStoreGetActiveClients(syncEngineImpl.localStore);
}
function syncEngineApplyTargetState(syncEngine, targetId, state, error2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, _d, changes, synthesizedRemoteEvent;
    return tslib.__generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          syncEngineImpl = debugCast(syncEngine);
          if (syncEngineImpl._isPrimaryClient) {
            logDebug(LOG_TAG$3, "Ignoring unexpected query state notification.");
            return [2];
          }
          if (!syncEngineImpl.queriesByTarget.has(targetId))
            return [3, 7];
          _d = state;
          switch (_d) {
            case "current":
              return [3, 1];
            case "not-current":
              return [3, 1];
            case "rejected":
              return [3, 4];
          }
          return [3, 6];
        case 1:
          return [4, localStoreGetNewDocumentChanges(syncEngineImpl.localStore)];
        case 2:
          changes = _e.sent();
          synthesizedRemoteEvent = RemoteEvent.createSynthesizedRemoteEventForCurrentChange(targetId, state === "current");
          return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngineImpl, changes, synthesizedRemoteEvent)];
        case 3:
          _e.sent();
          return [3, 7];
        case 4:
          return [4, localStoreReleaseTarget(syncEngineImpl.localStore, targetId, true)];
        case 5:
          _e.sent();
          removeAndCleanupTarget(syncEngineImpl, targetId, error2);
          return [3, 7];
        case 6:
          fail();
          _e.label = 7;
        case 7:
          return [2];
      }
    });
  });
}
function syncEngineApplyActiveTargetsChange(syncEngine, added, removed) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var syncEngineImpl, _i, added_1, targetId, target, targetData, _loop_5, _d, removed_1, targetId;
    return tslib.__generator(this, function(_e) {
      switch (_e.label) {
        case 0:
          syncEngineImpl = ensureWatchCallbacks(syncEngine);
          if (!syncEngineImpl._isPrimaryClient) {
            return [2];
          }
          _i = 0, added_1 = added;
          _e.label = 1;
        case 1:
          if (!(_i < added_1.length))
            return [3, 6];
          targetId = added_1[_i];
          if (syncEngineImpl.queriesByTarget.has(targetId)) {
            logDebug(LOG_TAG$3, "Adding an already active target " + targetId);
            return [3, 5];
          }
          return [4, localStoreGetCachedTarget(syncEngineImpl.localStore, targetId)];
        case 2:
          target = _e.sent();
          return [4, localStoreAllocateTarget(syncEngineImpl.localStore, target)];
        case 3:
          targetData = _e.sent();
          return [4, initializeViewAndComputeSnapshot(syncEngineImpl, synthesizeTargetToQuery(target), targetData.targetId, false)];
        case 4:
          _e.sent();
          remoteStoreListen(syncEngineImpl.remoteStore, targetData);
          _e.label = 5;
        case 5:
          _i++;
          return [3, 1];
        case 6:
          _loop_5 = function(targetId2) {
            return tslib.__generator(this, function(_f) {
              switch (_f.label) {
                case 0:
                  if (!syncEngineImpl.queriesByTarget.has(targetId2)) {
                    return [2, "continue"];
                  }
                  return [4, localStoreReleaseTarget(syncEngineImpl.localStore, targetId2, false).then(function() {
                    remoteStoreUnlisten(syncEngineImpl.remoteStore, targetId2);
                    removeAndCleanupTarget(syncEngineImpl, targetId2);
                  }).catch(ignoreIfPrimaryLeaseLoss)];
                case 1:
                  _f.sent();
                  return [2];
              }
            });
          };
          _d = 0, removed_1 = removed;
          _e.label = 7;
        case 7:
          if (!(_d < removed_1.length))
            return [3, 10];
          targetId = removed_1[_d];
          return [5, _loop_5(targetId)];
        case 8:
          _e.sent();
          _e.label = 9;
        case 9:
          _d++;
          return [3, 7];
        case 10:
          return [2];
      }
    });
  });
}
function ensureWatchCallbacks(syncEngine) {
  var syncEngineImpl = debugCast(syncEngine);
  syncEngineImpl.remoteStore.remoteSyncer.applyRemoteEvent = syncEngineApplyRemoteEvent.bind(null, syncEngineImpl);
  syncEngineImpl.remoteStore.remoteSyncer.getRemoteKeysForTarget = syncEngineGetRemoteKeysForTarget.bind(null, syncEngineImpl);
  syncEngineImpl.remoteStore.remoteSyncer.rejectListen = syncEngineRejectListen.bind(null, syncEngineImpl);
  syncEngineImpl.syncEngineListener.onWatchChange = eventManagerOnWatchChange.bind(null, syncEngineImpl.eventManager);
  syncEngineImpl.syncEngineListener.onWatchError = eventManagerOnWatchError.bind(null, syncEngineImpl.eventManager);
  return syncEngineImpl;
}
function syncEngineEnsureWriteCallbacks(syncEngine) {
  var syncEngineImpl = debugCast(syncEngine);
  syncEngineImpl.remoteStore.remoteSyncer.applySuccessfulWrite = syncEngineApplySuccessfulWrite.bind(null, syncEngineImpl);
  syncEngineImpl.remoteStore.remoteSyncer.rejectFailedWrite = syncEngineRejectFailedWrite.bind(null, syncEngineImpl);
  return syncEngineImpl;
}
function syncEngineLoadBundle(syncEngine, bundleReader, task) {
  var syncEngineImpl = debugCast(syncEngine);
  loadBundleImpl(syncEngineImpl, bundleReader, task).then(function() {
    syncEngineImpl.sharedClientState.notifyBundleLoaded();
  });
}
function loadBundleImpl(syncEngine, reader2, task) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var metadata2, skip2, loader, element, progress, result, e_10;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          _d.trys.push([0, 13, , 14]);
          return [4, reader2.getMetadata()];
        case 1:
          metadata2 = _d.sent();
          return [4, localStoreHasNewerBundle(syncEngine.localStore, metadata2)];
        case 2:
          skip2 = _d.sent();
          if (!skip2)
            return [3, 4];
          return [4, reader2.close()];
        case 3:
          _d.sent();
          task._completeWith(bundleSuccessProgress(metadata2));
          return [2];
        case 4:
          task._updateProgress(bundleInitialProgress(metadata2));
          loader = new BundleLoader(metadata2, syncEngine.localStore, reader2.serializer);
          return [4, reader2.nextElement()];
        case 5:
          element = _d.sent();
          _d.label = 6;
        case 6:
          if (!element)
            return [3, 9];
          return [4, loader.addSizedElement(element)];
        case 7:
          progress = _d.sent();
          if (progress) {
            task._updateProgress(progress);
          }
          return [4, reader2.nextElement()];
        case 8:
          element = _d.sent();
          return [3, 6];
        case 9:
          return [4, loader.complete()];
        case 10:
          result = _d.sent();
          return [4, syncEngineEmitNewSnapsAndNotifyLocalStore(syncEngine, result.changedDocs, void 0)];
        case 11:
          _d.sent();
          return [4, localStoreSaveBundle(syncEngine.localStore, metadata2)];
        case 12:
          _d.sent();
          task._completeWith(result.progress);
          return [3, 14];
        case 13:
          e_10 = _d.sent();
          logWarn(LOG_TAG$3, "Loading bundle failed with " + e_10);
          task._failWith(e_10);
          return [3, 14];
        case 14:
          return [2];
      }
    });
  });
}
var MemoryOfflineComponentProvider = function() {
  function MemoryOfflineComponentProvider2() {
    this.synchronizeTabs = false;
  }
  MemoryOfflineComponentProvider2.prototype.initialize = function(cfg) {
    return tslib.__awaiter(this, void 0, void 0, function() {
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            this.serializer = newSerializer(cfg.databaseInfo.databaseId);
            this.sharedClientState = this.createSharedClientState(cfg);
            this.persistence = this.createPersistence(cfg);
            return [4, this.persistence.start()];
          case 1:
            _d.sent();
            this.gcScheduler = this.createGarbageCollectionScheduler(cfg);
            this.localStore = this.createLocalStore(cfg);
            return [2];
        }
      });
    });
  };
  MemoryOfflineComponentProvider2.prototype.createGarbageCollectionScheduler = function(cfg) {
    return null;
  };
  MemoryOfflineComponentProvider2.prototype.createLocalStore = function(cfg) {
    return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);
  };
  MemoryOfflineComponentProvider2.prototype.createPersistence = function(cfg) {
    return new MemoryPersistence(MemoryEagerDelegate.factory, this.serializer);
  };
  MemoryOfflineComponentProvider2.prototype.createSharedClientState = function(cfg) {
    return new MemorySharedClientState();
  };
  MemoryOfflineComponentProvider2.prototype.terminate = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            if (this.gcScheduler) {
              this.gcScheduler.stop();
            }
            return [4, this.sharedClientState.shutdown()];
          case 1:
            _d.sent();
            return [4, this.persistence.shutdown()];
          case 2:
            _d.sent();
            return [2];
        }
      });
    });
  };
  return MemoryOfflineComponentProvider2;
}();
var IndexedDbOfflineComponentProvider = function(_super) {
  tslib.__extends(IndexedDbOfflineComponentProvider2, _super);
  function IndexedDbOfflineComponentProvider2(onlineComponentProvider, cacheSizeBytes, forceOwnership) {
    var _this = _super.call(this) || this;
    _this.onlineComponentProvider = onlineComponentProvider;
    _this.cacheSizeBytes = cacheSizeBytes;
    _this.forceOwnership = forceOwnership;
    _this.synchronizeTabs = false;
    return _this;
  }
  IndexedDbOfflineComponentProvider2.prototype.initialize = function(cfg) {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var _this = this;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, _super.prototype.initialize.call(this, cfg)];
          case 1:
            _d.sent();
            return [4, localStoreSynchronizeLastDocumentChangeReadTime(this.localStore)];
          case 2:
            _d.sent();
            return [4, this.onlineComponentProvider.initialize(this, cfg)];
          case 3:
            _d.sent();
            return [4, syncEngineEnsureWriteCallbacks(this.onlineComponentProvider.syncEngine)];
          case 4:
            _d.sent();
            return [4, fillWritePipeline(this.onlineComponentProvider.remoteStore)];
          case 5:
            _d.sent();
            return [4, this.persistence.setPrimaryStateListener(function() {
              if (_this.gcScheduler && !_this.gcScheduler.started) {
                _this.gcScheduler.start(_this.localStore);
              }
              return Promise.resolve();
            })];
          case 6:
            _d.sent();
            return [2];
        }
      });
    });
  };
  IndexedDbOfflineComponentProvider2.prototype.createLocalStore = function(cfg) {
    return newLocalStore(this.persistence, new QueryEngine(), cfg.initialUser, this.serializer);
  };
  IndexedDbOfflineComponentProvider2.prototype.createGarbageCollectionScheduler = function(cfg) {
    var garbageCollector = this.persistence.referenceDelegate.garbageCollector;
    return new LruScheduler(garbageCollector, cfg.asyncQueue);
  };
  IndexedDbOfflineComponentProvider2.prototype.createPersistence = function(cfg) {
    var persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);
    var lruParams = this.cacheSizeBytes !== void 0 ? LruParams.withCacheSize(this.cacheSizeBytes) : LruParams.DEFAULT;
    return new IndexedDbPersistence(this.synchronizeTabs, persistenceKey, cfg.clientId, lruParams, cfg.asyncQueue, getWindow(), getDocument(), this.serializer, this.sharedClientState, !!this.forceOwnership);
  };
  IndexedDbOfflineComponentProvider2.prototype.createSharedClientState = function(cfg) {
    return new MemorySharedClientState();
  };
  return IndexedDbOfflineComponentProvider2;
}(MemoryOfflineComponentProvider);
var MultiTabOfflineComponentProvider = function(_super) {
  tslib.__extends(MultiTabOfflineComponentProvider2, _super);
  function MultiTabOfflineComponentProvider2(onlineComponentProvider, cacheSizeBytes) {
    var _this = _super.call(this, onlineComponentProvider, cacheSizeBytes, false) || this;
    _this.onlineComponentProvider = onlineComponentProvider;
    _this.cacheSizeBytes = cacheSizeBytes;
    _this.synchronizeTabs = true;
    return _this;
  }
  MultiTabOfflineComponentProvider2.prototype.initialize = function(cfg) {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var syncEngine;
      var _this = this;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, _super.prototype.initialize.call(this, cfg)];
          case 1:
            _d.sent();
            syncEngine = this.onlineComponentProvider.syncEngine;
            if (!(this.sharedClientState instanceof WebStorageSharedClientState))
              return [3, 3];
            this.sharedClientState.syncEngine = {
              applyBatchState: syncEngineApplyBatchState.bind(null, syncEngine),
              applyTargetState: syncEngineApplyTargetState.bind(null, syncEngine),
              applyActiveTargetsChange: syncEngineApplyActiveTargetsChange.bind(null, syncEngine),
              getActiveClients: syncEngineGetActiveClients.bind(null, syncEngine),
              synchronizeWithChangedDocuments: syncEngineSynchronizeWithChangedDocuments.bind(null, syncEngine)
            };
            return [4, this.sharedClientState.start()];
          case 2:
            _d.sent();
            _d.label = 3;
          case 3:
            return [4, this.persistence.setPrimaryStateListener(function(isPrimary) {
              return tslib.__awaiter(_this, void 0, void 0, function() {
                return tslib.__generator(this, function(_d2) {
                  switch (_d2.label) {
                    case 0:
                      return [4, syncEngineApplyPrimaryState(this.onlineComponentProvider.syncEngine, isPrimary)];
                    case 1:
                      _d2.sent();
                      if (this.gcScheduler) {
                        if (isPrimary && !this.gcScheduler.started) {
                          this.gcScheduler.start(this.localStore);
                        } else if (!isPrimary) {
                          this.gcScheduler.stop();
                        }
                      }
                      return [2];
                  }
                });
              });
            })];
          case 4:
            _d.sent();
            return [2];
        }
      });
    });
  };
  MultiTabOfflineComponentProvider2.prototype.createSharedClientState = function(cfg) {
    var window2 = getWindow();
    if (!WebStorageSharedClientState.isAvailable(window2)) {
      throw new FirestoreError(Code.UNIMPLEMENTED, "IndexedDB persistence is only available on platforms that support LocalStorage.");
    }
    var persistenceKey = indexedDbStoragePrefix(cfg.databaseInfo.databaseId, cfg.databaseInfo.persistenceKey);
    return new WebStorageSharedClientState(window2, cfg.asyncQueue, persistenceKey, cfg.clientId, cfg.initialUser);
  };
  return MultiTabOfflineComponentProvider2;
}(IndexedDbOfflineComponentProvider);
var OnlineComponentProvider = function() {
  function OnlineComponentProvider2() {
  }
  OnlineComponentProvider2.prototype.initialize = function(offlineComponentProvider, cfg) {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var _this = this;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            if (this.localStore) {
              return [2];
            }
            this.localStore = offlineComponentProvider.localStore;
            this.sharedClientState = offlineComponentProvider.sharedClientState;
            this.datastore = this.createDatastore(cfg);
            this.remoteStore = this.createRemoteStore(cfg);
            this.eventManager = this.createEventManager(cfg);
            this.syncEngine = this.createSyncEngine(cfg, !offlineComponentProvider.synchronizeTabs);
            this.sharedClientState.onlineStateHandler = function(onlineState) {
              return syncEngineApplyOnlineStateChange(_this.syncEngine, onlineState, 1);
            };
            this.remoteStore.remoteSyncer.handleCredentialChange = syncEngineHandleCredentialChange.bind(null, this.syncEngine);
            return [4, remoteStoreApplyPrimaryState(this.remoteStore, this.syncEngine.isPrimaryClient)];
          case 1:
            _d.sent();
            return [2];
        }
      });
    });
  };
  OnlineComponentProvider2.prototype.createEventManager = function(cfg) {
    return newEventManager();
  };
  OnlineComponentProvider2.prototype.createDatastore = function(cfg) {
    var serializer = newSerializer(cfg.databaseInfo.databaseId);
    var connection = newConnection(cfg.databaseInfo);
    return newDatastore(cfg.credentials, connection, serializer);
  };
  OnlineComponentProvider2.prototype.createRemoteStore = function(cfg) {
    var _this = this;
    return newRemoteStore(this.localStore, this.datastore, cfg.asyncQueue, function(onlineState) {
      return syncEngineApplyOnlineStateChange(_this.syncEngine, onlineState, 0);
    }, newConnectivityMonitor());
  };
  OnlineComponentProvider2.prototype.createSyncEngine = function(cfg, startAsPrimary) {
    return newSyncEngine(this.localStore, this.remoteStore, this.eventManager, this.sharedClientState, cfg.initialUser, cfg.maxConcurrentLimboResolutions, startAsPrimary);
  };
  OnlineComponentProvider2.prototype.terminate = function() {
    return remoteStoreShutdown(this.remoteStore);
  };
  return OnlineComponentProvider2;
}();
var DEFAULT_BYTES_PER_READ = 10240;
function toByteStreamReaderHelper(source, bytesPerRead) {
  if (bytesPerRead === void 0) {
    bytesPerRead = DEFAULT_BYTES_PER_READ;
  }
  var readFrom = 0;
  var reader2 = {
    read: function() {
      return tslib.__awaiter(this, void 0, void 0, function() {
        var result;
        return tslib.__generator(this, function(_d) {
          if (readFrom < source.byteLength) {
            result = {
              value: source.slice(readFrom, readFrom + bytesPerRead),
              done: false
            };
            readFrom += bytesPerRead;
            return [2, result];
          }
          return [2, { done: true }];
        });
      });
    },
    cancel: function() {
      return tslib.__awaiter(this, void 0, void 0, function() {
        return tslib.__generator(this, function(_d) {
          return [2];
        });
      });
    },
    releaseLock: function() {
    },
    closed: Promise.reject("unimplemented")
  };
  return reader2;
}
function validateNonEmptyArgument(functionName, argumentName, argument) {
  if (!argument) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() cannot be called with an empty " + argumentName + ".");
  }
}
function validateIsNotUsedTogether(optionName1, argument1, optionName2, argument2) {
  if (argument1 === true && argument2 === true) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, optionName1 + " and " + optionName2 + " cannot be used together.");
  }
}
function validateDocumentPath(path2) {
  if (!DocumentKey.isDocumentKey(path2)) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid document reference. Document references must have an even number of segments, but " + path2 + " has " + path2.length + ".");
  }
}
function validateCollectionPath(path2) {
  if (DocumentKey.isDocumentKey(path2)) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid collection reference. Collection references must have an odd number of segments, but " + path2 + " has " + path2.length + ".");
  }
}
function isPlainObject(input) {
  return typeof input === "object" && input !== null && (Object.getPrototypeOf(input) === Object.prototype || Object.getPrototypeOf(input) === null);
}
function valueDescription(input) {
  if (input === void 0) {
    return "undefined";
  } else if (input === null) {
    return "null";
  } else if (typeof input === "string") {
    if (input.length > 20) {
      input = input.substring(0, 20) + "...";
    }
    return JSON.stringify(input);
  } else if (typeof input === "number" || typeof input === "boolean") {
    return "" + input;
  } else if (typeof input === "object") {
    if (input instanceof Array) {
      return "an array";
    } else {
      var customObjectName = tryGetCustomObjectType(input);
      if (customObjectName) {
        return "a custom " + customObjectName + " object";
      } else {
        return "an object";
      }
    }
  } else if (typeof input === "function") {
    return "a function";
  } else {
    return fail();
  }
}
function tryGetCustomObjectType(input) {
  if (input.constructor) {
    return input.constructor.name;
  }
  return null;
}
function cast(obj, constructor) {
  if ("_delegate" in obj) {
    obj = obj._delegate;
  }
  if (!(obj instanceof constructor)) {
    if (constructor.name === obj.constructor.name) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");
    } else {
      var description2 = valueDescription(obj);
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Expected type '" + constructor.name + "', but it was: " + description2);
    }
  }
  return obj;
}
function validatePositiveNumber(functionName, n) {
  if (n <= 0) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + functionName + "() requires a positive number, but it was: " + n + ".");
  }
}
function toByteStreamReader(source, bytesPerRead) {
  if (!(source instanceof Uint8Array)) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "NodePlatform.toByteStreamReader expects source to be Uint8Array, got " + valueDescription(source));
  }
  return toByteStreamReaderHelper(source, bytesPerRead);
}
var AsyncObserver = function() {
  function AsyncObserver2(observer) {
    this.observer = observer;
    this.muted = false;
  }
  AsyncObserver2.prototype.next = function(value) {
    if (this.observer.next) {
      this.scheduleEvent(this.observer.next, value);
    }
  };
  AsyncObserver2.prototype.error = function(error2) {
    if (this.observer.error) {
      this.scheduleEvent(this.observer.error, error2);
    } else {
      console.error("Uncaught Error in snapshot listener:", error2);
    }
  };
  AsyncObserver2.prototype.mute = function() {
    this.muted = true;
  };
  AsyncObserver2.prototype.scheduleEvent = function(eventHandler, event) {
    var _this = this;
    if (!this.muted) {
      setTimeout(function() {
        if (!_this.muted) {
          eventHandler(event);
        }
      }, 0);
    }
  };
  return AsyncObserver2;
}();
var SizedBundleElement = function() {
  function SizedBundleElement2(payload, byteLength) {
    this.payload = payload;
    this.byteLength = byteLength;
  }
  SizedBundleElement2.prototype.isBundleMetadata = function() {
    return "metadata" in this.payload;
  };
  return SizedBundleElement2;
}();
var BundleReaderImpl = function() {
  function BundleReaderImpl2(reader2, serializer) {
    var _this = this;
    this.reader = reader2;
    this.serializer = serializer;
    this.metadata = new Deferred();
    this.buffer = new Uint8Array();
    this.textDecoder = newTextDecoder();
    this.nextElementImpl().then(function(element) {
      if (element && element.isBundleMetadata()) {
        _this.metadata.resolve(element.payload.metadata);
      } else {
        _this.metadata.reject(new Error("The first element of the bundle is not a metadata, it is\n             " + JSON.stringify(element === null || element === void 0 ? void 0 : element.payload)));
      }
    }, function(error2) {
      return _this.metadata.reject(error2);
    });
  }
  BundleReaderImpl2.prototype.close = function() {
    return this.reader.cancel();
  };
  BundleReaderImpl2.prototype.getMetadata = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      return tslib.__generator(this, function(_d) {
        return [2, this.metadata.promise];
      });
    });
  };
  BundleReaderImpl2.prototype.nextElement = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, this.getMetadata()];
          case 1:
            _d.sent();
            return [2, this.nextElementImpl()];
        }
      });
    });
  };
  BundleReaderImpl2.prototype.nextElementImpl = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var lengthBuffer, lengthString, length2, jsonString;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, this.readLength()];
          case 1:
            lengthBuffer = _d.sent();
            if (lengthBuffer === null) {
              return [2, null];
            }
            lengthString = this.textDecoder.decode(lengthBuffer);
            length2 = Number(lengthString);
            if (isNaN(length2)) {
              this.raiseError("length string (" + lengthString + ") is not valid number");
            }
            return [4, this.readJsonString(length2)];
          case 2:
            jsonString = _d.sent();
            return [2, new SizedBundleElement(JSON.parse(jsonString), lengthBuffer.length + length2)];
        }
      });
    });
  };
  BundleReaderImpl2.prototype.indexOfOpenBracket = function() {
    return this.buffer.findIndex(function(v) {
      return v === "{".charCodeAt(0);
    });
  };
  BundleReaderImpl2.prototype.readLength = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var done, position, result;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            if (!(this.indexOfOpenBracket() < 0))
              return [3, 2];
            return [4, this.pullMoreDataToBuffer()];
          case 1:
            done = _d.sent();
            if (done) {
              return [3, 2];
            }
            return [3, 0];
          case 2:
            if (this.buffer.length === 0) {
              return [2, null];
            }
            position = this.indexOfOpenBracket();
            if (position < 0) {
              this.raiseError("Reached the end of bundle when a length string is expected.");
            }
            result = this.buffer.slice(0, position);
            this.buffer = this.buffer.slice(position);
            return [2, result];
        }
      });
    });
  };
  BundleReaderImpl2.prototype.readJsonString = function(length2) {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var done, result;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            if (!(this.buffer.length < length2))
              return [3, 2];
            return [4, this.pullMoreDataToBuffer()];
          case 1:
            done = _d.sent();
            if (done) {
              this.raiseError("Reached the end of bundle when more is expected.");
            }
            return [3, 0];
          case 2:
            result = this.textDecoder.decode(this.buffer.slice(0, length2));
            this.buffer = this.buffer.slice(length2);
            return [2, result];
        }
      });
    });
  };
  BundleReaderImpl2.prototype.raiseError = function(message2) {
    this.reader.cancel();
    throw new Error("Invalid bundle format: " + message2);
  };
  BundleReaderImpl2.prototype.pullMoreDataToBuffer = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var result, newBuffer;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, this.reader.read()];
          case 1:
            result = _d.sent();
            if (!result.done) {
              newBuffer = new Uint8Array(this.buffer.length + result.value.length);
              newBuffer.set(this.buffer);
              newBuffer.set(result.value, this.buffer.length);
              this.buffer = newBuffer;
            }
            return [2, result.done];
        }
      });
    });
  };
  return BundleReaderImpl2;
}();
function newBundleReader(reader2, serializer) {
  return new BundleReaderImpl(reader2, serializer);
}
var Transaction$2 = function() {
  function Transaction$22(datastore) {
    this.datastore = datastore;
    this.readVersions = new Map();
    this.mutations = [];
    this.committed = false;
    this.lastWriteError = null;
    this.writtenDocs = new Set();
  }
  Transaction$22.prototype.lookup = function(keys) {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var docs;
      var _this = this;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            this.ensureCommitNotCalled();
            if (this.mutations.length > 0) {
              throw new FirestoreError(Code.INVALID_ARGUMENT, "Firestore transactions require all reads to be executed before all writes.");
            }
            return [4, invokeBatchGetDocumentsRpc(this.datastore, keys)];
          case 1:
            docs = _d.sent();
            docs.forEach(function(doc2) {
              return _this.recordVersion(doc2);
            });
            return [2, docs];
        }
      });
    });
  };
  Transaction$22.prototype.set = function(key, data) {
    this.write(data.toMutation(key, this.precondition(key)));
    this.writtenDocs.add(key.toString());
  };
  Transaction$22.prototype.update = function(key, data) {
    try {
      this.write(data.toMutation(key, this.preconditionForUpdate(key)));
    } catch (e) {
      this.lastWriteError = e;
    }
    this.writtenDocs.add(key.toString());
  };
  Transaction$22.prototype.delete = function(key) {
    this.write(new DeleteMutation(key, this.precondition(key)));
    this.writtenDocs.add(key.toString());
  };
  Transaction$22.prototype.commit = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var unwritten;
      var _this = this;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            this.ensureCommitNotCalled();
            if (this.lastWriteError) {
              throw this.lastWriteError;
            }
            unwritten = this.readVersions;
            this.mutations.forEach(function(mutation) {
              unwritten.delete(mutation.key.toString());
            });
            unwritten.forEach(function(_, path2) {
              var key = DocumentKey.fromPath(path2);
              _this.mutations.push(new VerifyMutation(key, _this.precondition(key)));
            });
            return [4, invokeCommitRpc(this.datastore, this.mutations)];
          case 1:
            _d.sent();
            this.committed = true;
            return [2];
        }
      });
    });
  };
  Transaction$22.prototype.recordVersion = function(doc2) {
    var docVersion;
    if (doc2.isFoundDocument()) {
      docVersion = doc2.version;
    } else if (doc2.isNoDocument()) {
      docVersion = SnapshotVersion.min();
    } else {
      throw fail();
    }
    var existingVersion = this.readVersions.get(doc2.key.toString());
    if (existingVersion) {
      if (!docVersion.isEqual(existingVersion)) {
        throw new FirestoreError(Code.ABORTED, "Document version changed between two reads.");
      }
    } else {
      this.readVersions.set(doc2.key.toString(), docVersion);
    }
  };
  Transaction$22.prototype.precondition = function(key) {
    var version2 = this.readVersions.get(key.toString());
    if (!this.writtenDocs.has(key.toString()) && version2) {
      return Precondition.updateTime(version2);
    } else {
      return Precondition.none();
    }
  };
  Transaction$22.prototype.preconditionForUpdate = function(key) {
    var version2 = this.readVersions.get(key.toString());
    if (!this.writtenDocs.has(key.toString()) && version2) {
      if (version2.isEqual(SnapshotVersion.min())) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Can't update a document that doesn't exist.");
      }
      return Precondition.updateTime(version2);
    } else {
      return Precondition.exists(true);
    }
  };
  Transaction$22.prototype.write = function(mutation) {
    this.ensureCommitNotCalled();
    this.mutations.push(mutation);
  };
  Transaction$22.prototype.ensureCommitNotCalled = function() {
  };
  return Transaction$22;
}();
var DEFAULT_MAX_ATTEMPTS_COUNT = 5;
var TransactionRunner = function() {
  function TransactionRunner2(asyncQueue, datastore, updateFunction, deferred) {
    this.asyncQueue = asyncQueue;
    this.datastore = datastore;
    this.updateFunction = updateFunction;
    this.deferred = deferred;
    this.attemptsRemaining = DEFAULT_MAX_ATTEMPTS_COUNT;
    this.backoff = new ExponentialBackoff(this.asyncQueue, "transaction_retry");
  }
  TransactionRunner2.prototype.run = function() {
    this.attemptsRemaining -= 1;
    this.runWithBackOff();
  };
  TransactionRunner2.prototype.runWithBackOff = function() {
    var _this = this;
    this.backoff.backoffAndRun(function() {
      return tslib.__awaiter(_this, void 0, void 0, function() {
        var transaction, userPromise;
        var _this2 = this;
        return tslib.__generator(this, function(_d) {
          transaction = new Transaction$2(this.datastore);
          userPromise = this.tryRunUpdateFunction(transaction);
          if (userPromise) {
            userPromise.then(function(result) {
              _this2.asyncQueue.enqueueAndForget(function() {
                return transaction.commit().then(function() {
                  _this2.deferred.resolve(result);
                }).catch(function(commitError) {
                  _this2.handleTransactionError(commitError);
                });
              });
            }).catch(function(userPromiseError) {
              _this2.handleTransactionError(userPromiseError);
            });
          }
          return [2];
        });
      });
    });
  };
  TransactionRunner2.prototype.tryRunUpdateFunction = function(transaction) {
    try {
      var userPromise = this.updateFunction(transaction);
      if (isNullOrUndefined(userPromise) || !userPromise.catch || !userPromise.then) {
        this.deferred.reject(Error("Transaction callback must return a Promise"));
        return null;
      }
      return userPromise;
    } catch (error2) {
      this.deferred.reject(error2);
      return null;
    }
  };
  TransactionRunner2.prototype.handleTransactionError = function(error2) {
    var _this = this;
    if (this.attemptsRemaining > 0 && this.isRetryableTransactionError(error2)) {
      this.attemptsRemaining -= 1;
      this.asyncQueue.enqueueAndForget(function() {
        _this.runWithBackOff();
        return Promise.resolve();
      });
    } else {
      this.deferred.reject(error2);
    }
  };
  TransactionRunner2.prototype.isRetryableTransactionError = function(error2) {
    if (error2.name === "FirebaseError") {
      var code = error2.code;
      return code === "aborted" || code === "failed-precondition" || !isPermanentError(code);
    }
    return false;
  };
  return TransactionRunner2;
}();
var LOG_TAG$2 = "FirestoreClient";
var MAX_CONCURRENT_LIMBO_RESOLUTIONS = 100;
var FirestoreClient = function() {
  function FirestoreClient2(credentials, asyncQueue, databaseInfo) {
    var _this = this;
    this.credentials = credentials;
    this.asyncQueue = asyncQueue;
    this.databaseInfo = databaseInfo;
    this.user = User.UNAUTHENTICATED;
    this.clientId = AutoId.newId();
    this.credentialListener = function() {
      return Promise.resolve();
    };
    this.credentials.start(asyncQueue, function(user2) {
      return tslib.__awaiter(_this, void 0, void 0, function() {
        return tslib.__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              logDebug(LOG_TAG$2, "Received user=", user2.uid);
              return [4, this.credentialListener(user2)];
            case 1:
              _d.sent();
              this.user = user2;
              return [2];
          }
        });
      });
    });
  }
  FirestoreClient2.prototype.getConfiguration = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      return tslib.__generator(this, function(_d) {
        return [2, {
          asyncQueue: this.asyncQueue,
          databaseInfo: this.databaseInfo,
          clientId: this.clientId,
          credentials: this.credentials,
          initialUser: this.user,
          maxConcurrentLimboResolutions: MAX_CONCURRENT_LIMBO_RESOLUTIONS
        }];
      });
    });
  };
  FirestoreClient2.prototype.setCredentialChangeListener = function(listener) {
    this.credentialListener = listener;
  };
  FirestoreClient2.prototype.verifyNotTerminated = function() {
    if (this.asyncQueue.isShuttingDown) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, "The client has already been terminated.");
    }
  };
  FirestoreClient2.prototype.terminate = function() {
    var _this = this;
    this.asyncQueue.enterRestrictedMode();
    var deferred = new Deferred();
    this.asyncQueue.enqueueAndForgetEvenWhileRestricted(function() {
      return tslib.__awaiter(_this, void 0, void 0, function() {
        var e_11, firestoreError;
        return tslib.__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              _d.trys.push([0, 5, , 6]);
              if (!this.onlineComponents)
                return [3, 2];
              return [4, this.onlineComponents.terminate()];
            case 1:
              _d.sent();
              _d.label = 2;
            case 2:
              if (!this.offlineComponents)
                return [3, 4];
              return [4, this.offlineComponents.terminate()];
            case 3:
              _d.sent();
              _d.label = 4;
            case 4:
              this.credentials.shutdown();
              deferred.resolve();
              return [3, 6];
            case 5:
              e_11 = _d.sent();
              firestoreError = wrapInUserErrorIfRecoverable(e_11, "Failed to shutdown persistence");
              deferred.reject(firestoreError);
              return [3, 6];
            case 6:
              return [2];
          }
        });
      });
    });
    return deferred.promise;
  };
  return FirestoreClient2;
}();
function setOfflineComponentProvider(client2, offlineComponentProvider) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var configuration, currentUser;
    var _this = this;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          client2.asyncQueue.verifyOperationInProgress();
          logDebug(LOG_TAG$2, "Initializing OfflineComponentProvider");
          return [4, client2.getConfiguration()];
        case 1:
          configuration = _d.sent();
          return [4, offlineComponentProvider.initialize(configuration)];
        case 2:
          _d.sent();
          currentUser = configuration.initialUser;
          client2.setCredentialChangeListener(function(user2) {
            return tslib.__awaiter(_this, void 0, void 0, function() {
              return tslib.__generator(this, function(_d2) {
                switch (_d2.label) {
                  case 0:
                    if (!!currentUser.isEqual(user2))
                      return [3, 2];
                    return [4, localStoreHandleUserChange(offlineComponentProvider.localStore, user2)];
                  case 1:
                    _d2.sent();
                    currentUser = user2;
                    _d2.label = 2;
                  case 2:
                    return [2];
                }
              });
            });
          });
          offlineComponentProvider.persistence.setDatabaseDeletedListener(function() {
            return client2.terminate();
          });
          client2.offlineComponents = offlineComponentProvider;
          return [2];
      }
    });
  });
}
function setOnlineComponentProvider(client2, onlineComponentProvider) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var offlineComponentProvider, configuration;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          client2.asyncQueue.verifyOperationInProgress();
          return [4, ensureOfflineComponents(client2)];
        case 1:
          offlineComponentProvider = _d.sent();
          logDebug(LOG_TAG$2, "Initializing OnlineComponentProvider");
          return [4, client2.getConfiguration()];
        case 2:
          configuration = _d.sent();
          return [4, onlineComponentProvider.initialize(offlineComponentProvider, configuration)];
        case 3:
          _d.sent();
          client2.setCredentialChangeListener(function(user2) {
            return remoteStoreHandleCredentialChange(onlineComponentProvider.remoteStore, user2);
          });
          client2.onlineComponents = onlineComponentProvider;
          return [2];
      }
    });
  });
}
function ensureOfflineComponents(client2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          if (!!client2.offlineComponents)
            return [3, 2];
          logDebug(LOG_TAG$2, "Using default OfflineComponentProvider");
          return [4, setOfflineComponentProvider(client2, new MemoryOfflineComponentProvider())];
        case 1:
          _d.sent();
          _d.label = 2;
        case 2:
          return [2, client2.offlineComponents];
      }
    });
  });
}
function ensureOnlineComponents(client2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          if (!!client2.onlineComponents)
            return [3, 2];
          logDebug(LOG_TAG$2, "Using default OnlineComponentProvider");
          return [4, setOnlineComponentProvider(client2, new OnlineComponentProvider())];
        case 1:
          _d.sent();
          _d.label = 2;
        case 2:
          return [2, client2.onlineComponents];
      }
    });
  });
}
function getPersistence(client2) {
  return ensureOfflineComponents(client2).then(function(c) {
    return c.persistence;
  });
}
function getLocalStore(client2) {
  return ensureOfflineComponents(client2).then(function(c) {
    return c.localStore;
  });
}
function getRemoteStore(client2) {
  return ensureOnlineComponents(client2).then(function(c) {
    return c.remoteStore;
  });
}
function getSyncEngine(client2) {
  return ensureOnlineComponents(client2).then(function(c) {
    return c.syncEngine;
  });
}
function getDatastore(client2) {
  return ensureOnlineComponents(client2).then(function(c) {
    return c.datastore;
  });
}
function getEventManager(client2) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var onlineComponentProvider, eventManager;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          return [4, ensureOnlineComponents(client2)];
        case 1:
          onlineComponentProvider = _d.sent();
          eventManager = onlineComponentProvider.eventManager;
          eventManager.onListen = syncEngineListen.bind(null, onlineComponentProvider.syncEngine);
          eventManager.onUnlisten = syncEngineUnlisten.bind(null, onlineComponentProvider.syncEngine);
          return [2, eventManager];
      }
    });
  });
}
function firestoreClientEnableNetwork(client2) {
  var _this = this;
  return client2.asyncQueue.enqueue(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var persistence, remoteStore;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, getPersistence(client2)];
          case 1:
            persistence = _d.sent();
            return [4, getRemoteStore(client2)];
          case 2:
            remoteStore = _d.sent();
            persistence.setNetworkEnabled(true);
            return [2, remoteStoreEnableNetwork(remoteStore)];
        }
      });
    });
  });
}
function firestoreClientDisableNetwork(client2) {
  var _this = this;
  return client2.asyncQueue.enqueue(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var persistence, remoteStore;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, getPersistence(client2)];
          case 1:
            persistence = _d.sent();
            return [4, getRemoteStore(client2)];
          case 2:
            remoteStore = _d.sent();
            persistence.setNetworkEnabled(false);
            return [2, remoteStoreDisableNetwork(remoteStore)];
        }
      });
    });
  });
}
function firestoreClientWaitForPendingWrites(client2) {
  var _this = this;
  var deferred = new Deferred();
  client2.asyncQueue.enqueueAndForget(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var syncEngine;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, getSyncEngine(client2)];
          case 1:
            syncEngine = _d.sent();
            return [2, syncEngineRegisterPendingWritesCallback(syncEngine, deferred)];
        }
      });
    });
  });
  return deferred.promise;
}
function firestoreClientListen(client2, query2, options2, observer) {
  var _this = this;
  var wrappedObserver = new AsyncObserver(observer);
  var listener = new QueryListener(query2, wrappedObserver, options2);
  client2.asyncQueue.enqueueAndForget(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var eventManager;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, getEventManager(client2)];
          case 1:
            eventManager = _d.sent();
            return [2, eventManagerListen(eventManager, listener)];
        }
      });
    });
  });
  return function() {
    wrappedObserver.mute();
    client2.asyncQueue.enqueueAndForget(function() {
      return tslib.__awaiter(_this, void 0, void 0, function() {
        var eventManager;
        return tslib.__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              return [4, getEventManager(client2)];
            case 1:
              eventManager = _d.sent();
              return [2, eventManagerUnlisten(eventManager, listener)];
          }
        });
      });
    });
  };
}
function firestoreClientGetDocumentFromLocalCache(client2, docKey) {
  var _this = this;
  var deferred = new Deferred();
  client2.asyncQueue.enqueueAndForget(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var localStore;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, getLocalStore(client2)];
          case 1:
            localStore = _d.sent();
            return [2, readDocumentFromCache(localStore, docKey, deferred)];
        }
      });
    });
  });
  return deferred.promise;
}
function firestoreClientGetDocumentViaSnapshotListener(client2, key, options2) {
  var _this = this;
  if (options2 === void 0) {
    options2 = {};
  }
  var deferred = new Deferred();
  client2.asyncQueue.enqueueAndForget(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var eventManager;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, getEventManager(client2)];
          case 1:
            eventManager = _d.sent();
            return [2, readDocumentViaSnapshotListener(eventManager, client2.asyncQueue, key, options2, deferred)];
        }
      });
    });
  });
  return deferred.promise;
}
function firestoreClientGetDocumentsFromLocalCache(client2, query2) {
  var _this = this;
  var deferred = new Deferred();
  client2.asyncQueue.enqueueAndForget(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var localStore;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, getLocalStore(client2)];
          case 1:
            localStore = _d.sent();
            return [2, executeQueryFromCache(localStore, query2, deferred)];
        }
      });
    });
  });
  return deferred.promise;
}
function firestoreClientGetDocumentsViaSnapshotListener(client2, query2, options2) {
  var _this = this;
  if (options2 === void 0) {
    options2 = {};
  }
  var deferred = new Deferred();
  client2.asyncQueue.enqueueAndForget(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var eventManager;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, getEventManager(client2)];
          case 1:
            eventManager = _d.sent();
            return [2, executeQueryViaSnapshotListener(eventManager, client2.asyncQueue, query2, options2, deferred)];
        }
      });
    });
  });
  return deferred.promise;
}
function firestoreClientWrite(client2, mutations) {
  var _this = this;
  var deferred = new Deferred();
  client2.asyncQueue.enqueueAndForget(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var syncEngine;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, getSyncEngine(client2)];
          case 1:
            syncEngine = _d.sent();
            return [2, syncEngineWrite(syncEngine, mutations, deferred)];
        }
      });
    });
  });
  return deferred.promise;
}
function firestoreClientAddSnapshotsInSyncListener(client2, observer) {
  var _this = this;
  var wrappedObserver = new AsyncObserver(observer);
  client2.asyncQueue.enqueueAndForget(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var eventManager;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, getEventManager(client2)];
          case 1:
            eventManager = _d.sent();
            return [2, addSnapshotsInSyncListener(eventManager, wrappedObserver)];
        }
      });
    });
  });
  return function() {
    wrappedObserver.mute();
    client2.asyncQueue.enqueueAndForget(function() {
      return tslib.__awaiter(_this, void 0, void 0, function() {
        var eventManager;
        return tslib.__generator(this, function(_d) {
          switch (_d.label) {
            case 0:
              return [4, getEventManager(client2)];
            case 1:
              eventManager = _d.sent();
              return [2, removeSnapshotsInSyncListener(eventManager, wrappedObserver)];
          }
        });
      });
    });
  };
}
function firestoreClientTransaction(client2, updateFunction) {
  var _this = this;
  var deferred = new Deferred();
  client2.asyncQueue.enqueueAndForget(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var datastore;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            return [4, getDatastore(client2)];
          case 1:
            datastore = _d.sent();
            new TransactionRunner(client2.asyncQueue, datastore, updateFunction, deferred).run();
            return [2];
        }
      });
    });
  });
  return deferred.promise;
}
function readDocumentFromCache(localStore, docKey, result) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var document_4, e_12, firestoreError;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          _d.trys.push([0, 2, , 3]);
          return [4, localStoreReadDocument(localStore, docKey)];
        case 1:
          document_4 = _d.sent();
          if (document_4.isFoundDocument()) {
            result.resolve(document_4);
          } else if (document_4.isNoDocument()) {
            result.resolve(null);
          } else {
            result.reject(new FirestoreError(Code.UNAVAILABLE, "Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"));
          }
          return [3, 3];
        case 2:
          e_12 = _d.sent();
          firestoreError = wrapInUserErrorIfRecoverable(e_12, "Failed to get document '" + docKey + " from cache");
          result.reject(firestoreError);
          return [3, 3];
        case 3:
          return [2];
      }
    });
  });
}
function readDocumentViaSnapshotListener(eventManager, asyncQueue, key, options2, result) {
  var wrappedObserver = new AsyncObserver({
    next: function(snap) {
      asyncQueue.enqueueAndForget(function() {
        return eventManagerUnlisten(eventManager, listener);
      });
      var exists = snap.docs.has(key);
      if (!exists && snap.fromCache) {
        result.reject(new FirestoreError(Code.UNAVAILABLE, "Failed to get document because the client is offline."));
      } else if (exists && snap.fromCache && options2 && options2.source === "server") {
        result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)'));
      } else {
        result.resolve(snap);
      }
    },
    error: function(e) {
      return result.reject(e);
    }
  });
  var listener = new QueryListener(newQueryForPath(key.path), wrappedObserver, {
    includeMetadataChanges: true,
    waitForSyncWhenOnline: true
  });
  return eventManagerListen(eventManager, listener);
}
function executeQueryFromCache(localStore, query2, result) {
  return tslib.__awaiter(this, void 0, void 0, function() {
    var queryResult, view, viewDocChanges, viewChange, e_13, firestoreError;
    return tslib.__generator(this, function(_d) {
      switch (_d.label) {
        case 0:
          _d.trys.push([0, 2, , 3]);
          return [4, localStoreExecuteQuery(localStore, query2, true)];
        case 1:
          queryResult = _d.sent();
          view = new View(query2, queryResult.remoteKeys);
          viewDocChanges = view.computeDocChanges(queryResult.documents);
          viewChange = view.applyChanges(viewDocChanges, false);
          result.resolve(viewChange.snapshot);
          return [3, 3];
        case 2:
          e_13 = _d.sent();
          firestoreError = wrapInUserErrorIfRecoverable(e_13, "Failed to execute query '" + query2 + " against cache");
          result.reject(firestoreError);
          return [3, 3];
        case 3:
          return [2];
      }
    });
  });
}
function executeQueryViaSnapshotListener(eventManager, asyncQueue, query2, options2, result) {
  var wrappedObserver = new AsyncObserver({
    next: function(snapshot) {
      asyncQueue.enqueueAndForget(function() {
        return eventManagerUnlisten(eventManager, listener);
      });
      if (snapshot.fromCache && options2.source === "server") {
        result.reject(new FirestoreError(Code.UNAVAILABLE, 'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)'));
      } else {
        result.resolve(snapshot);
      }
    },
    error: function(e) {
      return result.reject(e);
    }
  });
  var listener = new QueryListener(query2, wrappedObserver, {
    includeMetadataChanges: true,
    waitForSyncWhenOnline: true
  });
  return eventManagerListen(eventManager, listener);
}
function firestoreClientLoadBundle(client2, databaseId, data, resultTask) {
  var _this = this;
  var reader2 = createBundleReader(data, newSerializer(databaseId));
  client2.asyncQueue.enqueueAndForget(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var _d;
      return tslib.__generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            _d = syncEngineLoadBundle;
            return [4, getSyncEngine(client2)];
          case 1:
            _d.apply(void 0, [_e.sent(), reader2, resultTask]);
            return [2];
        }
      });
    });
  });
}
function firestoreClientGetNamedQuery(client2, queryName) {
  var _this = this;
  return client2.asyncQueue.enqueue(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var _d;
      return tslib.__generator(this, function(_e) {
        switch (_e.label) {
          case 0:
            _d = localStoreGetNamedQuery;
            return [4, getLocalStore(client2)];
          case 1:
            return [2, _d.apply(void 0, [_e.sent(), queryName])];
        }
      });
    });
  });
}
function createBundleReader(data, serializer) {
  var content;
  if (typeof data === "string") {
    content = newTextEncoder().encode(data);
  } else {
    content = data;
  }
  return newBundleReader(toByteStreamReader(content), serializer);
}
var DatabaseInfo = function() {
  function DatabaseInfo2(databaseId, appId, persistenceKey, host, ssl, forceLongPolling, autoDetectLongPolling, useFetchStreams) {
    this.databaseId = databaseId;
    this.appId = appId;
    this.persistenceKey = persistenceKey;
    this.host = host;
    this.ssl = ssl;
    this.forceLongPolling = forceLongPolling;
    this.autoDetectLongPolling = autoDetectLongPolling;
    this.useFetchStreams = useFetchStreams;
  }
  return DatabaseInfo2;
}();
var DEFAULT_DATABASE_NAME = "(default)";
var DatabaseId = function() {
  function DatabaseId2(projectId, database) {
    this.projectId = projectId;
    this.database = database ? database : DEFAULT_DATABASE_NAME;
  }
  Object.defineProperty(DatabaseId2.prototype, "isDefaultDatabase", {
    get: function() {
      return this.database === DEFAULT_DATABASE_NAME;
    },
    enumerable: false,
    configurable: true
  });
  DatabaseId2.prototype.isEqual = function(other) {
    return other instanceof DatabaseId2 && other.projectId === this.projectId && other.database === this.database;
  };
  return DatabaseId2;
}();
var LOG_TAG$1 = "ComponentProvider";
var datastoreInstances = new Map();
function removeComponents(firestore) {
  var datastore = datastoreInstances.get(firestore);
  if (datastore) {
    logDebug(LOG_TAG$1, "Removing Datastore");
    datastoreInstances.delete(firestore);
    datastore.terminate();
  }
}
function makeDatabaseInfo(databaseId, appId, persistenceKey, settings) {
  return new DatabaseInfo(databaseId, appId, persistenceKey, settings.host, settings.ssl, settings.experimentalForceLongPolling, settings.experimentalAutoDetectLongPolling, settings.useFetchStreams);
}
var DEFAULT_HOST = "firestore.googleapis.com";
var DEFAULT_SSL = true;
var FirestoreSettingsImpl = function() {
  function FirestoreSettingsImpl2(settings) {
    var _a;
    if (settings.host === void 0) {
      if (settings.ssl !== void 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Can't provide ssl option if host option is not set");
      }
      this.host = DEFAULT_HOST;
      this.ssl = DEFAULT_SSL;
    } else {
      this.host = settings.host;
      this.ssl = (_a = settings.ssl) !== null && _a !== void 0 ? _a : DEFAULT_SSL;
    }
    this.credentials = settings.credentials;
    this.ignoreUndefinedProperties = !!settings.ignoreUndefinedProperties;
    if (settings.cacheSizeBytes === void 0) {
      this.cacheSizeBytes = LRU_DEFAULT_CACHE_SIZE_BYTES;
    } else {
      if (settings.cacheSizeBytes !== LRU_COLLECTION_DISABLED && settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "cacheSizeBytes must be at least " + LRU_MINIMUM_CACHE_SIZE_BYTES);
      } else {
        this.cacheSizeBytes = settings.cacheSizeBytes;
      }
    }
    this.experimentalForceLongPolling = !!settings.experimentalForceLongPolling;
    this.experimentalAutoDetectLongPolling = !!settings.experimentalAutoDetectLongPolling;
    this.useFetchStreams = !!settings.useFetchStreams;
    validateIsNotUsedTogether("experimentalForceLongPolling", settings.experimentalForceLongPolling, "experimentalAutoDetectLongPolling", settings.experimentalAutoDetectLongPolling);
  }
  FirestoreSettingsImpl2.prototype.isEqual = function(other) {
    return this.host === other.host && this.ssl === other.ssl && this.credentials === other.credentials && this.cacheSizeBytes === other.cacheSizeBytes && this.experimentalForceLongPolling === other.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === other.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === other.ignoreUndefinedProperties && this.useFetchStreams === other.useFetchStreams;
  };
  return FirestoreSettingsImpl2;
}();
var Firestore$1 = function() {
  function Firestore$12(databaseIdOrApp, _credentials) {
    this._credentials = _credentials;
    this.type = "firestore-lite";
    this._persistenceKey = "(lite)";
    this._settings = new FirestoreSettingsImpl({});
    this._settingsFrozen = false;
    if (databaseIdOrApp instanceof DatabaseId) {
      this._databaseId = databaseIdOrApp;
    } else {
      this._app = databaseIdOrApp;
      this._databaseId = databaseIdFromApp(databaseIdOrApp);
    }
  }
  Object.defineProperty(Firestore$12.prototype, "app", {
    get: function() {
      if (!this._app) {
        throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore was not initialized using the Firebase SDK. 'app' is not available");
      }
      return this._app;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Firestore$12.prototype, "_initialized", {
    get: function() {
      return this._settingsFrozen;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(Firestore$12.prototype, "_terminated", {
    get: function() {
      return this._terminateTask !== void 0;
    },
    enumerable: false,
    configurable: true
  });
  Firestore$12.prototype._setSettings = function(settings) {
    if (this._settingsFrozen) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");
    }
    this._settings = new FirestoreSettingsImpl(settings);
    if (settings.credentials !== void 0) {
      this._credentials = makeCredentialsProvider(settings.credentials);
    }
  };
  Firestore$12.prototype._getSettings = function() {
    return this._settings;
  };
  Firestore$12.prototype._freezeSettings = function() {
    this._settingsFrozen = true;
    return this._settings;
  };
  Firestore$12.prototype._delete = function() {
    if (!this._terminateTask) {
      this._terminateTask = this._terminate();
    }
    return this._terminateTask;
  };
  Firestore$12.prototype.toJSON = function() {
    return {
      app: this._app,
      databaseId: this._databaseId,
      settings: this._settings
    };
  };
  Firestore$12.prototype._terminate = function() {
    removeComponents(this);
    return Promise.resolve();
  };
  return Firestore$12;
}();
function databaseIdFromApp(app2) {
  if (!Object.prototype.hasOwnProperty.apply(app2.options, ["projectId"])) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, '"projectId" not provided in firebase.initializeApp.');
  }
  return new DatabaseId(app2.options.projectId);
}
function connectFirestoreEmulator(firestore, host, port, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var _a;
  firestore = cast(firestore, Firestore$1);
  var settings = firestore._getSettings();
  if (settings.host !== DEFAULT_HOST && settings.host !== host) {
    logWarn("Host has been set in both settings() and useEmulator(), emulator host will be used");
  }
  firestore._setSettings(Object.assign(Object.assign({}, settings), { host: host + ":" + port, ssl: false }));
  if (options2.mockUserToken) {
    var token = void 0;
    var user2 = void 0;
    if (typeof options2.mockUserToken === "string") {
      token = options2.mockUserToken;
      user2 = User.MOCK_USER;
    } else {
      token = util.createMockUserToken(options2.mockUserToken, (_a = firestore._app) === null || _a === void 0 ? void 0 : _a.options.projectId);
      var uid = options2.mockUserToken.sub || options2.mockUserToken.user_id;
      if (!uid) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "mockUserToken must contain 'sub' or 'user_id' field!");
      }
      user2 = new User(uid);
    }
    firestore._credentials = new EmulatorCredentialsProvider(new OAuthToken(token, user2));
  }
}
var DocumentReference = function() {
  function DocumentReference2(firestore, converter2, _key) {
    this.converter = converter2;
    this._key = _key;
    this.type = "document";
    this.firestore = firestore;
  }
  Object.defineProperty(DocumentReference2.prototype, "_path", {
    get: function() {
      return this._key.path;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DocumentReference2.prototype, "id", {
    get: function() {
      return this._key.path.lastSegment();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DocumentReference2.prototype, "path", {
    get: function() {
      return this._key.path.canonicalString();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DocumentReference2.prototype, "parent", {
    get: function() {
      return new CollectionReference(this.firestore, this.converter, this._key.path.popLast());
    },
    enumerable: false,
    configurable: true
  });
  DocumentReference2.prototype.withConverter = function(converter2) {
    return new DocumentReference2(this.firestore, converter2, this._key);
  };
  return DocumentReference2;
}();
var Query = function() {
  function Query2(firestore, converter2, _query) {
    this.converter = converter2;
    this._query = _query;
    this.type = "query";
    this.firestore = firestore;
  }
  Query2.prototype.withConverter = function(converter2) {
    return new Query2(this.firestore, converter2, this._query);
  };
  return Query2;
}();
var CollectionReference = function(_super) {
  tslib.__extends(CollectionReference2, _super);
  function CollectionReference2(firestore, converter2, _path) {
    var _this = _super.call(this, firestore, converter2, newQueryForPath(_path)) || this;
    _this._path = _path;
    _this.type = "collection";
    return _this;
  }
  Object.defineProperty(CollectionReference2.prototype, "id", {
    get: function() {
      return this._query.path.lastSegment();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CollectionReference2.prototype, "path", {
    get: function() {
      return this._query.path.canonicalString();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(CollectionReference2.prototype, "parent", {
    get: function() {
      var parentPath = this._path.popLast();
      if (parentPath.isEmpty()) {
        return null;
      } else {
        return new DocumentReference(this.firestore, null, new DocumentKey(parentPath));
      }
    },
    enumerable: false,
    configurable: true
  });
  CollectionReference2.prototype.withConverter = function(converter2) {
    return new CollectionReference2(this.firestore, converter2, this._path);
  };
  return CollectionReference2;
}(Query);
function collection(parent, path2) {
  var pathSegments = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    pathSegments[_i - 2] = arguments[_i];
  }
  parent = util.getModularInstance(parent);
  validateNonEmptyArgument("collection", "path", path2);
  if (parent instanceof Firestore$1) {
    var absolutePath = ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path2], pathSegments));
    validateCollectionPath(absolutePath);
    return new CollectionReference(parent, null, absolutePath);
  } else {
    if (!(parent instanceof DocumentReference) && !(parent instanceof CollectionReference)) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    }
    var absolutePath = parent._path.child(ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path2], pathSegments)));
    validateCollectionPath(absolutePath);
    return new CollectionReference(parent.firestore, null, absolutePath);
  }
}
function collectionGroup(firestore, collectionId) {
  firestore = cast(firestore, Firestore$1);
  validateNonEmptyArgument("collectionGroup", "collection id", collectionId);
  if (collectionId.indexOf("/") >= 0) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid collection ID '" + collectionId + "' passed to function collectionGroup(). Collection IDs must not contain '/'.");
  }
  return new Query(firestore, null, newQueryForCollectionGroup(collectionId));
}
function doc(parent, path2) {
  var pathSegments = [];
  for (var _i = 2; _i < arguments.length; _i++) {
    pathSegments[_i - 2] = arguments[_i];
  }
  parent = util.getModularInstance(parent);
  if (arguments.length === 1) {
    path2 = AutoId.newId();
  }
  validateNonEmptyArgument("doc", "path", path2);
  if (parent instanceof Firestore$1) {
    var absolutePath = ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path2], pathSegments));
    validateDocumentPath(absolutePath);
    return new DocumentReference(parent, null, new DocumentKey(absolutePath));
  } else {
    if (!(parent instanceof DocumentReference) && !(parent instanceof CollectionReference)) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");
    }
    var absolutePath = parent._path.child(ResourcePath.fromString.apply(ResourcePath, tslib.__spreadArray([path2], pathSegments)));
    validateDocumentPath(absolutePath);
    return new DocumentReference(parent.firestore, parent instanceof CollectionReference ? parent.converter : null, new DocumentKey(absolutePath));
  }
}
function refEqual(left, right) {
  left = util.getModularInstance(left);
  right = util.getModularInstance(right);
  if ((left instanceof DocumentReference || left instanceof CollectionReference) && (right instanceof DocumentReference || right instanceof CollectionReference)) {
    return left.firestore === right.firestore && left.path === right.path && left.converter === right.converter;
  }
  return false;
}
function queryEqual(left, right) {
  left = util.getModularInstance(left);
  right = util.getModularInstance(right);
  if (left instanceof Query && right instanceof Query) {
    return left.firestore === right.firestore && queryEquals(left._query, right._query) && left.converter === right.converter;
  }
  return false;
}
var LOG_TAG = "AsyncQueue";
var AsyncQueueImpl = function() {
  function AsyncQueueImpl2() {
    var _this = this;
    this.tail = Promise.resolve();
    this.retryableOps = [];
    this._isShuttingDown = false;
    this.delayedOperations = [];
    this.failure = null;
    this.operationInProgress = false;
    this.skipNonRestrictedTasks = false;
    this.timerIdsToSkip = [];
    this.backoff = new ExponentialBackoff(this, "async_queue_retry");
    this.visibilityHandler = function() {
      _this.backoff.skipBackoff();
    };
  }
  Object.defineProperty(AsyncQueueImpl2.prototype, "isShuttingDown", {
    get: function() {
      return this._isShuttingDown;
    },
    enumerable: false,
    configurable: true
  });
  AsyncQueueImpl2.prototype.enqueueAndForget = function(op) {
    this.enqueue(op);
  };
  AsyncQueueImpl2.prototype.enqueueAndForgetEvenWhileRestricted = function(op) {
    this.verifyNotFailed();
    this.enqueueInternal(op);
  };
  AsyncQueueImpl2.prototype.enterRestrictedMode = function(purgeExistingTasks) {
    if (!this._isShuttingDown) {
      this._isShuttingDown = true;
      this.skipNonRestrictedTasks = purgeExistingTasks || false;
    }
  };
  AsyncQueueImpl2.prototype.enqueue = function(op) {
    var _this = this;
    this.verifyNotFailed();
    if (this._isShuttingDown) {
      return new Promise(function() {
      });
    }
    var task = new Deferred();
    return this.enqueueInternal(function() {
      if (_this._isShuttingDown && _this.skipNonRestrictedTasks) {
        return Promise.resolve();
      }
      op().then(task.resolve, task.reject);
      return task.promise;
    }).then(function() {
      return task.promise;
    });
  };
  AsyncQueueImpl2.prototype.enqueueRetryable = function(op) {
    var _this = this;
    this.enqueueAndForget(function() {
      _this.retryableOps.push(op);
      return _this.retryNextOp();
    });
  };
  AsyncQueueImpl2.prototype.retryNextOp = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var e_14;
      var _this = this;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            if (this.retryableOps.length === 0) {
              return [2];
            }
            _d.label = 1;
          case 1:
            _d.trys.push([1, 3, , 4]);
            return [4, this.retryableOps[0]()];
          case 2:
            _d.sent();
            this.retryableOps.shift();
            this.backoff.reset();
            return [3, 4];
          case 3:
            e_14 = _d.sent();
            if (isIndexedDbTransactionError(e_14)) {
              logDebug(LOG_TAG, "Operation failed with retryable error: " + e_14);
            } else {
              throw e_14;
            }
            return [3, 4];
          case 4:
            if (this.retryableOps.length > 0) {
              this.backoff.backoffAndRun(function() {
                return _this.retryNextOp();
              });
            }
            return [2];
        }
      });
    });
  };
  AsyncQueueImpl2.prototype.enqueueInternal = function(op) {
    var _this = this;
    var newTail = this.tail.then(function() {
      _this.operationInProgress = true;
      return op().catch(function(error2) {
        _this.failure = error2;
        _this.operationInProgress = false;
        var message2 = getMessageOrStack(error2);
        logError("INTERNAL UNHANDLED ERROR: ", message2);
        throw error2;
      }).then(function(result) {
        _this.operationInProgress = false;
        return result;
      });
    });
    this.tail = newTail;
    return newTail;
  };
  AsyncQueueImpl2.prototype.enqueueAfterDelay = function(timerId, delayMs, op) {
    var _this = this;
    this.verifyNotFailed();
    if (this.timerIdsToSkip.indexOf(timerId) > -1) {
      delayMs = 0;
    }
    var delayedOp = DelayedOperation.createAndSchedule(this, timerId, delayMs, op, function(removedOp) {
      return _this.removeDelayedOperation(removedOp);
    });
    this.delayedOperations.push(delayedOp);
    return delayedOp;
  };
  AsyncQueueImpl2.prototype.verifyNotFailed = function() {
    if (this.failure) {
      fail();
    }
  };
  AsyncQueueImpl2.prototype.verifyOperationInProgress = function() {
  };
  AsyncQueueImpl2.prototype.drain = function() {
    return tslib.__awaiter(this, void 0, void 0, function() {
      var currentTail;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            currentTail = this.tail;
            return [4, currentTail];
          case 1:
            _d.sent();
            _d.label = 2;
          case 2:
            if (currentTail !== this.tail)
              return [3, 0];
            _d.label = 3;
          case 3:
            return [2];
        }
      });
    });
  };
  AsyncQueueImpl2.prototype.containsDelayedOperation = function(timerId) {
    for (var _i = 0, _d = this.delayedOperations; _i < _d.length; _i++) {
      var op = _d[_i];
      if (op.timerId === timerId) {
        return true;
      }
    }
    return false;
  };
  AsyncQueueImpl2.prototype.runAllDelayedOperationsUntil = function(lastTimerId) {
    var _this = this;
    return this.drain().then(function() {
      _this.delayedOperations.sort(function(a, b) {
        return a.targetTimeMs - b.targetTimeMs;
      });
      for (var _i = 0, _d = _this.delayedOperations; _i < _d.length; _i++) {
        var op = _d[_i];
        op.skipDelay();
        if (lastTimerId !== "all" && op.timerId === lastTimerId) {
          break;
        }
      }
      return _this.drain();
    });
  };
  AsyncQueueImpl2.prototype.skipDelaysForTimerId = function(timerId) {
    this.timerIdsToSkip.push(timerId);
  };
  AsyncQueueImpl2.prototype.removeDelayedOperation = function(op) {
    var index2 = this.delayedOperations.indexOf(op);
    this.delayedOperations.splice(index2, 1);
  };
  return AsyncQueueImpl2;
}();
function newAsyncQueue() {
  return new AsyncQueueImpl();
}
function getMessageOrStack(error2) {
  var message2 = error2.message || "";
  if (error2.stack) {
    if (error2.stack.includes(error2.message)) {
      message2 = error2.stack;
    } else {
      message2 = error2.message + "\n" + error2.stack;
    }
  }
  return message2;
}
var LoadBundleTask = function() {
  function LoadBundleTask2() {
    this._progressObserver = {};
    this._taskCompletionResolver = new Deferred();
    this._lastProgress = {
      taskState: "Running",
      totalBytes: 0,
      totalDocuments: 0,
      bytesLoaded: 0,
      documentsLoaded: 0
    };
  }
  LoadBundleTask2.prototype.onProgress = function(next, error2, complete) {
    this._progressObserver = {
      next,
      error: error2,
      complete
    };
  };
  LoadBundleTask2.prototype.catch = function(onRejected) {
    return this._taskCompletionResolver.promise.catch(onRejected);
  };
  LoadBundleTask2.prototype.then = function(onFulfilled, onRejected) {
    return this._taskCompletionResolver.promise.then(onFulfilled, onRejected);
  };
  LoadBundleTask2.prototype._completeWith = function(progress) {
    this._updateProgress(progress);
    if (this._progressObserver.complete) {
      this._progressObserver.complete();
    }
    this._taskCompletionResolver.resolve(progress);
  };
  LoadBundleTask2.prototype._failWith = function(error2) {
    this._lastProgress.taskState = "Error";
    if (this._progressObserver.next) {
      this._progressObserver.next(this._lastProgress);
    }
    if (this._progressObserver.error) {
      this._progressObserver.error(error2);
    }
    this._taskCompletionResolver.reject(error2);
  };
  LoadBundleTask2.prototype._updateProgress = function(progress) {
    this._lastProgress = progress;
    if (this._progressObserver.next) {
      this._progressObserver.next(progress);
    }
  };
  return LoadBundleTask2;
}();
var DOM_EXCEPTION_INVALID_STATE = 11;
var DOM_EXCEPTION_ABORTED = 20;
var DOM_EXCEPTION_QUOTA_EXCEEDED = 22;
var CACHE_SIZE_UNLIMITED = LRU_COLLECTION_DISABLED;
var Firestore = function(_super) {
  tslib.__extends(Firestore2, _super);
  function Firestore2(databaseIdOrApp, credentialsProvider) {
    var _this = _super.call(this, databaseIdOrApp, credentialsProvider) || this;
    _this.type = "firestore";
    _this._queue = newAsyncQueue();
    _this._persistenceKey = "name" in databaseIdOrApp ? databaseIdOrApp.name : "[DEFAULT]";
    return _this;
  }
  Firestore2.prototype._terminate = function() {
    if (!this._firestoreClient) {
      configureFirestore(this);
    }
    return this._firestoreClient.terminate();
  };
  return Firestore2;
}(Firestore$1);
function initializeFirestore(app$1, settings) {
  var provider = app._getProvider(app$1, "firestore");
  if (provider.isInitialized()) {
    var existingInstance = provider.getImmediate();
    var initialSettings = provider.getOptions();
    if (util.deepEqual(initialSettings, settings)) {
      return existingInstance;
    } else {
      throw new FirestoreError(Code.FAILED_PRECONDITION, "initializeFirestore() has already been called with different options. To avoid this error, call initializeFirestore() with the same options as when it was originally called, or call getFirestore() to return the already initialized instance.");
    }
  }
  if (settings.cacheSizeBytes !== void 0 && settings.cacheSizeBytes !== CACHE_SIZE_UNLIMITED && settings.cacheSizeBytes < LRU_MINIMUM_CACHE_SIZE_BYTES) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "cacheSizeBytes must be at least " + LRU_MINIMUM_CACHE_SIZE_BYTES);
  }
  return provider.initialize({ options: settings });
}
function getFirestore(app$1) {
  if (app$1 === void 0) {
    app$1 = app.getApp();
  }
  return app._getProvider(app$1, "firestore").getImmediate();
}
function ensureFirestoreConfigured(firestore) {
  if (!firestore._firestoreClient) {
    configureFirestore(firestore);
  }
  firestore._firestoreClient.verifyNotTerminated();
  return firestore._firestoreClient;
}
function configureFirestore(firestore) {
  var _a;
  var settings = firestore._freezeSettings();
  var databaseInfo = makeDatabaseInfo(firestore._databaseId, ((_a = firestore._app) === null || _a === void 0 ? void 0 : _a.options.appId) || "", firestore._persistenceKey, settings);
  firestore._firestoreClient = new FirestoreClient(firestore._credentials, firestore._queue, databaseInfo);
}
function enableIndexedDbPersistence(firestore, persistenceSettings) {
  firestore = cast(firestore, Firestore);
  verifyNotInitialized(firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  var settings = firestore._freezeSettings();
  var onlineComponentProvider = new OnlineComponentProvider();
  var offlineComponentProvider = new IndexedDbOfflineComponentProvider(onlineComponentProvider, settings.cacheSizeBytes, persistenceSettings === null || persistenceSettings === void 0 ? void 0 : persistenceSettings.forceOwnership);
  return setPersistenceProviders(client2, onlineComponentProvider, offlineComponentProvider);
}
function enableMultiTabIndexedDbPersistence(firestore) {
  firestore = cast(firestore, Firestore);
  verifyNotInitialized(firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  var settings = firestore._freezeSettings();
  var onlineComponentProvider = new OnlineComponentProvider();
  var offlineComponentProvider = new MultiTabOfflineComponentProvider(onlineComponentProvider, settings.cacheSizeBytes);
  return setPersistenceProviders(client2, onlineComponentProvider, offlineComponentProvider);
}
function setPersistenceProviders(client2, onlineComponentProvider, offlineComponentProvider) {
  var _this = this;
  var persistenceResult = new Deferred();
  return client2.asyncQueue.enqueue(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var e_15;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            _d.trys.push([0, 3, , 4]);
            return [4, setOfflineComponentProvider(client2, offlineComponentProvider)];
          case 1:
            _d.sent();
            return [4, setOnlineComponentProvider(client2, onlineComponentProvider)];
          case 2:
            _d.sent();
            persistenceResult.resolve();
            return [3, 4];
          case 3:
            e_15 = _d.sent();
            if (!canFallbackFromIndexedDbError(e_15)) {
              throw e_15;
            }
            console.warn("Error enabling offline persistence. Falling back to persistence disabled: " + e_15);
            persistenceResult.reject(e_15);
            return [3, 4];
          case 4:
            return [2];
        }
      });
    });
  }).then(function() {
    return persistenceResult.promise;
  });
}
function canFallbackFromIndexedDbError(error2) {
  if (error2.name === "FirebaseError") {
    return error2.code === Code.FAILED_PRECONDITION || error2.code === Code.UNIMPLEMENTED;
  } else if (typeof DOMException !== "undefined" && error2 instanceof DOMException) {
    return error2.code === DOM_EXCEPTION_QUOTA_EXCEEDED || error2.code === DOM_EXCEPTION_ABORTED || error2.code === DOM_EXCEPTION_INVALID_STATE;
  }
  return true;
}
function clearIndexedDbPersistence(firestore) {
  var _this = this;
  if (firestore._initialized && !firestore._terminated) {
    throw new FirestoreError(Code.FAILED_PRECONDITION, "Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");
  }
  var deferred = new Deferred();
  firestore._queue.enqueueAndForgetEvenWhileRestricted(function() {
    return tslib.__awaiter(_this, void 0, void 0, function() {
      var e_16;
      return tslib.__generator(this, function(_d) {
        switch (_d.label) {
          case 0:
            _d.trys.push([0, 2, , 3]);
            return [4, indexedDbClearPersistence(indexedDbStoragePrefix(firestore._databaseId, firestore._persistenceKey))];
          case 1:
            _d.sent();
            deferred.resolve();
            return [3, 3];
          case 2:
            e_16 = _d.sent();
            deferred.reject(e_16);
            return [3, 3];
          case 3:
            return [2];
        }
      });
    });
  });
  return deferred.promise;
}
function waitForPendingWrites(firestore) {
  firestore = cast(firestore, Firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  return firestoreClientWaitForPendingWrites(client2);
}
function enableNetwork(firestore) {
  firestore = cast(firestore, Firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  return firestoreClientEnableNetwork(client2);
}
function disableNetwork(firestore) {
  firestore = cast(firestore, Firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  return firestoreClientDisableNetwork(client2);
}
function terminate(firestore) {
  app._removeServiceInstance(firestore.app, "firestore");
  return firestore._delete();
}
function loadBundle(firestore, bundleData) {
  firestore = cast(firestore, Firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  var resultTask = new LoadBundleTask();
  firestoreClientLoadBundle(client2, firestore._databaseId, bundleData, resultTask);
  return resultTask;
}
function namedQuery(firestore, name2) {
  firestore = cast(firestore, Firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  return firestoreClientGetNamedQuery(client2, name2).then(function(namedQuery2) {
    if (!namedQuery2) {
      return null;
    }
    return new Query(firestore, null, namedQuery2.query);
  });
}
function verifyNotInitialized(firestore) {
  if (firestore._initialized || firestore._terminated) {
    throw new FirestoreError(Code.FAILED_PRECONDITION, "Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.");
  }
}
function registerFirestore(variant) {
  setSDKVersion(app.SDK_VERSION);
  app._registerComponent(new component.Component("firestore", function(container, _d) {
    var settings = _d.options;
    var app2 = container.getProvider("app").getImmediate();
    var firestoreInstance = new Firestore(app2, new FirebaseCredentialsProvider(container.getProvider("auth-internal")));
    settings = Object.assign({ useFetchStreams: true }, settings);
    firestoreInstance._setSettings(settings);
    return firestoreInstance;
  }, "PUBLIC"));
  app.registerVersion(name, version$1, variant);
}
var FieldPath = function() {
  function FieldPath2() {
    var fieldNames = [];
    for (var _i = 0; _i < arguments.length; _i++) {
      fieldNames[_i] = arguments[_i];
    }
    for (var i = 0; i < fieldNames.length; ++i) {
      if (fieldNames[i].length === 0) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid field name at argument $(i + 1). Field names must not be empty.");
      }
    }
    this._internalPath = new FieldPath$1(fieldNames);
  }
  FieldPath2.prototype.isEqual = function(other) {
    return this._internalPath.isEqual(other._internalPath);
  };
  return FieldPath2;
}();
function documentId() {
  return new FieldPath(DOCUMENT_KEY_NAME);
}
var Bytes = function() {
  function Bytes2(byteString) {
    this._byteString = byteString;
  }
  Bytes2.fromBase64String = function(base642) {
    try {
      return new Bytes2(ByteString.fromBase64String(base642));
    } catch (e) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Failed to construct data from Base64 string: " + e);
    }
  };
  Bytes2.fromUint8Array = function(array) {
    return new Bytes2(ByteString.fromUint8Array(array));
  };
  Bytes2.prototype.toBase64 = function() {
    return this._byteString.toBase64();
  };
  Bytes2.prototype.toUint8Array = function() {
    return this._byteString.toUint8Array();
  };
  Bytes2.prototype.toString = function() {
    return "Bytes(base64: " + this.toBase64() + ")";
  };
  Bytes2.prototype.isEqual = function(other) {
    return this._byteString.isEqual(other._byteString);
  };
  return Bytes2;
}();
var FieldValue = function() {
  function FieldValue2(_methodName) {
    this._methodName = _methodName;
  }
  return FieldValue2;
}();
var GeoPoint = function() {
  function GeoPoint2(latitude, longitude) {
    if (!isFinite(latitude) || latitude < -90 || latitude > 90) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Latitude must be a number between -90 and 90, but was: " + latitude);
    }
    if (!isFinite(longitude) || longitude < -180 || longitude > 180) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Longitude must be a number between -180 and 180, but was: " + longitude);
    }
    this._lat = latitude;
    this._long = longitude;
  }
  Object.defineProperty(GeoPoint2.prototype, "latitude", {
    get: function() {
      return this._lat;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(GeoPoint2.prototype, "longitude", {
    get: function() {
      return this._long;
    },
    enumerable: false,
    configurable: true
  });
  GeoPoint2.prototype.isEqual = function(other) {
    return this._lat === other._lat && this._long === other._long;
  };
  GeoPoint2.prototype.toJSON = function() {
    return { latitude: this._lat, longitude: this._long };
  };
  GeoPoint2.prototype._compareTo = function(other) {
    return primitiveComparator(this._lat, other._lat) || primitiveComparator(this._long, other._long);
  };
  return GeoPoint2;
}();
var RESERVED_FIELD_REGEX = /^__.*__$/;
var ParsedSetData = function() {
  function ParsedSetData2(data, fieldMask, fieldTransforms) {
    this.data = data;
    this.fieldMask = fieldMask;
    this.fieldTransforms = fieldTransforms;
  }
  ParsedSetData2.prototype.toMutation = function(key, precondition) {
    if (this.fieldMask !== null) {
      return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);
    } else {
      return new SetMutation(key, this.data, precondition, this.fieldTransforms);
    }
  };
  return ParsedSetData2;
}();
var ParsedUpdateData = function() {
  function ParsedUpdateData2(data, fieldMask, fieldTransforms) {
    this.data = data;
    this.fieldMask = fieldMask;
    this.fieldTransforms = fieldTransforms;
  }
  ParsedUpdateData2.prototype.toMutation = function(key, precondition) {
    return new PatchMutation(key, this.data, this.fieldMask, precondition, this.fieldTransforms);
  };
  return ParsedUpdateData2;
}();
function isWrite(dataSource) {
  switch (dataSource) {
    case 0:
    case 2:
    case 1:
      return true;
    case 3:
    case 4:
      return false;
    default:
      throw fail();
  }
}
var ParseContextImpl = function() {
  function ParseContextImpl2(settings, databaseId, serializer, ignoreUndefinedProperties, fieldTransforms, fieldMask) {
    this.settings = settings;
    this.databaseId = databaseId;
    this.serializer = serializer;
    this.ignoreUndefinedProperties = ignoreUndefinedProperties;
    if (fieldTransforms === void 0) {
      this.validatePath();
    }
    this.fieldTransforms = fieldTransforms || [];
    this.fieldMask = fieldMask || [];
  }
  Object.defineProperty(ParseContextImpl2.prototype, "path", {
    get: function() {
      return this.settings.path;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(ParseContextImpl2.prototype, "dataSource", {
    get: function() {
      return this.settings.dataSource;
    },
    enumerable: false,
    configurable: true
  });
  ParseContextImpl2.prototype.contextWith = function(configuration) {
    return new ParseContextImpl2(Object.assign(Object.assign({}, this.settings), configuration), this.databaseId, this.serializer, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);
  };
  ParseContextImpl2.prototype.childContextForField = function(field2) {
    var _a;
    var childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field2);
    var context = this.contextWith({ path: childPath, arrayElement: false });
    context.validatePathSegment(field2);
    return context;
  };
  ParseContextImpl2.prototype.childContextForFieldPath = function(field2) {
    var _a;
    var childPath = (_a = this.path) === null || _a === void 0 ? void 0 : _a.child(field2);
    var context = this.contextWith({ path: childPath, arrayElement: false });
    context.validatePath();
    return context;
  };
  ParseContextImpl2.prototype.childContextForArray = function(index2) {
    return this.contextWith({ path: void 0, arrayElement: true });
  };
  ParseContextImpl2.prototype.createError = function(reason) {
    return createError(reason, this.settings.methodName, this.settings.hasConverter || false, this.path, this.settings.targetDoc);
  };
  ParseContextImpl2.prototype.contains = function(fieldPath) {
    return this.fieldMask.find(function(field2) {
      return fieldPath.isPrefixOf(field2);
    }) !== void 0 || this.fieldTransforms.find(function(transform) {
      return fieldPath.isPrefixOf(transform.field);
    }) !== void 0;
  };
  ParseContextImpl2.prototype.validatePath = function() {
    if (!this.path) {
      return;
    }
    for (var i = 0; i < this.path.length; i++) {
      this.validatePathSegment(this.path.get(i));
    }
  };
  ParseContextImpl2.prototype.validatePathSegment = function(segment) {
    if (segment.length === 0) {
      throw this.createError("Document fields must not be empty");
    }
    if (isWrite(this.dataSource) && RESERVED_FIELD_REGEX.test(segment)) {
      throw this.createError('Document fields cannot begin and end with "__"');
    }
  };
  return ParseContextImpl2;
}();
var UserDataReader = function() {
  function UserDataReader2(databaseId, ignoreUndefinedProperties, serializer) {
    this.databaseId = databaseId;
    this.ignoreUndefinedProperties = ignoreUndefinedProperties;
    this.serializer = serializer || newSerializer(databaseId);
  }
  UserDataReader2.prototype.createContext = function(dataSource, methodName, targetDoc, hasConverter) {
    if (hasConverter === void 0) {
      hasConverter = false;
    }
    return new ParseContextImpl({
      dataSource,
      methodName,
      targetDoc,
      path: FieldPath$1.emptyPath(),
      arrayElement: false,
      hasConverter
    }, this.databaseId, this.serializer, this.ignoreUndefinedProperties);
  };
  return UserDataReader2;
}();
function newUserDataReader(firestore) {
  var settings = firestore._freezeSettings();
  var serializer = newSerializer(firestore._databaseId);
  return new UserDataReader(firestore._databaseId, !!settings.ignoreUndefinedProperties, serializer);
}
function parseSetData(userDataReader, methodName, targetDoc, input, hasConverter, options2) {
  if (options2 === void 0) {
    options2 = {};
  }
  var context = userDataReader.createContext(options2.merge || options2.mergeFields ? 2 : 0, methodName, targetDoc, hasConverter);
  validatePlainObject("Data must be an object, but it was:", context, input);
  var updateData = parseObject(input, context);
  var fieldMask;
  var fieldTransforms;
  if (options2.merge) {
    fieldMask = new FieldMask(context.fieldMask);
    fieldTransforms = context.fieldTransforms;
  } else if (options2.mergeFields) {
    var validatedFieldPaths = [];
    for (var _i = 0, _d = options2.mergeFields; _i < _d.length; _i++) {
      var stringOrFieldPath = _d[_i];
      var fieldPath = fieldPathFromArgument$1(methodName, stringOrFieldPath, targetDoc);
      if (!context.contains(fieldPath)) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Field '" + fieldPath + "' is specified in your field mask but missing from your input data.");
      }
      if (!fieldMaskContains(validatedFieldPaths, fieldPath)) {
        validatedFieldPaths.push(fieldPath);
      }
    }
    fieldMask = new FieldMask(validatedFieldPaths);
    fieldTransforms = context.fieldTransforms.filter(function(transform) {
      return fieldMask.covers(transform.field);
    });
  } else {
    fieldMask = null;
    fieldTransforms = context.fieldTransforms;
  }
  return new ParsedSetData(new ObjectValue(updateData), fieldMask, fieldTransforms);
}
var DeleteFieldValueImpl = function(_super) {
  tslib.__extends(DeleteFieldValueImpl2, _super);
  function DeleteFieldValueImpl2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  DeleteFieldValueImpl2.prototype._toFieldTransform = function(context) {
    if (context.dataSource === 2) {
      context.fieldMask.push(context.path);
    } else if (context.dataSource === 1) {
      throw context.createError(this._methodName + "() can only appear at the top level of your update data");
    } else {
      throw context.createError(this._methodName + "() cannot be used with set() unless you pass {merge:true}");
    }
    return null;
  };
  DeleteFieldValueImpl2.prototype.isEqual = function(other) {
    return other instanceof DeleteFieldValueImpl2;
  };
  return DeleteFieldValueImpl2;
}(FieldValue);
function createSentinelChildContext(fieldValue, context, arrayElement) {
  return new ParseContextImpl({
    dataSource: 3,
    targetDoc: context.settings.targetDoc,
    methodName: fieldValue._methodName,
    arrayElement
  }, context.databaseId, context.serializer, context.ignoreUndefinedProperties);
}
var ServerTimestampFieldValueImpl = function(_super) {
  tslib.__extends(ServerTimestampFieldValueImpl2, _super);
  function ServerTimestampFieldValueImpl2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  ServerTimestampFieldValueImpl2.prototype._toFieldTransform = function(context) {
    return new FieldTransform(context.path, new ServerTimestampTransform());
  };
  ServerTimestampFieldValueImpl2.prototype.isEqual = function(other) {
    return other instanceof ServerTimestampFieldValueImpl2;
  };
  return ServerTimestampFieldValueImpl2;
}(FieldValue);
var ArrayUnionFieldValueImpl = function(_super) {
  tslib.__extends(ArrayUnionFieldValueImpl2, _super);
  function ArrayUnionFieldValueImpl2(methodName, _elements) {
    var _this = _super.call(this, methodName) || this;
    _this._elements = _elements;
    return _this;
  }
  ArrayUnionFieldValueImpl2.prototype._toFieldTransform = function(context) {
    var parseContext = createSentinelChildContext(this, context, true);
    var parsedElements = this._elements.map(function(element) {
      return parseData(element, parseContext);
    });
    var arrayUnion2 = new ArrayUnionTransformOperation(parsedElements);
    return new FieldTransform(context.path, arrayUnion2);
  };
  ArrayUnionFieldValueImpl2.prototype.isEqual = function(other) {
    return this === other;
  };
  return ArrayUnionFieldValueImpl2;
}(FieldValue);
var ArrayRemoveFieldValueImpl = function(_super) {
  tslib.__extends(ArrayRemoveFieldValueImpl2, _super);
  function ArrayRemoveFieldValueImpl2(methodName, _elements) {
    var _this = _super.call(this, methodName) || this;
    _this._elements = _elements;
    return _this;
  }
  ArrayRemoveFieldValueImpl2.prototype._toFieldTransform = function(context) {
    var parseContext = createSentinelChildContext(this, context, true);
    var parsedElements = this._elements.map(function(element) {
      return parseData(element, parseContext);
    });
    var arrayUnion2 = new ArrayRemoveTransformOperation(parsedElements);
    return new FieldTransform(context.path, arrayUnion2);
  };
  ArrayRemoveFieldValueImpl2.prototype.isEqual = function(other) {
    return this === other;
  };
  return ArrayRemoveFieldValueImpl2;
}(FieldValue);
var NumericIncrementFieldValueImpl = function(_super) {
  tslib.__extends(NumericIncrementFieldValueImpl2, _super);
  function NumericIncrementFieldValueImpl2(methodName, _operand) {
    var _this = _super.call(this, methodName) || this;
    _this._operand = _operand;
    return _this;
  }
  NumericIncrementFieldValueImpl2.prototype._toFieldTransform = function(context) {
    var numericIncrement = new NumericIncrementTransformOperation(context.serializer, toNumber(context.serializer, this._operand));
    return new FieldTransform(context.path, numericIncrement);
  };
  NumericIncrementFieldValueImpl2.prototype.isEqual = function(other) {
    return this === other;
  };
  return NumericIncrementFieldValueImpl2;
}(FieldValue);
function parseUpdateData(userDataReader, methodName, targetDoc, input) {
  var context = userDataReader.createContext(1, methodName, targetDoc);
  validatePlainObject("Data must be an object, but it was:", context, input);
  var fieldMaskPaths = [];
  var updateData = ObjectValue.empty();
  forEach(input, function(key, value) {
    var path2 = fieldPathFromDotSeparatedString(methodName, key, targetDoc);
    value = util.getModularInstance(value);
    var childContext = context.childContextForFieldPath(path2);
    if (value instanceof DeleteFieldValueImpl) {
      fieldMaskPaths.push(path2);
    } else {
      var parsedValue = parseData(value, childContext);
      if (parsedValue != null) {
        fieldMaskPaths.push(path2);
        updateData.set(path2, parsedValue);
      }
    }
  });
  var mask = new FieldMask(fieldMaskPaths);
  return new ParsedUpdateData(updateData, mask, context.fieldTransforms);
}
function parseUpdateVarargs(userDataReader, methodName, targetDoc, field2, value, moreFieldsAndValues) {
  var context = userDataReader.createContext(1, methodName, targetDoc);
  var keys = [fieldPathFromArgument$1(methodName, field2, targetDoc)];
  var values = [value];
  if (moreFieldsAndValues.length % 2 !== 0) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Function " + methodName + "() needs to be called with an even number of arguments that alternate between field names and values.");
  }
  for (var i = 0; i < moreFieldsAndValues.length; i += 2) {
    keys.push(fieldPathFromArgument$1(methodName, moreFieldsAndValues[i]));
    values.push(moreFieldsAndValues[i + 1]);
  }
  var fieldMaskPaths = [];
  var updateData = ObjectValue.empty();
  for (var i = keys.length - 1; i >= 0; --i) {
    if (!fieldMaskContains(fieldMaskPaths, keys[i])) {
      var path2 = keys[i];
      var value_1 = values[i];
      value_1 = util.getModularInstance(value_1);
      var childContext = context.childContextForFieldPath(path2);
      if (value_1 instanceof DeleteFieldValueImpl) {
        fieldMaskPaths.push(path2);
      } else {
        var parsedValue = parseData(value_1, childContext);
        if (parsedValue != null) {
          fieldMaskPaths.push(path2);
          updateData.set(path2, parsedValue);
        }
      }
    }
  }
  var mask = new FieldMask(fieldMaskPaths);
  return new ParsedUpdateData(updateData, mask, context.fieldTransforms);
}
function parseQueryValue(userDataReader, methodName, input, allowArrays) {
  if (allowArrays === void 0) {
    allowArrays = false;
  }
  var context = userDataReader.createContext(allowArrays ? 4 : 3, methodName);
  var parsed = parseData(input, context);
  return parsed;
}
function parseData(input, context) {
  input = util.getModularInstance(input);
  if (looksLikeJsonObject(input)) {
    validatePlainObject("Unsupported field value:", context, input);
    return parseObject(input, context);
  } else if (input instanceof FieldValue) {
    parseSentinelFieldValue(input, context);
    return null;
  } else if (input === void 0 && context.ignoreUndefinedProperties) {
    return null;
  } else {
    if (context.path) {
      context.fieldMask.push(context.path);
    }
    if (input instanceof Array) {
      if (context.settings.arrayElement && context.dataSource !== 4) {
        throw context.createError("Nested arrays are not supported");
      }
      return parseArray(input, context);
    } else {
      return parseScalarValue(input, context);
    }
  }
}
function parseObject(obj, context) {
  var fields = {};
  if (isEmpty(obj)) {
    if (context.path && context.path.length > 0) {
      context.fieldMask.push(context.path);
    }
  } else {
    forEach(obj, function(key, val) {
      var parsedValue = parseData(val, context.childContextForField(key));
      if (parsedValue != null) {
        fields[key] = parsedValue;
      }
    });
  }
  return { mapValue: { fields } };
}
function parseArray(array, context) {
  var values = [];
  var entryIndex = 0;
  for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
    var entry = array_1[_i];
    var parsedEntry = parseData(entry, context.childContextForArray(entryIndex));
    if (parsedEntry == null) {
      parsedEntry = { nullValue: "NULL_VALUE" };
    }
    values.push(parsedEntry);
    entryIndex++;
  }
  return { arrayValue: { values } };
}
function parseSentinelFieldValue(value, context) {
  if (!isWrite(context.dataSource)) {
    throw context.createError(value._methodName + "() can only be used with update() and set()");
  }
  if (!context.path) {
    throw context.createError(value._methodName + "() is not currently supported inside arrays");
  }
  var fieldTransform = value._toFieldTransform(context);
  if (fieldTransform) {
    context.fieldTransforms.push(fieldTransform);
  }
}
function parseScalarValue(value, context) {
  value = util.getModularInstance(value);
  if (value === null) {
    return { nullValue: "NULL_VALUE" };
  } else if (typeof value === "number") {
    return toNumber(context.serializer, value);
  } else if (typeof value === "boolean") {
    return { booleanValue: value };
  } else if (typeof value === "string") {
    return { stringValue: value };
  } else if (value instanceof Date) {
    var timestamp = Timestamp.fromDate(value);
    return {
      timestampValue: toTimestamp(context.serializer, timestamp)
    };
  } else if (value instanceof Timestamp) {
    var timestamp = new Timestamp(value.seconds, Math.floor(value.nanoseconds / 1e3) * 1e3);
    return {
      timestampValue: toTimestamp(context.serializer, timestamp)
    };
  } else if (value instanceof GeoPoint) {
    return {
      geoPointValue: {
        latitude: value.latitude,
        longitude: value.longitude
      }
    };
  } else if (value instanceof Bytes) {
    return { bytesValue: toBytes(context.serializer, value._byteString) };
  } else if (value instanceof DocumentReference) {
    var thisDb = context.databaseId;
    var otherDb = value.firestore._databaseId;
    if (!otherDb.isEqual(thisDb)) {
      throw context.createError("Document reference is for database " + (otherDb.projectId + "/" + otherDb.database + " but should be ") + ("for database " + thisDb.projectId + "/" + thisDb.database));
    }
    return {
      referenceValue: toResourceName(value.firestore._databaseId || context.databaseId, value._key.path)
    };
  } else {
    throw context.createError("Unsupported field value: " + valueDescription(value));
  }
}
function looksLikeJsonObject(input) {
  return typeof input === "object" && input !== null && !(input instanceof Array) && !(input instanceof Date) && !(input instanceof Timestamp) && !(input instanceof GeoPoint) && !(input instanceof Bytes) && !(input instanceof DocumentReference) && !(input instanceof FieldValue);
}
function validatePlainObject(message2, context, input) {
  if (!looksLikeJsonObject(input) || !isPlainObject(input)) {
    var description2 = valueDescription(input);
    if (description2 === "an object") {
      throw context.createError(message2 + " a custom object");
    } else {
      throw context.createError(message2 + " " + description2);
    }
  }
}
function fieldPathFromArgument$1(methodName, path2, targetDoc) {
  path2 = util.getModularInstance(path2);
  if (path2 instanceof FieldPath) {
    return path2._internalPath;
  } else if (typeof path2 === "string") {
    return fieldPathFromDotSeparatedString(methodName, path2);
  } else {
    var message2 = "Field path arguments must be of type string or FieldPath.";
    throw createError(message2, methodName, false, void 0, targetDoc);
  }
}
var FIELD_PATH_RESERVED = new RegExp("[~\\*/\\[\\]]");
function fieldPathFromDotSeparatedString(methodName, path2, targetDoc) {
  var found = path2.search(FIELD_PATH_RESERVED);
  if (found >= 0) {
    throw createError("Invalid field path (" + path2 + "). Paths must not contain '~', '*', '/', '[', or ']'", methodName, false, void 0, targetDoc);
  }
  try {
    return new (FieldPath.bind.apply(FieldPath, tslib.__spreadArray([void 0], path2.split("."))))()._internalPath;
  } catch (e) {
    throw createError("Invalid field path (" + path2 + "). Paths must not be empty, begin with '.', end with '.', or contain '..'", methodName, false, void 0, targetDoc);
  }
}
function createError(reason, methodName, hasConverter, path2, targetDoc) {
  var hasPath = path2 && !path2.isEmpty();
  var hasDocument = targetDoc !== void 0;
  var message2 = "Function " + methodName + "() called with invalid data";
  if (hasConverter) {
    message2 += " (via `toFirestore()`)";
  }
  message2 += ". ";
  var description2 = "";
  if (hasPath || hasDocument) {
    description2 += " (found";
    if (hasPath) {
      description2 += " in field " + path2;
    }
    if (hasDocument) {
      description2 += " in document " + targetDoc;
    }
    description2 += ")";
  }
  return new FirestoreError(Code.INVALID_ARGUMENT, message2 + reason + description2);
}
function fieldMaskContains(haystack, needle) {
  return haystack.some(function(v) {
    return v.isEqual(needle);
  });
}
var DocumentSnapshot$1 = function() {
  function DocumentSnapshot$12(_firestore, _userDataWriter, _key, _document, _converter) {
    this._firestore = _firestore;
    this._userDataWriter = _userDataWriter;
    this._key = _key;
    this._document = _document;
    this._converter = _converter;
  }
  Object.defineProperty(DocumentSnapshot$12.prototype, "id", {
    get: function() {
      return this._key.path.lastSegment();
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(DocumentSnapshot$12.prototype, "ref", {
    get: function() {
      return new DocumentReference(this._firestore, this._converter, this._key);
    },
    enumerable: false,
    configurable: true
  });
  DocumentSnapshot$12.prototype.exists = function() {
    return this._document !== null;
  };
  DocumentSnapshot$12.prototype.data = function() {
    if (!this._document) {
      return void 0;
    } else if (this._converter) {
      var snapshot = new QueryDocumentSnapshot$1(this._firestore, this._userDataWriter, this._key, this._document, null);
      return this._converter.fromFirestore(snapshot);
    } else {
      return this._userDataWriter.convertValue(this._document.data.value);
    }
  };
  DocumentSnapshot$12.prototype.get = function(fieldPath) {
    if (this._document) {
      var value = this._document.data.field(fieldPathFromArgument("DocumentSnapshot.get", fieldPath));
      if (value !== null) {
        return this._userDataWriter.convertValue(value);
      }
    }
    return void 0;
  };
  return DocumentSnapshot$12;
}();
var QueryDocumentSnapshot$1 = function(_super) {
  tslib.__extends(QueryDocumentSnapshot$12, _super);
  function QueryDocumentSnapshot$12() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  QueryDocumentSnapshot$12.prototype.data = function() {
    return _super.prototype.data.call(this);
  };
  return QueryDocumentSnapshot$12;
}(DocumentSnapshot$1);
function fieldPathFromArgument(methodName, arg) {
  if (typeof arg === "string") {
    return fieldPathFromDotSeparatedString(methodName, arg);
  } else if (arg instanceof FieldPath) {
    return arg._internalPath;
  } else {
    return arg._delegate._internalPath;
  }
}
var SnapshotMetadata = function() {
  function SnapshotMetadata2(hasPendingWrites, fromCache) {
    this.hasPendingWrites = hasPendingWrites;
    this.fromCache = fromCache;
  }
  SnapshotMetadata2.prototype.isEqual = function(other) {
    return this.hasPendingWrites === other.hasPendingWrites && this.fromCache === other.fromCache;
  };
  return SnapshotMetadata2;
}();
var DocumentSnapshot = function(_super) {
  tslib.__extends(DocumentSnapshot2, _super);
  function DocumentSnapshot2(_firestore, userDataWriter, key, document2, metadata2, converter2) {
    var _this = _super.call(this, _firestore, userDataWriter, key, document2, converter2) || this;
    _this._firestore = _firestore;
    _this._firestoreImpl = _firestore;
    _this.metadata = metadata2;
    return _this;
  }
  DocumentSnapshot2.prototype.exists = function() {
    return _super.prototype.exists.call(this);
  };
  DocumentSnapshot2.prototype.data = function(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    if (!this._document) {
      return void 0;
    } else if (this._converter) {
      var snapshot = new QueryDocumentSnapshot(this._firestore, this._userDataWriter, this._key, this._document, this.metadata, null);
      return this._converter.fromFirestore(snapshot, options2);
    } else {
      return this._userDataWriter.convertValue(this._document.data.value, options2.serverTimestamps);
    }
  };
  DocumentSnapshot2.prototype.get = function(fieldPath, options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    if (this._document) {
      var value = this._document.data.field(fieldPathFromArgument("DocumentSnapshot.get", fieldPath));
      if (value !== null) {
        return this._userDataWriter.convertValue(value, options2.serverTimestamps);
      }
    }
    return void 0;
  };
  return DocumentSnapshot2;
}(DocumentSnapshot$1);
var QueryDocumentSnapshot = function(_super) {
  tslib.__extends(QueryDocumentSnapshot2, _super);
  function QueryDocumentSnapshot2() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  QueryDocumentSnapshot2.prototype.data = function(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    return _super.prototype.data.call(this, options2);
  };
  return QueryDocumentSnapshot2;
}(DocumentSnapshot);
var QuerySnapshot = function() {
  function QuerySnapshot2(_firestore, _userDataWriter, query2, _snapshot) {
    this._firestore = _firestore;
    this._userDataWriter = _userDataWriter;
    this._snapshot = _snapshot;
    this.metadata = new SnapshotMetadata(_snapshot.hasPendingWrites, _snapshot.fromCache);
    this.query = query2;
  }
  Object.defineProperty(QuerySnapshot2.prototype, "docs", {
    get: function() {
      var result = [];
      this.forEach(function(doc2) {
        return result.push(doc2);
      });
      return result;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(QuerySnapshot2.prototype, "size", {
    get: function() {
      return this._snapshot.docs.size;
    },
    enumerable: false,
    configurable: true
  });
  Object.defineProperty(QuerySnapshot2.prototype, "empty", {
    get: function() {
      return this.size === 0;
    },
    enumerable: false,
    configurable: true
  });
  QuerySnapshot2.prototype.forEach = function(callback, thisArg) {
    var _this = this;
    this._snapshot.docs.forEach(function(doc2) {
      callback.call(thisArg, new QueryDocumentSnapshot(_this._firestore, _this._userDataWriter, doc2.key, doc2, new SnapshotMetadata(_this._snapshot.mutatedKeys.has(doc2.key), _this._snapshot.fromCache), _this.query.converter));
    });
  };
  QuerySnapshot2.prototype.docChanges = function(options2) {
    if (options2 === void 0) {
      options2 = {};
    }
    var includeMetadataChanges = !!options2.includeMetadataChanges;
    if (includeMetadataChanges && this._snapshot.excludesMetadataChanges) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");
    }
    if (!this._cachedChanges || this._cachedChangesIncludeMetadataChanges !== includeMetadataChanges) {
      this._cachedChanges = changesFromSnapshot(this, includeMetadataChanges);
      this._cachedChangesIncludeMetadataChanges = includeMetadataChanges;
    }
    return this._cachedChanges;
  };
  return QuerySnapshot2;
}();
function changesFromSnapshot(querySnapshot, includeMetadataChanges) {
  if (querySnapshot._snapshot.oldDocs.isEmpty()) {
    var index_1 = 0;
    return querySnapshot._snapshot.docChanges.map(function(change) {
      var doc2 = new QueryDocumentSnapshot(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query.converter);
      return {
        type: "added",
        doc: doc2,
        oldIndex: -1,
        newIndex: index_1++
      };
    });
  } else {
    var indexTracker_1 = querySnapshot._snapshot.oldDocs;
    return querySnapshot._snapshot.docChanges.filter(function(change) {
      return includeMetadataChanges || change.type !== 3;
    }).map(function(change) {
      var doc2 = new QueryDocumentSnapshot(querySnapshot._firestore, querySnapshot._userDataWriter, change.doc.key, change.doc, new SnapshotMetadata(querySnapshot._snapshot.mutatedKeys.has(change.doc.key), querySnapshot._snapshot.fromCache), querySnapshot.query.converter);
      var oldIndex = -1;
      var newIndex = -1;
      if (change.type !== 0) {
        oldIndex = indexTracker_1.indexOf(change.doc.key);
        indexTracker_1 = indexTracker_1.delete(change.doc.key);
      }
      if (change.type !== 1) {
        indexTracker_1 = indexTracker_1.add(change.doc);
        newIndex = indexTracker_1.indexOf(change.doc.key);
      }
      return {
        type: resultChangeType(change.type),
        doc: doc2,
        oldIndex,
        newIndex
      };
    });
  }
}
function resultChangeType(type2) {
  switch (type2) {
    case 0:
      return "added";
    case 2:
    case 3:
      return "modified";
    case 1:
      return "removed";
    default:
      return fail();
  }
}
function snapshotEqual(left, right) {
  if (left instanceof DocumentSnapshot && right instanceof DocumentSnapshot) {
    return left._firestore === right._firestore && left._key.isEqual(right._key) && (left._document === null ? right._document === null : left._document.isEqual(right._document)) && left._converter === right._converter;
  } else if (left instanceof QuerySnapshot && right instanceof QuerySnapshot) {
    return left._firestore === right._firestore && queryEqual(left.query, right.query) && left.metadata.isEqual(right.metadata) && left._snapshot.isEqual(right._snapshot);
  }
  return false;
}
function validateHasExplicitOrderByForLimitToLast(query2) {
  if (hasLimitToLast(query2) && query2.explicitOrderBy.length === 0) {
    throw new FirestoreError(Code.UNIMPLEMENTED, "limitToLast() queries require specifying at least one orderBy() clause");
  }
}
var QueryConstraint = function() {
  function QueryConstraint2() {
  }
  return QueryConstraint2;
}();
function query(query2) {
  var queryConstraints = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    queryConstraints[_i - 1] = arguments[_i];
  }
  for (var _d = 0, queryConstraints_1 = queryConstraints; _d < queryConstraints_1.length; _d++) {
    var constraint = queryConstraints_1[_d];
    query2 = constraint._apply(query2);
  }
  return query2;
}
var QueryFilterConstraint = function(_super) {
  tslib.__extends(QueryFilterConstraint2, _super);
  function QueryFilterConstraint2(_field, _op, _value) {
    var _this = _super.call(this) || this;
    _this._field = _field;
    _this._op = _op;
    _this._value = _value;
    _this.type = "where";
    return _this;
  }
  QueryFilterConstraint2.prototype._apply = function(query2) {
    var reader2 = newUserDataReader(query2.firestore);
    var filter2 = newQueryFilter(query2._query, "where", reader2, query2.firestore._databaseId, this._field, this._op, this._value);
    return new Query(query2.firestore, query2.converter, queryWithAddedFilter(query2._query, filter2));
  };
  return QueryFilterConstraint2;
}(QueryConstraint);
function where(fieldPath, opStr, value) {
  var op = opStr;
  var field2 = fieldPathFromArgument("where", fieldPath);
  return new QueryFilterConstraint(field2, op, value);
}
var QueryOrderByConstraint = function(_super) {
  tslib.__extends(QueryOrderByConstraint2, _super);
  function QueryOrderByConstraint2(_field, _direction) {
    var _this = _super.call(this) || this;
    _this._field = _field;
    _this._direction = _direction;
    _this.type = "orderBy";
    return _this;
  }
  QueryOrderByConstraint2.prototype._apply = function(query2) {
    var orderBy2 = newQueryOrderBy(query2._query, this._field, this._direction);
    return new Query(query2.firestore, query2.converter, queryWithAddedOrderBy(query2._query, orderBy2));
  };
  return QueryOrderByConstraint2;
}(QueryConstraint);
function orderBy(fieldPath, directionStr) {
  if (directionStr === void 0) {
    directionStr = "asc";
  }
  var direction = directionStr;
  var path2 = fieldPathFromArgument("orderBy", fieldPath);
  return new QueryOrderByConstraint(path2, direction);
}
var QueryLimitConstraint = function(_super) {
  tslib.__extends(QueryLimitConstraint2, _super);
  function QueryLimitConstraint2(type2, _limit, _limitType) {
    var _this = _super.call(this) || this;
    _this.type = type2;
    _this._limit = _limit;
    _this._limitType = _limitType;
    return _this;
  }
  QueryLimitConstraint2.prototype._apply = function(query2) {
    return new Query(query2.firestore, query2.converter, queryWithLimit(query2._query, this._limit, this._limitType));
  };
  return QueryLimitConstraint2;
}(QueryConstraint);
function limit(limit2) {
  validatePositiveNumber("limit", limit2);
  return new QueryLimitConstraint("limit", limit2, "F");
}
function limitToLast(limit2) {
  validatePositiveNumber("limitToLast", limit2);
  return new QueryLimitConstraint("limitToLast", limit2, "L");
}
var QueryStartAtConstraint = function(_super) {
  tslib.__extends(QueryStartAtConstraint2, _super);
  function QueryStartAtConstraint2(type2, _docOrFields, _before) {
    var _this = _super.call(this) || this;
    _this.type = type2;
    _this._docOrFields = _docOrFields;
    _this._before = _before;
    return _this;
  }
  QueryStartAtConstraint2.prototype._apply = function(query2) {
    var bound = newQueryBoundFromDocOrFields(query2, this.type, this._docOrFields, this._before);
    return new Query(query2.firestore, query2.converter, queryWithStartAt(query2._query, bound));
  };
  return QueryStartAtConstraint2;
}(QueryConstraint);
function startAt() {
  var docOrFields = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    docOrFields[_i] = arguments[_i];
  }
  return new QueryStartAtConstraint("startAt", docOrFields, true);
}
function startAfter() {
  var docOrFields = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    docOrFields[_i] = arguments[_i];
  }
  return new QueryStartAtConstraint("startAfter", docOrFields, false);
}
var QueryEndAtConstraint = function(_super) {
  tslib.__extends(QueryEndAtConstraint2, _super);
  function QueryEndAtConstraint2(type2, _docOrFields, _before) {
    var _this = _super.call(this) || this;
    _this.type = type2;
    _this._docOrFields = _docOrFields;
    _this._before = _before;
    return _this;
  }
  QueryEndAtConstraint2.prototype._apply = function(query2) {
    var bound = newQueryBoundFromDocOrFields(query2, this.type, this._docOrFields, this._before);
    return new Query(query2.firestore, query2.converter, queryWithEndAt(query2._query, bound));
  };
  return QueryEndAtConstraint2;
}(QueryConstraint);
function endBefore() {
  var docOrFields = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    docOrFields[_i] = arguments[_i];
  }
  return new QueryEndAtConstraint("endBefore", docOrFields, true);
}
function endAt() {
  var docOrFields = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    docOrFields[_i] = arguments[_i];
  }
  return new QueryEndAtConstraint("endAt", docOrFields, false);
}
function newQueryBoundFromDocOrFields(query2, methodName, docOrFields, before) {
  docOrFields[0] = util.getModularInstance(docOrFields[0]);
  if (docOrFields[0] instanceof DocumentSnapshot$1) {
    return newQueryBoundFromDocument(query2._query, query2.firestore._databaseId, methodName, docOrFields[0]._document, before);
  } else {
    var reader2 = newUserDataReader(query2.firestore);
    return newQueryBoundFromFields(query2._query, query2.firestore._databaseId, reader2, methodName, docOrFields, before);
  }
}
function newQueryFilter(query2, methodName, dataReader, databaseId, fieldPath, op, value) {
  var fieldValue;
  if (fieldPath.isKeyField()) {
    if (op === "array-contains" || op === "array-contains-any") {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. You can't perform '" + op + "' queries on FieldPath.documentId().");
    } else if (op === "in" || op === "not-in") {
      validateDisjunctiveFilterElements(value, op);
      var referenceList = [];
      for (var _i = 0, value_2 = value; _i < value_2.length; _i++) {
        var arrayValue = value_2[_i];
        referenceList.push(parseDocumentIdValue(databaseId, query2, arrayValue));
      }
      fieldValue = { arrayValue: { values: referenceList } };
    } else {
      fieldValue = parseDocumentIdValue(databaseId, query2, value);
    }
  } else {
    if (op === "in" || op === "not-in" || op === "array-contains-any") {
      validateDisjunctiveFilterElements(value, op);
    }
    fieldValue = parseQueryValue(dataReader, methodName, value, op === "in" || op === "not-in");
  }
  var filter2 = FieldFilter.create(fieldPath, op, fieldValue);
  validateNewFilter(query2, filter2);
  return filter2;
}
function newQueryOrderBy(query2, fieldPath, direction) {
  if (query2.startAt !== null) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You must not call startAt() or startAfter() before calling orderBy().");
  }
  if (query2.endAt !== null) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You must not call endAt() or endBefore() before calling orderBy().");
  }
  var orderBy2 = new OrderBy(fieldPath, direction);
  validateNewOrderBy(query2, orderBy2);
  return orderBy2;
}
function newQueryBoundFromDocument(query2, databaseId, methodName, doc2, before) {
  if (!doc2) {
    throw new FirestoreError(Code.NOT_FOUND, "Can't use a DocumentSnapshot that doesn't exist for " + (methodName + "()."));
  }
  var components = [];
  for (var _i = 0, _d = queryOrderBy(query2); _i < _d.length; _i++) {
    var orderBy_5 = _d[_i];
    if (orderBy_5.field.isKeyField()) {
      components.push(refValue(databaseId, doc2.key));
    } else {
      var value = doc2.data.field(orderBy_5.field);
      if (isServerTimestamp(value)) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, 'Invalid query. You are trying to start or end a query using a document for which the field "' + orderBy_5.field + '" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');
      } else if (value !== null) {
        components.push(value);
      } else {
        var field2 = orderBy_5.field.canonicalString();
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You are trying to start or end a query using a " + ("document for which the field '" + field2 + "' (used as the ") + "orderBy) does not exist.");
      }
    }
  }
  return new Bound(components, before);
}
function newQueryBoundFromFields(query2, databaseId, dataReader, methodName, values, before) {
  var orderBy2 = query2.explicitOrderBy;
  if (values.length > orderBy2.length) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Too many arguments provided to " + methodName + "(). The number of arguments must be less than or equal to the number of orderBy() clauses");
  }
  var components = [];
  for (var i = 0; i < values.length; i++) {
    var rawValue = values[i];
    var orderByComponent = orderBy2[i];
    if (orderByComponent.field.isKeyField()) {
      if (typeof rawValue !== "string") {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. Expected a string for document ID in " + (methodName + "(), but got a " + typeof rawValue));
      }
      if (!isCollectionGroupQuery(query2) && rawValue.indexOf("/") !== -1) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection and ordering by FieldPath.documentId(), " + ("the value passed to " + methodName + "() must be a plain document ID, but ") + ("'" + rawValue + "' contains a slash."));
      }
      var path2 = query2.path.child(ResourcePath.fromString(rawValue));
      if (!DocumentKey.isDocumentKey(path2)) {
        throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection group and ordering by " + ("FieldPath.documentId(), the value passed to " + methodName + "() must result in a ") + ("valid document path, but '" + path2 + "' is not because it contains an odd number ") + "of segments.");
      }
      var key = new DocumentKey(path2);
      components.push(refValue(databaseId, key));
    } else {
      var wrapped = parseQueryValue(dataReader, methodName, rawValue);
      components.push(wrapped);
    }
  }
  return new Bound(components, before);
}
function parseDocumentIdValue(databaseId, query2, documentIdValue) {
  documentIdValue = util.getModularInstance(documentIdValue);
  if (typeof documentIdValue === "string") {
    if (documentIdValue === "") {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");
    }
    if (!isCollectionGroupQuery(query2) && documentIdValue.indexOf("/") !== -1) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but " + ("'" + documentIdValue + "' contains a '/' character."));
    }
    var path2 = query2.path.child(ResourcePath.fromString(documentIdValue));
    if (!DocumentKey.isDocumentKey(path2)) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, " + ("but '" + path2 + "' is not because it has an odd number of segments (" + path2.length + ")."));
    }
    return refValue(databaseId, new DocumentKey(path2));
  } else if (documentIdValue instanceof DocumentReference) {
    return refValue(databaseId, documentIdValue._key);
  } else {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: " + (valueDescription(documentIdValue) + "."));
  }
}
function validateDisjunctiveFilterElements(value, operator) {
  if (!Array.isArray(value) || value.length === 0) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. A non-empty array is required for " + ("'" + operator.toString() + "' filters."));
  }
  if (value.length > 10) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid Query. '" + operator.toString() + "' filters support a maximum of 10 elements in the value array.");
  }
}
function conflictingOps(op) {
  switch (op) {
    case "!=":
      return ["!=", "not-in"];
    case "array-contains":
      return [
        "array-contains",
        "array-contains-any",
        "not-in"
      ];
    case "in":
      return ["array-contains-any", "in", "not-in"];
    case "array-contains-any":
      return [
        "array-contains",
        "array-contains-any",
        "in",
        "not-in"
      ];
    case "not-in":
      return [
        "array-contains",
        "array-contains-any",
        "in",
        "not-in",
        "!="
      ];
    default:
      return [];
  }
}
function validateNewFilter(query2, filter2) {
  if (filter2.isInequality()) {
    var existingField = getInequalityFilterField(query2);
    if (existingField !== null && !existingField.isEqual(filter2.field)) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have" + (" inequality filters on '" + existingField.toString() + "'") + (" and '" + filter2.field.toString() + "'"));
    }
    var firstOrderByField = getFirstOrderByField(query2);
    if (firstOrderByField !== null) {
      validateOrderByAndInequalityMatch(query2, filter2.field, firstOrderByField);
    }
  }
  var conflictingOp = findFilterOperator(query2, conflictingOps(filter2.op));
  if (conflictingOp !== null) {
    if (conflictingOp === filter2.op) {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You cannot use more than one " + ("'" + filter2.op.toString() + "' filter."));
    } else {
      throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You cannot use '" + filter2.op.toString() + "' filters " + ("with '" + conflictingOp.toString() + "' filters."));
    }
  }
}
function validateNewOrderBy(query2, orderBy2) {
  if (getFirstOrderByField(query2) === null) {
    var inequalityField = getInequalityFilterField(query2);
    if (inequalityField !== null) {
      validateOrderByAndInequalityMatch(query2, inequalityField, orderBy2.field);
    }
  }
}
function validateOrderByAndInequalityMatch(baseQuery, inequality, orderBy2) {
  if (!orderBy2.isEqual(inequality)) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Invalid query. You have a where filter with an inequality " + ("(<, <=, !=, not-in, >, or >=) on field '" + inequality.toString() + "' ") + ("and so you must also use '" + inequality.toString() + "' ") + "as your first argument to orderBy(), but your first orderBy() " + ("is on field '" + orderBy2.toString() + "' instead."));
  }
}
var AbstractUserDataWriter = function() {
  function AbstractUserDataWriter2() {
  }
  AbstractUserDataWriter2.prototype.convertValue = function(value, serverTimestampBehavior) {
    if (serverTimestampBehavior === void 0) {
      serverTimestampBehavior = "none";
    }
    switch (typeOrder(value)) {
      case 0:
        return null;
      case 1:
        return value.booleanValue;
      case 2:
        return normalizeNumber(value.integerValue || value.doubleValue);
      case 3:
        return this.convertTimestamp(value.timestampValue);
      case 4:
        return this.convertServerTimestamp(value, serverTimestampBehavior);
      case 5:
        return value.stringValue;
      case 6:
        return this.convertBytes(normalizeByteString(value.bytesValue));
      case 7:
        return this.convertReference(value.referenceValue);
      case 8:
        return this.convertGeoPoint(value.geoPointValue);
      case 9:
        return this.convertArray(value.arrayValue, serverTimestampBehavior);
      case 10:
        return this.convertObject(value.mapValue, serverTimestampBehavior);
      default:
        throw fail();
    }
  };
  AbstractUserDataWriter2.prototype.convertObject = function(mapValue, serverTimestampBehavior) {
    var _this = this;
    var result = {};
    forEach(mapValue.fields, function(key, value) {
      result[key] = _this.convertValue(value, serverTimestampBehavior);
    });
    return result;
  };
  AbstractUserDataWriter2.prototype.convertGeoPoint = function(value) {
    return new GeoPoint(normalizeNumber(value.latitude), normalizeNumber(value.longitude));
  };
  AbstractUserDataWriter2.prototype.convertArray = function(arrayValue, serverTimestampBehavior) {
    var _this = this;
    return (arrayValue.values || []).map(function(value) {
      return _this.convertValue(value, serverTimestampBehavior);
    });
  };
  AbstractUserDataWriter2.prototype.convertServerTimestamp = function(value, serverTimestampBehavior) {
    switch (serverTimestampBehavior) {
      case "previous":
        var previousValue = getPreviousValue(value);
        if (previousValue == null) {
          return null;
        }
        return this.convertValue(previousValue, serverTimestampBehavior);
      case "estimate":
        return this.convertTimestamp(getLocalWriteTime(value));
      default:
        return null;
    }
  };
  AbstractUserDataWriter2.prototype.convertTimestamp = function(value) {
    var normalizedValue = normalizeTimestamp(value);
    return new Timestamp(normalizedValue.seconds, normalizedValue.nanos);
  };
  AbstractUserDataWriter2.prototype.convertDocumentKey = function(name2, expectedDatabaseId) {
    var resourcePath = ResourcePath.fromString(name2);
    hardAssert(isValidResourceName(resourcePath));
    var databaseId = new DatabaseId(resourcePath.get(1), resourcePath.get(3));
    var key = new DocumentKey(resourcePath.popFirst(5));
    if (!databaseId.isEqual(expectedDatabaseId)) {
      logError("Document " + key + " contains a document reference within a different database (" + (databaseId.projectId + "/" + databaseId.database + ") which is not ") + "supported. It will be treated as a reference in the current " + ("database (" + expectedDatabaseId.projectId + "/" + expectedDatabaseId.database + ") ") + "instead.");
    }
    return key;
  };
  return AbstractUserDataWriter2;
}();
function applyFirestoreDataConverter(converter2, value, options2) {
  var convertedValue;
  if (converter2) {
    if (options2 && (options2.merge || options2.mergeFields)) {
      convertedValue = converter2.toFirestore(value, options2);
    } else {
      convertedValue = converter2.toFirestore(value);
    }
  } else {
    convertedValue = value;
  }
  return convertedValue;
}
var LiteUserDataWriter = function(_super) {
  tslib.__extends(LiteUserDataWriter2, _super);
  function LiteUserDataWriter2(firestore) {
    var _this = _super.call(this) || this;
    _this.firestore = firestore;
    return _this;
  }
  LiteUserDataWriter2.prototype.convertBytes = function(bytes) {
    return new Bytes(bytes);
  };
  LiteUserDataWriter2.prototype.convertReference = function(name2) {
    var key = this.convertDocumentKey(name2, this.firestore._databaseId);
    return new DocumentReference(this.firestore, null, key);
  };
  return LiteUserDataWriter2;
}(AbstractUserDataWriter);
var WriteBatch = function() {
  function WriteBatch2(_firestore, _commitHandler) {
    this._firestore = _firestore;
    this._commitHandler = _commitHandler;
    this._mutations = [];
    this._committed = false;
    this._dataReader = newUserDataReader(_firestore);
  }
  WriteBatch2.prototype.set = function(documentRef, data, options2) {
    this._verifyNotCommitted();
    var ref = validateReference(documentRef, this._firestore);
    var convertedValue = applyFirestoreDataConverter(ref.converter, data, options2);
    var parsed = parseSetData(this._dataReader, "WriteBatch.set", ref._key, convertedValue, ref.converter !== null, options2);
    this._mutations.push(parsed.toMutation(ref._key, Precondition.none()));
    return this;
  };
  WriteBatch2.prototype.update = function(documentRef, fieldOrUpdateData, value) {
    var moreFieldsAndValues = [];
    for (var _i = 3; _i < arguments.length; _i++) {
      moreFieldsAndValues[_i - 3] = arguments[_i];
    }
    this._verifyNotCommitted();
    var ref = validateReference(documentRef, this._firestore);
    fieldOrUpdateData = util.getModularInstance(fieldOrUpdateData);
    var parsed;
    if (typeof fieldOrUpdateData === "string" || fieldOrUpdateData instanceof FieldPath) {
      parsed = parseUpdateVarargs(this._dataReader, "WriteBatch.update", ref._key, fieldOrUpdateData, value, moreFieldsAndValues);
    } else {
      parsed = parseUpdateData(this._dataReader, "WriteBatch.update", ref._key, fieldOrUpdateData);
    }
    this._mutations.push(parsed.toMutation(ref._key, Precondition.exists(true)));
    return this;
  };
  WriteBatch2.prototype.delete = function(documentRef) {
    this._verifyNotCommitted();
    var ref = validateReference(documentRef, this._firestore);
    this._mutations = this._mutations.concat(new DeleteMutation(ref._key, Precondition.none()));
    return this;
  };
  WriteBatch2.prototype.commit = function() {
    this._verifyNotCommitted();
    this._committed = true;
    if (this._mutations.length > 0) {
      return this._commitHandler(this._mutations);
    }
    return Promise.resolve();
  };
  WriteBatch2.prototype._verifyNotCommitted = function() {
    if (this._committed) {
      throw new FirestoreError(Code.FAILED_PRECONDITION, "A write batch can no longer be used after commit() has been called.");
    }
  };
  return WriteBatch2;
}();
function validateReference(documentRef, firestore) {
  documentRef = util.getModularInstance(documentRef);
  if (documentRef.firestore !== firestore) {
    throw new FirestoreError(Code.INVALID_ARGUMENT, "Provided document reference is from a different Firestore instance.");
  } else {
    return documentRef;
  }
}
var Transaction$1 = function() {
  function Transaction$12(_firestore, _transaction) {
    this._firestore = _firestore;
    this._transaction = _transaction;
    this._dataReader = newUserDataReader(_firestore);
  }
  Transaction$12.prototype.get = function(documentRef) {
    var _this = this;
    var ref = validateReference(documentRef, this._firestore);
    var userDataWriter = new LiteUserDataWriter(this._firestore);
    return this._transaction.lookup([ref._key]).then(function(docs) {
      if (!docs || docs.length !== 1) {
        return fail();
      }
      var doc2 = docs[0];
      if (doc2.isFoundDocument()) {
        return new DocumentSnapshot$1(_this._firestore, userDataWriter, doc2.key, doc2, ref.converter);
      } else if (doc2.isNoDocument()) {
        return new DocumentSnapshot$1(_this._firestore, userDataWriter, ref._key, null, ref.converter);
      } else {
        throw fail();
      }
    });
  };
  Transaction$12.prototype.set = function(documentRef, value, options2) {
    var ref = validateReference(documentRef, this._firestore);
    var convertedValue = applyFirestoreDataConverter(ref.converter, value, options2);
    var parsed = parseSetData(this._dataReader, "Transaction.set", ref._key, convertedValue, ref.converter !== null, options2);
    this._transaction.set(ref._key, parsed);
    return this;
  };
  Transaction$12.prototype.update = function(documentRef, fieldOrUpdateData, value) {
    var moreFieldsAndValues = [];
    for (var _i = 3; _i < arguments.length; _i++) {
      moreFieldsAndValues[_i - 3] = arguments[_i];
    }
    var ref = validateReference(documentRef, this._firestore);
    fieldOrUpdateData = util.getModularInstance(fieldOrUpdateData);
    var parsed;
    if (typeof fieldOrUpdateData === "string" || fieldOrUpdateData instanceof FieldPath) {
      parsed = parseUpdateVarargs(this._dataReader, "Transaction.update", ref._key, fieldOrUpdateData, value, moreFieldsAndValues);
    } else {
      parsed = parseUpdateData(this._dataReader, "Transaction.update", ref._key, fieldOrUpdateData);
    }
    this._transaction.update(ref._key, parsed);
    return this;
  };
  Transaction$12.prototype.delete = function(documentRef) {
    var ref = validateReference(documentRef, this._firestore);
    this._transaction.delete(ref._key);
    return this;
  };
  return Transaction$12;
}();
function isPartialObserver(obj) {
  return implementsAnyMethods(obj, ["next", "error", "complete"]);
}
function implementsAnyMethods(obj, methods) {
  if (typeof obj !== "object" || obj === null) {
    return false;
  }
  var object2 = obj;
  for (var _i = 0, methods_1 = methods; _i < methods_1.length; _i++) {
    var method2 = methods_1[_i];
    if (method2 in object2 && typeof object2[method2] === "function") {
      return true;
    }
  }
  return false;
}
function getDoc(reference) {
  reference = cast(reference, DocumentReference);
  var firestore = cast(reference.firestore, Firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  return firestoreClientGetDocumentViaSnapshotListener(client2, reference._key).then(function(snapshot) {
    return convertToDocSnapshot(firestore, reference, snapshot);
  });
}
var ExpUserDataWriter = function(_super) {
  tslib.__extends(ExpUserDataWriter2, _super);
  function ExpUserDataWriter2(firestore) {
    var _this = _super.call(this) || this;
    _this.firestore = firestore;
    return _this;
  }
  ExpUserDataWriter2.prototype.convertBytes = function(bytes) {
    return new Bytes(bytes);
  };
  ExpUserDataWriter2.prototype.convertReference = function(name2) {
    var key = this.convertDocumentKey(name2, this.firestore._databaseId);
    return new DocumentReference(this.firestore, null, key);
  };
  return ExpUserDataWriter2;
}(AbstractUserDataWriter);
function getDocFromCache(reference) {
  reference = cast(reference, DocumentReference);
  var firestore = cast(reference.firestore, Firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  var userDataWriter = new ExpUserDataWriter(firestore);
  return firestoreClientGetDocumentFromLocalCache(client2, reference._key).then(function(doc2) {
    return new DocumentSnapshot(firestore, userDataWriter, reference._key, doc2, new SnapshotMetadata(doc2 !== null && doc2.hasLocalMutations, true), reference.converter);
  });
}
function getDocFromServer(reference) {
  reference = cast(reference, DocumentReference);
  var firestore = cast(reference.firestore, Firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  return firestoreClientGetDocumentViaSnapshotListener(client2, reference._key, {
    source: "server"
  }).then(function(snapshot) {
    return convertToDocSnapshot(firestore, reference, snapshot);
  });
}
function getDocs(query2) {
  query2 = cast(query2, Query);
  var firestore = cast(query2.firestore, Firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  var userDataWriter = new ExpUserDataWriter(firestore);
  validateHasExplicitOrderByForLimitToLast(query2._query);
  return firestoreClientGetDocumentsViaSnapshotListener(client2, query2._query).then(function(snapshot) {
    return new QuerySnapshot(firestore, userDataWriter, query2, snapshot);
  });
}
function getDocsFromCache(query2) {
  query2 = cast(query2, Query);
  var firestore = cast(query2.firestore, Firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  var userDataWriter = new ExpUserDataWriter(firestore);
  return firestoreClientGetDocumentsFromLocalCache(client2, query2._query).then(function(snapshot) {
    return new QuerySnapshot(firestore, userDataWriter, query2, snapshot);
  });
}
function getDocsFromServer(query2) {
  query2 = cast(query2, Query);
  var firestore = cast(query2.firestore, Firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  var userDataWriter = new ExpUserDataWriter(firestore);
  return firestoreClientGetDocumentsViaSnapshotListener(client2, query2._query, {
    source: "server"
  }).then(function(snapshot) {
    return new QuerySnapshot(firestore, userDataWriter, query2, snapshot);
  });
}
function setDoc(reference, data, options2) {
  reference = cast(reference, DocumentReference);
  var firestore = cast(reference.firestore, Firestore);
  var convertedValue = applyFirestoreDataConverter(reference.converter, data, options2);
  var dataReader = newUserDataReader(firestore);
  var parsed = parseSetData(dataReader, "setDoc", reference._key, convertedValue, reference.converter !== null, options2);
  var mutation = parsed.toMutation(reference._key, Precondition.none());
  return executeWrite(firestore, [mutation]);
}
function updateDoc(reference, fieldOrUpdateData, value) {
  var moreFieldsAndValues = [];
  for (var _i = 3; _i < arguments.length; _i++) {
    moreFieldsAndValues[_i - 3] = arguments[_i];
  }
  reference = cast(reference, DocumentReference);
  var firestore = cast(reference.firestore, Firestore);
  var dataReader = newUserDataReader(firestore);
  fieldOrUpdateData = util.getModularInstance(fieldOrUpdateData);
  var parsed;
  if (typeof fieldOrUpdateData === "string" || fieldOrUpdateData instanceof FieldPath) {
    parsed = parseUpdateVarargs(dataReader, "updateDoc", reference._key, fieldOrUpdateData, value, moreFieldsAndValues);
  } else {
    parsed = parseUpdateData(dataReader, "updateDoc", reference._key, fieldOrUpdateData);
  }
  var mutation = parsed.toMutation(reference._key, Precondition.exists(true));
  return executeWrite(firestore, [mutation]);
}
function deleteDoc(reference) {
  var firestore = cast(reference.firestore, Firestore);
  var mutations = [new DeleteMutation(reference._key, Precondition.none())];
  return executeWrite(firestore, mutations);
}
function addDoc(reference, data) {
  var firestore = cast(reference.firestore, Firestore);
  var docRef = doc(reference);
  var convertedValue = applyFirestoreDataConverter(reference.converter, data);
  var dataReader = newUserDataReader(reference.firestore);
  var parsed = parseSetData(dataReader, "addDoc", docRef._key, convertedValue, reference.converter !== null, {});
  var mutation = parsed.toMutation(docRef._key, Precondition.exists(false));
  return executeWrite(firestore, [mutation]).then(function() {
    return docRef;
  });
}
function onSnapshot(reference) {
  var args = [];
  for (var _i = 1; _i < arguments.length; _i++) {
    args[_i - 1] = arguments[_i];
  }
  var _a, _b, _c;
  reference = util.getModularInstance(reference);
  var options2 = {
    includeMetadataChanges: false
  };
  var currArg = 0;
  if (typeof args[currArg] === "object" && !isPartialObserver(args[currArg])) {
    options2 = args[currArg];
    currArg++;
  }
  var internalOptions = {
    includeMetadataChanges: options2.includeMetadataChanges
  };
  if (isPartialObserver(args[currArg])) {
    var userObserver = args[currArg];
    args[currArg] = (_a = userObserver.next) === null || _a === void 0 ? void 0 : _a.bind(userObserver);
    args[currArg + 1] = (_b = userObserver.error) === null || _b === void 0 ? void 0 : _b.bind(userObserver);
    args[currArg + 2] = (_c = userObserver.complete) === null || _c === void 0 ? void 0 : _c.bind(userObserver);
  }
  var observer;
  var firestore;
  var internalQuery;
  if (reference instanceof DocumentReference) {
    firestore = cast(reference.firestore, Firestore);
    internalQuery = newQueryForPath(reference._key.path);
    observer = {
      next: function(snapshot) {
        if (args[currArg]) {
          args[currArg](convertToDocSnapshot(firestore, reference, snapshot));
        }
      },
      error: args[currArg + 1],
      complete: args[currArg + 2]
    };
  } else {
    var query_5 = cast(reference, Query);
    firestore = cast(query_5.firestore, Firestore);
    internalQuery = query_5._query;
    var userDataWriter_1 = new ExpUserDataWriter(firestore);
    observer = {
      next: function(snapshot) {
        if (args[currArg]) {
          args[currArg](new QuerySnapshot(firestore, userDataWriter_1, query_5, snapshot));
        }
      },
      error: args[currArg + 1],
      complete: args[currArg + 2]
    };
    validateHasExplicitOrderByForLimitToLast(reference._query);
  }
  var client2 = ensureFirestoreConfigured(firestore);
  return firestoreClientListen(client2, internalQuery, internalOptions, observer);
}
function onSnapshotsInSync(firestore, arg) {
  firestore = cast(firestore, Firestore);
  var client2 = ensureFirestoreConfigured(firestore);
  var observer = isPartialObserver(arg) ? arg : {
    next: arg
  };
  return firestoreClientAddSnapshotsInSyncListener(client2, observer);
}
function executeWrite(firestore, mutations) {
  var client2 = ensureFirestoreConfigured(firestore);
  return firestoreClientWrite(client2, mutations);
}
function convertToDocSnapshot(firestore, ref, snapshot) {
  var doc2 = snapshot.docs.get(ref._key);
  var userDataWriter = new ExpUserDataWriter(firestore);
  return new DocumentSnapshot(firestore, userDataWriter, ref._key, doc2, new SnapshotMetadata(snapshot.hasPendingWrites, snapshot.fromCache), ref.converter);
}
var Transaction = function(_super) {
  tslib.__extends(Transaction2, _super);
  function Transaction2(_firestore, _transaction) {
    var _this = _super.call(this, _firestore, _transaction) || this;
    _this._firestore = _firestore;
    return _this;
  }
  Transaction2.prototype.get = function(documentRef) {
    var _this = this;
    var ref = validateReference(documentRef, this._firestore);
    var userDataWriter = new ExpUserDataWriter(this._firestore);
    return _super.prototype.get.call(this, documentRef).then(function(liteDocumentSnapshot) {
      return new DocumentSnapshot(_this._firestore, userDataWriter, ref._key, liteDocumentSnapshot._document, new SnapshotMetadata(false, false), ref.converter);
    });
  };
  return Transaction2;
}(Transaction$1);
function runTransaction(firestore, updateFunction) {
  var client2 = ensureFirestoreConfigured(firestore);
  return firestoreClientTransaction(client2, function(internalTransaction) {
    return updateFunction(new Transaction(firestore, internalTransaction));
  });
}
function deleteField() {
  return new DeleteFieldValueImpl("deleteField");
}
function serverTimestamp() {
  return new ServerTimestampFieldValueImpl("serverTimestamp");
}
function arrayUnion() {
  var elements = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    elements[_i] = arguments[_i];
  }
  return new ArrayUnionFieldValueImpl("arrayUnion", elements);
}
function arrayRemove() {
  var elements = [];
  for (var _i = 0; _i < arguments.length; _i++) {
    elements[_i] = arguments[_i];
  }
  return new ArrayRemoveFieldValueImpl("arrayRemove", elements);
}
function increment(n) {
  return new NumericIncrementFieldValueImpl("increment", n);
}
function writeBatch(firestore) {
  firestore = cast(firestore, Firestore);
  ensureFirestoreConfigured(firestore);
  return new WriteBatch(firestore, function(mutations) {
    return executeWrite(firestore, mutations);
  });
}
registerFirestore("node");
index_node_cjs.AbstractUserDataWriter = AbstractUserDataWriter;
index_node_cjs.Bytes = Bytes;
index_node_cjs.CACHE_SIZE_UNLIMITED = CACHE_SIZE_UNLIMITED;
index_node_cjs.CollectionReference = CollectionReference;
index_node_cjs.DocumentReference = DocumentReference;
index_node_cjs.DocumentSnapshot = DocumentSnapshot;
index_node_cjs.FieldPath = FieldPath;
index_node_cjs.FieldValue = FieldValue;
index_node_cjs.Firestore = Firestore;
index_node_cjs.FirestoreError = FirestoreError;
index_node_cjs.GeoPoint = GeoPoint;
index_node_cjs.LoadBundleTask = LoadBundleTask;
index_node_cjs.Query = Query;
index_node_cjs.QueryConstraint = QueryConstraint;
index_node_cjs.QueryDocumentSnapshot = QueryDocumentSnapshot;
index_node_cjs.QuerySnapshot = QuerySnapshot;
index_node_cjs.SnapshotMetadata = SnapshotMetadata;
index_node_cjs.Timestamp = Timestamp;
index_node_cjs.Transaction = Transaction;
index_node_cjs.WriteBatch = WriteBatch;
index_node_cjs._DatabaseId = DatabaseId;
index_node_cjs._DocumentKey = DocumentKey;
index_node_cjs._EmptyCredentialsProvider = EmptyCredentialsProvider;
index_node_cjs._FieldPath = FieldPath$1;
index_node_cjs._cast = cast;
index_node_cjs._debugAssert = debugAssert;
index_node_cjs._isBase64Available = isBase64Available;
index_node_cjs._logWarn = logWarn;
index_node_cjs._validateIsNotUsedTogether = validateIsNotUsedTogether;
index_node_cjs.addDoc = addDoc;
index_node_cjs.arrayRemove = arrayRemove;
index_node_cjs.arrayUnion = arrayUnion;
index_node_cjs.clearIndexedDbPersistence = clearIndexedDbPersistence;
index_node_cjs.collection = collection;
index_node_cjs.collectionGroup = collectionGroup;
index_node_cjs.connectFirestoreEmulator = connectFirestoreEmulator;
index_node_cjs.deleteDoc = deleteDoc;
index_node_cjs.deleteField = deleteField;
index_node_cjs.disableNetwork = disableNetwork;
index_node_cjs.doc = doc;
index_node_cjs.documentId = documentId;
index_node_cjs.enableIndexedDbPersistence = enableIndexedDbPersistence;
index_node_cjs.enableMultiTabIndexedDbPersistence = enableMultiTabIndexedDbPersistence;
index_node_cjs.enableNetwork = enableNetwork;
index_node_cjs.endAt = endAt;
index_node_cjs.endBefore = endBefore;
index_node_cjs.ensureFirestoreConfigured = ensureFirestoreConfigured;
index_node_cjs.executeWrite = executeWrite;
index_node_cjs.getDoc = getDoc;
index_node_cjs.getDocFromCache = getDocFromCache;
index_node_cjs.getDocFromServer = getDocFromServer;
index_node_cjs.getDocs = getDocs;
index_node_cjs.getDocsFromCache = getDocsFromCache;
index_node_cjs.getDocsFromServer = getDocsFromServer;
index_node_cjs.getFirestore = getFirestore;
index_node_cjs.increment = increment;
index_node_cjs.initializeFirestore = initializeFirestore;
index_node_cjs.limit = limit;
index_node_cjs.limitToLast = limitToLast;
index_node_cjs.loadBundle = loadBundle;
index_node_cjs.namedQuery = namedQuery;
index_node_cjs.onSnapshot = onSnapshot;
index_node_cjs.onSnapshotsInSync = onSnapshotsInSync;
index_node_cjs.orderBy = orderBy;
index_node_cjs.query = query;
index_node_cjs.queryEqual = queryEqual;
index_node_cjs.refEqual = refEqual;
index_node_cjs.runTransaction = runTransaction;
index_node_cjs.serverTimestamp = serverTimestamp;
index_node_cjs.setDoc = setDoc;
index_node_cjs.setLogLevel = setLogLevel;
index_node_cjs.snapshotEqual = snapshotEqual;
index_node_cjs.startAfter = startAfter;
index_node_cjs.startAt = startAt;
index_node_cjs.terminate = terminate;
index_node_cjs.updateDoc = updateDoc;
index_node_cjs.waitForPendingWrites = waitForPendingWrites;
index_node_cjs.where = where;
index_node_cjs.writeBatch = writeBatch;
var __layout_svelte_svelte_type_style_lang = "main.svelte-la7v5q{height:100vh;width:100vw;display:flex;flex-direction:column;overflow:hidden;background:#121212}.content.svelte-la7v5q{flex:1}";
var css$8 = {
  code: "main.svelte-la7v5q{height:100vh;width:100vw;display:flex;flex-direction:column;overflow:hidden;background:#121212}.content.svelte-la7v5q{flex:1}",
  map: `{"version":3,"file":"__layout.svelte","sources":["__layout.svelte"],"sourcesContent":["<script>\\r\\n\\timport { goto } from '$app/navigation';\\r\\n\\timport { user } from '../../../services/stores';\\r\\n\\timport { onMount } from 'svelte';\\r\\n\\timport { getFirebaseApp } from '../../../services/firebase';\\r\\n\\timport BottomNav from '../../components/bottomNav.svelte';\\r\\n\\timport Navbar from '../../components/navbar.svelte';\\r\\n\\timport Loader from '../../components/commons/loader.svelte';\\r\\n\\timport { doc, getFirestore, onSnapshot } from 'firebase/firestore';\\r\\n\\r\\n\\tonMount(() => {\\r\\n\\t\\tconst userID = localStorage.getItem('userID');\\r\\n\\t\\tonSnapshot(doc(getFirestore(getFirebaseApp()), 'Users', userID), (value) => {\\r\\n\\t\\t\\tuser.update((_) => ({\\r\\n\\t\\t\\t\\tid: value.id,\\r\\n\\t\\t\\t\\temail: value.data().email,\\r\\n\\t\\t\\t\\tpasswords: value.data().passwords\\r\\n\\t\\t\\t}));\\r\\n\\t\\t});\\r\\n\\t});\\r\\n<\/script>\\r\\n\\r\\n<svelte:head>\\r\\n\\t<link\\r\\n\\t\\thref=\\"https://fonts.googleapis.com/css?family=Material+Icons|Material+Icons+Outlined|Material+Icons+Two+Tone|Material+Icons+Round|Material+Icons+Sharp\\"\\r\\n\\t\\trel=\\"stylesheet\\"\\r\\n\\t/>\\r\\n</svelte:head>\\r\\n{#if $user?.id}\\r\\n\\t<main>\\r\\n\\t\\t<Navbar />\\r\\n\\t\\t<div class=\\"content\\">\\r\\n\\t\\t\\t<slot />\\r\\n\\t\\t</div>\\r\\n\\t\\t<BottomNav />\\r\\n\\t</main>\\r\\n{:else}\\r\\n\\t<Loader text=\\"Loading your passwords!\\" />\\r\\n{/if}\\r\\n\\r\\n<style>\\r\\n\\tmain {\\r\\n\\t\\theight: 100vh;\\r\\n\\t\\twidth: 100vw;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: column;\\r\\n\\t\\toverflow: hidden;\\r\\n\\t\\tbackground: #121212;\\r\\n\\t}\\r\\n\\t.content {\\r\\n\\t\\tflex: 1;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAyCC,IAAI,cAAC,CAAC,AACL,MAAM,CAAE,KAAK,CACb,KAAK,CAAE,KAAK,CACZ,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,QAAQ,CAAE,MAAM,CAChB,UAAU,CAAE,OAAO,AACpB,CAAC,AACD,QAAQ,cAAC,CAAC,AACT,IAAI,CAAE,CAAC,AACR,CAAC"}`
};
var _layout = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $user, $$unsubscribe_user;
  $$unsubscribe_user = subscribe(user, (value) => $user = value);
  $$result.css.add(css$8);
  $$unsubscribe_user();
  return `${$$result.head += `<link href="${"https://fonts.googleapis.com/css?family=Material+Icons|Material+Icons+Outlined|Material+Icons+Two+Tone|Material+Icons+Round|Material+Icons+Sharp"}" rel="${"stylesheet"}" data-svelte="svelte-uokepm">`, ""}
${($user == null ? void 0 : $user.id) ? `<main class="${"svelte-la7v5q"}">${validate_component(Navbar, "Navbar").$$render($$result, {}, {}, {})}
		<div class="${"content svelte-la7v5q"}">${slots.default ? slots.default({}) : ``}</div>
		${validate_component(BottomNav, "BottomNav").$$render($$result, {}, {}, {})}</main>` : `${validate_component(Loader, "Loader").$$render($$result, { text: "Loading your passwords!" }, {}, {})}`}`;
});
var __layout = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": _layout
});
var passwordCard_svelte_svelte_type_style_lang = ".passwordCard.svelte-1sdwl3m{background:#1f1b24;border-radius:11px;padding:21px;margin-bottom:7px;border:1px solid #49375e;display:flex;align-items:center;position:relative;cursor:copy;transition:border-color 444ms}.left.svelte-1sdwl3m{margin-left:4px;flex:1}.title.svelte-1sdwl3m{color:#e3e3e3;margin:0;padding:0;font-size:16px;font-weight:600;font-family:'Poppins', sans-serif;letter-spacing:1px;user-select:none}.helperText.svelte-1sdwl3m{color:grey;margin:0;margin-top:4px;padding:0;font-size:13px;font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;letter-spacing:0.4px}.icon.svelte-1sdwl3m{color:white;font-size:18px}.done.svelte-1sdwl3m{position:absolute;width:100%;height:100%;left:0;top:0;display:flex;flex-direction:column;align-items:center;justify-content:center;background:rgba(0, 11, 0, 0.4);backdrop-filter:blur(7px);border-radius:11px}.done-icon.svelte-1sdwl3m{color:#4bb543;font-size:30px;margin:0}.copiedText.svelte-1sdwl3m{font-size:16px;color:#4bb543;padding:0;margin:0;margin-top:4px;font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif}.copied.svelte-1sdwl3m{border-color:#4bb543}";
var css$7 = {
  code: ".passwordCard.svelte-1sdwl3m{background:#1f1b24;border-radius:11px;padding:21px;margin-bottom:7px;border:1px solid #49375e;display:flex;align-items:center;position:relative;cursor:copy;transition:border-color 444ms}.left.svelte-1sdwl3m{margin-left:4px;flex:1}.title.svelte-1sdwl3m{color:#e3e3e3;margin:0;padding:0;font-size:16px;font-weight:600;font-family:'Poppins', sans-serif;letter-spacing:1px;user-select:none}.helperText.svelte-1sdwl3m{color:grey;margin:0;margin-top:4px;padding:0;font-size:13px;font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;letter-spacing:0.4px}.icon.svelte-1sdwl3m{color:white;font-size:18px}.done.svelte-1sdwl3m{position:absolute;width:100%;height:100%;left:0;top:0;display:flex;flex-direction:column;align-items:center;justify-content:center;background:rgba(0, 11, 0, 0.4);backdrop-filter:blur(7px);border-radius:11px}.done-icon.svelte-1sdwl3m{color:#4bb543;font-size:30px;margin:0}.copiedText.svelte-1sdwl3m{font-size:16px;color:#4bb543;padding:0;margin:0;margin-top:4px;font-family:'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif}.copied.svelte-1sdwl3m{border-color:#4bb543}",
  map: `{"version":3,"file":"passwordCard.svelte","sources":["passwordCard.svelte"],"sourcesContent":["<script>\\r\\n\\timport { blur, scale, fly } from 'svelte/transition';\\r\\n\\r\\n\\texport let title;\\r\\n\\texport let password;\\r\\n\\tlet copied = false;\\r\\n\\r\\n\\tconst copyPassword = () => {\\r\\n\\t\\tif (!copied) {\\r\\n\\t\\t\\tfetch('/api/password/depass', {\\r\\n\\t\\t\\t\\tbody: JSON.stringify({\\r\\n\\t\\t\\t\\t\\tencryptedPassword: password\\r\\n\\t\\t\\t\\t}),\\r\\n\\t\\t\\t\\theaders: {\\r\\n\\t\\t\\t\\t\\tAccept: 'application/json',\\r\\n\\t\\t\\t\\t\\t'Content-Type': 'application/json'\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\tmethod: 'POST'\\r\\n\\t\\t\\t})\\r\\n\\t\\t\\t\\t.then((response) => response.json())\\r\\n\\t\\t\\t\\t.then((value) => {\\r\\n\\t\\t\\t\\t\\tnavigator.clipboard.writeText(value.decryptedPassword);\\r\\n\\t\\t\\t\\t\\tcopied = true;\\r\\n\\t\\t\\t\\t\\tsetTimeout(() => (copied = false), 1421);\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\t};\\r\\n<\/script>\\r\\n\\r\\n<div class=\\"passwordCard\\" on:click|preventDefault={copyPassword} class:copied>\\r\\n\\t<div class=\\"left\\">\\r\\n\\t\\t<p class=\\"title\\">{title}</p>\\r\\n\\t\\t<p class=\\"helperText\\">Click to copy</p>\\r\\n\\t</div>\\r\\n\\t<span class=\\"material-icons-round icon\\"> content_copy </span>\\r\\n\\t{#if copied}\\r\\n\\t\\t<div class=\\"done\\" transition:blur={{ duration: 500 }}>\\r\\n\\t\\t\\t<span class=\\"material-icons-outlined done-icon\\" in:scale={{ delay: 444 }} out:scale>\\r\\n\\t\\t\\t\\ttask_alt\\r\\n\\t\\t\\t</span>\\r\\n\\t\\t\\t<p\\r\\n\\t\\t\\t\\tclass=\\"copiedText\\"\\r\\n\\t\\t\\t\\tin:fly={{ y: 21, delay: 444, opacity: 0 }}\\r\\n\\t\\t\\t\\tout:fly={{ y: 21, opacity: 0 }}\\r\\n\\t\\t\\t>\\r\\n\\t\\t\\t\\tCopied!\\r\\n\\t\\t\\t</p>\\r\\n\\t\\t</div>\\r\\n\\t{/if}\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n\\t.passwordCard {\\r\\n\\t\\tbackground: #1f1b24;\\r\\n\\t\\tborder-radius: 11px;\\r\\n\\t\\tpadding: 21px;\\r\\n\\t\\tmargin-bottom: 7px;\\r\\n\\t\\tborder: 1px solid #49375e;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tposition: relative;\\r\\n\\t\\tcursor: copy;\\r\\n\\t\\ttransition: border-color 444ms;\\r\\n\\t}\\r\\n\\t.left {\\r\\n\\t\\tmargin-left: 4px;\\r\\n\\t\\tflex: 1;\\r\\n\\t}\\r\\n\\t.title {\\r\\n\\t\\tcolor: #e3e3e3;\\r\\n\\t\\tmargin: 0;\\r\\n\\t\\tpadding: 0;\\r\\n\\t\\tfont-size: 16px;\\r\\n\\t\\tfont-weight: 600;\\r\\n\\t\\tfont-family: 'Poppins', sans-serif;\\r\\n\\t\\tletter-spacing: 1px;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n\\t.helperText {\\r\\n\\t\\tcolor: grey;\\r\\n\\t\\tmargin: 0;\\r\\n\\t\\tmargin-top: 4px;\\r\\n\\t\\tpadding: 0;\\r\\n\\t\\tfont-size: 13px;\\r\\n\\t\\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\\r\\n\\t\\tletter-spacing: 0.4px;\\r\\n\\t}\\r\\n\\t.icon {\\r\\n\\t\\tcolor: white;\\r\\n\\t\\tfont-size: 18px;\\r\\n\\t}\\r\\n\\t.done {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 100%;\\r\\n\\t\\tleft: 0;\\r\\n\\t\\ttop: 0;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\tflex-direction: column;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tjustify-content: center;\\r\\n\\t\\tbackground: rgba(0, 11, 0, 0.4);\\r\\n\\t\\tbackdrop-filter: blur(7px);\\r\\n\\t\\tborder-radius: 11px;\\r\\n\\t}\\r\\n\\t.done-icon {\\r\\n\\t\\tcolor: #4bb543;\\r\\n\\t\\tfont-size: 30px;\\r\\n\\t\\tmargin: 0;\\r\\n\\t}\\r\\n\\t.copiedText {\\r\\n\\t\\tfont-size: 16px;\\r\\n\\t\\tcolor: #4bb543;\\r\\n\\t\\tpadding: 0;\\r\\n\\t\\tmargin: 0;\\r\\n\\t\\tmargin-top: 4px;\\r\\n\\t\\tfont-family: 'Gill Sans', 'Gill Sans MT', Calibri, 'Trebuchet MS', sans-serif;\\r\\n\\t}\\r\\n\\t.copied {\\r\\n\\t\\tborder-color: #4bb543;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAoDC,aAAa,eAAC,CAAC,AACd,UAAU,CAAE,OAAO,CACnB,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,YAAY,CAAC,KAAK,AAC/B,CAAC,AACD,KAAK,eAAC,CAAC,AACN,WAAW,CAAE,GAAG,CAChB,IAAI,CAAE,CAAC,AACR,CAAC,AACD,MAAM,eAAC,CAAC,AACP,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,WAAW,eAAC,CAAC,AACZ,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,GAAG,CACf,OAAO,CAAE,CAAC,CACV,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,WAAW,CAAC,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,UAAU,CAC7E,cAAc,CAAE,KAAK,AACtB,CAAC,AACD,KAAK,eAAC,CAAC,AACN,KAAK,CAAE,KAAK,CACZ,SAAS,CAAE,IAAI,AAChB,CAAC,AACD,KAAK,eAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,OAAO,CAAE,IAAI,CACb,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,UAAU,CAAE,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAC/B,eAAe,CAAE,KAAK,GAAG,CAAC,CAC1B,aAAa,CAAE,IAAI,AACpB,CAAC,AACD,UAAU,eAAC,CAAC,AACX,KAAK,CAAE,OAAO,CACd,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,CAAC,AACV,CAAC,AACD,WAAW,eAAC,CAAC,AACZ,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OAAO,CACd,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,CACT,UAAU,CAAE,GAAG,CACf,WAAW,CAAE,WAAW,CAAC,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,CAAC,cAAc,CAAC,CAAC,UAAU,AAC9E,CAAC,AACD,OAAO,eAAC,CAAC,AACR,YAAY,CAAE,OAAO,AACtB,CAAC"}`
};
var PasswordCard = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { title } = $$props;
  let { password } = $$props;
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  if ($$props.password === void 0 && $$bindings.password && password !== void 0)
    $$bindings.password(password);
  $$result.css.add(css$7);
  return `<div class="${["passwordCard svelte-1sdwl3m", ""].join(" ").trim()}"><div class="${"left svelte-1sdwl3m"}"><p class="${"title svelte-1sdwl3m"}">${escape2(title)}</p>
		<p class="${"helperText svelte-1sdwl3m"}">Click to copy</p></div>
	<span class="${"material-icons-round icon svelte-1sdwl3m"}">content_copy </span>
	${``}
</div>`;
});
var formField_svelte_svelte_type_style_lang = ".form-field.svelte-1kumg2b{position:relative;display:flex;align-items:center;height:40px;padding-left:7px;padding-right:11px;border:0.2px solid #5f5f5f;border-radius:0.5rem;transition:all 444ms}.formFieldFocused.svelte-1kumg2b{border-color:#49375e}label.svelte-1kumg2b{position:absolute;transition:all 444ms;color:grey;background:#1f1a24;border-radius:21px;padding-left:7px;padding-right:7px;font-family:'Poppins', sans-serif;top:9px;font-size:14px;letter-spacing:0.4px;cursor:text;user-select:none}.labelFocused.svelte-1kumg2b{top:-9px;font-size:12px;cursor:auto}input.svelte-1kumg2b{width:100%;height:38px;font-size:14px;margin-right:7px;outline:none;border:none;padding-left:7px;padding-right:7px;background:transparent;color:white;font-family:'Poppins', sans-serif;letter-spacing:0.4px;caret-color:lightgrey}.icon.svelte-1kumg2b{font-size:18px;color:white;user-select:none;cursor:pointer}";
var css$6 = {
  code: ".form-field.svelte-1kumg2b{position:relative;display:flex;align-items:center;height:40px;padding-left:7px;padding-right:11px;border:0.2px solid #5f5f5f;border-radius:0.5rem;transition:all 444ms}.formFieldFocused.svelte-1kumg2b{border-color:#49375e}label.svelte-1kumg2b{position:absolute;transition:all 444ms;color:grey;background:#1f1a24;border-radius:21px;padding-left:7px;padding-right:7px;font-family:'Poppins', sans-serif;top:9px;font-size:14px;letter-spacing:0.4px;cursor:text;user-select:none}.labelFocused.svelte-1kumg2b{top:-9px;font-size:12px;cursor:auto}input.svelte-1kumg2b{width:100%;height:38px;font-size:14px;margin-right:7px;outline:none;border:none;padding-left:7px;padding-right:7px;background:transparent;color:white;font-family:'Poppins', sans-serif;letter-spacing:0.4px;caret-color:lightgrey}.icon.svelte-1kumg2b{font-size:18px;color:white;user-select:none;cursor:pointer}",
  map: `{"version":3,"file":"formField.svelte","sources":["formField.svelte"],"sourcesContent":["<script>\\r\\n\\texport let value;\\r\\n\\texport let type;\\r\\n\\texport let id;\\r\\n\\texport let placeholder;\\r\\n\\texport let required = false;\\r\\n\\tlet isFocused = false;\\r\\n\\tlet runtimeType = type;\\r\\n\\r\\n\\tconst toggleFocus = () => (isFocused = !isFocused);\\r\\n\\tconst toggleVisibility = () => (runtimeType = runtimeType === 'password' ? 'text' : 'password');\\r\\n<\/script>\\r\\n\\r\\n<div class=\\"form-field\\" class:formFieldFocused={isFocused}>\\r\\n\\t<label for={id} class:labelFocused={isFocused || value.length}>{placeholder}</label>\\r\\n\\t<input\\r\\n\\t\\ttype={type === 'password' ? runtimeType : type}\\r\\n\\t\\t{id}\\r\\n\\t\\t{value}\\r\\n\\t\\t{required}\\r\\n\\t\\ton:focus={toggleFocus}\\r\\n\\t\\ton:blur={toggleFocus}\\r\\n\\t\\ton:change\\r\\n\\t/>\\r\\n\\t{#if $$slots.icon}\\r\\n\\t\\t<slot name=\\"icon\\" />\\r\\n\\t{:else if type === 'password'}\\r\\n\\t\\t{#if runtimeType === 'password'}\\r\\n\\t\\t\\t<span class=\\"material-icons-round icon\\" on:click={toggleVisibility}> visibility </span>\\r\\n\\t\\t{:else}\\r\\n\\t\\t\\t<span class=\\"material-icons-round icon\\" on:click={toggleVisibility}> visibility_off </span>\\r\\n\\t\\t{/if}\\r\\n\\t{:else}\\r\\n\\t\\t<div />\\r\\n\\t{/if}\\r\\n</div>\\r\\n\\r\\n<style>\\r\\n\\t.form-field {\\r\\n\\t\\tposition: relative;\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\theight: 40px;\\r\\n\\t\\tpadding-left: 7px;\\r\\n\\t\\tpadding-right: 11px;\\r\\n\\t\\tborder: 0.2px solid #5f5f5f;\\r\\n\\t\\tborder-radius: 0.5rem;\\r\\n\\t\\ttransition: all 444ms;\\r\\n\\t}\\r\\n\\t.formFieldFocused {\\r\\n\\t\\tborder-color: #49375e;\\r\\n\\t}\\r\\n\\tlabel {\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttransition: all 444ms;\\r\\n\\t\\tcolor: grey;\\r\\n\\t\\tbackground: #1f1a24;\\r\\n\\t\\tborder-radius: 21px;\\r\\n\\t\\tpadding-left: 7px;\\r\\n\\t\\tpadding-right: 7px;\\r\\n\\t\\tfont-family: 'Poppins', sans-serif;\\r\\n\\t\\ttop: 9px;\\r\\n\\t\\tfont-size: 14px;\\r\\n\\t\\tletter-spacing: 0.4px;\\r\\n\\t\\tcursor: text;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n\\t.labelFocused {\\r\\n\\t\\ttop: -9px;\\r\\n\\t\\tfont-size: 12px;\\r\\n\\t\\tcursor: auto;\\r\\n\\t}\\r\\n\\tinput {\\r\\n\\t\\twidth: 100%;\\r\\n\\t\\theight: 38px;\\r\\n\\t\\tfont-size: 14px;\\r\\n\\t\\tmargin-right: 7px;\\r\\n\\t\\toutline: none;\\r\\n\\t\\tborder: none;\\r\\n\\t\\tpadding-left: 7px;\\r\\n\\t\\tpadding-right: 7px;\\r\\n\\t\\tbackground: transparent;\\r\\n\\t\\tcolor: white;\\r\\n\\t\\tfont-family: 'Poppins', sans-serif;\\r\\n\\t\\tletter-spacing: 0.4px;\\r\\n\\t\\tcaret-color: lightgrey;\\r\\n\\t}\\r\\n\\t.icon {\\r\\n\\t\\tfont-size: 18px;\\r\\n\\t\\tcolor: white;\\r\\n\\t\\tuser-select: none;\\r\\n\\t\\tcursor: pointer;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAsCC,WAAW,eAAC,CAAC,AACZ,QAAQ,CAAE,QAAQ,CAClB,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,IAAI,CACnB,MAAM,CAAE,KAAK,CAAC,KAAK,CAAC,OAAO,CAC3B,aAAa,CAAE,MAAM,CACrB,UAAU,CAAE,GAAG,CAAC,KAAK,AACtB,CAAC,AACD,iBAAiB,eAAC,CAAC,AAClB,YAAY,CAAE,OAAO,AACtB,CAAC,AACD,KAAK,eAAC,CAAC,AACN,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,GAAG,CAAC,KAAK,CACrB,KAAK,CAAE,IAAI,CACX,UAAU,CAAE,OAAO,CACnB,aAAa,CAAE,IAAI,CACnB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,GAAG,CAAE,GAAG,CACR,SAAS,CAAE,IAAI,CACf,cAAc,CAAE,KAAK,CACrB,MAAM,CAAE,IAAI,CACZ,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,aAAa,eAAC,CAAC,AACd,GAAG,CAAE,IAAI,CACT,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,IAAI,AACb,CAAC,AACD,KAAK,eAAC,CAAC,AACN,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,SAAS,CAAE,IAAI,CACf,YAAY,CAAE,GAAG,CACjB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,UAAU,CAAE,WAAW,CACvB,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,cAAc,CAAE,KAAK,CACrB,WAAW,CAAE,SAAS,AACvB,CAAC,AACD,KAAK,eAAC,CAAC,AACN,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,OAAO,AAChB,CAAC"}`
};
var FormField = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$slots = compute_slots(slots);
  let { value } = $$props;
  let { type: type2 } = $$props;
  let { id } = $$props;
  let { placeholder } = $$props;
  let { required = false } = $$props;
  let runtimeType = type2;
  if ($$props.value === void 0 && $$bindings.value && value !== void 0)
    $$bindings.value(value);
  if ($$props.type === void 0 && $$bindings.type && type2 !== void 0)
    $$bindings.type(type2);
  if ($$props.id === void 0 && $$bindings.id && id !== void 0)
    $$bindings.id(id);
  if ($$props.placeholder === void 0 && $$bindings.placeholder && placeholder !== void 0)
    $$bindings.placeholder(placeholder);
  if ($$props.required === void 0 && $$bindings.required && required !== void 0)
    $$bindings.required(required);
  $$result.css.add(css$6);
  return `<div class="${["form-field svelte-1kumg2b", ""].join(" ").trim()}"><label${add_attribute("for", id, 0)} class="${["svelte-1kumg2b", value.length ? "labelFocused" : ""].join(" ").trim()}">${escape2(placeholder)}</label>
	<input${add_attribute("type", type2 === "password" ? runtimeType : type2, 0)}${add_attribute("id", id, 0)}${add_attribute("value", value, 0)} ${required ? "required" : ""} class="${"svelte-1kumg2b"}">
	${$$slots.icon ? `${slots.icon ? slots.icon({}) : ``}` : `${type2 === "password" ? `${runtimeType === "password" ? `<span class="${"material-icons-round icon svelte-1kumg2b"}">visibility </span>` : `<span class="${"material-icons-round icon svelte-1kumg2b"}">visibility_off </span>`}` : `<div></div>`}`}
</div>`;
});
var submitButton_svelte_svelte_type_style_lang = ".submitButton.svelte-djaf5v.svelte-djaf5v{height:40px;outline:none;border:2px solid #bd8afc;border-radius:21px;background:#bd8afc;position:relative;cursor:pointer;transition:all 444ms;width:40px;overflow:hidden;border:1px solid #ac79eb}.icon.svelte-djaf5v.svelte-djaf5v{font-size:18px;position:absolute;top:calc(50% - 9px);left:10px;transition:all 444ms;z-index:0;user-select:none;background:#bd8afc}.buttonText.svelte-djaf5v.svelte-djaf5v{font-size:14px;transition:all 444ms;padding-left:7px;padding-right:7px;position:absolute;top:calc(50% - 10px);left:100%;opacity:0;background:#bd8afc;padding-left:4px;padding-right:4px;z-index:1;font-family:'Poppins', sans-serif;user-select:none}.submitButton.svelte-djaf5v.svelte-djaf5v:hover{width:111px}.submitButton.svelte-djaf5v:hover span.buttonText.svelte-djaf5v{left:10px;opacity:1}.submitButton.svelte-djaf5v:hover .icon.svelte-djaf5v{left:calc(100% - 30px)}@media only screen and (max-width: 1200px){.submitButton.svelte-djaf5v.svelte-djaf5v{width:111px}.buttonText.svelte-djaf5v.svelte-djaf5v{left:10px;opacity:1}.icon.svelte-djaf5v.svelte-djaf5v{left:calc(100% - 30px)}}";
var css$5 = {
  code: ".submitButton.svelte-djaf5v.svelte-djaf5v{height:40px;outline:none;border:2px solid #bd8afc;border-radius:21px;background:#bd8afc;position:relative;cursor:pointer;transition:all 444ms;width:40px;overflow:hidden;border:1px solid #ac79eb}.icon.svelte-djaf5v.svelte-djaf5v{font-size:18px;position:absolute;top:calc(50% - 9px);left:10px;transition:all 444ms;z-index:0;user-select:none;background:#bd8afc}.buttonText.svelte-djaf5v.svelte-djaf5v{font-size:14px;transition:all 444ms;padding-left:7px;padding-right:7px;position:absolute;top:calc(50% - 10px);left:100%;opacity:0;background:#bd8afc;padding-left:4px;padding-right:4px;z-index:1;font-family:'Poppins', sans-serif;user-select:none}.submitButton.svelte-djaf5v.svelte-djaf5v:hover{width:111px}.submitButton.svelte-djaf5v:hover span.buttonText.svelte-djaf5v{left:10px;opacity:1}.submitButton.svelte-djaf5v:hover .icon.svelte-djaf5v{left:calc(100% - 30px)}@media only screen and (max-width: 1200px){.submitButton.svelte-djaf5v.svelte-djaf5v{width:111px}.buttonText.svelte-djaf5v.svelte-djaf5v{left:10px;opacity:1}.icon.svelte-djaf5v.svelte-djaf5v{left:calc(100% - 30px)}}",
  map: `{"version":3,"file":"submitButton.svelte","sources":["submitButton.svelte"],"sourcesContent":["<script>\\r\\n\\texport let title;\\r\\n\\tlet isHovering = false;\\r\\n\\r\\n\\tconst toggleHover = () => (isHovering = !isHovering);\\r\\n<\/script>\\r\\n\\r\\n<button class=\\"submitButton\\" type=\\"submit\\" on:mouseenter={toggleHover} on:mouseleave={toggleHover}>\\r\\n\\t<span class=\\"material-icons-outlined icon\\"> {isHovering ? 'east' : 'chevron_right'} </span>\\r\\n\\t<span class=\\"buttonText\\">{title}</span>\\r\\n</button>\\r\\n\\r\\n<style>\\r\\n\\t.submitButton {\\r\\n\\t\\theight: 40px;\\r\\n\\t\\toutline: none;\\r\\n\\t\\tborder: 2px solid #bd8afc;\\r\\n\\t\\tborder-radius: 21px;\\r\\n\\t\\tbackground: #bd8afc;\\r\\n\\t\\tposition: relative;\\r\\n\\t\\tcursor: pointer;\\r\\n\\t\\ttransition: all 444ms;\\r\\n\\t\\twidth: 40px;\\r\\n\\t\\toverflow: hidden;\\r\\n\\t\\tborder: 1px solid #ac79eb;\\r\\n\\t}\\r\\n\\t.icon {\\r\\n\\t\\tfont-size: 18px;\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttop: calc(50% - 9px);\\r\\n\\t\\tleft: 10px;\\r\\n\\t\\ttransition: all 444ms;\\r\\n\\t\\tz-index: 0;\\r\\n\\t\\tuser-select: none;\\r\\n\\t\\tbackground: #bd8afc;\\r\\n\\t}\\r\\n\\t.buttonText {\\r\\n\\t\\tfont-size: 14px;\\r\\n\\t\\ttransition: all 444ms;\\r\\n\\t\\tpadding-left: 7px;\\r\\n\\t\\tpadding-right: 7px;\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttop: calc(50% - 10px);\\r\\n\\t\\tleft: 100%;\\r\\n\\t\\topacity: 0;\\r\\n\\t\\tbackground: #bd8afc;\\r\\n\\t\\tpadding-left: 4px;\\r\\n\\t\\tpadding-right: 4px;\\r\\n\\t\\tz-index: 1;\\r\\n\\t\\tfont-family: 'Poppins', sans-serif;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n\\t.submitButton:hover {\\r\\n\\t\\twidth: 111px;\\r\\n\\t}\\r\\n\\t.submitButton:hover span.buttonText {\\r\\n\\t\\tleft: 10px;\\r\\n\\t\\topacity: 1;\\r\\n\\t}\\r\\n\\t.submitButton:hover .icon {\\r\\n\\t\\tleft: calc(100% - 30px);\\r\\n\\t}\\r\\n\\t@media only screen and (max-width: 1200px) {\\r\\n\\t\\t.submitButton {\\r\\n\\t\\t\\twidth: 111px;\\r\\n\\t\\t}\\r\\n\\t\\t.buttonText {\\r\\n\\t\\t\\tleft: 10px;\\r\\n\\t\\t\\topacity: 1;\\r\\n\\t\\t}\\r\\n\\t\\t.icon {\\r\\n\\t\\t\\tleft: calc(100% - 30px);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAaC,aAAa,4BAAC,CAAC,AACd,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,OAAO,CACnB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,GAAG,CAAC,KAAK,CACrB,KAAK,CAAE,IAAI,CACX,QAAQ,CAAE,MAAM,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC1B,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CACpB,IAAI,CAAE,IAAI,CACV,UAAU,CAAE,GAAG,CAAC,KAAK,CACrB,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,OAAO,AACpB,CAAC,AACD,WAAW,4BAAC,CAAC,AACZ,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,GAAG,CAAC,KAAK,CACrB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CACrB,IAAI,CAAE,IAAI,CACV,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,CACnB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,yCAAa,MAAM,AAAC,CAAC,AACpB,KAAK,CAAE,KAAK,AACb,CAAC,AACD,2BAAa,MAAM,CAAC,IAAI,WAAW,cAAC,CAAC,AACpC,IAAI,CAAE,IAAI,CACV,OAAO,CAAE,CAAC,AACX,CAAC,AACD,2BAAa,MAAM,CAAC,KAAK,cAAC,CAAC,AAC1B,IAAI,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,AACxB,CAAC,AACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,MAAM,CAAC,AAAC,CAAC,AAC3C,aAAa,4BAAC,CAAC,AACd,KAAK,CAAE,KAAK,AACb,CAAC,AACD,WAAW,4BAAC,CAAC,AACZ,IAAI,CAAE,IAAI,CACV,OAAO,CAAE,CAAC,AACX,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,IAAI,CAAE,KAAK,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,AACxB,CAAC,AACF,CAAC"}`
};
var SubmitButton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let { title } = $$props;
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  $$result.css.add(css$5);
  return `<button class="${"submitButton svelte-djaf5v"}" type="${"submit"}"><span class="${"material-icons-outlined icon svelte-djaf5v"}">${escape2("chevron_right")}</span>
	<span class="${"buttonText svelte-djaf5v"}">${escape2(title)}</span>
</button>`;
});
var activityIndicator_svelte_svelte_type_style_lang = ".outer.svelte-1u6e4wf{display:flex;justify-content:center;align-items:center;width:fit-content;margin-left:4px}.inner.svelte-1u6e4wf{height:11px;width:11px;border-radius:50%;animation:svelte-1u6e4wf-activityInicatorAnimation 4s infinite;margin-right:4px}.inner1.svelte-1u6e4wf{animation-delay:0.5s}.inner2.svelte-1u6e4wf{animation-delay:1s}.inner3.svelte-1u6e4wf{animation-delay:1.5s}.inner4.svelte-1u6e4wf{animation-delay:2s}@keyframes svelte-1u6e4wf-activityInicatorAnimation{0%,100%{background-color:#03dac5;transform:scale(1)}50%{background:transparent;transform:scale(0.7)}}";
var inputForm_svelte_svelte_type_style_lang = ".inputForm.svelte-1ok1592{border-radius:11px;padding:21px;border:1px solid #49375e;background:#1f1b24;transition:all 444ms ease-in-out;position:relative;max-height:25px;overflow:hidden}.inputFormExpanded.svelte-1ok1592{max-height:251px}.titleSection.svelte-1ok1592{display:flex;align-items:center;justify-content:space-between;margin-bottom:24px;cursor:pointer}.title.svelte-1ok1592{color:#e3e3e3;margin:0;padding:0;margin-left:4px;font-size:16px;font-weight:600;font-family:'Poppins', sans-serif;letter-spacing:1px;user-select:none}.title-icons.svelte-1ok1592{color:white;user-select:none;transition:all 444ms ease-in-out}.gap.svelte-1ok1592{height:11px}.icon.svelte-1ok1592{font-size:18px;color:white;user-select:none}";
var css$4 = {
  code: ".inputForm.svelte-1ok1592{border-radius:11px;padding:21px;border:1px solid #49375e;background:#1f1b24;transition:all 444ms ease-in-out;position:relative;max-height:25px;overflow:hidden}.inputFormExpanded.svelte-1ok1592{max-height:251px}.titleSection.svelte-1ok1592{display:flex;align-items:center;justify-content:space-between;margin-bottom:24px;cursor:pointer}.title.svelte-1ok1592{color:#e3e3e3;margin:0;padding:0;margin-left:4px;font-size:16px;font-weight:600;font-family:'Poppins', sans-serif;letter-spacing:1px;user-select:none}.title-icons.svelte-1ok1592{color:white;user-select:none;transition:all 444ms ease-in-out}.gap.svelte-1ok1592{height:11px}.icon.svelte-1ok1592{font-size:18px;color:white;user-select:none}",
  map: `{"version":3,"file":"inputForm.svelte","sources":["inputForm.svelte"],"sourcesContent":["<script>\\r\\n\\timport FormField from './formField.svelte';\\r\\n\\timport SubmitButton from './submitButton.svelte';\\r\\n\\timport { fade } from 'svelte/transition';\\r\\n\\timport Snackbar from './commons/snackbar.svelte';\\r\\n\\timport { arrayUnion, doc, getFirestore, updateDoc } from 'firebase/firestore';\\r\\n\\timport { getFirebaseApp } from '../../services/firebase';\\r\\n\\timport { user } from '../../services/stores';\\r\\n\\timport ActivityIndicator from './commons/activityIndicator.svelte';\\r\\n\\r\\n\\tlet isInputFormExpanded = false;\\r\\n\\r\\n\\tlet title = '';\\r\\n\\tlet password = '';\\r\\n\\tlet titleIcon;\\r\\n\\tlet loading = false;\\r\\n\\tlet showTitleError = false;\\r\\n\\tlet showPasswordError = false;\\r\\n\\tlet showPasswordAddedSnackbar = false;\\r\\n\\r\\n\\tconst hideTitleErrorSnackbar = () => (showTitleError = false);\\r\\n\\tconst hidePasswordErrorSnackbar = () => (showPasswordError = false);\\r\\n\\tconst hidePasswordAddedSnackbar = () => (showPasswordAddedSnackbar = false);\\r\\n\\r\\n\\tconst toggleIsInputFormExpanded = () => {\\r\\n\\t\\tisInputFormExpanded = !isInputFormExpanded;\\r\\n\\t\\tif (isInputFormExpanded) {\\r\\n\\t\\t\\ttitleIcon.style.transform = 'rotate(360deg)';\\r\\n\\t\\t} else {\\r\\n\\t\\t\\ttitleIcon.style.transform = 'rotate(0deg)';\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\r\\n\\tconst addPassword = () => {\\r\\n\\t\\tif (title.length < 2) {\\r\\n\\t\\t\\tshowTitleError = true;\\r\\n\\t\\t} else if (password.length < 8) {\\r\\n\\t\\t\\tshowPasswordError = true;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tloading = true;\\r\\n\\t\\t\\tfetch('/api/password/encpass', {\\r\\n\\t\\t\\t\\tbody: JSON.stringify({\\r\\n\\t\\t\\t\\t\\tdecryptedPassword: password\\r\\n\\t\\t\\t\\t}),\\r\\n\\t\\t\\t\\theaders: {\\r\\n\\t\\t\\t\\t\\tAccept: 'application/json',\\r\\n\\t\\t\\t\\t\\t'Content-Type': 'application/json'\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\tmethod: 'POST'\\r\\n\\t\\t\\t})\\r\\n\\t\\t\\t\\t.then((response) => response.json())\\r\\n\\t\\t\\t\\t.then((value) =>\\r\\n\\t\\t\\t\\t\\tupdateDoc(doc(getFirestore(getFirebaseApp()), 'Users', $user?.id), {\\r\\n\\t\\t\\t\\t\\t\\tpasswords: arrayUnion({\\r\\n\\t\\t\\t\\t\\t\\t\\ttimestamp: new Date(),\\r\\n\\t\\t\\t\\t\\t\\t\\ttitle,\\r\\n\\t\\t\\t\\t\\t\\t\\tpassword: value.encryptedPassword\\r\\n\\t\\t\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\t\\t}).then(() => {\\r\\n\\t\\t\\t\\t\\t\\tloading = false;\\r\\n\\t\\t\\t\\t\\t\\ttitle = '';\\r\\n\\t\\t\\t\\t\\t\\tpassword = '';\\r\\n\\t\\t\\t\\t\\t\\tisInputFormExpanded = false;\\r\\n\\t\\t\\t\\t\\t\\tshowPasswordAddedSnackbar = true;\\r\\n\\t\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\t);\\r\\n\\t\\t}\\r\\n\\t};\\r\\n<\/script>\\r\\n\\r\\n<form\\r\\n\\tclass=\\"inputForm\\"\\r\\n\\tclass:inputFormExpanded={isInputFormExpanded}\\r\\n\\tin:fade\\r\\n\\ton:submit|preventDefault={addPassword}\\r\\n>\\r\\n\\t<Snackbar\\r\\n\\t\\tbackgroundColor=\\"#cf6679\\"\\r\\n\\t\\tborderColor=\\"tomato\\"\\r\\n\\t\\ticonColor=\\"black\\"\\r\\n\\t\\ttext=\\"Title must be at least 2 characters long.\\"\\r\\n\\t\\tshowSnackbar={showTitleError}\\r\\n\\t\\thideSnackbar={hideTitleErrorSnackbar}\\r\\n\\t/>\\r\\n\\t<Snackbar\\r\\n\\t\\tbackgroundColor=\\"#cf6679\\"\\r\\n\\t\\tborderColor=\\"tomato\\"\\r\\n\\t\\ticonColor=\\"black\\"\\r\\n\\t\\ttext=\\"Password cannot be less than 8 letters.\\"\\r\\n\\t\\tshowSnackbar={showPasswordError}\\r\\n\\t\\thideSnackbar={hidePasswordErrorSnackbar}\\r\\n\\t/>\\r\\n\\t<Snackbar\\r\\n\\t\\ttext=\\"Password added successfully!\\"\\r\\n\\t\\tshowSnackbar={showPasswordAddedSnackbar}\\r\\n\\t\\thideSnackbar={hidePasswordAddedSnackbar}\\r\\n\\t/>\\r\\n\\t<div class=\\"titleSection\\" on:click={toggleIsInputFormExpanded}>\\r\\n\\t\\t<p class=\\"title\\" class:titleExpanded={isInputFormExpanded}>Add a new Password</p>\\r\\n\\t\\t<span bind:this={titleIcon} class=\\"material-icons-outlined title-icons\\">\\r\\n\\t\\t\\t{isInputFormExpanded ? 'expand_less' : 'add'}\\r\\n\\t\\t</span>\\r\\n\\t</div>\\r\\n\\t<FormField\\r\\n\\t\\ttype=\\"text\\"\\r\\n\\t\\tplaceholder=\\"Title\\"\\r\\n\\t\\tid={'title-input'}\\r\\n\\t\\tvalue={title}\\r\\n\\t\\ton:change={(e) => (title = e.target.value)}\\r\\n\\t>\\r\\n\\t\\t<span class=\\"material-icons-round icon\\" slot=\\"icon\\"> alternate_email </span>\\r\\n\\t</FormField>\\r\\n\\t<div class=\\"gap\\" />\\r\\n\\t<FormField\\r\\n\\t\\ttype=\\"password\\"\\r\\n\\t\\tplaceholder=\\"Password\\"\\r\\n\\t\\tid={'password-input'}\\r\\n\\t\\tvalue={password}\\r\\n\\t\\ton:change={(e) => (password = e.target.value)}\\r\\n\\t/>\\r\\n\\t<div class=\\"gap\\" />\\r\\n\\t{#if loading}\\r\\n\\t\\t<ActivityIndicator />\\r\\n\\t{:else}\\r\\n\\t\\t<SubmitButton title=\\" Add \\" />\\r\\n\\t{/if}\\r\\n</form>\\r\\n\\r\\n<style>\\r\\n\\t.inputForm {\\r\\n\\t\\tborder-radius: 11px;\\r\\n\\t\\tpadding: 21px;\\r\\n\\t\\tborder: 1px solid #49375e;\\r\\n\\t\\tbackground: #1f1b24;\\r\\n\\t\\ttransition: all 444ms ease-in-out;\\r\\n\\t\\tposition: relative;\\r\\n\\t\\tmax-height: 25px;\\r\\n\\t\\toverflow: hidden;\\r\\n\\t}\\r\\n\\t.inputFormExpanded {\\r\\n\\t\\tmax-height: 251px;\\r\\n\\t}\\r\\n\\t.titleSection {\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tjustify-content: space-between;\\r\\n\\t\\tmargin-bottom: 24px;\\r\\n\\t\\tcursor: pointer;\\r\\n\\t}\\r\\n\\t.title {\\r\\n\\t\\tcolor: #e3e3e3;\\r\\n\\t\\tmargin: 0;\\r\\n\\t\\tpadding: 0;\\r\\n\\t\\tmargin-left: 4px;\\r\\n\\t\\tfont-size: 16px;\\r\\n\\t\\tfont-weight: 600;\\r\\n\\t\\tfont-family: 'Poppins', sans-serif;\\r\\n\\t\\tletter-spacing: 1px;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n\\t.title-icons {\\r\\n\\t\\tcolor: white;\\r\\n\\t\\tuser-select: none;\\r\\n\\t\\ttransition: all 444ms ease-in-out;\\r\\n\\t}\\r\\n\\t.gap {\\r\\n\\t\\theight: 11px;\\r\\n\\t}\\r\\n\\t.icon {\\r\\n\\t\\tfont-size: 18px;\\r\\n\\t\\tcolor: white;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAiIC,UAAU,eAAC,CAAC,AACX,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,UAAU,CAAE,OAAO,CACnB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CACjC,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,IAAI,CAChB,QAAQ,CAAE,MAAM,AACjB,CAAC,AACD,kBAAkB,eAAC,CAAC,AACnB,UAAU,CAAE,KAAK,AAClB,CAAC,AACD,aAAa,eAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,aAAa,CAC9B,aAAa,CAAE,IAAI,CACnB,MAAM,CAAE,OAAO,AAChB,CAAC,AACD,MAAM,eAAC,CAAC,AACP,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,YAAY,eAAC,CAAC,AACb,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,AAClC,CAAC,AACD,IAAI,eAAC,CAAC,AACL,MAAM,CAAE,IAAI,AACb,CAAC,AACD,KAAK,eAAC,CAAC,AACN,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,IAAI,AAClB,CAAC"}`
};
var InputForm = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_user;
  $$unsubscribe_user = subscribe(user, (value) => value);
  let title = "";
  let password = "";
  let titleIcon;
  let showTitleError = false;
  let showPasswordError = false;
  let showPasswordAddedSnackbar = false;
  const hideTitleErrorSnackbar = () => showTitleError = false;
  const hidePasswordErrorSnackbar = () => showPasswordError = false;
  const hidePasswordAddedSnackbar = () => showPasswordAddedSnackbar = false;
  $$result.css.add(css$4);
  $$unsubscribe_user();
  return `<form class="${["inputForm svelte-1ok1592", ""].join(" ").trim()}">${validate_component(Snackbar, "Snackbar").$$render($$result, {
    backgroundColor: "#cf6679",
    borderColor: "tomato",
    iconColor: "black",
    text: "Title must be at least 2 characters long.",
    showSnackbar: showTitleError,
    hideSnackbar: hideTitleErrorSnackbar
  }, {}, {})}
	${validate_component(Snackbar, "Snackbar").$$render($$result, {
    backgroundColor: "#cf6679",
    borderColor: "tomato",
    iconColor: "black",
    text: "Password cannot be less than 8 letters.",
    showSnackbar: showPasswordError,
    hideSnackbar: hidePasswordErrorSnackbar
  }, {}, {})}
	${validate_component(Snackbar, "Snackbar").$$render($$result, {
    text: "Password added successfully!",
    showSnackbar: showPasswordAddedSnackbar,
    hideSnackbar: hidePasswordAddedSnackbar
  }, {}, {})}
	<div class="${"titleSection svelte-1ok1592"}"><p class="${["title svelte-1ok1592", ""].join(" ").trim()}">Add a new Password</p>
		<span class="${"material-icons-outlined title-icons svelte-1ok1592"}"${add_attribute("this", titleIcon, 0)}>${escape2("add")}</span></div>
	${validate_component(FormField, "FormField").$$render($$result, {
    type: "text",
    placeholder: "Title",
    id: "title-input",
    value: title
  }, {}, {
    icon: () => `<span class="${"material-icons-round icon svelte-1ok1592"}" slot="${"icon"}">alternate_email </span>`
  })}
	<div class="${"gap svelte-1ok1592"}"></div>
	${validate_component(FormField, "FormField").$$render($$result, {
    type: "password",
    placeholder: "Password",
    id: "password-input",
    value: password
  }, {}, {})}
	<div class="${"gap svelte-1ok1592"}"></div>
	${`${validate_component(SubmitButton, "SubmitButton").$$render($$result, { title: " Add " }, {}, {})}`}
</form>`;
});
var index_svelte_svelte_type_style_lang = "main.svelte-15zvlpw{max-width:750px;margin-left:auto;margin-right:auto;padding:11px}.passwords.svelte-15zvlpw{margin-top:24px}";
var css$3 = {
  code: "main.svelte-15zvlpw{max-width:750px;margin-left:auto;margin-right:auto;padding:11px}.passwords.svelte-15zvlpw{margin-top:24px}",
  map: `{"version":3,"file":"index.svelte","sources":["index.svelte"],"sourcesContent":["<script>\\r\\n\\timport PasswordCard from '../../components/passwordCard.svelte';\\r\\n\\timport InputForm from '../../components/inputForm.svelte';\\r\\n\\timport { user } from '../../../services/stores';\\r\\n\\timport { flip } from 'svelte/animate';\\r\\n\\timport { blur, fly, fade } from 'svelte/transition';\\r\\n\\timport { backInOut } from 'svelte/easing';\\r\\n\\r\\n\\t$: passwords = $user?.passwords.sort((a, b) => b.timestamp - a.timestamp);\\r\\n<\/script>\\r\\n\\r\\n<main\\r\\n\\tin:fly|local={{ x: -500, duration: 444, delay: 444, opacity: 0, easing: backInOut }}\\r\\n\\tout:fly|local={{ x: -500, opacity: 0, easing: backInOut }}\\r\\n>\\r\\n\\t<InputForm />\\r\\n\\t<div class=\\"passwords\\">\\r\\n\\t\\t{#each passwords as password (password.timestamp)}\\r\\n\\t\\t\\t<div animate:flip in:fade|local out:blur|local>\\r\\n\\t\\t\\t\\t<PasswordCard title={password.title} password={password.password} />\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t{/each}\\r\\n\\t</div>\\r\\n</main>\\r\\n\\r\\n<style>\\r\\n\\tmain {\\r\\n\\t\\tmax-width: 750px;\\r\\n\\t\\tmargin-left: auto;\\r\\n\\t\\tmargin-right: auto;\\r\\n\\t\\tpadding: 11px;\\r\\n\\t}\\r\\n\\t.passwords {\\r\\n\\t\\tmargin-top: 24px;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AA0BC,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,OAAO,CAAE,IAAI,AACd,CAAC,AACD,UAAU,eAAC,CAAC,AACX,UAAU,CAAE,IAAI,AACjB,CAAC"}`
};
var Dashboard = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let passwords;
  let $user, $$unsubscribe_user;
  $$unsubscribe_user = subscribe(user, (value) => $user = value);
  $$result.css.add(css$3);
  passwords = $user == null ? void 0 : $user.passwords.sort((a, b) => b.timestamp - a.timestamp);
  $$unsubscribe_user();
  return `<main class="${"svelte-15zvlpw"}">${validate_component(InputForm, "InputForm").$$render($$result, {}, {}, {})}
	<div class="${"passwords svelte-15zvlpw"}">${each(passwords, (password) => `<div>${validate_component(PasswordCard, "PasswordCard").$$render($$result, {
    title: password.title,
    password: password.password
  }, {}, {})}
			</div>`)}</div>
</main>`;
});
var index = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Dashboard
});
var deleteButton_svelte_svelte_type_style_lang = ".deleteButton.svelte-68wywt.svelte-68wywt{height:40px;width:40px;outline:none;border:2px solid #cf6679;border-radius:21px;background:#cf6679;position:relative;cursor:pointer;transition:all 444ms;overflow:hidden;border:1px solid #be5568}.icon.svelte-68wywt.svelte-68wywt{font-size:18px;position:absolute;top:calc(50% - 9px);left:9px;transition:all 444ms;z-index:1;user-select:none;background:#cf6679}.buttonText.svelte-68wywt.svelte-68wywt{font-size:14px;transition:all 444ms;padding-left:7px;padding-right:7px;position:absolute;top:calc(50% - 10px);left:-100%;opacity:0;background:#cf6679;padding-left:4px;padding-right:4px;z-index:0;font-family:'Poppins', sans-serif;user-select:none}.deleteButton.svelte-68wywt.svelte-68wywt:hover{width:111px}.deleteButton.svelte-68wywt:hover span.buttonText.svelte-68wywt{left:calc(50% - 11px);opacity:1}.deleteButton.svelte-68wywt:hover .icon.svelte-68wywt{left:10px}@media only screen and (max-width: 1200px){.deleteButton.svelte-68wywt.svelte-68wywt{width:111px}.buttonText.svelte-68wywt.svelte-68wywt{left:calc(50% - 11px);opacity:1}.icon.svelte-68wywt.svelte-68wywt{left:10px}}";
var css$2 = {
  code: ".deleteButton.svelte-68wywt.svelte-68wywt{height:40px;width:40px;outline:none;border:2px solid #cf6679;border-radius:21px;background:#cf6679;position:relative;cursor:pointer;transition:all 444ms;overflow:hidden;border:1px solid #be5568}.icon.svelte-68wywt.svelte-68wywt{font-size:18px;position:absolute;top:calc(50% - 9px);left:9px;transition:all 444ms;z-index:1;user-select:none;background:#cf6679}.buttonText.svelte-68wywt.svelte-68wywt{font-size:14px;transition:all 444ms;padding-left:7px;padding-right:7px;position:absolute;top:calc(50% - 10px);left:-100%;opacity:0;background:#cf6679;padding-left:4px;padding-right:4px;z-index:0;font-family:'Poppins', sans-serif;user-select:none}.deleteButton.svelte-68wywt.svelte-68wywt:hover{width:111px}.deleteButton.svelte-68wywt:hover span.buttonText.svelte-68wywt{left:calc(50% - 11px);opacity:1}.deleteButton.svelte-68wywt:hover .icon.svelte-68wywt{left:10px}@media only screen and (max-width: 1200px){.deleteButton.svelte-68wywt.svelte-68wywt{width:111px}.buttonText.svelte-68wywt.svelte-68wywt{left:calc(50% - 11px);opacity:1}.icon.svelte-68wywt.svelte-68wywt{left:10px}}",
  map: `{"version":3,"file":"deleteButton.svelte","sources":["deleteButton.svelte"],"sourcesContent":["<script>\\r\\n<\/script>\\r\\n\\r\\n<button class=\\"deleteButton\\" on:click type=\\"button\\">\\r\\n\\t<span class=\\"material-icons-outlined icon\\"> delete </span>\\r\\n\\t<span class=\\"buttonText\\">Delete</span>\\r\\n</button>\\r\\n\\r\\n<style>\\r\\n\\t.deleteButton {\\r\\n\\t\\theight: 40px;\\r\\n\\t\\twidth: 40px;\\r\\n\\t\\toutline: none;\\r\\n\\t\\tborder: 2px solid #cf6679;\\r\\n\\t\\tborder-radius: 21px;\\r\\n\\t\\tbackground: #cf6679;\\r\\n\\t\\tposition: relative;\\r\\n\\t\\tcursor: pointer;\\r\\n\\t\\ttransition: all 444ms;\\r\\n\\t\\toverflow: hidden;\\r\\n\\t\\tborder: 1px solid #be5568;\\r\\n\\t}\\r\\n\\t.icon {\\r\\n\\t\\tfont-size: 18px;\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttop: calc(50% - 9px);\\r\\n\\t\\tleft: 9px;\\r\\n\\t\\ttransition: all 444ms;\\r\\n\\t\\tz-index: 1;\\r\\n\\t\\tuser-select: none;\\r\\n\\t\\tbackground: #cf6679;\\r\\n\\t}\\r\\n\\t.buttonText {\\r\\n\\t\\tfont-size: 14px;\\r\\n\\t\\ttransition: all 444ms;\\r\\n\\t\\tpadding-left: 7px;\\r\\n\\t\\tpadding-right: 7px;\\r\\n\\t\\tposition: absolute;\\r\\n\\t\\ttop: calc(50% - 10px);\\r\\n\\t\\tleft: -100%;\\r\\n\\t\\topacity: 0;\\r\\n\\t\\tbackground: #cf6679;\\r\\n\\t\\tpadding-left: 4px;\\r\\n\\t\\tpadding-right: 4px;\\r\\n\\t\\tz-index: 0;\\r\\n\\t\\tfont-family: 'Poppins', sans-serif;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n\\t.deleteButton:hover {\\r\\n\\t\\twidth: 111px;\\r\\n\\t}\\r\\n\\t.deleteButton:hover span.buttonText {\\r\\n\\t\\tleft: calc(50% - 11px);\\r\\n\\t\\topacity: 1;\\r\\n\\t}\\r\\n\\t.deleteButton:hover .icon {\\r\\n\\t\\tleft: 10px;\\r\\n\\t}\\r\\n\\t@media only screen and (max-width: 1200px) {\\r\\n\\t\\t.deleteButton {\\r\\n\\t\\t\\twidth: 111px;\\r\\n\\t\\t}\\r\\n\\t\\t.buttonText {\\r\\n\\t\\t\\tleft: calc(50% - 11px);\\r\\n\\t\\t\\topacity: 1;\\r\\n\\t\\t}\\r\\n\\t\\t.icon {\\r\\n\\t\\t\\tleft: 10px;\\r\\n\\t\\t}\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AASC,aAAa,4BAAC,CAAC,AACd,MAAM,CAAE,IAAI,CACZ,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,aAAa,CAAE,IAAI,CACnB,UAAU,CAAE,OAAO,CACnB,QAAQ,CAAE,QAAQ,CAClB,MAAM,CAAE,OAAO,CACf,UAAU,CAAE,GAAG,CAAC,KAAK,CACrB,QAAQ,CAAE,MAAM,CAChB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,AAC1B,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,SAAS,CAAE,IAAI,CACf,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CACpB,IAAI,CAAE,GAAG,CACT,UAAU,CAAE,GAAG,CAAC,KAAK,CACrB,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,OAAO,AACpB,CAAC,AACD,WAAW,4BAAC,CAAC,AACZ,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,GAAG,CAAC,KAAK,CACrB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,QAAQ,CAAE,QAAQ,CAClB,GAAG,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CACrB,IAAI,CAAE,KAAK,CACX,OAAO,CAAE,CAAC,CACV,UAAU,CAAE,OAAO,CACnB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,yCAAa,MAAM,AAAC,CAAC,AACpB,KAAK,CAAE,KAAK,AACb,CAAC,AACD,2BAAa,MAAM,CAAC,IAAI,WAAW,cAAC,CAAC,AACpC,IAAI,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CACtB,OAAO,CAAE,CAAC,AACX,CAAC,AACD,2BAAa,MAAM,CAAC,KAAK,cAAC,CAAC,AAC1B,IAAI,CAAE,IAAI,AACX,CAAC,AACD,OAAO,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,YAAY,MAAM,CAAC,AAAC,CAAC,AAC3C,aAAa,4BAAC,CAAC,AACd,KAAK,CAAE,KAAK,AACb,CAAC,AACD,WAAW,4BAAC,CAAC,AACZ,IAAI,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,CACtB,OAAO,CAAE,CAAC,AACX,CAAC,AACD,KAAK,4BAAC,CAAC,AACN,IAAI,CAAE,IAAI,AACX,CAAC,AACF,CAAC"}`
};
var DeleteButton = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  $$result.css.add(css$2);
  return `<button class="${"deleteButton svelte-68wywt"}" type="${"button"}"><span class="${"material-icons-outlined icon svelte-68wywt"}">delete </span>
	<span class="${"buttonText svelte-68wywt"}">Delete</span>
</button>`;
});
var editForm_svelte_svelte_type_style_lang = ".inputForm.svelte-4r99a3{border-radius:11px;padding:21px;border:1px solid #49375e;background:#1f1b24;transition:all 444ms ease-in-out;position:relative;max-height:21px;overflow:hidden;margin-bottom:7px}.inputFormExpanded.svelte-4r99a3{max-height:251px}.titleSection.svelte-4r99a3{display:flex;align-items:center;justify-content:space-between;margin-bottom:24px;cursor:pointer}.title.svelte-4r99a3{color:#e3e3e3;margin:0;padding:0;margin-left:4px;font-size:16px;font-weight:600;font-family:'Poppins', sans-serif;letter-spacing:1px;user-select:none}.title-icons.svelte-4r99a3{color:white;user-select:none;transition:all 444ms ease-in-out}.gap.svelte-4r99a3{height:11px}.bottom.svelte-4r99a3{display:flex;align-items:center;justify-content:space-between}";
var css$1 = {
  code: ".inputForm.svelte-4r99a3{border-radius:11px;padding:21px;border:1px solid #49375e;background:#1f1b24;transition:all 444ms ease-in-out;position:relative;max-height:21px;overflow:hidden;margin-bottom:7px}.inputFormExpanded.svelte-4r99a3{max-height:251px}.titleSection.svelte-4r99a3{display:flex;align-items:center;justify-content:space-between;margin-bottom:24px;cursor:pointer}.title.svelte-4r99a3{color:#e3e3e3;margin:0;padding:0;margin-left:4px;font-size:16px;font-weight:600;font-family:'Poppins', sans-serif;letter-spacing:1px;user-select:none}.title-icons.svelte-4r99a3{color:white;user-select:none;transition:all 444ms ease-in-out}.gap.svelte-4r99a3{height:11px}.bottom.svelte-4r99a3{display:flex;align-items:center;justify-content:space-between}",
  map: `{"version":3,"file":"editForm.svelte","sources":["editForm.svelte"],"sourcesContent":["<script>\\r\\n\\timport FormField from './formField.svelte';\\r\\n\\timport SubmitButton from './submitButton.svelte';\\r\\n\\timport { fade } from 'svelte/transition';\\r\\n\\timport DeleteButton from './deleteButton.svelte';\\r\\n\\timport { onMount } from 'svelte';\\r\\n\\timport { user } from '../../services/stores';\\r\\n\\timport Snackbar from './commons/snackbar.svelte';\\r\\n\\timport {\\r\\n\\t\\tarrayRemove,\\r\\n\\t\\tarrayUnion,\\r\\n\\t\\tdoc,\\r\\n\\t\\tgetFirestore,\\r\\n\\t\\trunTransaction,\\r\\n\\t\\tupdateDoc\\r\\n\\t} from 'firebase/firestore';\\r\\n\\timport { getFirebaseApp } from '../../services/firebase';\\r\\n\\timport ActivityIndicator from './commons/activityIndicator.svelte';\\r\\n\\r\\n\\texport let title;\\r\\n\\texport let timestamp;\\r\\n\\texport let oldPassword;\\r\\n\\r\\n\\tlet isInputFormExpanded = false;\\r\\n\\tlet titleIcon;\\r\\n\\tlet password = '';\\r\\n\\tlet loading = false;\\r\\n\\tlet showTitleError = false;\\r\\n\\tlet showPasswordError = false;\\r\\n\\tlet showPasswordUpdatedSnackbar = false;\\r\\n\\tlet showPasswordDeletedSnackbar = false;\\r\\n\\r\\n\\tconst hideTitleErrorSnackbar = () => (showTitleError = false);\\r\\n\\tconst hidePasswordErrorSnackbar = () => (showPasswordError = false);\\r\\n\\tconst hidePasswordUpdatedSnackbar = () => (showPasswordUpdatedSnackbar = false);\\r\\n\\tconst hidePasswordDeletedSnackbar = () => (showPasswordDeletedSnackbar = false);\\r\\n\\r\\n\\tonMount(() => {\\r\\n\\t\\tfetch('/api/password/depass', {\\r\\n\\t\\t\\tbody: JSON.stringify({\\r\\n\\t\\t\\t\\tencryptedPassword: oldPassword\\r\\n\\t\\t\\t}),\\r\\n\\t\\t\\theaders: {\\r\\n\\t\\t\\t\\tAccept: 'application/json',\\r\\n\\t\\t\\t\\t'Content-Type': 'application/json'\\r\\n\\t\\t\\t},\\r\\n\\t\\t\\tmethod: 'POST'\\r\\n\\t\\t})\\r\\n\\t\\t\\t.then((response) => response.json())\\r\\n\\t\\t\\t.then((value) => (password = value.decryptedPassword));\\r\\n\\t});\\r\\n\\r\\n\\tconst toggleIsInputFormExpanded = () => {\\r\\n\\t\\tisInputFormExpanded = !isInputFormExpanded;\\r\\n\\t\\tif (isInputFormExpanded) {\\r\\n\\t\\t\\ttitleIcon.style.transform = 'rotate(360deg)';\\r\\n\\t\\t} else {\\r\\n\\t\\t\\ttitleIcon.style.transform = 'rotate(0deg)';\\r\\n\\t\\t}\\r\\n\\t};\\r\\n\\r\\n\\tconst deletePassword = () => {\\r\\n\\t\\tupdateDoc(doc(getFirestore(getFirebaseApp()), 'Users', $user?.id), {\\r\\n\\t\\t\\tpasswords: arrayRemove({\\r\\n\\t\\t\\t\\ttimestamp: timestamp,\\r\\n\\t\\t\\t\\ttitle,\\r\\n\\t\\t\\t\\tpassword: oldPassword\\r\\n\\t\\t\\t})\\r\\n\\t\\t}).then(() => {\\r\\n\\t\\t\\tshowPasswordDeletedSnackbar = true;\\r\\n\\t\\t});\\r\\n\\t};\\r\\n\\r\\n\\tconst updatePassword = () => {\\r\\n\\t\\tif (title.length < 2) {\\r\\n\\t\\t\\tshowTitleError = true;\\r\\n\\t\\t} else if (password.length < 8) {\\r\\n\\t\\t\\tshowPasswordError = true;\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tloading = true;\\r\\n\\t\\t\\tfetch('/api/password/encpass', {\\r\\n\\t\\t\\t\\tbody: JSON.stringify({\\r\\n\\t\\t\\t\\t\\tdecryptedPassword: password\\r\\n\\t\\t\\t\\t}),\\r\\n\\t\\t\\t\\theaders: {\\r\\n\\t\\t\\t\\t\\tAccept: 'application/json',\\r\\n\\t\\t\\t\\t\\t'Content-Type': 'application/json'\\r\\n\\t\\t\\t\\t},\\r\\n\\t\\t\\t\\tmethod: 'POST'\\r\\n\\t\\t\\t})\\r\\n\\t\\t\\t\\t.then((response) => response.json())\\r\\n\\t\\t\\t\\t.then((value) => {\\r\\n\\t\\t\\t\\t\\tconst db = getFirestore(getFirebaseApp());\\r\\n\\t\\t\\t\\t\\trunTransaction(db, async (transaction) => {\\r\\n\\t\\t\\t\\t\\t\\ttransaction\\r\\n\\t\\t\\t\\t\\t\\t\\t.update(doc(db, 'Users', $user?.id), {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpasswords: arrayRemove({\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttimestamp: timestamp,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttitle,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpassword: oldPassword\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\t\\t\\t\\t.update(doc(db, 'Users', $user?.id), {\\r\\n\\t\\t\\t\\t\\t\\t\\t\\tpasswords: arrayUnion({\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttimestamp: new Date(),\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\ttitle,\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tpassword: value.encryptedPassword\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t})\\r\\n\\t\\t\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t\\t}).then(() => {\\r\\n\\t\\t\\t\\t\\t\\tloading = false;\\r\\n\\t\\t\\t\\t\\t\\tisInputFormExpanded = false;\\r\\n\\t\\t\\t\\t\\t\\tshowPasswordUpdatedSnackbar = true;\\r\\n\\t\\t\\t\\t\\t});\\r\\n\\t\\t\\t\\t});\\r\\n\\t\\t}\\r\\n\\t};\\r\\n<\/script>\\r\\n\\r\\n<form\\r\\n\\tclass=\\"inputForm\\"\\r\\n\\tclass:inputFormExpanded={isInputFormExpanded}\\r\\n\\tin:fade\\r\\n\\ton:submit|preventDefault={updatePassword}\\r\\n>\\r\\n\\t<Snackbar\\r\\n\\t\\tbackgroundColor=\\"#cf6679\\"\\r\\n\\t\\tborderColor=\\"tomato\\"\\r\\n\\t\\ticonColor=\\"black\\"\\r\\n\\t\\ttext=\\"Title must be at least 2 characters long.\\"\\r\\n\\t\\tshowSnackbar={showTitleError}\\r\\n\\t\\thideSnackbar={hideTitleErrorSnackbar}\\r\\n\\t/>\\r\\n\\t<Snackbar\\r\\n\\t\\tbackgroundColor=\\"#cf6679\\"\\r\\n\\t\\tborderColor=\\"tomato\\"\\r\\n\\t\\ticonColor=\\"black\\"\\r\\n\\t\\ttext=\\"Password cannot be less than 8 letters.\\"\\r\\n\\t\\tshowSnackbar={showPasswordError}\\r\\n\\t\\thideSnackbar={hidePasswordErrorSnackbar}\\r\\n\\t/>\\r\\n\\t<Snackbar\\r\\n\\t\\tbackgroundColor=\\"#cf6679\\"\\r\\n\\t\\tborderColor=\\"tomato\\"\\r\\n\\t\\ticonColor=\\"black\\"\\r\\n\\t\\ttext=\\"Password deleted.\\"\\r\\n\\t\\tshowSnackbar={showPasswordDeletedSnackbar}\\r\\n\\t\\thideSnackbar={hidePasswordDeletedSnackbar}\\r\\n\\t/>\\r\\n\\t<Snackbar\\r\\n\\t\\ttext=\\"Password added successfully!\\"\\r\\n\\t\\tshowSnackbar={showPasswordUpdatedSnackbar}\\r\\n\\t\\thideSnackbar={hidePasswordUpdatedSnackbar}\\r\\n\\t/>\\r\\n\\t<div class=\\"titleSection\\" on:click={toggleIsInputFormExpanded}>\\r\\n\\t\\t<p class=\\"title\\" class:titleExpanded={isInputFormExpanded}>{title}</p>\\r\\n\\t\\t<span bind:this={titleIcon} class=\\"material-icons-outlined title-icons\\">\\r\\n\\t\\t\\t{isInputFormExpanded ? 'expand_less' : 'add'}\\r\\n\\t\\t</span>\\r\\n\\t</div>\\r\\n\\t<FormField\\r\\n\\t\\ttype=\\"password\\"\\r\\n\\t\\tplaceholder=\\"Password\\"\\r\\n\\t\\tid={'password-input'}\\r\\n\\t\\tvalue={password}\\r\\n\\t\\ton:change={(e) => (password = e.target.value)}\\r\\n\\t/>\\r\\n\\t<div class=\\"gap\\" />\\r\\n\\t<div class=\\"bottom\\">\\r\\n\\t\\t{#if loading}\\r\\n\\t\\t\\t<ActivityIndicator />\\r\\n\\t\\t{:else}\\r\\n\\t\\t\\t<SubmitButton title=\\"Update\\" />\\r\\n\\t\\t\\t<DeleteButton on:click={deletePassword} />\\r\\n\\t\\t{/if}\\r\\n\\t</div>\\r\\n</form>\\r\\n\\r\\n<style>\\r\\n\\t.inputForm {\\r\\n\\t\\tborder-radius: 11px;\\r\\n\\t\\tpadding: 21px;\\r\\n\\t\\tborder: 1px solid #49375e;\\r\\n\\t\\tbackground: #1f1b24;\\r\\n\\t\\ttransition: all 444ms ease-in-out;\\r\\n\\t\\tposition: relative;\\r\\n\\t\\tmax-height: 21px;\\r\\n\\t\\toverflow: hidden;\\r\\n\\t\\tmargin-bottom: 7px;\\r\\n\\t}\\r\\n\\t.inputFormExpanded {\\r\\n\\t\\tmax-height: 251px;\\r\\n\\t}\\r\\n\\t.titleSection {\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tjustify-content: space-between;\\r\\n\\t\\tmargin-bottom: 24px;\\r\\n\\t\\tcursor: pointer;\\r\\n\\t}\\r\\n\\t.title {\\r\\n\\t\\tcolor: #e3e3e3;\\r\\n\\t\\tmargin: 0;\\r\\n\\t\\tpadding: 0;\\r\\n\\t\\tmargin-left: 4px;\\r\\n\\t\\tfont-size: 16px;\\r\\n\\t\\tfont-weight: 600;\\r\\n\\t\\tfont-family: 'Poppins', sans-serif;\\r\\n\\t\\tletter-spacing: 1px;\\r\\n\\t\\tuser-select: none;\\r\\n\\t}\\r\\n\\t.title-icons {\\r\\n\\t\\tcolor: white;\\r\\n\\t\\tuser-select: none;\\r\\n\\t\\ttransition: all 444ms ease-in-out;\\r\\n\\t}\\r\\n\\t.gap {\\r\\n\\t\\theight: 11px;\\r\\n\\t}\\r\\n\\t.bottom {\\r\\n\\t\\tdisplay: flex;\\r\\n\\t\\talign-items: center;\\r\\n\\t\\tjustify-content: space-between;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AAmLC,UAAU,cAAC,CAAC,AACX,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CACb,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,OAAO,CACzB,UAAU,CAAE,OAAO,CACnB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,CACjC,QAAQ,CAAE,QAAQ,CAClB,UAAU,CAAE,IAAI,CAChB,QAAQ,CAAE,MAAM,CAChB,aAAa,CAAE,GAAG,AACnB,CAAC,AACD,kBAAkB,cAAC,CAAC,AACnB,UAAU,CAAE,KAAK,AAClB,CAAC,AACD,aAAa,cAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,aAAa,CAC9B,aAAa,CAAE,IAAI,CACnB,MAAM,CAAE,OAAO,AAChB,CAAC,AACD,MAAM,cAAC,CAAC,AACP,KAAK,CAAE,OAAO,CACd,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,CAAC,CACV,WAAW,CAAE,GAAG,CAChB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,CAChB,WAAW,CAAE,SAAS,CAAC,CAAC,UAAU,CAClC,cAAc,CAAE,GAAG,CACnB,WAAW,CAAE,IAAI,AAClB,CAAC,AACD,YAAY,cAAC,CAAC,AACb,KAAK,CAAE,KAAK,CACZ,WAAW,CAAE,IAAI,CACjB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,AAClC,CAAC,AACD,IAAI,cAAC,CAAC,AACL,MAAM,CAAE,IAAI,AACb,CAAC,AACD,OAAO,cAAC,CAAC,AACR,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,aAAa,AAC/B,CAAC"}`
};
var EditForm = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_user;
  $$unsubscribe_user = subscribe(user, (value) => value);
  let { title } = $$props;
  let { timestamp } = $$props;
  let { oldPassword } = $$props;
  let titleIcon;
  let password = "";
  let showTitleError = false;
  let showPasswordError = false;
  let showPasswordUpdatedSnackbar = false;
  let showPasswordDeletedSnackbar = false;
  const hideTitleErrorSnackbar = () => showTitleError = false;
  const hidePasswordErrorSnackbar = () => showPasswordError = false;
  const hidePasswordUpdatedSnackbar = () => showPasswordUpdatedSnackbar = false;
  const hidePasswordDeletedSnackbar = () => showPasswordDeletedSnackbar = false;
  if ($$props.title === void 0 && $$bindings.title && title !== void 0)
    $$bindings.title(title);
  if ($$props.timestamp === void 0 && $$bindings.timestamp && timestamp !== void 0)
    $$bindings.timestamp(timestamp);
  if ($$props.oldPassword === void 0 && $$bindings.oldPassword && oldPassword !== void 0)
    $$bindings.oldPassword(oldPassword);
  $$result.css.add(css$1);
  $$unsubscribe_user();
  return `<form class="${["inputForm svelte-4r99a3", ""].join(" ").trim()}">${validate_component(Snackbar, "Snackbar").$$render($$result, {
    backgroundColor: "#cf6679",
    borderColor: "tomato",
    iconColor: "black",
    text: "Title must be at least 2 characters long.",
    showSnackbar: showTitleError,
    hideSnackbar: hideTitleErrorSnackbar
  }, {}, {})}
	${validate_component(Snackbar, "Snackbar").$$render($$result, {
    backgroundColor: "#cf6679",
    borderColor: "tomato",
    iconColor: "black",
    text: "Password cannot be less than 8 letters.",
    showSnackbar: showPasswordError,
    hideSnackbar: hidePasswordErrorSnackbar
  }, {}, {})}
	${validate_component(Snackbar, "Snackbar").$$render($$result, {
    backgroundColor: "#cf6679",
    borderColor: "tomato",
    iconColor: "black",
    text: "Password deleted.",
    showSnackbar: showPasswordDeletedSnackbar,
    hideSnackbar: hidePasswordDeletedSnackbar
  }, {}, {})}
	${validate_component(Snackbar, "Snackbar").$$render($$result, {
    text: "Password added successfully!",
    showSnackbar: showPasswordUpdatedSnackbar,
    hideSnackbar: hidePasswordUpdatedSnackbar
  }, {}, {})}
	<div class="${"titleSection svelte-4r99a3"}"><p class="${["title svelte-4r99a3", ""].join(" ").trim()}">${escape2(title)}</p>
		<span class="${"material-icons-outlined title-icons svelte-4r99a3"}"${add_attribute("this", titleIcon, 0)}>${escape2("add")}</span></div>
	${validate_component(FormField, "FormField").$$render($$result, {
    type: "password",
    placeholder: "Password",
    id: "password-input",
    value: password
  }, {}, {})}
	<div class="${"gap svelte-4r99a3"}"></div>
	<div class="${"bottom svelte-4r99a3"}">${`${validate_component(SubmitButton, "SubmitButton").$$render($$result, { title: "Update" }, {}, {})}
			${validate_component(DeleteButton, "DeleteButton").$$render($$result, {}, {}, {})}`}</div>
</form>`;
});
var manage_svelte_svelte_type_style_lang = "main.svelte-ai80e1{max-width:750px;margin-left:auto;margin-right:auto;padding:11px}";
var css = {
  code: "main.svelte-ai80e1{max-width:750px;margin-left:auto;margin-right:auto;padding:11px}",
  map: `{"version":3,"file":"manage.svelte","sources":["manage.svelte"],"sourcesContent":["<script>\\r\\n\\timport { user } from '../../../services/stores';\\r\\n\\timport EditForm from '../../components/editForm.svelte';\\r\\n\\timport { flip } from 'svelte/animate';\\r\\n\\timport { fade, blur, fly } from 'svelte/transition';\\r\\n\\timport { backInOut } from 'svelte/easing';\\r\\n\\r\\n\\t$: passwords = $user?.passwords.sort((a, b) => b.timestamp - a.timestamp);\\r\\n<\/script>\\r\\n\\r\\n<main\\r\\n\\tin:fly|local={{ x: 500, duration: 444, delay: 444, opacity: 0, easing: backInOut }}\\r\\n\\tout:fly|local={{ x: 500, opacity: 0, easing: backInOut }}\\r\\n>\\r\\n\\t{#each passwords as password (password.timestamp.toDate())}\\r\\n\\t\\t<div animate:flip={{ duration: 200 }} in:fade>\\r\\n\\t\\t\\t<EditForm\\r\\n\\t\\t\\t\\ttimestamp={password.timestamp}\\r\\n\\t\\t\\t\\ttitle={password.title}\\r\\n\\t\\t\\t\\toldPassword={password.password}\\r\\n\\t\\t\\t/>\\r\\n\\t\\t</div>\\r\\n\\t{/each}\\r\\n</main>\\r\\n\\r\\n<style>\\r\\n\\tmain {\\r\\n\\t\\tmax-width: 750px;\\r\\n\\t\\tmargin-left: auto;\\r\\n\\t\\tmargin-right: auto;\\r\\n\\t\\tpadding: 11px;\\r\\n\\t}\\r\\n</style>\\r\\n"],"names":[],"mappings":"AA0BC,IAAI,cAAC,CAAC,AACL,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,IAAI,CACjB,YAAY,CAAE,IAAI,CAClB,OAAO,CAAE,IAAI,AACd,CAAC"}`
};
var Manage = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let passwords;
  let $user, $$unsubscribe_user;
  $$unsubscribe_user = subscribe(user, (value) => $user = value);
  $$result.css.add(css);
  passwords = $user == null ? void 0 : $user.passwords.sort((a, b) => b.timestamp - a.timestamp);
  $$unsubscribe_user();
  return `<main class="${"svelte-ai80e1"}">${each(passwords, (password) => `<div>${validate_component(EditForm, "EditForm").$$render($$result, {
    timestamp: password.timestamp,
    title: password.title,
    oldPassword: password.password
  }, {}, {})}
		</div>`)}
</main>`;
});
var manage = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Manage
});
var Verify = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  return `${validate_component(Loader, "Loader").$$render($$result, { text: "Logging you in!" }, {}, {})}`;
});
var verify = /* @__PURE__ */ Object.freeze({
  __proto__: null,
  [Symbol.toStringTag]: "Module",
  "default": Verify
});

// .svelte-kit/vercel/entry.js
init();
var entry_default = async (req, res) => {
  const { pathname, searchParams } = new URL(req.url || "", "http://localhost");
  let body;
  try {
    body = await getRawBody(req);
  } catch (err) {
    res.statusCode = err.status || 400;
    return res.end(err.reason || "Invalid request body");
  }
  const rendered = await render({
    method: req.method,
    headers: req.headers,
    path: pathname,
    query: searchParams,
    rawBody: body
  });
  if (rendered) {
    const { status, headers, body: body2 } = rendered;
    return res.writeHead(status, headers).end(body2);
  }
  return res.writeHead(404).end();
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {});
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2018 gRPC authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2020 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2020 Google LLC.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/** @preserve
	(c) 2012 by Cédric Mesnil. All rights reserved.

	Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

	    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
	    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

	THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/
/** @preserve
 * Counter block mode compatible with  Dr Brian Gladman fileenc.c
 * derived from CryptoJS.mode.CTR
 * Jan Hruby jhruby.web@gmail.com
 */
